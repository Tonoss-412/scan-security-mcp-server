{
    "tools": [
        {
            "name": "index",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "app.py",
            "decorator": [
                "app.route"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "app.py",
            "decorator": [
                "app.route"
            ]
        },
        {
            "name": "find_spec",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "fullname": {
                        "type": "string"
                    }
                },
                "required": [
                    "fullname"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\__pip-runner__.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_install_requirements",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\build_env.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "record_download_origin",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\cache.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_dictionary",
            "description": "A dictionary representing the loaded configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\configuration.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "key",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\self_outdated_check.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "main_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\cli\\command_context.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "_get_index_urls",
            "description": "Return a list of index urls from user-provided options.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\cli\\index_command.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "option_list_all",
            "description": "Get a list of all options, including those in option groups.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\cli\\parser.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "determine_resolver_variant",
            "description": "Determines which resolver should be used, based on the given options.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\cli\\req_command.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "make_requirement_preparer",
            "description": "\n        Create a RequirementPreparer instance for the given parameters.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\cli\\req_command.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "make_resolver",
            "description": "\n        Create a Resolver instance for the given parameters.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\cli\\req_command.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "trace_basic_info",
            "description": "\n        Trace basic information about the provided objects.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\cli\\req_command.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "open_spinner",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\cli\\spinners.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "hidden_cursor",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\cli\\spinners.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "run",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\commands\\download.py",
            "decorator": [
                "with_cleanup"
            ]
        },
        {
            "name": "run",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\commands\\install.py",
            "decorator": [
                "with_cleanup"
            ]
        },
        {
            "name": "run",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\commands\\wheel.py",
            "decorator": [
                "with_cleanup"
            ]
        },
        {
            "name": "build_tracker_id",
            "description": "A string that uniquely identifies this requirement to the build tracker.\n\n        If None, then this dist has no work to do in the build tracker, and\n        ``.prepare_distribution_metadata()`` will not be called.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\distributions\\base.py",
            "decorator": [
                "abc.abstractproperty"
            ]
        },
        {
            "name": "get_metadata_distribution",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\distributions\\base.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "prepare_distribution_metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\distributions\\base.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "build_tracker_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\distributions\\installed.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "build_tracker_id",
            "description": "Identify this requirement uniquely by its link.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\distributions\\sdist.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "build_tracker_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\distributions\\wheel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\collector.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "wrapper_wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\collector.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "parse_links",
            "description": "\n    Parse a Simple API's Index Content, and yield its anchor elements as Link objects.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\collector.py",
            "decorator": [
                "with_cached_index_content"
            ]
        },
        {
            "name": "create",
            "description": "\n        :param session: The Session to use to make requests.\n        :param suppress_no_index: Whether to ignore the --no-index option\n            when constructing the SearchScope object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\collector.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "find_links",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\collector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "create",
            "description": "Create a CandidateEvaluator object.\n\n        :param target_python: The target Python interpreter to use when\n            checking compatibility. If None (the default), a TargetPython\n            object will be constructed from the running Python.\n        :param specifier: An optional object implementing `filter`\n            (e.g. `packaging.specifiers.SpecifierSet`) to filter applicable\n            versions.\n        :param hashes: An optional collection of allowed hashes.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "create",
            "description": "Create a PackageFinder.\n\n        :param selection_prefs: The candidate selection preferences, as a\n            SelectionPreferences object.\n        :param target_python: The target Python interpreter to use when\n            checking compatibility. If None (the default), a TargetPython\n            object will be constructed from the running Python.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "target_python",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "search_scope",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "search_scope",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "search_scope.setter"
            ]
        },
        {
            "name": "find_links",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "index_urls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "proxy",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "trusted_hosts",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "custom_cert",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client_cert",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "allow_all_prereleases",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prefer_binary",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "find_all_candidates",
            "description": "Find all available InstallationCandidate for project_name\n\n        This checks index_urls and find_links.\n        All versions found are returned as an InstallationCandidate list.\n\n        See LinkEvaluator.evaluate_link() for details on which files\n        are accepted.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "find_best_candidate",
            "description": "Find matches for the given project and specifier.\n\n        :param specifier: An optional object implementing `filter`\n            (e.g. `packaging.specifiers.SpecifierSet`) to filter applicable\n            versions.\n\n        :return: A `BestCandidateResult` instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "link",
            "description": "Returns the underlying link, if there's one.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\sources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "page_candidates",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\sources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name_to_urls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\sources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "link",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\sources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "link",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\sources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "link",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\sources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "link",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\index\\sources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_osx_framework",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\locations\\base.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "_looks_like_red_hat_lib",
            "description": "Red Hat patches platlib in unix_prefix and unix_home, but not purelib.\n\n    This is the only way I can see to tell a Red Hat-patched Python.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\locations\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "_looks_like_debian_scheme",
            "description": "Debian adds two additional schemes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\locations\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "_looks_like_red_hat_scheme",
            "description": "Red Hat patches ``sys.prefix`` and ``sys.exec_prefix``.\n\n    Red Hat's ``00251-change-user-install-location.patch`` changes the install\n    command's ``prefix`` and ``exec_prefix`` to append ``\"/local\"``. This is\n    (fortunately?) done quite unconditionally, so we create a default command\n    object without any configuration to detect this.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\locations\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "_looks_like_slackware_scheme",
            "description": "Slackware patches sysconfig but fails to patch distutils and site.\n\n    Slackware changes sysconfig's user scheme to use ``\"lib64\"`` for the lib\n    path, but does not do the same to the site module.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\locations\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "_looks_like_msys2_mingw_scheme",
            "description": "MSYS2 patches distutils and sysconfig to use a UNIX-like scheme.\n\n    However, MSYS2 incorrectly patches sysconfig ``nt`` scheme. The fix is\n    likely going to be included in their 3.10 release, so we ignore the warning.\n    See msys2/MINGW-packages#9319.\n\n    MSYS2 MINGW's patch uses lowercase ``\"lib\"`` instead of the usual uppercase,\n    and is missing the final ``\"site-packages\"``.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\locations\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "_warn_mismatched",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\locations\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "_log_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\locations\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "value",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "group",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_directory",
            "description": "Load the distribution from a metadata directory.\n\n        :param directory: Path to a metadata directory, e.g. ``.dist-info``.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_metadata_file_contents",
            "description": "Load the distribution from the contents of a METADATA file.\n\n        This is used to implement PEP 658 by generating a \"shallow\" dist object that can\n        be used for resolution without downloading or building the actual dist yet.\n\n        :param metadata_contents: The contents of a METADATA file.\n        :param filename: File name for the dist with this metadata.\n        :param project_name: Name of the project this dist represents.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_wheel",
            "description": "Load the distribution from a given wheel.\n\n        :param wheel: A concrete wheel definition.\n        :param name: File name of the wheel.\n\n        :raises InvalidWheel: Whenever loading of the wheel causes a\n            :py:exc:`zipfile.BadZipFile` exception to be thrown.\n        :raises UnsupportedWheel: If the wheel is a valid zip, but malformed\n            internally.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "location",
            "description": "Where the distribution is loaded from.\n\n        A string value is not necessarily a filesystem path, since distributions\n        can be loaded from other sources, e.g. arbitrary zip archives. ``None``\n        means the distribution is created in-memory.\n\n        Do not canonicalize this value with e.g. ``pathlib.Path.resolve()``. If\n        this is a symbolic link, we want to preserve the relative path between\n        it and files in the distribution.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "editable_project_location",
            "description": "The project location for editable distributions.\n\n        This is the directory where pyproject.toml or setup.py is located.\n        None if the distribution is not installed in editable mode.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installed_location",
            "description": "The distribution's \"installed\" location.\n\n        This should generally be a ``site-packages`` directory. This is\n        usually ``dist.location``, except for legacy develop-installed packages,\n        where ``dist.location`` is the source code location, and this is where\n        the ``.egg-link`` file is.\n\n        The returned location is normalized (in particular, with symlinks removed).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "info_location",
            "description": "Location of the .[egg|dist]-info directory or file.\n\n        Similarly to ``location``, a string value is not necessarily a\n        filesystem path. ``None`` means the distribution is created in-memory.\n\n        For a modern .dist-info installation on disk, this should be something\n        like ``{location}/{raw_name}-{version}.dist-info``.\n\n        Do not canonicalize this value with e.g. ``pathlib.Path.resolve()``. If\n        this is a symbolic link, we want to preserve the relative path between\n        it and other files in the distribution.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installed_by_distutils",
            "description": "Whether this distribution is installed with legacy distutils format.\n\n        A distribution installed with \"raw\" distutils not patched by setuptools\n        uses one single file at ``info_location`` to store metadata. We need to\n        treat this specially on uninstallation.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installed_as_egg",
            "description": "Whether this distribution is installed as an egg.\n\n        This usually indicates the distribution was installed by (older versions\n        of) easy_install.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installed_with_setuptools_egg_info",
            "description": "Whether this distribution is installed with the ``.egg-info`` format.\n\n        This usually indicates the distribution was installed with setuptools\n        with an old pip version or with ``single-version-externally-managed``.\n\n        Note that this ensure the metadata store is a directory. distutils can\n        also installs an ``.egg-info``, but as a file, not a directory. This\n        property is *False* for that case. Also see ``installed_by_distutils``.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installed_with_dist_info",
            "description": "Whether this distribution is installed with the \"modern format\".\n\n        This indicates a \"modern\" installation, e.g. storing metadata in the\n        ``.dist-info`` directory. This applies to installations made by\n        setuptools (but through pip, not directly), or anything using the\n        standardized build backend interface (PEP 517).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "canonical_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "raw_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "setuptools_filename",
            "description": "Convert a project name to its setuptools-compatible filename.\n\n        This is a copy of ``pkg_resources.to_filename()`` for compatibility.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "direct_url",
            "description": "Obtain a DirectUrl from this distribution.\n\n        Returns None if the distribution has no `direct_url.json` metadata,\n        or if `direct_url.json` is invalid.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installer",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "requested",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "editable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "local",
            "description": "If distribution is installed in the current virtual environment.\n\n        Always True if we're not in a virtualenv.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "in_usersite",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "in_site_packages",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "Metadata of distribution parsed from e.g. METADATA or PKG-INFO.\n\n        This should return an empty message if the metadata file is unavailable.\n\n        :raises NoneMetadataError: If the metadata file is available, but does\n            not contain valid metadata.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "functools.cached_property"
            ]
        },
        {
            "name": "metadata_dict",
            "description": "PEP 566 compliant JSON-serializable representation of METADATA or PKG-INFO.\n\n        This should return an empty dict if the metadata file is unavailable.\n\n        :raises NoneMetadataError: If the metadata file is available, but does\n            not contain valid metadata.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata_version",
            "description": "Value of \"Metadata-Version:\" in distribution metadata, if available.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "raw_name",
            "description": "Value of \"Name:\" in distribution metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "requires_python",
            "description": "Value of \"Requires-Python:\" in distribution metadata.\n\n        If the key does not exist or contains an invalid value, an empty\n        SpecifierSet should be returned.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_paths",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_extra_mapping",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_directory",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_metadata_file_contents",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_wheel",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "location",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installed_location",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "info_location",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installed_by_distutils",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "canonical_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "raw_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_paths",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "select_backend",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\importlib\\_compat.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\importlib\\_compat.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_zipfile",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_directory",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_metadata_file_contents",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_wheel",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "location",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "info_location",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installed_location",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "canonical_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "raw_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_emit_egg_deprecation",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\importlib\\_envs.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\importlib\\_envs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_paths",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\metadata\\importlib\\_envs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\direct_url.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\direct_url.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\direct_url.py",
            "decorator": [
                "hash.setter"
            ]
        },
        {
            "name": "_from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\direct_url.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\direct_url.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "redacted_url",
            "description": "url with user:password part removed unless it is formed with\n        environment variables as specified in PEP 610, or it is ``git``\n        in the case of a git URL.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\direct_url.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\direct_url.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\direct_url.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "handle_mutual_excludes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\format_control.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_install_req_to_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\installation_report.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "find_hash_url_fragment",
            "description": "Search a string for a checksum algorithm name and encoded output value.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "classmethod",
                "functools.lru_cache"
            ]
        },
        {
            "name": "from_json",
            "description": "\n        Convert an pypi json document from a simple repository page into a Link.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_element",
            "description": "\n        Convert an anchor element's attributes in a simple repository page to a Link.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "filename",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "file_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "scheme",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "netloc",
            "description": "\n        This can contain auth information.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ext",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "url_without_fragment",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "subdirectory_fragment",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "hash_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "show_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_file",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_wheel",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_vcs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_yanked",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "has_hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "links_equivalent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "create",
            "description": "\n        Create a SearchScope object after normalizing the `find_links`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\models\\search_scope.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_auth_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\network\\auth.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "save_auth_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\network\\auth.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_keyring_provider",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\network\\auth.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "PATH_as_shutil_which_determines_it",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\network\\auth.py",
            "decorator": [
                "typing.no_type_check"
            ]
        },
        {
            "name": "keyring_provider",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\network\\auth.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "keyring_provider",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\network\\auth.py",
            "decorator": [
                "keyring_provider.setter"
            ]
        },
        {
            "name": "use_keyring",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\network\\auth.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "suppressed_cache_errors",
            "description": "If we can't access the cache then we can just skip caching and process\n    requests as if caching wasn't enabled.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\network\\cache.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "mode",
            "description": "Opening mode, which is always rb.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\network\\lazy_wheel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "Path to the underlying file.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\network\\lazy_wheel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "closed",
            "description": "Whether the file is closed.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\network\\lazy_wheel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_stay",
            "description": "Return a context manager keeping the position.\n\n        At the end of the block, seek back to original position.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\network\\lazy_wheel.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "user_agent",
            "description": "\n    Return a string representing the user agent.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\network\\session.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "canonical_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\operations\\freeze.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_dist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\operations\\freeze.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "update_env_context_manager",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\operations\\build\\build_tracker.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "get_build_tracker",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\operations\\build\\build_tracker.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "track",
            "description": "Ensure that `key` cannot install itself as a setup requirement.\n\n        :raises LookupError: If `key` was already provided in a parent invocation of\n                             the context introduced by this method.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\operations\\build\\build_tracker.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "_generate_file",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\operations\\install\\wheel.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "req_error_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\operations\\install\\wheel.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "is_editable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_file.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "requirement",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_file.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "supports_pyproject_editable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "functools.cached_property"
            ]
        },
        {
            "name": "specifier",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_direct",
            "description": "Whether this requirement was specified as a direct URL.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_pinned",
            "description": "Return whether I am pinned to an exact version.\n\n        For example, some-package==1.2 is pinned; some-package>1.2 is not.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "has_hash_options",
            "description": "Return whether any known-good hashes are specified as options.\n\n        These activate --require-hashes mode; hashes specified as part of a\n        URL do not.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_wheel",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_wheel_from_cache",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "unpacked_source_directory",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "setup_py_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "setup_cfg_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "pyproject_toml_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "all_requirements",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_set.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "requirements_to_install",
            "description": "Return the list of requirements that need to be installed.\n\n        TODO remove this property together with the legacy resolver, since the new\n             resolver only returns requirements that need to be installed.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_set.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "unique",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_uninstall.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "uninstallation_paths",
            "description": "\n    Yield all the uninstallation paths for dist based on RECORD-without-.py[co]\n\n    Yield paths to all the files in RECORD. For each .py file in RECORD, add\n    the .pyc and .pyo in the same directory.\n\n    UninstallPathSet.add() takes care of the __pycache__ .py[co].\n\n    If RECORD is not found, raises an error,\n    with possible information from the INSTALLER file.\n\n    https://packaging.python.org/specifications/recording-installed-packages/\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_uninstall.py",
            "decorator": [
                "_unique"
            ]
        },
        {
            "name": "can_rollback",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_uninstall.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_dist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\req\\req_uninstall.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "empty",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_ireq",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "project_name",
            "description": "The \"project name\" of a requirement.\n\n        This is different from ``name`` if this requirement contains extras,\n        in which case ``name`` would contain the ``[...]`` part, while this\n        refers to the name of the project.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "The name identifying this requirement in the resolver.\n\n        This is different from ``project_name`` if this requirement contains\n        extras, where ``project_name`` would not contain the ``[...]`` part.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name",
            "description": "The \"project name\" of the candidate.\n\n        This is different from ``name`` if this candidate contains extras,\n        in which case ``name`` would contain the ``[...]`` part, while this\n        refers to the name of the project.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "The name identifying this candidate in the resolver.\n\n        This is different from ``project_name`` if this candidate contains\n        extras, where ``project_name`` would not contain the ``[...]`` part.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_installed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_editable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "source_link",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "source_link",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name",
            "description": "The normalised name of the project the candidate refers to",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_editable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "The normalised name of the project the candidate refers to",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_installed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_editable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "source_link",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "force_reinstall",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\factory.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__bool__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\found_candidates.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "is_satisfied_by",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\provider.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "is_backtrack_cause",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\provider.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "project_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_equal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_equal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "adjacent_tmp_file",
            "description": "Return a file-like object pointing to a tmp file next to path.\n\n    The file is created securely and is ensured to be written to disk\n    after the context reaches its end.\n\n    kwargs will be passed to tempfile.NamedTemporaryFile to control\n    the way the temporary file will be opened.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\utils\\filesystem.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "digest_count",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\utils\\hashes.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "indent_log",
            "description": "\n    A context manager which will cause the log output to be indented for any\n    log messages emitted inside it.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\utils\\logging.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "rmtree",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\utils\\misc.py",
            "decorator": [
                "retry"
            ]
        },
        {
            "name": "from_stream",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\utils\\misc.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "encoding",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\utils\\misc.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "check_requires_python",
            "description": "\n    Check if the given Python version matches a \"Requires-Python\" specifier.\n\n    :param version_info: A 3-tuple of ints representing a Python\n        major-minor-micro version to check (e.g. `sys.version_info[:3]`).\n\n    :return: `True` if the given Python version satisfies the requirement.\n        Otherwise, return `False`.\n\n    :raises InvalidSpecifier: If `requires_python` has an invalid format.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\utils\\packaging.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "get_requirement",
            "description": "Construct a packaging.Requirement object with caching",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\utils\\packaging.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "retry_wrapped",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\utils\\retry.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "global_tempdir_manager",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\utils\\temp_dir.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "tempdir_registry",
            "description": "Provides a scoped global tempdir registry that can be used to dictate\n    whether directories should be deleted.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\utils\\temp_dir.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\utils\\temp_dir.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_generate_names",
            "description": "Generates a series of temporary names.\n\n        The algorithm replaces the leading characters in the name\n        with ones that are valid filesystem characters, but are not\n        valid package names (for both Python and pip definitions of\n        package).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\utils\\temp_dir.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "yield_lines",
            "description": "r\"\"\"\n    Yield valid lines of a string or iterable.\n\n    >>> list(yield_lines(''))\n    []\n    >>> list(yield_lines(['foo', 'bar']))\n    ['foo', 'bar']\n    >>> list(yield_lines('foo\\nbar'))\n    ['foo', 'bar']\n    >>> list(yield_lines('\\nfoo\\n#bar\\nbaz #comment'))\n    ['foo', 'baz #comment']\n    >>> list(yield_lines(['foo\\nbar', 'baz', 'bing\\n\\n\\n']))\n    ['foo', 'bar', 'baz', 'bing']\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "iterable": {
                        "type": "string"
                    }
                },
                "required": [
                    "iterable"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\utils\\_jaraco_text.py",
            "decorator": [
                "functools.singledispatch"
            ]
        },
        {
            "name": "_",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string"
                    }
                },
                "required": [
                    "text"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\utils\\_jaraco_text.py",
            "decorator": [
                "yield_lines.register"
            ]
        },
        {
            "name": "get_base_rev_args",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\bazaar.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_url_rev_and_auth",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\bazaar.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_remote_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\bazaar.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_revision",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\bazaar.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "is_commit_id_equal",
            "description": "Always assume the versions don't match",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\bazaar.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_base_rev_args",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_current_branch",
            "description": "\n        Return the current branch, or None if HEAD isn't at a branch\n        (e.g. detached HEAD).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_revision_sha",
            "description": "\n        Return (sha_or_none, is_branch), where sha_or_none is a commit hash\n        if the revision names a remote branch or tag, otherwise None.\n\n        Args:\n          dest: the repository directory.\n          rev: the revision name.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_should_fetch",
            "description": "\n        Return true if rev is a ref or is a commit that we don't have locally.\n\n        Branches and tags are not considered in this method because they are\n        assumed to be always available locally (which is a normal outcome of\n        ``git clone`` and ``git fetch --tags``).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "resolve_revision",
            "description": "\n        Resolve a revision to a new RevOptions object with the SHA1 of the\n        branch, tag, or ref if found.\n\n        Args:\n          rev_options: a RevOptions object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "is_commit_id_equal",
            "description": "\n        Return whether the current commit hash equals the given name.\n\n        Args:\n          dest: the repository directory.\n          name: a string name.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_remote_url",
            "description": "\n        Return URL of the first remote encountered.\n\n        Raises RemoteNotFoundError if the repository does not have a remote\n        url configured.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_git_remote_to_pip_url",
            "description": "\n        Convert a remote url from what git uses to what pip accepts.\n\n        There are 3 legal forms **url** may take:\n\n            1. A fully qualified url: ssh://git@example.com/foo/bar.git\n            2. A local project.git folder: /path/to/bare/repository.git\n            3. SCP shorthand for form 1: git@example.com:foo/bar.git\n\n        Form 1 is output as-is. Form 2 must be converted to URI and form 3 must\n        be converted to form 1.\n\n        See the corresponding test test_git_remote_url_to_pip() for examples of\n        sample inputs/outputs.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "has_commit",
            "description": "\n        Check if rev is a commit that is available in the local repository.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_revision",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_subdirectory",
            "description": "\n        Return the path to Python project root, relative to the repo root.\n        Return None if the project root is in the repo root.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_url_rev_and_auth",
            "description": "\n        Prefixes stub URLs like 'user@hostname:user/repo.git' with 'ssh://'.\n        That's required because although they use SSH they sometimes don't\n        work with a ssh:// scheme (e.g. GitHub). But we need a scheme for\n        parsing. Hence we remove it again afterwards and return it as a stub.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "update_submodules",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_repository_root",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "should_add_vcs_url_prefix",
            "description": "In either https or ssh form, requirements must be prefixed with git+.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_base_rev_args",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\mercurial.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_remote_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\mercurial.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_revision",
            "description": "\n        Return the repository-local changeset revision number, as an integer.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\mercurial.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_requirement_revision",
            "description": "\n        Return the changeset identification hash, as a 40-character\n        hexadecimal string\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\mercurial.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "is_commit_id_equal",
            "description": "Always assume the versions don't match",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\mercurial.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_subdirectory",
            "description": "\n        Return the path to Python project root, relative to the repo root.\n        Return None if the project root is in the repo root.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\mercurial.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_repository_root",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\mercurial.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "should_add_vcs_url_prefix",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_base_rev_args",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_revision",
            "description": "\n        Return the maximum revision for all files under a given location\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_netloc_and_auth",
            "description": "\n        This override allows the auth information to be passed to svn via the\n        --username and --password options instead of via the URL.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_url_rev_and_auth",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "make_rev_args",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_remote_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_get_svn_url_rev",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "is_commit_id_equal",
            "description": "Always assume the versions don't match",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "arg_rev",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "backends",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "dirnames",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "all_schemes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "should_add_vcs_url_prefix",
            "description": "\n        Return whether the vcs prefix (e.g. \"git+\") should be added to a\n        repository's remote url when used in a requirement.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_subdirectory",
            "description": "\n        Return the path to Python project root, relative to the repo root.\n        Return None if the project root is in the repo root.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_requirement_revision",
            "description": "\n        Return the revision string that should be used in a requirement.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_src_requirement",
            "description": "\n        Return the requirement string to use to redownload the files\n        currently at the given repository directory.\n\n        Args:\n          project_name: the (unescaped) project name.\n\n        The return value has a form similar to the following:\n\n            {repository_url}@{revision}#egg={project_name}\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_base_rev_args",
            "description": "\n        Return the base revision arguments for a vcs command.\n\n        Args:\n          rev: the name of a revision to install.  Cannot be None.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "rev": {
                        "type": "string",
                        "description": "the name of a revision to install.  Cannot be None."
                    }
                },
                "required": [
                    "rev"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "make_rev_options",
            "description": "\n        Return a RevOptions object.\n\n        Args:\n          rev: the name of a revision to install.\n          extra_args: a list of extra options.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_is_local_repository",
            "description": "\n        posix absolute paths start with os.path.sep,\n        win32 ones start with drive (like c:\\\\folder)\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_netloc_and_auth",
            "description": "\n        Parse the repository URL's netloc, and return the new netloc to use\n        along with auth information.\n\n        Args:\n          netloc: the original repository URL netloc.\n          scheme: the repository URL's scheme without the vcs prefix.\n\n        This is mainly for the Subversion class to override, so that auth\n        information can be provided via the --username and --password options\n        instead of through the URL.  For other subclasses like Git without\n        such an option, auth information must stay in the URL.\n\n        Returns: (netloc, (username, password)).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_url_rev_and_auth",
            "description": "\n        Parse the repository URL to use, and return the URL, revision,\n        and auth info to use.\n\n        Returns: (url, rev, (username, password)).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "make_rev_args",
            "description": "\n        Return the RevOptions \"extra arguments\" to use in obtain().\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "normalize_url",
            "description": "\n        Normalize a URL for comparison by unquoting it and removing any\n        trailing slash.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "compare_urls",
            "description": "\n        Compare two repo URLs for identity, ignoring incidental differences.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "is_commit_id_equal",
            "description": "\n        Return whether the id of the current commit equals the given name.\n\n        Args:\n          dest: the repository directory.\n          name: a string name.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_remote_url",
            "description": "\n        Return the url used at location\n\n        Raises RemoteNotFoundError if the repository does not have a remote\n        url configured.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_revision",
            "description": "\n        Return the current commit id of the files at the given location.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "run_command",
            "description": "\n        Run a VCS subcommand\n        This is simply a wrapper around call_subprocess that adds the VCS\n        command name, and checks that the VCS is available\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "is_repository_directory",
            "description": "\n        Return whether a directory path is a repository directory.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_repository_root",
            "description": "\n        Return the \"root\" (top-level) directory controlled by the vcs,\n        or `None` if the directory is not in any.\n\n        It is meant to be overridden to implement smarter detection\n        mechanisms for specific vcs.\n\n        This can do more than is_repository_directory() alone. For\n        example, the Git override checks that Git is actually available.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "params": {
                        "type": "string"
                    }
                },
                "required": [
                    "params"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "typing._tp_cache"
            ]
        },
        {
            "name": "_proto_hook",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "other": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "other"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "__int__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__float__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__complex__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__bytes__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__index__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__abs__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__round__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "TypedDict",
            "description": "A simple typed namespace. At runtime it is equivalent to a plain dict.\n\n        TypedDict creates a dictionary type such that a type checker will expect all\n        instances to have a certain set of keys, where each key is\n        associated with a value of a consistent type. This expectation\n        is not checked at runtime.\n\n        Usage::\n\n            class Point2D(TypedDict):\n                x: int\n                y: int\n                label: str\n\n            a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK\n            b: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check\n\n            assert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')\n\n        The type info can be accessed via the Point2D.__annotations__ dict, and\n        the Point2D.__required_keys__ and Point2D.__optional_keys__ frozensets.\n        TypedDict supports an additional equivalent form::\n\n            Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})\n\n        By default, all keys must be present in a TypedDict. It is possible\n        to override this by specifying totality::\n\n            class Point2D(TypedDict, total=False):\n                x: int\n                y: int\n\n        This means that a Point2D TypedDict can have any of the keys omitted. A type\n        checker is only expected to support a literal False or True as the value of\n        the total argument. True is the default, and makes all items defined in the\n        class body be required.\n\n        The Required and NotRequired special forms can also be used to mark\n        individual keys as being required or not required::\n\n            class Point2D(TypedDict):\n                x: int  # the \"x\" key must always be present (Required is the default)\n                y: NotRequired[int]  # the \"y\" key can be omitted\n\n        See PEP 655 for more details on Required and NotRequired.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "typename": {
                        "type": "string"
                    }
                },
                "required": [
                    "typename"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_ensure_subclassable"
            ]
        },
        {
            "name": "__class_getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "params": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "params"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "typing._tp_cache"
            ]
        },
        {
            "name": "TypeAlias",
            "description": "Special marker indicating that an assignment should\n        be recognized as a proper type alias definition by type\n        checkers.\n\n        For example::\n\n            Predicate: TypeAlias = Callable[..., bool]\n\n        It's invalid when used anywhere except as in the example above.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_ExtensionsSpecialForm"
            ]
        },
        {
            "name": "args",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__parameters__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_concatenate_getitem",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "typing._tp_cache"
            ]
        },
        {
            "name": "Concatenate",
            "description": "Used in conjunction with ``ParamSpec`` and ``Callable`` to represent a\n        higher order function which adds, removes or transforms parameters of a\n        callable.\n\n        For example::\n\n           Callable[Concatenate[int, P], int]\n\n        See PEP 612 for detailed information.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_ExtensionsSpecialForm"
            ]
        },
        {
            "name": "TypeGuard",
            "description": "Special typing form used to annotate the return type of a user-defined\n        type guard function.  ``TypeGuard`` only accepts a single type argument.\n        At runtime, functions marked this way should return a boolean.\n\n        ``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static\n        type checkers to determine a more precise type of an expression within a\n        program's code flow.  Usually type narrowing is done by analyzing\n        conditional code flow and applying the narrowing to a block of code.  The\n        conditional expression here is sometimes referred to as a \"type guard\".\n\n        Sometimes it would be convenient to use a user-defined boolean function\n        as a type guard.  Such a function should use ``TypeGuard[...]`` as its\n        return type to alert static type checkers to this intention.\n\n        Using  ``-> TypeGuard`` tells the static type checker that for a given\n        function:\n\n        1. The return value is a boolean.\n        2. If the return value is ``True``, the type of its argument\n        is the type inside ``TypeGuard``.\n\n        For example::\n\n            def is_str(val: Union[str, float]):\n                # \"isinstance\" type guard\n                if isinstance(val, str):\n                    # Type of ``val`` is narrowed to ``str``\n                    ...\n                else:\n                    # Else, type of ``val`` is narrowed to ``float``.\n                    ...\n\n        Strict type narrowing is not enforced -- ``TypeB`` need not be a narrower\n        form of ``TypeA`` (it can even be a wider form) and this may lead to\n        type-unsafe results.  The main reason is to allow for things like\n        narrowing ``List[object]`` to ``List[str]`` even though the latter is not\n        a subtype of the former, since ``List`` is invariant.  The responsibility of\n        writing type-safe type guards is left to the user.\n\n        ``TypeGuard`` also works with type variables.  For more information, see\n        PEP 647 (User-Defined Type Guards).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_ExtensionsSpecialForm"
            ]
        },
        {
            "name": "TypeIs",
            "description": "Special typing form used to annotate the return type of a user-defined\n        type narrower function.  ``TypeIs`` only accepts a single type argument.\n        At runtime, functions marked this way should return a boolean.\n\n        ``TypeIs`` aims to benefit *type narrowing* -- a technique used by static\n        type checkers to determine a more precise type of an expression within a\n        program's code flow.  Usually type narrowing is done by analyzing\n        conditional code flow and applying the narrowing to a block of code.  The\n        conditional expression here is sometimes referred to as a \"type guard\".\n\n        Sometimes it would be convenient to use a user-defined boolean function\n        as a type guard.  Such a function should use ``TypeIs[...]`` as its\n        return type to alert static type checkers to this intention.\n\n        Using  ``-> TypeIs`` tells the static type checker that for a given\n        function:\n\n        1. The return value is a boolean.\n        2. If the return value is ``True``, the type of its argument\n        is the intersection of the type inside ``TypeGuard`` and the argument's\n        previously known type.\n\n        For example::\n\n            def is_awaitable(val: object) -> TypeIs[Awaitable[Any]]:\n                return hasattr(val, '__await__')\n\n            def f(val: Union[int, Awaitable[int]]) -> int:\n                if is_awaitable(val):\n                    assert_type(val, Awaitable[int])\n                else:\n                    assert_type(val, int)\n\n        ``TypeIs`` also works with type variables.  For more information, see\n        PEP 742 (Narrowing types with TypeIs).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_ExtensionsSpecialForm"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "typing._tp_cache"
            ]
        },
        {
            "name": "LiteralString",
            "description": "Represents an arbitrary literal string.\n\n        Example::\n\n          from pip._vendor.typing_extensions import LiteralString\n\n          def query(sql: LiteralString) -> ...:\n              ...\n\n          query(\"SELECT * FROM table\")  # ok\n          query(f\"SELECT * FROM {input()}\")  # not ok\n\n        See PEP 675 for details.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "params": {
                        "type": "string"
                    }
                },
                "required": [
                    "params"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_SpecialForm"
            ]
        },
        {
            "name": "Self",
            "description": "Used to spell the type of \"self\" in classes.\n\n        Example::\n\n          from typing import Self\n\n          class ReturnsSelf:\n              def parse(self, data: bytes) -> Self:\n                  ...\n                  return self\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "params": {
                        "type": "string"
                    }
                },
                "required": [
                    "params"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_SpecialForm"
            ]
        },
        {
            "name": "Never",
            "description": "The bottom type, a type that has no members.\n\n        This can be used to define a function that should never be\n        called, or a function that never returns::\n\n            from pip._vendor.typing_extensions import Never\n\n            def never_call_me(arg: Never) -> None:\n                pass\n\n            def int_or_str(arg: int | str) -> None:\n                never_call_me(arg)  # type checker error\n                match arg:\n                    case int():\n                        print(\"It's an int\")\n                    case str():\n                        print(\"It's a str\")\n                    case _:\n                        never_call_me(arg)  # ok, arg is of type Never\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "params": {
                        "type": "string"
                    }
                },
                "required": [
                    "params"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_SpecialForm"
            ]
        },
        {
            "name": "Required",
            "description": "A special typing construct to mark a key of a total=False TypedDict\n        as required. For example:\n\n            class Movie(TypedDict, total=False):\n                title: Required[str]\n                year: int\n\n            m = Movie(\n                title='The Matrix',  # typechecker error if key is omitted\n                year=1999,\n            )\n\n        There is no runtime checking that a required key is actually provided\n        when instantiating a related TypedDict.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_ExtensionsSpecialForm"
            ]
        },
        {
            "name": "NotRequired",
            "description": "A special typing construct to mark a key of a TypedDict as\n        potentially missing. For example:\n\n            class Movie(TypedDict):\n                title: str\n                year: NotRequired[int]\n\n            m = Movie(\n                title='The Matrix',  # typechecker error if key is omitted\n                year=1999,\n            )\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_ExtensionsSpecialForm"
            ]
        },
        {
            "name": "ReadOnly",
            "description": "A special typing construct to mark an item of a TypedDict as read-only.\n\n        For example:\n\n            class Movie(TypedDict):\n                title: ReadOnly[str]\n                year: int\n\n            def mutate_movie(m: Movie) -> None:\n                m[\"year\"] = 1992  # allowed\n                m[\"title\"] = \"The Matrix\"  # typechecker error\n\n        There is no runtime checking for this property.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_ExtensionsSpecialForm"
            ]
        },
        {
            "name": "__typing_unpacked_tuple_args__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "Unpack",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_UnpackSpecialForm"
            ]
        },
        {
            "name": "__new__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "__init_subclass__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "__init_subclass__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "NamedTuple",
            "description": "Typed version of namedtuple.\n\n        Usage::\n\n            class Employee(NamedTuple):\n                name: str\n                id: int\n\n        This is equivalent to::\n\n            Employee = collections.namedtuple('Employee', ['name', 'id'])\n\n        The resulting class has an extra __annotations__ attribute, giving a\n        dict that maps field names to types.  (The field names are also in\n        the _fields attribute, which is part of the namedtuple API.)\n        An alternative equivalent functional syntax is also accepted::\n\n            Employee = NamedTuple('Employee', [('name', str), ('id', int)])\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "typename": {
                        "type": "string"
                    }
                },
                "required": [
                    "typename"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_ensure_subclassable"
            ]
        },
        {
            "name": "_urlnorm",
            "description": "Normalize the URL to create a safe key for the cache",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\cachecontrol\\controller.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "cache_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\cachecontrol\\controller.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "encode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\cachecontrol\\caches\\file_cache.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "distinfo_dirname",
            "description": "\n        The *name* and *version* parameters are converted into their\n        filename-escaped form, i.e. any ``'-'`` characters are replaced\n        with ``'_'`` other than the one in ``'dist-info'`` and the one\n        separating the name from the version number.\n\n        :parameter name: is converted to a standard distribution name by replacing\n                         any runs of non- alphanumeric characters with a single\n                         ``'-'``.\n        :type name: string\n        :parameter version: is converted to a standard version string. Spaces\n                            become dots, and all other non-alphanumeric characters\n                            (except dots) become dashes, with runs of multiple\n                            dashes condensed to a single dash.\n        :type version: string\n        :returns: directory name\n        :rtype: string",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "name",
                    "version"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "source_url",
            "description": "\n        The source archive download URL for this distribution.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name_and_version",
            "description": "\n        A utility property which displays the name and version in parentheses.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "provides",
            "description": "\n        A set of distribution names and versions provided by this distribution.\n        :return: A set of \"name (version)\" strings.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "run_requires",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "meta_requires",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "build_requires",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "test_requires",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "dev_requires",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "exports",
            "description": "\n        Return the information exported by this distribution.\n        :return: A dictionary of exports, mapping an export category to a dict\n                 of :class:`ExportEntry` instances describing the individual\n                 export entries, and keyed by name.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "shared_locations",
            "description": "\n        A dictionary of shared locations whose keys are in the set 'prefix',\n        'purelib', 'platlib', 'scripts', 'headers', 'data' and 'namespace'.\n        The corresponding value is the absolute path of that category for\n        this distribution, and takes into account any paths selected by the\n        user at installation time (e.g. via command-line arguments). In the\n        case of the 'namespace' key, this would be a list of absolute paths\n        for the roots of namespace packages in this distribution.\n\n        The first time this property is accessed, the relevant information is\n        read from the SHARED file in the .dist-info directory.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "links",
            "description": "\n        Return the URLs of all the links on a page together with information\n        about their \"rel\" attribute, for determining which ones to treat as\n        downloads and which ones to queue for further scraping.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\locators.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "name_and_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\metadata.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "provides",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\metadata.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "provides",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\metadata.py",
            "decorator": [
                "provides.setter"
            ]
        },
        {
            "name": "dictionary",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\metadata.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "dependencies",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\metadata.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "dependencies",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\metadata.py",
            "decorator": [
                "dependencies.setter"
            ]
        },
        {
            "name": "file_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\resources.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "bytes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\resources.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "size",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\resources.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "resources",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\resources.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "tempdir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "chdir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "d": {
                        "type": "string"
                    }
                },
                "required": [
                    "d"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "socket_timeout",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "value",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "strong_connections",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "dot",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "maximum",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "percentage",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ETA",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "speed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_prerelease",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "exact_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_prerelease",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_prerelease",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_prerelease",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "filename",
            "description": "\n        Build and return a filename from the various components.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\wheel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "exists",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\wheel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "tags",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\wheel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\wheel.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distlib\\wheel.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_os_release_info",
            "description": "\n        Get the information items from the specified os-release file.\n\n        Returns:\n            A dictionary containing all information items.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_parse_os_release_content",
            "description": "\n        Parse the lines of an os-release file.\n\n        Parameters:\n\n        * lines: Iterable through the lines in the os-release file.\n                 Each line must be a unicode string or a UTF-8 encoded byte\n                 string.\n\n        Returns:\n            A dictionary containing all information items.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_lsb_release_info",
            "description": "\n        Get the information items from the lsb_release command output.\n\n        Returns:\n            A dictionary containing all information items.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_parse_lsb_release_content",
            "description": "\n        Parse the output of the lsb_release command.\n\n        Parameters:\n\n        * lines: Iterable through the lines of the lsb_release output.\n                 Each line must be a unicode string or a UTF-8 encoded byte\n                 string.\n\n        Returns:\n            A dictionary containing all information items.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_uname_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_oslevel_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_debian_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_parse_uname_content",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_to_str",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_distro_release_info",
            "description": "\n        Get the information items from the specified distro release file.\n\n        Returns:\n            A dictionary containing all information items.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_parse_distro_release_content",
            "description": "\n        Parse a line from a distro release file.\n\n        Parameters:\n        * line: Line from the distro release file. Must be a unicode string\n                or a UTF-8 encoded byte string.\n\n        Returns:\n            A dictionary containing all information items.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "from_bytes",
            "description": "Unpack bytes into a `Timestamp` object.\n\n        Used for pure-Python msgpack unpacking.\n\n        :param b: Payload from msgpack ext message with code -1\n        :type b: bytes\n\n        :returns: Timestamp object unpacked from msgpack ext payload\n        :rtype: Timestamp\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "b": {
                        "type": "string"
                    }
                },
                "required": [
                    "b"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\msgpack\\ext.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "from_unix",
            "description": "Create a Timestamp from posix timestamp in seconds.\n\n        :param unix_float: Posix timestamp in seconds.\n        :type unix_float: int or float\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "unix_sec": {
                        "type": "string"
                    }
                },
                "required": [
                    "unix_sec"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\msgpack\\ext.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "from_unix_nano",
            "description": "Create a Timestamp from posix timestamp in nanoseconds.\n\n        :param int unix_ns: Posix timestamp in nanoseconds.\n        :rtype: Timestamp\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "unix_ns": {
                        "type": "string"
                    }
                },
                "required": [
                    "unix_ns"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\msgpack\\ext.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "from_datetime",
            "description": "Create a Timestamp from datetime with tzinfo.\n\n        :rtype: Timestamp\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dt": {
                        "type": "string"
                    }
                },
                "required": [
                    "dt"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\msgpack\\ext.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "from_raw",
            "description": "Create an instance from :class:`RawMetadata`.\n\n        If *validate* is true, all metadata will be validated. All exceptions\n        related to validation will be gathered and raised as an :class:`ExceptionGroup`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\metadata.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_email",
            "description": "Parse metadata from email headers.\n\n        If *validate* is true, the metadata will be validated. All exceptions\n        related to validation will be gathered and raised as an :class:`ExceptionGroup`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\metadata.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "__str__",
            "description": "\n        Returns the str representation of this Specifier-like object. This\n        should be representative of the Specifier itself.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__hash__",
            "description": "\n        Returns a hash value for this Specifier-like object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__eq__",
            "description": "\n        Returns a boolean representing whether or not the two Specifier-like\n        objects are equal.\n\n        :param other: The other object to check against.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "prereleases",
            "description": "Whether or not pre-releases as a whole are allowed.\n\n        This can be set to either ``True`` or ``False`` to explicitly enable or disable\n        prereleases or it can be set to ``None`` (the default) to use default semantics.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "property",
                "abc.abstractmethod"
            ]
        },
        {
            "name": "prereleases",
            "description": "Setter for :attr:`prereleases`.\n\n        :param value: The value to set.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "prereleases.setter"
            ]
        },
        {
            "name": "contains",
            "description": "\n        Determines if the given item is contained within this specifier.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "filter",
            "description": "\n        Takes an iterable of items and filters them so that only items which\n        are contained within this specifier are allowed in it.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "prereleases",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "property#type:ignore[override]"
            ]
        },
        {
            "name": "prereleases",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "prereleases.setter"
            ]
        },
        {
            "name": "operator",
            "description": "The operator of this specifier.\n\n        >>> Specifier(\"==1.2.3\").operator\n        '=='\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "The version of this specifier.\n\n        >>> Specifier(\"==1.2.3\").version\n        '1.2.3'\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_canonical_spec",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prereleases",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prereleases",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "prereleases.setter"
            ]
        },
        {
            "name": "interpreter",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\tags.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "abi",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\tags.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "platform",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\tags.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "canonicalize_version",
            "description": "\n    Return a canonical form of a version as a string.\n\n    >>> canonicalize_version('1.0.1')\n    '1.0.1'\n\n    Per PEP 625, versions may have multiple canonical forms, differing\n    only by trailing zeros.\n\n    >>> canonicalize_version('1.0.0')\n    '1'\n    >>> canonicalize_version('1.0.0', strip_trailing_zero=False)\n    '1.0.0'\n\n    Invalid versions are returned unaltered.\n\n    >>> canonicalize_version('foo bar baz')\n    'foo bar baz'\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\utils.py",
            "decorator": [
                "functools.singledispatch"
            ]
        },
        {
            "name": "_",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\utils.py",
            "decorator": [
                "canonicalize_version.register"
            ]
        },
        {
            "name": "epoch",
            "description": "The epoch of the version.\n\n        >>> Version(\"2.0.0\").epoch\n        0\n        >>> Version(\"1!2.0.0\").epoch\n        1\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "release",
            "description": "The components of the \"release\" segment of the version.\n\n        >>> Version(\"1.2.3\").release\n        (1, 2, 3)\n        >>> Version(\"2.0.0\").release\n        (2, 0, 0)\n        >>> Version(\"1!2.0.0.post0\").release\n        (2, 0, 0)\n\n        Includes trailing zeroes but not the epoch or any pre-release / development /\n        post-release suffixes.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "pre",
            "description": "The pre-release segment of the version.\n\n        >>> print(Version(\"1.2.3\").pre)\n        None\n        >>> Version(\"1.2.3a1\").pre\n        ('a', 1)\n        >>> Version(\"1.2.3b1\").pre\n        ('b', 1)\n        >>> Version(\"1.2.3rc1\").pre\n        ('rc', 1)\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "post",
            "description": "The post-release number of the version.\n\n        >>> print(Version(\"1.2.3\").post)\n        None\n        >>> Version(\"1.2.3.post1\").post\n        1\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "dev",
            "description": "The development number of the version.\n\n        >>> print(Version(\"1.2.3\").dev)\n        None\n        >>> Version(\"1.2.3.dev1\").dev\n        1\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "local",
            "description": "The local version segment of the version.\n\n        >>> print(Version(\"1.2.3\").local)\n        None\n        >>> Version(\"1.2.3+abc\").local\n        'abc'\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "public",
            "description": "The public portion of the version.\n\n        >>> Version(\"1.2.3\").public\n        '1.2.3'\n        >>> Version(\"1.2.3+abc\").public\n        '1.2.3'\n        >>> Version(\"1!1.2.3dev1+abc\").public\n        '1!1.2.3.dev1'\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "base_version",
            "description": "The \"base version\" of the version.\n\n        >>> Version(\"1.2.3\").base_version\n        '1.2.3'\n        >>> Version(\"1.2.3+abc\").base_version\n        '1.2.3'\n        >>> Version(\"1!1.2.3dev1+abc\").base_version\n        '1!1.2.3'\n\n        The \"base version\" is the public version of the project without any pre or post\n        release markers.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_prerelease",
            "description": "Whether this version is a pre-release.\n\n        >>> Version(\"1.2.3\").is_prerelease\n        False\n        >>> Version(\"1.2.3a1\").is_prerelease\n        True\n        >>> Version(\"1.2.3b1\").is_prerelease\n        True\n        >>> Version(\"1.2.3rc1\").is_prerelease\n        True\n        >>> Version(\"1.2.3dev1\").is_prerelease\n        True\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_postrelease",
            "description": "Whether this version is a post-release.\n\n        >>> Version(\"1.2.3\").is_postrelease\n        False\n        >>> Version(\"1.2.3.post1\").is_postrelease\n        True\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_devrelease",
            "description": "Whether this version is a development release.\n\n        >>> Version(\"1.2.3\").is_devrelease\n        False\n        >>> Version(\"1.2.3.dev1\").is_devrelease\n        True\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "major",
            "description": "The first item of :attr:`release` or ``0`` if unavailable.\n\n        >>> Version(\"1.2.3\").major\n        1\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "minor",
            "description": "The second item of :attr:`release` or ``0`` if unavailable.\n\n        >>> Version(\"1.2.3\").minor\n        2\n        >>> Version(\"1\").minor\n        0\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "micro",
            "description": "The third item of :attr:`release` or ``0`` if unavailable.\n\n        >>> Version(\"1.2.3\").micro\n        3\n        >>> Version(\"1\").micro\n        0\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "release",
            "description": "\n        Release segment without any trailing zeros.\n\n        >>> _TrimmedRelease('1.0.0').release\n        (1,)\n        >>> _TrimmedRelease('0.0').release\n        (0,)\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "interpreter",
            "description": "\n        The path recorded in the ``PT_INTERP`` section header.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\_elffile.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_parse_elf",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\_manylinux.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "_get_glibc_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\_manylinux.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "_get_musl_version",
            "description": "Detect currently-running musl runtime version.\n\n    This is done by checking the specified executable's dynamic linking\n    information, and invoking the loader to parse its output for a version\n    string. If the loader is musl, the output would be something like::\n\n        musl libc (x86_64)\n        Version 1.2.2\n        Dynamic Program Loader\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\_musllinux.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "enclosing_tokens",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\packaging\\_tokenizer.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "dist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "req",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "required_by",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "req",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "requirers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "requirers_str",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_provider",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get_provider",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "_macos_vers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "get_distribution",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get_distribution",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get_entry_map",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get_entry_map",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "_build_master",
            "description": "\n        Prepare the master working set.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_build_from_requirements",
            "description": "\n        Build a working set from a requirement spec. Rewrites sys.path.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "req_spec": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "req_spec"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "resolve",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "resolve",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "resolve",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "find_plugins",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "find_plugins",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "find_plugins",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "best_match",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "best_match",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "obtain",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "obtain",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "obtain",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "_warn_unsafe_extraction_path",
            "description": "\n        If the default extraction path is overridden and set to an insecure\n        location, such as /tmp, it opens up an opportunity for an attacker to\n        replace an extracted file with an unauthorized payload. Warn the user\n        if a known insecure location is used.\n\n        See Distribute #375 for more details.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "required": [
                    "path"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_validate_resource_path",
            "description": "\n        Validate the resource paths according to the docs.\n        https://setuptools.pypa.io/en/latest/pkg_resources.html#basic-resource-access\n\n        >>> warned = getfixture('recwarn')\n        >>> warnings.simplefilter('always')\n        >>> vrp = NullProvider._validate_resource_path\n        >>> vrp('foo/bar.txt')\n        >>> bool(warned)\n        False\n        >>> vrp('../foo/bar.txt')\n        >>> bool(warned)\n        True\n        >>> warned.clear()\n        >>> vrp('/foo/bar.txt')\n        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True\n        >>> warned.clear()\n        >>> vrp('foo/f../bar.txt')\n        >>> bool(warned)\n        False\n\n        Windows path separators are straight-up disallowed.\n        >>> vrp(r'\\\\foo/bar.txt')\n        Traceback (most recent call last):\n        ...\n        ValueError: Use of .. or absolute path in a resource path \\\nis not allowed.\n\n        >>> vrp(r'C:\\\\foo/bar.txt')\n        Traceback (most recent call last):\n        ...\n        ValueError: Use of .. or absolute path in a resource path \\\nis not allowed.\n\n        Blank values are allowed\n\n        >>> vrp('')\n        >>> bool(warned)\n        False\n\n        Non-string values are not.\n\n        >>> vrp(None)\n        Traceback (most recent call last):\n        ...\n        AttributeError: ...\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "required": [
                    "path"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_register",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "build",
            "description": "\n        Build a dictionary similar to the zipimport directory\n        caches, except instead of tuples, store ZipInfo objects.\n\n        Use a platform-specific path separator (os.sep) for the path keys\n        for compatibility with pypy on Windows.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "zipinfo",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_get_date_and_size",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "zip_stat": {
                        "type": "string"
                    }
                },
                "required": [
                    "zip_stat"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "user_data_dir",
            "description": ":return: data directory tied to the user, e.g. ``/data/user/<userid>/<packagename>/files/<AppName>``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_data_dir",
            "description": ":return: data directory shared by users, same as `user_data_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_config_dir",
            "description": "\n        :return: config directory tied to the user, e.g. \\\n        ``/data/user/<userid>/<packagename>/shared_prefs/<AppName>``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_config_dir",
            "description": ":return: config directory shared by the users, same as `user_config_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_cache_dir",
            "description": ":return: cache directory tied to the user, e.g.,``/data/user/<userid>/<packagename>/cache/<AppName>``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_cache_dir",
            "description": ":return: cache directory shared by users, same as `user_cache_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_state_dir",
            "description": ":return: state directory tied to the user, same as `user_data_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_log_dir",
            "description": "\n        :return: log directory tied to the user, same as `user_cache_dir` if not opinionated else ``log`` in it,\n          e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>/log``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_documents_dir",
            "description": ":return: documents directory tied to the user e.g. ``/storage/emulated/0/Documents``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_downloads_dir",
            "description": ":return: downloads directory tied to the user e.g. ``/storage/emulated/0/Downloads``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_pictures_dir",
            "description": ":return: pictures directory tied to the user e.g. ``/storage/emulated/0/Pictures``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_videos_dir",
            "description": ":return: videos directory tied to the user e.g. ``/storage/emulated/0/DCIM/Camera``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_music_dir",
            "description": ":return: music directory tied to the user e.g. ``/storage/emulated/0/Music``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_desktop_dir",
            "description": ":return: desktop directory tied to the user e.g. ``/storage/emulated/0/Desktop``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_runtime_dir",
            "description": "\n        :return: runtime directory tied to the user, same as `user_cache_dir` if not opinionated else ``tmp`` in it,\n          e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>/tmp``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_runtime_dir",
            "description": ":return: runtime directory shared by users, same as `user_runtime_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_android_folder",
            "description": ":return: base folder for the Android OS or None if it cannot be found",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "_android_documents_folder",
            "description": ":return: documents folder for the Android OS",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "_android_downloads_folder",
            "description": ":return: downloads folder for the Android OS",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "_android_pictures_folder",
            "description": ":return: pictures folder for the Android OS",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "_android_videos_folder",
            "description": ":return: videos folder for the Android OS",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "_android_music_folder",
            "description": ":return: music folder for the Android OS",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "user_data_dir",
            "description": ":return: data directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "site_data_dir",
            "description": ":return: data directory shared by users",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_config_dir",
            "description": ":return: config directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "site_config_dir",
            "description": ":return: config directory shared by the users",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_cache_dir",
            "description": ":return: cache directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "site_cache_dir",
            "description": ":return: cache directory shared by users",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_state_dir",
            "description": ":return: state directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_log_dir",
            "description": ":return: log directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_documents_dir",
            "description": ":return: documents directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_downloads_dir",
            "description": ":return: downloads directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_pictures_dir",
            "description": ":return: pictures directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_videos_dir",
            "description": ":return: videos directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_music_dir",
            "description": ":return: music directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_desktop_dir",
            "description": ":return: desktop directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_runtime_dir",
            "description": ":return: runtime directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "site_runtime_dir",
            "description": ":return: runtime directory shared by users",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_data_path",
            "description": ":return: data path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_data_path",
            "description": ":return: data path shared by users",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_config_path",
            "description": ":return: config path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_config_path",
            "description": ":return: config path shared by the users",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_cache_path",
            "description": ":return: cache path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_cache_path",
            "description": ":return: cache path shared by users",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_state_path",
            "description": ":return: state path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_log_path",
            "description": ":return: log path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_documents_path",
            "description": ":return: documents a path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_downloads_path",
            "description": ":return: downloads path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_pictures_path",
            "description": ":return: pictures path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_videos_path",
            "description": ":return: videos path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_music_path",
            "description": ":return: music path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_desktop_path",
            "description": ":return: desktop path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_runtime_path",
            "description": ":return: runtime path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_runtime_path",
            "description": ":return: runtime path shared by users",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_data_dir",
            "description": ":return: data directory tied to the user, e.g. ``~/Library/Application Support/$appname/$version``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_data_dir",
            "description": "\n        :return: data directory shared by users, e.g. ``/Library/Application Support/$appname/$version``.\n          If we're using a Python binary managed by `Homebrew <https://brew.sh>`_, the directory\n          will be under the Homebrew prefix, e.g. ``/opt/homebrew/share/$appname/$version``.\n          If `multipath <platformdirs.api.PlatformDirsABC.multipath>` is enabled, and we're in Homebrew,\n          the response is a multi-path string separated by \":\", e.g.\n          ``/opt/homebrew/share/$appname/$version:/Library/Application Support/$appname/$version``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_data_path",
            "description": ":return: data path shared by users. Only return the first item, even if ``multipath`` is set to ``True``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_config_dir",
            "description": ":return: config directory tied to the user, same as `user_data_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_config_dir",
            "description": ":return: config directory shared by the users, same as `site_data_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_cache_dir",
            "description": ":return: cache directory tied to the user, e.g. ``~/Library/Caches/$appname/$version``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_cache_dir",
            "description": "\n        :return: cache directory shared by users, e.g. ``/Library/Caches/$appname/$version``.\n          If we're using a Python binary managed by `Homebrew <https://brew.sh>`_, the directory\n          will be under the Homebrew prefix, e.g. ``/opt/homebrew/var/cache/$appname/$version``.\n          If `multipath <platformdirs.api.PlatformDirsABC.multipath>` is enabled, and we're in Homebrew,\n          the response is a multi-path string separated by \":\", e.g.\n          ``/opt/homebrew/var/cache/$appname/$version:/Library/Caches/$appname/$version``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_cache_path",
            "description": ":return: cache path shared by users. Only return the first item, even if ``multipath`` is set to ``True``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_state_dir",
            "description": ":return: state directory tied to the user, same as `user_data_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_log_dir",
            "description": ":return: log directory tied to the user, e.g. ``~/Library/Logs/$appname/$version``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_documents_dir",
            "description": ":return: documents directory tied to the user, e.g. ``~/Documents``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_downloads_dir",
            "description": ":return: downloads directory tied to the user, e.g. ``~/Downloads``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_pictures_dir",
            "description": ":return: pictures directory tied to the user, e.g. ``~/Pictures``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_videos_dir",
            "description": ":return: videos directory tied to the user, e.g. ``~/Movies``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_music_dir",
            "description": ":return: music directory tied to the user, e.g. ``~/Music``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_desktop_dir",
            "description": ":return: desktop directory tied to the user, e.g. ``~/Desktop``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_runtime_dir",
            "description": ":return: runtime directory tied to the user, e.g. ``~/Library/Caches/TemporaryItems/$appname/$version``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_runtime_dir",
            "description": ":return: runtime directory shared by users, same as `user_runtime_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_data_dir",
            "description": "\n        :return: data directory tied to the user, e.g. ``~/.local/share/$appname/$version`` or\n         ``$XDG_DATA_HOME/$appname/$version``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_site_data_dirs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_data_dir",
            "description": "\n        :return: data directories shared by users (if `multipath <platformdirs.api.PlatformDirsABC.multipath>` is\n         enabled and ``XDG_DATA_DIRS`` is set and a multi path the response is also a multi path separated by the\n         OS path separator), e.g. ``/usr/local/share/$appname/$version`` or ``/usr/share/$appname/$version``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_config_dir",
            "description": "\n        :return: config directory tied to the user, e.g. ``~/.config/$appname/$version`` or\n         ``$XDG_CONFIG_HOME/$appname/$version``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_site_config_dirs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_config_dir",
            "description": "\n        :return: config directories shared by users (if `multipath <platformdirs.api.PlatformDirsABC.multipath>`\n         is enabled and ``XDG_CONFIG_DIRS`` is set and a multi path the response is also a multi path separated by\n         the OS path separator), e.g. ``/etc/xdg/$appname/$version``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_cache_dir",
            "description": "\n        :return: cache directory tied to the user, e.g. ``~/.cache/$appname/$version`` or\n         ``~/$XDG_CACHE_HOME/$appname/$version``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_cache_dir",
            "description": ":return: cache directory shared by users, e.g. ``/var/cache/$appname/$version``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_state_dir",
            "description": "\n        :return: state directory tied to the user, e.g. ``~/.local/state/$appname/$version`` or\n         ``$XDG_STATE_HOME/$appname/$version``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_log_dir",
            "description": ":return: log directory tied to the user, same as `user_state_dir` if not opinionated else ``log`` in it",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_documents_dir",
            "description": ":return: documents directory tied to the user, e.g. ``~/Documents``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_downloads_dir",
            "description": ":return: downloads directory tied to the user, e.g. ``~/Downloads``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_pictures_dir",
            "description": ":return: pictures directory tied to the user, e.g. ``~/Pictures``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_videos_dir",
            "description": ":return: videos directory tied to the user, e.g. ``~/Videos``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_music_dir",
            "description": ":return: music directory tied to the user, e.g. ``~/Music``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_desktop_dir",
            "description": ":return: desktop directory tied to the user, e.g. ``~/Desktop``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_runtime_dir",
            "description": "\n        :return: runtime directory tied to the user, e.g. ``/run/user/$(id -u)/$appname/$version`` or\n         ``$XDG_RUNTIME_DIR/$appname/$version``.\n\n         For FreeBSD/OpenBSD/NetBSD, it would return ``/var/run/user/$(id -u)/$appname/$version`` if\n         exists, otherwise ``/tmp/runtime-$(id -u)/$appname/$version``, if``$XDG_RUNTIME_DIR``\n         is not set.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_runtime_dir",
            "description": "\n        :return: runtime directory shared by users, e.g. ``/run/$appname/$version`` or \\\n        ``$XDG_RUNTIME_DIR/$appname/$version``.\n\n        Note that this behaves almost exactly like `user_runtime_dir` if ``$XDG_RUNTIME_DIR`` is set, but will\n        fall back to paths associated to the root user instead of a regular logged-in user if it's not set.\n\n        If you wish to ensure that a logged-in root user path is returned e.g. ``/run/user/0``, use `user_runtime_dir`\n        instead.\n\n        For FreeBSD/OpenBSD/NetBSD, it would return ``/var/run/$appname/$version`` if ``$XDG_RUNTIME_DIR`` is not set.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_data_path",
            "description": ":return: data path shared by users. Only return the first item, even if ``multipath`` is set to ``True``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_config_path",
            "description": ":return: config path shared by the users, returns the first item, even if ``multipath`` is set to ``True``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_cache_path",
            "description": ":return: cache path shared by users. Only return the first item, even if ``multipath`` is set to ``True``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_data_dir",
            "description": "\n        :return: data directory tied to the user, e.g.\n         ``%USERPROFILE%\\\\AppData\\\\Local\\\\$appauthor\\\\$appname`` (not roaming) or\n         ``%USERPROFILE%\\\\AppData\\\\Roaming\\\\$appauthor\\\\$appname`` (roaming)\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_data_dir",
            "description": ":return: data directory shared by users, e.g. ``C:\\\\ProgramData\\\\$appauthor\\\\$appname``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_config_dir",
            "description": ":return: config directory tied to the user, same as `user_data_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_config_dir",
            "description": ":return: config directory shared by the users, same as `site_data_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_cache_dir",
            "description": "\n        :return: cache directory tied to the user (if opinionated with ``Cache`` folder within ``$appname``) e.g.\n         ``%USERPROFILE%\\\\AppData\\\\Local\\\\$appauthor\\\\$appname\\\\Cache\\\\$version``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_cache_dir",
            "description": ":return: cache directory shared by users, e.g. ``C:\\\\ProgramData\\\\$appauthor\\\\$appname\\\\Cache\\\\$version``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_state_dir",
            "description": ":return: state directory tied to the user, same as `user_data_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_log_dir",
            "description": ":return: log directory tied to the user, same as `user_data_dir` if not opinionated else ``Logs`` in it",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_documents_dir",
            "description": ":return: documents directory tied to the user e.g. ``%USERPROFILE%\\\\Documents``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_downloads_dir",
            "description": ":return: downloads directory tied to the user e.g. ``%USERPROFILE%\\\\Downloads``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_pictures_dir",
            "description": ":return: pictures directory tied to the user e.g. ``%USERPROFILE%\\\\Pictures``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_videos_dir",
            "description": ":return: videos directory tied to the user e.g. ``%USERPROFILE%\\\\Videos``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_music_dir",
            "description": ":return: music directory tied to the user e.g. ``%USERPROFILE%\\\\Music``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_desktop_dir",
            "description": ":return: desktop directory tied to the user, e.g. ``%USERPROFILE%\\\\Desktop``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_runtime_dir",
            "description": "\n        :return: runtime directory tied to the user, e.g.\n         ``%USERPROFILE%\\\\AppData\\\\Local\\\\Temp\\\\$appauthor\\\\$appname``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_runtime_dir",
            "description": ":return: runtime directory shared by users, same as `user_runtime_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_pre_style",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pygments\\formatters\\html.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_linenos_style",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pygments\\formatters\\html.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_linenos_special_style",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pygments\\formatters\\html.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_translate_parts",
            "description": "HTML-escape a value and split it by newlines.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pygments\\formatters\\html.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "hex_to_rtf_color",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "hex_color": {
                        "type": "string"
                    }
                },
                "required": [
                    "hex_color"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pygments\\formatters\\rtf.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_lineno_template",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pygments\\formatters\\rtf.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_hl_open_str",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pygments\\formatters\\rtf.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_rtf_header",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pygments\\formatters\\rtf.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "subprocess_runner",
            "description": "A context manager for temporarily overriding the default\n        :ref:`subprocess runner <Subprocess Runners>`.\n\n        :param runner: The new subprocess runner to use within the context.\n\n        .. code-block:: python\n\n            hook_caller = BuildBackendHookCaller(...)\n            with hook_caller.subprocess_runner(quiet_subprocess_runner):\n                ...\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\pyproject_hooks\\_impl.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "unverifiable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\cookies.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "origin_req_host",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\cookies.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "host",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\cookies.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "path_url",
            "description": "Build the path URL to use.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_encode_params",
            "description": "Encode parameters in a piece of data.\n\n        Will successfully encode parameters when passed as a dict or a list of\n        2-tuples. Order is retained if data is a list of 2-tuples but arbitrary\n        if parameters are supplied as a dict.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string"
                    }
                },
                "required": [
                    "data"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_encode_files",
            "description": "Build the body for a multipart/form-data request.\n\n        Will successfully encode files when passed as a dict or a list of\n        tuples. Order is retained if data is a list of tuples but arbitrary\n        if parameters are supplied as a dict.\n        The tuples may be 2-tuples (filename, fileobj), 3-tuples (filename, fileobj, contentype)\n        or 4-tuples (filename, fileobj, contentype, custom_headers).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "files": {
                        "type": "string"
                    },
                    "data": {
                        "type": "string"
                    }
                },
                "required": [
                    "files",
                    "data"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_idna_encoded_host",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "host": {
                        "type": "string"
                    }
                },
                "required": [
                    "host"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "ok",
            "description": "Returns True if :attr:`status_code` is less than 400, False if not.\n\n        This attribute checks if the status code of the response is between\n        400 and 600 to see if there was a client error or a server error. If\n        the status code is between 200 and 400, this will return True. This\n        is **not** a check to see if the response code is ``200 OK``.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_redirect",
            "description": "True if this Response is a well-formed HTTP redirect that could have\n        been processed automatically (by :meth:`Session.resolve_redirects`).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_permanent_redirect",
            "description": "True if this Response one of the permanent versions of redirect.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "next",
            "description": "Returns a PreparedRequest for the next request in a redirect chain, if there is one.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "apparent_encoding",
            "description": "The apparent encoding, provided by the charset_normalizer or chardet libraries.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "content",
            "description": "Content of the response, in bytes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "text",
            "description": "Content of the response, in unicode.\n\n        If Response.encoding is None, encoding will be guessed using\n        ``charset_normalizer`` or ``chardet``.\n\n        The encoding of the response content is determined based solely on HTTP\n        headers, following RFC 2616 to the letter. If you can take advantage of\n        non-HTTP knowledge to make a better guess at the encoding, you should\n        set ``r.encoding`` appropriately before accessing this property.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "links",
            "description": "Returns the parsed header links of the response, if any.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "atomic_open",
            "description": "Write a file to the disk in an atomic fashion",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filename": {
                        "type": "string"
                    }
                },
                "required": [
                    "filename"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\utils.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "set_environ",
            "description": "Set the environment variable 'env_name' to 'value'\n\n    Save previous value, yield, and then restore the previous value stored in\n    the environment variable 'env_name'.\n\n    If 'value' is None, do nothing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "env_name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "env_name",
                    "value"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\requests\\utils.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "state",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\resolvelib\\resolvers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__subclasshook__",
            "description": "Check if this class supports the rich render protocol.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\abc.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "left",
            "description": "Align a renderable to the left.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\align.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "center",
            "description": "Align a renderable to the center.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\align.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "right",
            "description": "Align a renderable to the right.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\align.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "cached_cell_len",
            "description": "Get the number of cells required to display text.\n\n    This method always caches, which may use up a lot of memory. It is recommended to use\n    `cell_len` over this method.\n\n    Args:\n        text (str): Text to display.\n\n    Returns:\n        int: Get the number of cells required to display text.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "Text to display."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "int": {
                        "type": "string",
                        "description": "Get the number of cells required to display text."
                    }
                },
                "required": [
                    "text",
                    "Returns",
                    "int"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\cells.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "get_character_cell_size",
            "description": "Get the cell size of a character.\n\n    Args:\n        character (str): A single character.\n\n    Returns:\n        int: Number of cells (0, 1 or 2) occupied by that character.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "character": {
                        "type": "string",
                        "description": "A single character."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "int": {
                        "type": "string",
                        "description": "Number of cells (0, 1 or 2) occupied by that character."
                    }
                },
                "required": [
                    "character",
                    "Returns",
                    "int"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\cells.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "hex",
            "description": "get the color triplet in CSS style.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\color_triplet.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "rgb",
            "description": "The color in RGB format.\n\n        Returns:\n            str: An rgb color, e.g. ``\"rgb(100,23,255)\"``.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\color_triplet.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "normalized",
            "description": "Convert components into floats between 0 and 1.\n\n        Returns:\n            Tuple[float, float, float]: A tuple of three normalized colour components.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\color_triplet.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ascii_only",
            "description": "Check if renderables should use ascii only.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "renderables",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_replace",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "process_renderables",
            "description": "Called with a list of objects to render.\n\n        This method can return a new list of renderables, or modify and return the same list.\n\n        Args:\n            renderables (List[ConsoleRenderable]): A number of renderable objects.\n\n        Returns:\n            List[ConsoleRenderable]: A replacement list of renderables.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "renderables": {
                        "type": "string",
                        "description": "A number of renderable objects."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "renderables",
                    "Returns"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "file",
            "description": "Get the file object to write to.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "file",
            "description": "Set a new file object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "file.setter"
            ]
        },
        {
            "name": "_buffer",
            "description": "Get a thread local buffer.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_buffer_index",
            "description": "Get a thread local buffer.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_buffer_index",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "_buffer_index.setter"
            ]
        },
        {
            "name": "_theme_stack",
            "description": "Get the thread local theme stack.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "color_system",
            "description": "Get color system string.\n\n        Returns:\n            Optional[str]: \"standard\", \"256\" or \"truecolor\".\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "encoding",
            "description": "Get the encoding of the console file, e.g. ``\"utf-8\"``.\n\n        Returns:\n            str: A standard encoding string.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_terminal",
            "description": "Check if the console is writing to a terminal.\n\n        Returns:\n            bool: True if the console writing to a device capable of\n            understanding terminal codes, otherwise False.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_dumb_terminal",
            "description": "Detect dumb terminal.\n\n        Returns:\n            bool: True if writing to a dumb terminal, otherwise False.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "options",
            "description": "Get default console options.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "size",
            "description": "Get the size of the console.\n\n        Returns:\n            ConsoleDimensions: A named tuple containing the dimensions.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "size",
            "description": "Set a new size for the terminal.\n\n        Args:\n            new_size (Tuple[int, int]): New width and height.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "new_size": {
                        "type": "string",
                        "description": "New width and height."
                    }
                },
                "required": [
                    "new_size"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "size.setter"
            ]
        },
        {
            "name": "width",
            "description": "Get the width of the console.\n\n        Returns:\n            int: The width (in characters) of the console.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "width",
            "description": "Set width.\n\n        Args:\n            width (int): New width.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "width": {
                        "type": "integer",
                        "description": "New width."
                    }
                },
                "required": [
                    "width"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "width.setter"
            ]
        },
        {
            "name": "height",
            "description": "Get the height of the console.\n\n        Returns:\n            int: The height (in lines) of the console.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "height",
            "description": "Set height.\n\n        Args:\n            height (int): new height.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "height": {
                        "type": "integer",
                        "description": "new height."
                    }
                },
                "required": [
                    "height"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "height.setter"
            ]
        },
        {
            "name": "is_alt_screen",
            "description": "Check if the alt screen was enabled.\n\n        Returns:\n            bool: True if the alt screen was enabled, otherwise False.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\containers.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\containers.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "bell",
            "description": "Ring the 'bell'.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "home",
            "description": "Move cursor to 'home' position.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "move",
            "description": "Move cursor relative to current position.\n\n        Args:\n            x (int): X offset.\n            y (int): Y offset.\n\n        Returns:\n            ~Control: Control object.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "move_to_column",
            "description": "Move to the given column, optionally add offset to row.\n\n        Returns:\n            x (int): absolute x (column)\n            y (int): optional y offset (row)\n\n        Returns:\n            ~Control: Control object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "move_to",
            "description": "Move cursor to absolute position.\n\n        Args:\n            x (int): x offset (column)\n            y (int): y offset (row)\n\n        Returns:\n            ~Control: Control object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "clear",
            "description": "Clear the screen.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "show_cursor",
            "description": "Show or hide the cursor.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "alt_screen",
            "description": "Enable or disable alt screen.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "title",
            "description": "Set the terminal window title\n\n        Args:\n            title (str): The new terminal window title\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "replace",
            "description": "Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\emoji.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "rich_proxied_file",
            "description": "Get proxied file.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\file_proxy.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "highlight",
            "description": "Apply highlighting in place to text.\n\n        Args:\n            text (~Text): A text object highlight.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "A text object highlight."
                    }
                },
                "required": [
                    "text"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\highlighter.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_data",
            "description": "Encodes a JSON object from arbitrary data.\n\n        Args:\n            data (Any): An object that may be encoded in to JSON\n            indent (Union[None, int, str], optional): Number of characters to indent by. Defaults to 2.\n            highlight (bool, optional): Enable highlighting. Defaults to True.\n            default (Callable, optional): Optional callable which will be called for objects that cannot be serialized. Defaults to None.\n            skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.\n            ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.\n            check_circular (bool, optional): Check for circular references. Defaults to True.\n            allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.\n            default (Callable, optional): A callable that converts values that can not be encoded\n                in to something that can be JSON encoded. Defaults to None.\n            sort_keys (bool, optional): Sort dictionary keys. Defaults to False.\n\n        Returns:\n            JSON: New JSON object from the given data.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\json.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_tree_icon",
            "description": "Get the icon (emoji) used in layout.tree",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\layout.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "divide",
            "description": "Divide a region amongst several child layouts.\n\n        Args:\n            children (Sequence(Layout)): A number of child layouts.\n            region (Region): A rectangular region to divide.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "A rectangular region to divide."
                    }
                },
                "required": [
                    "region"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\layout.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "is_started",
            "description": "Check if live display has been started.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\live.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "renderable",
            "description": "Get the renderable that is being displayed\n\n        Returns:\n            RenderableType: Displayed renderable.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\live.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "markup",
            "description": "Get the string representation of this tag.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\markup.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "span",
            "description": "Get difference between maximum and minimum.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\measure.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get",
            "description": "Get a measurement for a renderable.\n\n        Args:\n            console (~rich.console.Console): Console instance.\n            options (~rich.console.ConsoleOptions): Console options.\n            renderable (RenderableType): An object that may be rendered with Rich.\n\n        Raises:\n            errors.NotRenderableError: If the object is not renderable.\n\n        Returns:\n            Measurement: Measurement object containing range of character widths required to render the object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\measure.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "indent",
            "description": "Make padding instance to render an indent.\n\n        Args:\n            renderable (RenderableType): String or other renderable.\n            level (int): Number of characters to indent.\n\n        Returns:\n            Padding: A Padding instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\padding.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "unpack",
            "description": "Unpack padding specified in CSS style.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\padding.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "show",
            "description": "Show content in pager.\n\n        Args:\n            content (str): Content to be displayed.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Content to be displayed."
                    }
                },
                "required": [
                    "content"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\pager.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "match",
            "description": "Find a color from a palette that most closely matches a given color.\n\n        Args:\n            color (Tuple[int, int, int]): RGB components in range 0 > 255.\n\n        Returns:\n            int: Index of closes matching color.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "RGB components in range 0 > 255."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "int": {
                        "type": "string",
                        "description": "Index of closes matching color."
                    }
                },
                "required": [
                    "color",
                    "Returns",
                    "int"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\palette.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "fit",
            "description": "An alternative constructor that sets expand=False.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\panel.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_title",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\panel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_subtitle",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\panel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "expandable",
            "description": "Check if the line may be expanded.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\pretty.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "closed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\progress.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\progress.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\progress.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "open",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\progress.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "open",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\progress.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "render",
            "description": "Should return a renderable object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\progress.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "render_speed",
            "description": "Render the speed in iterations per second.\n\n        Args:\n            task (Task): A Task object.\n\n        Returns:\n            Text: Text object containing the task speed.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\progress.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "percentage_completed",
            "description": "Calculate percentage complete.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\progress_bar.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_get_pulse_segments",
            "description": "Get a list of segments to render a pulse animation.\n\n        Returns:\n            List[Segment]: A list of segments, one segment per character.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\progress_bar.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "ask",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\prompt.py",
            "decorator": [
                "classmethod",
                "overload"
            ]
        },
        {
            "name": "ask",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\prompt.py",
            "decorator": [
                "classmethod",
                "overload"
            ]
        },
        {
            "name": "ask",
            "description": "Shortcut to construct and run a prompt loop and return the result.\n\n        Example:\n            >>> filename = Prompt.ask(\"Enter a filename\")\n\n        Args:\n            prompt (TextType, optional): Prompt text. Defaults to \"\".\n            console (Console, optional): A Console instance or None to use global console. Defaults to None.\n            password (bool, optional): Enable password input. Defaults to False.\n            choices (List[str], optional): A list of valid choices. Defaults to None.\n            case_sensitive (bool, optional): Matching of choices should be case-sensitive. Defaults to True.\n            show_default (bool, optional): Show default in prompt. Defaults to True.\n            show_choices (bool, optional): Show choices in prompt. Defaults to True.\n            stream (TextIO, optional): Optional text file open for reading to get input. Defaults to None.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\prompt.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_input",
            "description": "Get input from user.\n\n        Args:\n            console (Console): Console instance.\n            prompt (TextType): Prompt text.\n            password (bool): Enable password entry.\n\n        Returns:\n            str: String from user.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\prompt.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\prompt.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\prompt.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "auto",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\repr.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "auto",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\repr.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "rich_repr",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\repr.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "rich_repr",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\repr.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "cell_length",
            "description": "The number of terminal cells required to display self.text.\n\n        Returns:\n            int: A number of cells.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_control",
            "description": "Check if the segment contains control codes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_split_cells",
            "description": "Split a segment in to two at a given cell position.\n\n        Note that splitting a double-width character, may result in that character turning\n        into two spaces.\n\n        Args:\n            segment (Segment): A segment to split.\n            cut (int): A cell position to cut on.\n\n        Returns:\n            A tuple of two segments.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod",
                "lru_cache"
            ]
        },
        {
            "name": "line",
            "description": "Make a new line segment.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "apply_style",
            "description": "Apply style(s) to an iterable of segments.\n\n        Returns an iterable of segments where the style is replaced by ``style + segment.style + post_style``.\n\n        Args:\n            segments (Iterable[Segment]): Segments to process.\n            style (Style, optional): Base style. Defaults to None.\n            post_style (Style, optional): Style to apply on top of segment style. Defaults to None.\n\n        Returns:\n            Iterable[Segments]: A new iterable of segments (possibly the same iterable).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "filter_control",
            "description": "Filter segments by ``is_control`` attribute.\n\n        Args:\n            segments (Iterable[Segment]): An iterable of Segment instances.\n            is_control (bool, optional): is_control flag to match in search.\n\n        Returns:\n            Iterable[Segment]: And iterable of Segment instances.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "split_lines",
            "description": "Split a sequence of segments in to a list of lines.\n\n        Args:\n            segments (Iterable[Segment]): Segments potentially containing line feeds.\n\n        Yields:\n            Iterable[List[Segment]]: Iterable of segment lists, one per line.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "split_and_crop_lines",
            "description": "Split segments in to lines, and crop lines greater than a given length.\n\n        Args:\n            segments (Iterable[Segment]): An iterable of segments, probably\n                generated from console.render.\n            length (int): Desired line length.\n            style (Style, optional): Style to use for any padding.\n            pad (bool): Enable padding of lines that are less than `length`.\n\n        Returns:\n            Iterable[List[Segment]]: An iterable of lines of segments.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "adjust_line_length",
            "description": "Adjust a line to a given width (cropping or padding as required).\n\n        Args:\n            segments (Iterable[Segment]): A list of segments in a single line.\n            length (int): The desired width of the line.\n            style (Style, optional): The style of padding if used (space on the end). Defaults to None.\n            pad (bool, optional): Pad lines with spaces if they are shorter than `length`. Defaults to True.\n\n        Returns:\n            List[Segment]: A line of segments with the desired length.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_line_length",
            "description": "Get the length of list of segments.\n\n        Args:\n            line (List[Segment]): A line encoded as a list of Segments (assumes no '\\\\\\\\n' characters),\n\n        Returns:\n            int: The length of the line.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_shape",
            "description": "Get the shape (enclosing rectangle) of a list of lines.\n\n        Args:\n            lines (List[List[Segment]]): A list of lines (no '\\\\\\\\n' characters).\n\n        Returns:\n            Tuple[int, int]: Width and height in characters.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "set_shape",
            "description": "Set the shape of a list of lines (enclosing rectangle).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style, optional): Style of any padding added.\n            new_lines (bool, optional): Padded lines should include \"\\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "align_top",
            "description": "Aligns lines to top (adds extra lines to bottom as required).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style): Style of any padding added.\n            new_lines (bool, optional): Padded lines should include \"\\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "lines": {
                        "type": "string",
                        "description": "A list of lines."
                    },
                    "width": {
                        "type": "integer",
                        "description": "Desired width."
                    },
                    "height": {
                        "type": "integer",
                        "description": "Desired height or None for no change."
                    },
                    "style": {
                        "type": "string",
                        "description": "Style of any padding added."
                    },
                    "new_lines": {
                        "type": "boolean",
                        "description": "Padded lines should include \"\\n\". Defaults to False."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "lines",
                    "width",
                    "style",
                    "Returns"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "align_bottom",
            "description": "Aligns render to bottom (adds extra lines above as required).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style): Style of any padding added. Defaults to None.\n            new_lines (bool, optional): Padded lines should include \"\\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "lines": {
                        "type": "string",
                        "description": "A list of lines."
                    },
                    "width": {
                        "type": "integer",
                        "description": "Desired width."
                    },
                    "height": {
                        "type": "integer",
                        "description": "Desired height or None for no change."
                    },
                    "style": {
                        "type": "string",
                        "description": "Style of any padding added. Defaults to None."
                    },
                    "new_lines": {
                        "type": "boolean",
                        "description": "Padded lines should include \"\\n\". Defaults to False."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "lines",
                    "width",
                    "style",
                    "Returns"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "align_middle",
            "description": "Aligns lines to middle (adds extra lines to above and below as required).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style): Style of any padding added.\n            new_lines (bool, optional): Padded lines should include \"\\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "lines": {
                        "type": "string",
                        "description": "A list of lines."
                    },
                    "width": {
                        "type": "integer",
                        "description": "Desired width."
                    },
                    "height": {
                        "type": "integer",
                        "description": "Desired height or None for no change."
                    },
                    "style": {
                        "type": "string",
                        "description": "Style of any padding added."
                    },
                    "new_lines": {
                        "type": "boolean",
                        "description": "Padded lines should include \"\\n\". Defaults to False."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "lines",
                    "width",
                    "style",
                    "Returns"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "simplify",
            "description": "Simplify an iterable of segments by combining contiguous segments with the same style.\n\n        Args:\n            segments (Iterable[Segment]): An iterable of segments.\n\n        Returns:\n            Iterable[Segment]: A possibly smaller iterable of segments that will render the same way.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "strip_links",
            "description": "Remove all links from an iterable of styles.\n\n        Args:\n            segments (Iterable[Segment]): An iterable segments.\n\n        Yields:\n            Segment: Segments with link removed.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "strip_styles",
            "description": "Remove all styles from an iterable of segments.\n\n        Args:\n            segments (Iterable[Segment]): An iterable segments.\n\n        Yields:\n            Segment: Segments with styles replace with None\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "remove_color",
            "description": "Remove all color from an iterable of segments.\n\n        Args:\n            segments (Iterable[Segment]): An iterable segments.\n\n        Yields:\n            Segment: Segments with colorless style.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "divide",
            "description": "Divides an iterable of segments in to portions.\n\n        Args:\n            cuts (Iterable[int]): Cell positions where to divide.\n\n        Yields:\n            [Iterable[List[Segment]]]: An iterable of Segments in List.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "renderable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\status.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "console",
            "description": "Get the Console used by the Status objects.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\status.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "null",
            "description": "Create an 'null' style, equivalent to Style(), but more performant.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_color",
            "description": "Create a new style with colors and no attributes.\n\n        Returns:\n            color (Optional[Color]): A (foreground) color, or None for no color. Defaults to None.\n            bgcolor (Optional[Color]): A (background) color, or None for no color. Defaults to None.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_meta",
            "description": "Create a new style with meta data.\n\n        Returns:\n            meta (Optional[Dict[str, Any]]): A dictionary of meta data. Defaults to None.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "on",
            "description": "Create a blank style with meta information.\n\n        Example:\n            style = Style.on(click=self.on_click)\n\n        Args:\n            meta (Optional[Dict[str, Any]], optional): An optional dict of meta information.\n            **handlers (Any): Keyword arguments are translated in to handlers.\n\n        Returns:\n            Style: A Style with meta information attached.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "link_id",
            "description": "Get a link id, used in ansi code for links.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "normalize",
            "description": "Normalize a style definition so that styles with the same effect have the same string\n        representation.\n\n        Args:\n            style (str): A style definition.\n\n        Returns:\n            str: Normal form of style definition.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod",
                "lru_cache"
            ]
        },
        {
            "name": "pick_first",
            "description": "Pick first non-None style.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "color",
            "description": "The foreground color or None if it is not set.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "bgcolor",
            "description": "The background color or None if it is not set.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "link",
            "description": "Link text, if set.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "transparent_background",
            "description": "Check if the style specified a transparent background.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "background_style",
            "description": "A Style with background only.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "meta",
            "description": "Get meta information (can not be changed after construction).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "without_color",
            "description": "Get a copy of the style with color removed.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parse",
            "description": "Parse a style definition.\n\n        Args:\n            style_definition (str): A string containing a style.\n\n        Raises:\n            errors.StyleSyntaxError: If the style definition syntax is invalid.\n\n        Returns:\n            `Style`: A Style instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod",
                "lru_cache"
            ]
        },
        {
            "name": "get_html_style",
            "description": "Get a CSS style rule.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "combine",
            "description": "Combine styles and get result.\n\n        Args:\n            styles (Iterable[Style]): Styles to combine.\n\n        Returns:\n            Style: A new style instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "chain",
            "description": "Combine styles from positional argument in to a single style.\n\n        Args:\n            *styles (Iterable[Style]): Styles to combine.\n\n        Returns:\n            Style: A new style instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "clear_meta_and_links",
            "description": "Get a copy of this style with link and meta information removed.\n\n        Returns:\n            Style: New style object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "_add",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "current",
            "description": "Get the Style at the top of the stack.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_style_for_token",
            "description": "Get a style for a given Pygments token.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\syntax.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_background_style",
            "description": "Get the background color.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\syntax.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_theme",
            "description": "Get a syntax theme instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\syntax.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_path",
            "description": "Construct a Syntax object from a file.\n\n        Args:\n            path (str): Path to file to highlight.\n            encoding (str): Encoding of file.\n            lexer (str | Lexer, optional): Lexer to use. If None, lexer will be auto-detected from path/file content.\n            theme (str, optional): Color theme, aka Pygments style (see https://pygments.org/docs/styles/#getting-a-list-of-available-styles). Defaults to \"emacs\".\n            dedent (bool, optional): Enable stripping of initial whitespace. Defaults to True.\n            line_numbers (bool, optional): Enable rendering of line numbers. Defaults to False.\n            start_line (int, optional): Starting number for line numbers. Defaults to 1.\n            line_range (Tuple[int, int], optional): If given should be a tuple of the start and end line to render.\n            highlight_lines (Set[int]): A set of line numbers to highlight.\n            code_width: Width of code to render (not including line numbers), or ``None`` to use all available width.\n            tab_size (int, optional): Size of tabs. Defaults to 4.\n            word_wrap (bool, optional): Enable word wrapping of code.\n            background_color (str, optional): Optional background color, or None to use theme color. Defaults to None.\n            indent_guides (bool, optional): Show indent guides. Defaults to False.\n            padding (PaddingDimensions): Padding to apply around the syntax. Defaults to 0 (no padding).\n\n        Returns:\n            [Syntax]: A Syntax object that may be printed to the console\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\syntax.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "guess_lexer",
            "description": "Guess the alias of the Pygments lexer to use based on a path and an optional string of code.\n        If code is supplied, it will use a combination of the code and the filename to determine the\n        best lexer to use. For example, if the file is ``index.html`` and the file contains Django\n        templating syntax, then \"html+django\" will be returned. If the file is ``index.html``, and no\n        templating language is used, the \"html\" lexer will be used. If no string of code\n        is supplied, the lexer will be chosen based on the file extension..\n\n        Args:\n             path (AnyStr): The path to the file containing the code you wish to know the lexer for.\n             code (str, optional): Optional string of code that will be used as a fallback if no lexer\n                is found for the supplied path.\n\n        Returns:\n            str: The name of the Pygments lexer that best matches the supplied path/code.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\syntax.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "lexer",
            "description": "The lexer for this syntax, or None if no lexer was found.\n\n        Tries to find the lexer by name if a string was passed to the constructor.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\syntax.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "default_lexer",
            "description": "A Pygments Lexer to use if one is not specified or invalid.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\syntax.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_numbers_column_width",
            "description": "Get the number of characters used to render the numbers column.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\syntax.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "cells",
            "description": "Get all cells in the column, not including header.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "flexible",
            "description": "Check if this column is flexible.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "grid",
            "description": "Get a table with no lines, headers, or footer.\n\n        Args:\n            *headers (Union[Column, str]): Column headers, either as a string, or :class:`~rich.table.Column` instance.\n            padding (PaddingDimensions, optional): Get padding around cells. Defaults to 0.\n            collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to True.\n            pad_edge (bool, optional): Enable padding around edges of table. Defaults to False.\n            expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.\n\n        Returns:\n            Table: A table instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "expand",
            "description": "Setting a non-None self.width implies expand.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "expand",
            "description": "Set expand.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "expand.setter"
            ]
        },
        {
            "name": "_extra_width",
            "description": "Get extra width to add to cell content.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "row_count",
            "description": "Get the current number of rows.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "padding",
            "description": "Get cell padding.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "padding",
            "description": "Set cell padding.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "padding.setter"
            ]
        },
        {
            "name": "_collapse_widths",
            "description": "Reduce widths so that the total is under max_width.\n\n        Args:\n            widths (List[int]): List of widths.\n            wrapable (List[bool]): List of booleans that indicate if a column may shrink.\n            max_width (int): Maximum width to reduce to.\n\n        Returns:\n            List[int]: A new list of widths.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "cell_len",
            "description": "Get the number of cells required to render this text.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "markup",
            "description": "Get console markup to render this Text.\n\n        Returns:\n            str: A string potentially creating markup tags.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_markup",
            "description": "Create Text instance from markup.\n\n        Args:\n            text (str): A string containing console markup.\n            style (Union[str, Style], optional): Base style for text. Defaults to \"\".\n            emoji (bool, optional): Also render emoji code. Defaults to True.\n            emoji_variant (str, optional): Optional emoji variant, either \"text\" or \"emoji\". Defaults to None.\n            justify (str, optional): Justify method: \"left\", \"center\", \"full\", \"right\". Defaults to None.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", \"ellipsis\". Defaults to None.\n            end (str, optional): Character to end text with. Defaults to \"\\\\\\\\n\".\n\n        Returns:\n            Text: A Text instance with markup rendered.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_ansi",
            "description": "Create a Text object from a string containing ANSI escape codes.\n\n        Args:\n            text (str): A string containing escape codes.\n            style (Union[str, Style], optional): Base style for text. Defaults to \"\".\n            justify (str, optional): Justify method: \"left\", \"center\", \"full\", \"right\". Defaults to None.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", \"ellipsis\". Defaults to None.\n            no_wrap (bool, optional): Disable text wrapping, or None for default. Defaults to None.\n            end (str, optional): Character to end text with. Defaults to \"\\\\\\\\n\".\n            tab_size (int): Number of spaces per tab, or ``None`` to use ``console.tab_size``. Defaults to None.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "styled",
            "description": "Construct a Text instance with a pre-applied styled. A style applied in this way won't be used\n        to pad the text when it is justified.\n\n        Args:\n            text (str): A string containing console markup.\n            style (Union[str, Style]): Style to apply to the text. Defaults to \"\".\n            justify (str, optional): Justify method: \"left\", \"center\", \"full\", \"right\". Defaults to None.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", \"ellipsis\". Defaults to None.\n\n        Returns:\n            Text: A text instance with a style applied to the entire string.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "assemble",
            "description": "Construct a text instance by combining a sequence of strings with optional styles.\n        The positional arguments should be either strings, or a tuple of string + style.\n\n        Args:\n            style (Union[str, Style], optional): Base style for text. Defaults to \"\".\n            justify (str, optional): Justify method: \"left\", \"center\", \"full\", \"right\". Defaults to None.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", \"ellipsis\". Defaults to None.\n            no_wrap (bool, optional): Disable text wrapping, or None for default. Defaults to None.\n            end (str, optional): Character to end text with. Defaults to \"\\\\\\\\n\".\n            tab_size (int): Number of spaces per tab, or ``None`` to use ``console.tab_size``. Defaults to None.\n            meta (Dict[str, Any], optional). Meta data to apply to text, or None for no meta data. Default to None\n\n        Returns:\n            Text: A new text instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "plain",
            "description": "Get the text as a single string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "plain",
            "description": "Set the text to a new value.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "plain.setter"
            ]
        },
        {
            "name": "spans",
            "description": "Get a reference to the internal list of spans.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "spans",
            "description": "Set spans.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "spans.setter"
            ]
        },
        {
            "name": "config",
            "description": "Get contents of a config file for this theme.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\theme.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_file",
            "description": "Load a theme from a text mode file.\n\n        Args:\n            config_file (IO[str]): An open conf file.\n            source (str, optional): The filename of the open file. Defaults to None.\n            inherit (bool, optional): Inherit default styles. Defaults to True.\n\n        Returns:\n            Theme: A New theme instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\theme.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "read",
            "description": "Read a theme from a path.\n\n        Args:\n            path (str): Path to a config file readable by Python configparser module.\n            inherit (bool, optional): Inherit default styles. Defaults to True.\n            encoding (str, optional): Encoding of the config file. Defaults to None.\n\n        Returns:\n            Theme: A new theme instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\theme.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_exception",
            "description": "Create a traceback from exception info\n\n        Args:\n            exc_type (Type[BaseException]): Exception type.\n            exc_value (BaseException): Exception value.\n            traceback (TracebackType): Python Traceback object.\n            width (Optional[int], optional): Number of characters used to traceback. Defaults to 100.\n            code_width (Optional[int], optional): Number of code characters used to traceback. Defaults to 88.\n            extra_lines (int, optional): Additional lines of code to render. Defaults to 3.\n            theme (str, optional): Override pygments theme used in traceback.\n            word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.\n            show_locals (bool, optional): Enable display of local variables. Defaults to False.\n            indent_guides (bool, optional): Enable indent guides in code and locals. Defaults to True.\n            locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n                Defaults to 10.\n            locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.\n            locals_hide_dunder (bool, optional): Hide locals prefixed with double underscore. Defaults to True.\n            locals_hide_sunder (bool, optional): Hide locals prefixed with single underscore. Defaults to False.\n            suppress (Iterable[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.\n            max_frames (int): Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100.\n\n        Returns:\n            Traceback: A Traceback instance that may be printed.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\traceback.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "extract",
            "description": "Extract traceback information.\n\n        Args:\n            exc_type (Type[BaseException]): Exception type.\n            exc_value (BaseException): Exception value.\n            traceback (TracebackType): Python Traceback object.\n            show_locals (bool, optional): Enable display of local variables. Defaults to False.\n            locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n                Defaults to 10.\n            locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.\n            locals_hide_dunder (bool, optional): Hide locals prefixed with double underscore. Defaults to True.\n            locals_hide_sunder (bool, optional): Hide locals prefixed with single underscore. Defaults to False.\n\n        Returns:\n            Trace: A Trace instance which you can use to construct a `Traceback`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\traceback.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_render_syntax_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\traceback.py",
            "decorator": [
                "group"
            ]
        },
        {
            "name": "top",
            "description": "Get top of stack.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\_stack.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "timer",
            "description": "print the elapsed time. (only used in debugging)",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\_timer.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "from_param",
            "description": "Converts a WindowsCoordinates into a wintypes _COORD structure.\n        This classmethod is internally called by ctypes to perform the conversion.\n\n        Args:\n            value (WindowsCoordinates): The input coordinates to convert.\n\n        Returns:\n            wintypes._COORD: The converted coordinates struct.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\_win32_console.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "cursor_position",
            "description": "Returns the current position of the cursor (0-based)\n\n        Returns:\n            WindowsCoordinates: The current cursor position.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\_win32_console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "screen_size",
            "description": "Returns the current size of the console screen buffer, in character columns and rows\n\n        Returns:\n            WindowsCoordinates: The width and height of the screen as WindowsCoordinates.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\rich\\_win32_console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "cached_tz",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\tomli\\_re.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "__class__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property#type:ignore[misc]"
            ]
        },
        {
            "name": "get_ca_certs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "get_ca_certs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "get_ca_certs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "check_hostname",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "check_hostname",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "check_hostname.setter"
            ]
        },
        {
            "name": "hostname_checks_common_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "hostname_checks_common_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "hostname_checks_common_name.setter"
            ]
        },
        {
            "name": "keylog_filename",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "keylog_filename",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "keylog_filename.setter"
            ]
        },
        {
            "name": "maximum_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "maximum_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "maximum_version.setter"
            ]
        },
        {
            "name": "minimum_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "minimum_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "minimum_version.setter"
            ]
        },
        {
            "name": "options",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "options",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "options.setter"
            ]
        },
        {
            "name": "post_handshake_auth",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "post_handshake_auth",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "post_handshake_auth.setter"
            ]
        },
        {
            "name": "protocol",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "security_level",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "verify_flags",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "verify_flags",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "verify_flags.setter"
            ]
        },
        {
            "name": "verify_mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "verify_mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "verify_mode.setter"
            ]
        },
        {
            "name": "_configure_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_macos.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "_configure_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_openssl.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "_configure_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\truststore\\_windows.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "host",
            "description": "\n        Getter method to remove any trailing dots that indicate the hostname is an FQDN.\n\n        In general, SSL certificates don't include the trailing dot indicating a\n        fully-qualified domain name, and thus, they don't validate properly when\n        checked against a domain name that includes the dot. In addition, some\n        servers may not expect to receive the trailing dot when provided.\n\n        However, the hostname with trailing dot is critical to DNS resolution; doing a\n        lookup with the trailing dot will properly only resolve the appropriate FQDN,\n        whereas a lookup without a trailing dot will search the system's search domain\n        list. Thus, it's important to keep the original host around for use only in\n        those cases where it's appropriate (i.e., when doing DNS lookup to establish the\n        actual TCP connection across which we're going to send HTTP requests).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\connection.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "host",
            "description": "\n        Setter for the `host` property.\n\n        We assume that only urllib3 uses the _dns_host attribute; httplib itself\n        only uses `host`, and it seems reasonable that other libraries follow suit.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\connection.py",
            "decorator": [
                "host.setter"
            ]
        },
        {
            "name": "from_tuples",
            "description": "\n        A :class:`~urllib3.fields.RequestField` factory from old-style tuple parameters.\n\n        Supports constructing :class:`~urllib3.fields.RequestField` from\n        parameter of key/value strings AND key/filetuple. A filetuple is a\n        (filename, data, MIME type) tuple where the MIME type is optional.\n        For example::\n\n            'foo': 'bar',\n            'fakefile': ('foofile.txt', 'contents of foofile'),\n            'realfile': ('barfile.txt', open('realfile').read()),\n            'typedfile': ('bazfile.bin', open('bazfile').read(), 'image/jpeg'),\n            'nonamefile': 'contents of nonamefile field',\n\n        Field names and filenames must be unicode.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "fieldname": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "fieldname",
                    "value"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\fields.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "connection",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_error_catcher",
            "description": "\n        Catch low-level python exceptions, instead re-raising urllib3\n        variants, so that low-level exceptions are not leaked in the\n        high-level api.\n\n        On exit, release the connection back to the pool.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\response.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "from_httplib",
            "description": "\n        Given an :class:`http.client.HTTPResponse` instance ``r``, return a\n        corresponding :class:`urllib3.response.HTTPResponse` object.\n\n        Remaining parameters are passed to the HTTPResponse constructor, along\n        with ``original_response=r``.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ResponseCls": {
                        "type": "string"
                    },
                    "r": {
                        "type": "string"
                    }
                },
                "required": [
                    "ResponseCls",
                    "r"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\response.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "closed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_httplib",
            "description": "Read headers from a Python 2 httplib message object.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "message"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\_collections.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "options",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\contrib\\pyopenssl.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "options",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\contrib\\pyopenssl.py",
            "decorator": [
                "options.setter"
            ]
        },
        {
            "name": "verify_mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\contrib\\pyopenssl.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "verify_mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\contrib\\pyopenssl.py",
            "decorator": [
                "verify_mode.setter"
            ]
        },
        {
            "name": "_raise_on_error",
            "description": "\n        A context manager that can be used to wrap calls that do I/O from\n        SecureTransport. If any of the I/O callbacks hit an exception, this\n        context manager will correctly propagate the exception after the fact.\n        This avoids silently swallowing those exceptions.\n\n        It also correctly forces the socket closed.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "check_hostname",
            "description": "\n        SecureTransport cannot have its hostname checking disabled. For more,\n        see the comment on getpeercert() in this file.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "check_hostname",
            "description": "\n        SecureTransport cannot have its hostname checking disabled. For more,\n        see the comment on getpeercert() in this file.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py",
            "decorator": [
                "check_hostname.setter"
            ]
        },
        {
            "name": "options",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "options",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py",
            "decorator": [
                "options.setter"
            ]
        },
        {
            "name": "verify_mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "verify_mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py",
            "decorator": [
                "verify_mode.setter"
            ]
        },
        {
            "name": "__prepare__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "this_bases": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "name",
                    "this_bases"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\packages\\six.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "alive",
            "description": "Whether finalizer is alive",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\packages\\backports\\weakref_finalize.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "atexit",
            "description": "Whether finalizer should be called at exit",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\packages\\backports\\weakref_finalize.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "atexit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\packages\\backports\\weakref_finalize.py",
            "decorator": [
                "atexit.setter"
            ]
        },
        {
            "name": "_select_for_exit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\packages\\backports\\weakref_finalize.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_exitfunc",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\packages\\backports\\weakref_finalize.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "DEFAULT_METHOD_WHITELIST",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "DEFAULT_METHOD_WHITELIST",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "value"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py",
            "decorator": [
                "DEFAULT_METHOD_WHITELIST.setter"
            ]
        },
        {
            "name": "DEFAULT_REDIRECT_HEADERS_BLACKLIST",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "DEFAULT_REDIRECT_HEADERS_BLACKLIST",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "value"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py",
            "decorator": [
                "DEFAULT_REDIRECT_HEADERS_BLACKLIST.setter"
            ]
        },
        {
            "name": "BACKOFF_MAX",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "BACKOFF_MAX",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "value"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py",
            "decorator": [
                "BACKOFF_MAX.setter"
            ]
        },
        {
            "name": "from_int",
            "description": "Backwards-compatibility for the old retries format.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "retries": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "retries"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_validate_ssl_context_for_tls_in_tls",
            "description": "\n        Raises a ProxySchemeUnsupported if the provided ssl_context can't be used\n        for TLS in TLS.\n\n        The only requirement is that the ssl_context provides the 'wrap_bio'\n        methods.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ssl_context": {
                        "type": "string"
                    }
                },
                "required": [
                    "ssl_context"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\ssltransport.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "resolve_default_timeout",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "timeout": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "timeout"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\timeout.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_validate_timeout",
            "description": "Check that a timeout attribute is valid.\n\n        :param value: The timeout value to validate\n        :param name: The name of the timeout attribute to validate. This is\n            used to specify in error messages.\n        :return: The validated and casted version of the given value.\n        :raises ValueError: If it is a numeric value less than or equal to\n            zero, or the type is not an integer, float, or None.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "value",
                    "name"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\timeout.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_float",
            "description": "Create a new Timeout from a legacy timeout value.\n\n        The timeout value used by httplib.py sets the same timeout on the\n        connect(), and recv() socket requests. This creates a :class:`Timeout`\n        object that sets the individual timeouts to the ``timeout`` value\n        passed to this function.\n\n        :param timeout: The legacy timeout value.\n        :type timeout: integer, float, sentinel default object, or None\n        :return: Timeout object\n        :rtype: :class:`Timeout`\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "timeout": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "timeout"
                ]
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\timeout.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "connect_timeout",
            "description": "Get the value to use when setting a connection timeout.\n\n        This will be a positive float or integer, the value None\n        (never timeout), or the default system timeout.\n\n        :return: Connect timeout.\n        :rtype: int, float, :attr:`Timeout.DEFAULT_TIMEOUT` or None\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\timeout.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "read_timeout",
            "description": "Get the value for the read timeout.\n\n        This assumes some time has elapsed in the connection timeout and\n        computes the read timeout appropriately.\n\n        If self.total is set, the read timeout is dependent on the amount of\n        time taken by the connect timeout. If the connection time has not been\n        established, a :exc:`~urllib3.exceptions.TimeoutStateError` will be\n        raised.\n\n        :return: Value to use for the read timeout.\n        :rtype: int, float, :attr:`Timeout.DEFAULT_TIMEOUT` or None\n        :raises urllib3.exceptions.TimeoutStateError: If :meth:`start_connect`\n            has not yet been called on this object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\timeout.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "hostname",
            "description": "For backwards-compatibility with urlparse. We're nice like that.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\url.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "request_uri",
            "description": "Absolute path including the query string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\url.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "netloc",
            "description": "Network location including host and port",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\url.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "url",
            "description": "\n        Convert self into a url\n\n        This function should more or less round-trip with :func:`.parse_url`. The\n        returned url may not be exactly the same as the url inputted to\n        :func:`.parse_url`, but it should be equivalent by the RFC (e.g., urls\n        with a blank port will have : removed).\n\n        Example: ::\n\n            >>> U = parse_url('http://google.com/mail/')\n            >>> U.url\n            'http://google.com/mail/'\n            >>> Url('http', 'username:password', 'host.com', 80,\n            ... '/path', 'query', 'fragment').url\n            'http://username:password@host.com:80/path?query#fragment'\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\lib\\python3.12\\site-packages\\pip\\_vendor\\urllib3\\util\\url.py",
            "decorator": [
                "property"
            ]
        }
    ]
}