{
    "tools": [
        {
            "name": "decorated_thinking",
            "description": "Function decorated with the progress indicator.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\thinking_progress_demo.py",
            "decorator": [
                "with_progress"
            ]
        },
        {
            "name": "decorated_thinking",
            "description": "Function decorated with the spinner indicator.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\thinking_spinner_demo.py",
            "decorator": [
                "with_spinner"
            ]
        },
        {
            "name": "add",
            "description": "Adds a new calendar event.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "calendar_app.command"
            ]
        },
        {
            "name": "list",
            "description": "Lists all calendar events.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "calendar_app.command"
            ]
        },
        {
            "name": "search",
            "description": "Searches calendar events for a keyword.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "calendar_app.command"
            ]
        },
        {
            "name": "delete",
            "description": "Deletes a calendar event by filename.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "calendar_app.command"
            ]
        },
        {
            "name": "add",
            "description": "Adds a new note.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "notes_app.command"
            ]
        },
        {
            "name": "list",
            "description": "Lists all notes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "notes_app.command"
            ]
        },
        {
            "name": "search",
            "description": "Searches notes for a keyword.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "notes_app.command"
            ]
        },
        {
            "name": "delete",
            "description": "Deletes a note by ID.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "notes_app.command"
            ]
        },
        {
            "name": "add",
            "description": "Adds a new reminder.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "reminders_app.command"
            ]
        },
        {
            "name": "list",
            "description": "Lists all reminders.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "reminders_app.command"
            ]
        },
        {
            "name": "search",
            "description": "Searches reminders for a keyword.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "reminders_app.command"
            ]
        },
        {
            "name": "delete",
            "description": "Deletes a reminder by ID.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "reminders_app.command"
            ]
        },
        {
            "name": "add",
            "description": "Adds a new memory.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "memory_app.command"
            ]
        },
        {
            "name": "search",
            "description": "Searches memories by semantic similarity.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "memory_app.command"
            ]
        },
        {
            "name": "get",
            "description": "Gets a specific memory by ID.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "memory_app.command"
            ]
        },
        {
            "name": "delete",
            "description": "Deletes a memory by ID.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "memory_app.command"
            ]
        },
        {
            "name": "clear",
            "description": "Clears all memories.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "memory_app.command"
            ]
        },
        {
            "name": "start_mcp_server",
            "description": "Start the Intuit MCP server.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "mcp_cli_app.command"
            ]
        },
        {
            "name": "list_mcp_server_tools",
            "description": "List available tools on the local MCP server in a human-readable format.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "mcp_cli_app.command"
            ]
        },
        {
            "name": "chat",
            "description": "Start the Intuit assistant in interactive mode or process a single query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "app.command"
            ]
        },
        {
            "name": "voice",
            "description": "Start the Intuit assistant in voice mode.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\main.py",
            "decorator": [
                "app.command"
            ]
        },
        {
            "name": "calendar_tool",
            "description": "Calendar management tool",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "calendar_add",
            "description": "\n    Add a new calendar event.\n\n    Args:\n        event: Details of the calendar event to add\n\n    Returns:\n        Confirmation message with the event ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "event": {
                        "type": "string",
                        "description": "Details of the calendar event to add"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "event",
                    "Returns"
                ]
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "calendar_list",
            "description": "Lists all calendar events.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "calendar_search",
            "description": "Searches calendar events for a keyword.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "calendar_delete",
            "description": "Deletes a calendar event by filename.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "notes_tool",
            "description": "Notes management tool",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "notes_add",
            "description": "Adds a new note.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "notes_list",
            "description": "Lists all notes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "notes_search",
            "description": "Searches notes for a keyword.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "notes_delete",
            "description": "Deletes a note by ID.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "reminders_tool",
            "description": "Reminders management tool",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "reminders_add",
            "description": "\n    Adds a new reminder.\n    \n    Args:\n        content: Content of the reminder\n        reminder_time: Optional reminder time in ISO 8601 format (e.g., '2025-12-31T23:59:59')\n        \n    Returns:\n        Confirmation message with the reminder ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Content of the reminder"
                    },
                    "reminder_time": {
                        "type": "string",
                        "description": "Optional reminder time in ISO 8601 format (e.g., '2025-12-31T23:59:59')"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "content",
                    "reminder_time",
                    "Returns"
                ]
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "reminders_list",
            "description": "Lists all reminders.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "reminders_search",
            "description": "Searches reminders for a keyword.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "reminders_delete",
            "description": "Deletes a reminder by ID.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "weather_tool",
            "description": "Weather information tool",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "weather_get",
            "description": "\n    Get weather information for a location.\n    \n    Args:\n        location: The location to get weather for (e.g., 'London, UK' or 'New York, NY')\n        \n    Returns:\n        Weather information for the location\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "location": {
                        "type": "string",
                        "description": "The location to get weather for (e.g., 'London, UK' or 'New York, NY')"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "location",
                    "Returns"
                ]
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "web_search_tool",
            "description": "Web search tool",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "web_search",
            "description": "\n    Search the web for information.\n    \n    Args:\n        query: The search query\n        max_results: Maximum number of results to return (default: 5)\n        \n    Returns:\n        Search results\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "The search query"
                    },
                    "max_results": {
                        "type": "string",
                        "description": "Maximum number of results to return (default: 5)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "query",
                    "max_results",
                    "Returns"
                ]
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "filesystem_tool",
            "description": "Filesystem access tool",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "filesystem_list",
            "description": "\n    List directory contents.\n    \n    Args:\n        path: The path to list\n        \n    Returns:\n        Directory contents\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The path to list"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "path",
                    "Returns"
                ]
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "filesystem_read",
            "description": "\n    Read file contents.\n    \n    Args:\n        path: The path to read\n        \n    Returns:\n        File contents\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The path to read"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "path",
                    "Returns"
                ]
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "filesystem_write",
            "description": "\n    Write content to file.\n    \n    Args:\n        path: The path to write to\n        content: The content to write\n        \n    Returns:\n        Confirmation message\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The path to write to"
                    },
                    "content": {
                        "type": "string",
                        "description": "The content to write"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "path",
                    "content",
                    "Returns"
                ]
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "filesystem_search",
            "description": "\n    Search for files by content.\n    \n    Args:\n        path: The path to search in\n        query: The search query\n        \n    Returns:\n        Search results\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The path to search in"
                    },
                    "query": {
                        "type": "string",
                        "description": "The search query"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "path",
                    "query",
                    "Returns"
                ]
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "take_screenshot",
            "description": "\n    Take a screenshot of the user's screen and return it as an image.\n    Use this tool anytime the user wants you to look at something they're doing.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "hackernews_tool",
            "description": "Hacker News information tool",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "hackernews_top",
            "description": "\n    Get top stories from Hacker News.\n    \n    Args:\n        limit: Maximum number of stories to return (default: 10)\n        \n    Returns:\n        Top stories from Hacker News\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of stories to return (default: 10)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "limit",
                    "Returns"
                ]
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "hackernews_new",
            "description": "\n    Get new stories from Hacker News.\n    \n    Args:\n        limit: Maximum number of stories to return (default: 10)\n        \n    Returns:\n        New stories from Hacker News\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of stories to return (default: 10)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "limit",
                    "Returns"
                ]
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "hackernews_best",
            "description": "\n    Get best stories from Hacker News.\n    \n    Args:\n        limit: Maximum number of stories to return (default: 10)\n        \n    Returns:\n        Best stories from Hacker News\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of stories to return (default: 10)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "limit",
                    "Returns"
                ]
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "hackernews_story",
            "description": "\n    Get details of a specific Hacker News story.\n    \n    Args:\n        item_id: ID of the story to retrieve\n        \n    Returns:\n        Details of the specified Hacker News story\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "item_id": {
                        "type": "string",
                        "description": "ID of the story to retrieve"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "item_id",
                    "Returns"
                ]
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "memory_add",
            "description": "\n    Add a memory to the store.\n    \n    Args:\n        content: The content of the memory\n        importance: Importance level (1-10)\n        tags: Optional tags for categorizing the memory\n        \n    Returns:\n        Memory ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "The content of the memory"
                    },
                    "importance": {
                        "type": "string",
                        "description": "Importance level (1-10)"
                    },
                    "tags": {
                        "type": "string",
                        "description": "Optional tags for categorizing the memory"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "content",
                    "importance",
                    "tags",
                    "Returns"
                ]
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "memory_search",
            "description": "\n    Search memories by semantic similarity.\n    \n    Args:\n        query: The search query\n        limit: Maximum number of results to return (default: 5)\n        \n    Returns:\n        Search results\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "The search query"
                    },
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of results to return (default: 5)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "query",
                    "limit",
                    "Returns"
                ]
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "memory_get",
            "description": "\n    Get a specific memory by ID.\n    \n    Args:\n        memory_id: The ID of the memory to retrieve\n        \n    Returns:\n        Memory content\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "memory_id": {
                        "type": "string",
                        "description": "The ID of the memory to retrieve"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "memory_id",
                    "Returns"
                ]
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "memory_delete",
            "description": "\n    Delete a specific memory by ID.\n    \n    Args:\n        memory_id: The ID of the memory to delete\n        \n    Returns:\n        Confirmation message\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "memory_id": {
                        "type": "string",
                        "description": "The ID of the memory to delete"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "memory_id",
                    "Returns"
                ]
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "memory_clear",
            "description": "\n    Clear all memories.\n    \n    Returns:\n        Confirmation message\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "mcp_server.tool"
            ]
        },
        {
            "name": "main",
            "description": "MCP Server CLI.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "cli_app.callback"
            ]
        },
        {
            "name": "start",
            "description": "Start the MCP server.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "cli_app.command"
            ]
        },
        {
            "name": "status",
            "description": "Check the MCP server status.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "cli_app.command"
            ]
        },
        {
            "name": "list_tools",
            "description": "List available tools on the MCP server in a human-readable format.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\intuit\\mcp_server.py",
            "decorator": [
                "cli_app.command"
            ]
        },
        {
            "name": "_arun",
            "description": "\n        Execute the tool's functionality asynchronously.\n        \n        Args:\n            **kwargs: Tool-specific arguments\n            \n        Returns:\n            Dict containing the tool's output\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "Returns"
                ]
            },
            "file": "src\\intuit\\tools\\basetool.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "mock_env_vars",
            "description": "Set up mock environment variables.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monkeypatch": {
                        "type": "string"
                    }
                },
                "required": [
                    "monkeypatch"
                ]
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_web_search_tool",
            "description": "Create a mock web search tool.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_gmail_tool",
            "description": "Create a mock Gmail tool.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_weather_tool",
            "description": "Create a mock weather tool.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_vector_store",
            "description": "Create a mock vector store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_filesystem_tool",
            "description": "Create a mock filesystem tool.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_store"
                ]
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_agent",
            "description": "Create a mock agent.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_data_dir",
            "description": "Create a temporary directory with test files.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "tmp_path"
                ]
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_create_memory_manager",
            "description": "Mock the create_memory_manager function.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\memory\\test_manager.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_memory_store",
            "description": "Create a mock memory store for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\memory\\test_manager.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_init",
            "description": "Test initialization of the memory manager.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_memory_store": {
                        "type": "string"
                    },
                    "mock_create_memory_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_memory_store",
                    "mock_create_memory_manager"
                ]
            },
            "file": "tests\\memory\\test_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_process_conversation",
            "description": "Test processing a conversation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_memory_store": {
                        "type": "string"
                    },
                    "mock_create_memory_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_memory_store",
                    "mock_create_memory_manager"
                ]
            },
            "file": "tests\\memory\\test_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_process_conversation_error",
            "description": "Test error handling when processing a conversation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_memory_store": {
                        "type": "string"
                    },
                    "mock_create_memory_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_memory_store",
                    "mock_create_memory_manager"
                ]
            },
            "file": "tests\\memory\\test_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_consolidate_memories",
            "description": "Test consolidating memories.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_memory_store": {
                        "type": "string"
                    },
                    "mock_create_memory_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_memory_store",
                    "mock_create_memory_manager"
                ]
            },
            "file": "tests\\memory\\test_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_consolidate_memories_error",
            "description": "Test error handling when consolidating memories.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_memory_store": {
                        "type": "string"
                    },
                    "mock_create_memory_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_memory_store",
                    "mock_create_memory_manager"
                ]
            },
            "file": "tests\\memory\\test_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_summarize_conversation",
            "description": "Test summarizing a conversation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_memory_store": {
                        "type": "string"
                    },
                    "mock_create_memory_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_memory_store",
                    "mock_create_memory_manager"
                ]
            },
            "file": "tests\\memory\\test_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_summarize_conversation_error",
            "description": "Test error handling when summarizing a conversation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_memory_store": {
                        "type": "string"
                    },
                    "mock_create_memory_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_memory_store",
                    "mock_create_memory_manager"
                ]
            },
            "file": "tests\\memory\\test_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_background_tasks",
            "description": "Test running background tasks.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_memory_store": {
                        "type": "string"
                    },
                    "mock_create_memory_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_memory_store",
                    "mock_create_memory_manager"
                ]
            },
            "file": "tests\\memory\\test_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_background_tasks_error",
            "description": "Test error handling in background tasks.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_memory_store": {
                        "type": "string"
                    },
                    "mock_create_memory_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_memory_store",
                    "mock_create_memory_manager"
                ]
            },
            "file": "tests\\memory\\test_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_create_memory_store_manager",
            "description": "Mock the create_memory_store_manager function.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\memory\\test_store.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "memory_store",
            "description": "Create a memory store for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_create_memory_store_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_create_memory_store_manager"
                ]
            },
            "file": "tests\\memory\\test_store.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_init",
            "description": "Test initialization of the memory store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\memory\\test_store.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_add_memory",
            "description": "Test adding a memory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "memory_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "memory_store"
                ]
            },
            "file": "tests\\memory\\test_store.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_add_memory_error",
            "description": "Test error handling when adding a memory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "memory_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "memory_store"
                ]
            },
            "file": "tests\\memory\\test_store.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_memories",
            "description": "Test searching memories.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "memory_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "memory_store"
                ]
            },
            "file": "tests\\memory\\test_store.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_memories_error",
            "description": "Test error handling when searching memories.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "memory_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "memory_store"
                ]
            },
            "file": "tests\\memory\\test_store.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_memory",
            "description": "Test getting a memory by ID.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "memory_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "memory_store"
                ]
            },
            "file": "tests\\memory\\test_store.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_memory_error",
            "description": "Test error handling when getting a memory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "memory_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "memory_store"
                ]
            },
            "file": "tests\\memory\\test_store.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_memory",
            "description": "Test deleting a memory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "memory_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "memory_store"
                ]
            },
            "file": "tests\\memory\\test_store.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_memory_error",
            "description": "Test error handling when deleting a memory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "memory_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "memory_store"
                ]
            },
            "file": "tests\\memory\\test_store.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_clear_memories",
            "description": "Test clearing all memories.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "memory_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "memory_store"
                ]
            },
            "file": "tests\\memory\\test_store.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_clear_memories_error",
            "description": "Test error handling when clearing memories.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "memory_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "memory_store"
                ]
            },
            "file": "tests\\memory\\test_store.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_memory",
            "description": "Test updating a memory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "memory_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "memory_store"
                ]
            },
            "file": "tests\\memory\\test_store.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_memory_error",
            "description": "Test error handling when updating a memory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "memory_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "memory_store"
                ]
            },
            "file": "tests\\memory\\test_store.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_redis_backend",
            "description": "Test initialization with Redis backend.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\memory\\test_store.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_memory_store",
            "description": "Create a mock memory store for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\memory\\test_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "calendar_tool",
            "description": "Fixture to create a CalendarTool instance with a temporary data directory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "tmp_path"
                ]
            },
            "file": "tests\\tools\\test_calendar.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_vector_store",
            "description": "Create a mock vector store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\tools\\test_filesystem.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "filesystem_tool",
            "description": "Create a filesystem tool with a mock vector store.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_store"
                ]
            },
            "file": "tests\\tools\\test_filesystem.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_data_dir",
            "description": "Create a temporary directory with test files.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "tmp_path"
                ]
            },
            "file": "tests\\tools\\test_filesystem.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_filesystem_tool_initialization",
            "description": "Test that the filesystem tool initializes correctly.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filesystem_tool": {
                        "type": "string"
                    },
                    "mock_vector_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "filesystem_tool",
                    "mock_vector_store"
                ]
            },
            "file": "tests\\tools\\test_filesystem.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_file_info",
            "description": "Test the _get_file_info method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filesystem_tool": {
                        "type": "string"
                    },
                    "test_data_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "filesystem_tool",
                    "test_data_dir"
                ]
            },
            "file": "tests\\tools\\test_filesystem.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_directory",
            "description": "Test the _list_directory method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filesystem_tool": {
                        "type": "string"
                    },
                    "test_data_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "filesystem_tool",
                    "test_data_dir"
                ]
            },
            "file": "tests\\tools\\test_filesystem.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_directory_recursive",
            "description": "Test the _list_directory method with recursive=True.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filesystem_tool": {
                        "type": "string"
                    },
                    "test_data_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "filesystem_tool",
                    "test_data_dir"
                ]
            },
            "file": "tests\\tools\\test_filesystem.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_read_file",
            "description": "Test the _read_file method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filesystem_tool": {
                        "type": "string"
                    },
                    "test_data_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "filesystem_tool",
                    "test_data_dir"
                ]
            },
            "file": "tests\\tools\\test_filesystem.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_write_file",
            "description": "Test the _write_file method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filesystem_tool": {
                        "type": "string"
                    },
                    "test_data_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "filesystem_tool",
                    "test_data_dir"
                ]
            },
            "file": "tests\\tools\\test_filesystem.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_files",
            "description": "Test the _search_files method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filesystem_tool": {
                        "type": "string"
                    },
                    "mock_vector_store": {
                        "type": "string"
                    },
                    "test_data_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "filesystem_tool",
                    "mock_vector_store",
                    "test_data_dir"
                ]
            },
            "file": "tests\\tools\\test_filesystem.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_list",
            "description": "Test the run method with list action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filesystem_tool": {
                        "type": "string"
                    },
                    "test_data_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "filesystem_tool",
                    "test_data_dir"
                ]
            },
            "file": "tests\\tools\\test_filesystem.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_read",
            "description": "Test the run method with read action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filesystem_tool": {
                        "type": "string"
                    },
                    "test_data_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "filesystem_tool",
                    "test_data_dir"
                ]
            },
            "file": "tests\\tools\\test_filesystem.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_write",
            "description": "Test the run method with write action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filesystem_tool": {
                        "type": "string"
                    },
                    "test_data_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "filesystem_tool",
                    "test_data_dir"
                ]
            },
            "file": "tests\\tools\\test_filesystem.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_info",
            "description": "Test the run method with info action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filesystem_tool": {
                        "type": "string"
                    },
                    "test_data_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "filesystem_tool",
                    "test_data_dir"
                ]
            },
            "file": "tests\\tools\\test_filesystem.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_search",
            "description": "Test the run method with search action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filesystem_tool": {
                        "type": "string"
                    },
                    "mock_vector_store": {
                        "type": "string"
                    },
                    "test_data_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "filesystem_tool",
                    "mock_vector_store",
                    "test_data_dir"
                ]
            },
            "file": "tests\\tools\\test_filesystem.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_error_handling",
            "description": "Test error handling in the run method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filesystem_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "filesystem_tool"
                ]
            },
            "file": "tests\\tools\\test_filesystem.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_credentials_file",
            "description": "Create a mock credentials file.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "tmp_path"
                ]
            },
            "file": "tests\\tools\\test_gmail.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_token_file",
            "description": "Create a mock token file.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "tmp_path"
                ]
            },
            "file": "tests\\tools\\test_gmail.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_gmail_service",
            "description": "Create a mock Gmail service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\tools\\test_gmail.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "gmail_tool",
            "description": "Create a Gmail tool with mock files.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_credentials_file": {
                        "type": "string"
                    },
                    "mock_token_file": {
                        "type": "string"
                    },
                    "mock_gmail_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_credentials_file",
                    "mock_token_file",
                    "mock_gmail_service"
                ]
            },
            "file": "tests\\tools\\test_gmail.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_gmail_tool_initialization",
            "description": "Test that the Gmail tool initializes correctly.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "gmail_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "gmail_tool"
                ]
            },
            "file": "tests\\tools\\test_gmail.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_message_content",
            "description": "Test getting message content.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "gmail_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "gmail_tool"
                ]
            },
            "file": "tests\\tools\\test_gmail.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_gmail_tool_run",
            "description": "Test the run method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "gmail_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "gmail_tool"
                ]
            },
            "file": "tests\\tools\\test_gmail.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_gmail_tool_no_messages",
            "description": "Test behavior when no messages are found.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "gmail_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "gmail_tool"
                ]
            },
            "file": "tests\\tools\\test_gmail.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_gmail_tool_error_handling",
            "description": "Test error handling.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "gmail_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "gmail_tool"
                ]
            },
            "file": "tests\\tools\\test_gmail.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "notes_tool",
            "description": "Fixture to create a NotesTool instance with a temporary data directory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "tmp_path"
                ]
            },
            "file": "tests\\tools\\test_notes.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "reminders_tool",
            "description": "Fixture to create a RemindersTool instance with a temporary data directory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "tmp_path"
                ]
            },
            "file": "tests\\tools\\test_reminders.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_weather_tool",
            "description": "Create a mock weather tool.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\tools\\test_weather.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_weather_tool_initialization",
            "description": "Test that the Weather tool initializes correctly.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_env_vars": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_env_vars"
                ]
            },
            "file": "tests\\tools\\test_weather.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_location_coords",
            "description": "Test the _get_location_coords method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_weather_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_weather_tool"
                ]
            },
            "file": "tests\\tools\\test_weather.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_weather_data",
            "description": "Test the _get_weather_data method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_weather_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_weather_tool"
                ]
            },
            "file": "tests\\tools\\test_weather.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_forecast",
            "description": "Test the _get_forecast method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_weather_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_weather_tool"
                ]
            },
            "file": "tests\\tools\\test_weather.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_weather_tool_run",
            "description": "Test the run method of the Weather tool.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_weather_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_weather_tool"
                ]
            },
            "file": "tests\\tools\\test_weather.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_weather_tool_error_handling",
            "description": "Test error handling in the Weather tool.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_weather_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_weather_tool"
                ]
            },
            "file": "tests\\tools\\test_weather.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_weather_tool_location_not_found",
            "description": "Test behavior when location is not found.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_weather_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_weather_tool"
                ]
            },
            "file": "tests\\tools\\test_weather.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_web_search_tool_initialization",
            "description": "Test that the web search tool initializes correctly.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_env_vars": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_env_vars"
                ]
            },
            "file": "tests\\tools\\test_web_search.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_web_search_tool_run",
            "description": "Test the web search tool's run method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_web_search_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_web_search_tool"
                ]
            },
            "file": "tests\\tools\\test_web_search.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_web_search_tool_error_handling",
            "description": "Test error handling in the web search tool.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_web_search_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_web_search_tool"
                ]
            },
            "file": "tests\\tools\\test_web_search.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_web_search_tool_no_results",
            "description": "Test behavior when no results are found.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_web_search_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_web_search_tool"
                ]
            },
            "file": "tests\\tools\\test_web_search.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_agent",
            "description": "Create a mock agent.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\ui\\test_cli.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "cli_interface",
            "description": "Create a CLI interface with a mock agent.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_agent": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_agent"
                ]
            },
            "file": "tests\\ui\\test_cli.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_cli_interface_initialization",
            "description": "Test that the CLI interface initializes correctly.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cli_interface": {
                        "type": "string"
                    },
                    "mock_agent": {
                        "type": "string"
                    }
                },
                "required": [
                    "cli_interface",
                    "mock_agent"
                ]
            },
            "file": "tests\\ui\\test_cli.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cli_interface_run",
            "description": "Test the run method of the CLI interface.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cli_interface": {
                        "type": "string"
                    },
                    "mock_agent": {
                        "type": "string"
                    }
                },
                "required": [
                    "cli_interface",
                    "mock_agent"
                ]
            },
            "file": "tests\\ui\\test_cli.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cli_interface_error_handling",
            "description": "Test error handling in the CLI interface.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cli_interface": {
                        "type": "string"
                    },
                    "mock_agent": {
                        "type": "string"
                    }
                },
                "required": [
                    "cli_interface",
                    "mock_agent"
                ]
            },
            "file": "tests\\ui\\test_cli.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cli_interface_keyboard_interrupt",
            "description": "Test handling of keyboard interrupt.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cli_interface": {
                        "type": "string"
                    },
                    "mock_agent": {
                        "type": "string"
                    }
                },
                "required": [
                    "cli_interface",
                    "mock_agent"
                ]
            },
            "file": "tests\\ui\\test_cli.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cli_interface_multiple_queries",
            "description": "Test handling of multiple queries.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cli_interface": {
                        "type": "string"
                    },
                    "mock_agent": {
                        "type": "string"
                    }
                },
                "required": [
                    "cli_interface",
                    "mock_agent"
                ]
            },
            "file": "tests\\ui\\test_cli.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_agent",
            "description": "Create a mock agent for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\ui\\test_voice.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "voice_interface",
            "description": "Create a voice interface with a mock agent.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_agent": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_agent"
                ]
            },
            "file": "tests\\ui\\test_voice.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_voice_interface_initialization",
            "description": "Test that the voice interface initializes correctly.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "voice_interface": {
                        "type": "string"
                    },
                    "mock_agent": {
                        "type": "string"
                    }
                },
                "required": [
                    "voice_interface",
                    "mock_agent"
                ]
            },
            "file": "tests\\ui\\test_voice.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_audio_callback",
            "description": "Test the audio callback function.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "voice_interface": {
                        "type": "string"
                    }
                },
                "required": [
                    "voice_interface"
                ]
            },
            "file": "tests\\ui\\test_voice.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_voice_interface_listen",
            "description": "Test the listen method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "voice_interface": {
                        "type": "string"
                    }
                },
                "required": [
                    "voice_interface"
                ]
            },
            "file": "tests\\ui\\test_voice.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_voice_interface_speak",
            "description": "Test the speak method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "voice_interface": {
                        "type": "string"
                    }
                },
                "required": [
                    "voice_interface"
                ]
            },
            "file": "tests\\ui\\test_voice.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_voice_interface_run",
            "description": "Test the run method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "voice_interface": {
                        "type": "string"
                    },
                    "mock_agent": {
                        "type": "string"
                    }
                },
                "required": [
                    "voice_interface",
                    "mock_agent"
                ]
            },
            "file": "tests\\ui\\test_voice.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_voice_interface_error_handling",
            "description": "Test error handling in the voice interface.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "voice_interface": {
                        "type": "string"
                    },
                    "mock_agent": {
                        "type": "string"
                    }
                },
                "required": [
                    "voice_interface",
                    "mock_agent"
                ]
            },
            "file": "tests\\ui\\test_voice.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_vector_store",
            "description": "Create a mock vector store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\vector_store\\test_indexer.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_vector_store_initialization",
            "description": "Test that the vector store initializes correctly.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_store"
                ]
            },
            "file": "tests\\vector_store\\test_indexer.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_index_file",
            "description": "Test indexing a single file.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_store": {
                        "type": "string"
                    },
                    "test_data_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_store",
                    "test_data_dir"
                ]
            },
            "file": "tests\\vector_store\\test_indexer.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_index_directory",
            "description": "Test indexing a directory of files.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_store": {
                        "type": "string"
                    },
                    "test_data_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_store",
                    "test_data_dir"
                ]
            },
            "file": "tests\\vector_store\\test_indexer.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search",
            "description": "Test searching the vector store.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_store"
                ]
            },
            "file": "tests\\vector_store\\test_indexer.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_document",
            "description": "Test deleting a document from the vector store.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_store"
                ]
            },
            "file": "tests\\vector_store\\test_indexer.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_clear",
            "description": "Test clearing the vector store.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_store"
                ]
            },
            "file": "tests\\vector_store\\test_indexer.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_error_handling",
            "description": "Test error handling in the vector store.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_store": {
                        "type": "string"
                    },
                    "test_data_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_store",
                    "test_data_dir"
                ]
            },
            "file": "tests\\vector_store\\test_indexer.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        }
    ]
}