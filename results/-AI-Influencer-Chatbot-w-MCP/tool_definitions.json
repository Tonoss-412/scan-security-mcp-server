{
    "tools": [
        {
            "name": "calculate",
            "description": "Perform basic arithmetic operations.\n    \n    Args:\n        operation: One of 'add', 'subtract', 'multiply', 'divide'\n        a: First number\n        b: Second number\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "operation": {
                        "type": "string",
                        "description": "One of 'add', 'subtract', 'multiply', 'divide'"
                    },
                    "a": {
                        "type": "string",
                        "description": "First number"
                    },
                    "b": {
                        "type": "string",
                        "description": "Second number"
                    }
                },
                "required": [
                    "operation",
                    "a",
                    "b"
                ]
            },
            "file": "simple_example.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_current_time",
            "description": "Get the current time in a specific timezone.\n    \n    Args:\n        ctx: MCP context for logging\n        timezone: Timezone name (e.g., 'UTC', 'US/Eastern', 'Europe/London')\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string",
                        "description": "MCP context for logging"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Timezone name (e.g., 'UTC', 'US/Eastern', 'Europe/London')"
                    }
                },
                "required": [
                    "ctx",
                    "timezone"
                ]
            },
            "file": "simple_example.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "fetch_joke",
            "description": "Fetch a random joke from an API.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "simple_example.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "server_info",
            "description": "Get information about this server.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "simple_example.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_example_data",
            "description": "Get example data by ID.\n    \n    This demonstrates dynamic resource templates where the LLM\n    can request specific items by ID.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "simple_example.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "math_problem",
            "description": "Generate a math problem prompt based on difficulty.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "simple_example.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "name_shrimp",
            "description": "List all shrimp names in the tank",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\complex_inputs.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "desktop",
            "description": "List the files in the user's desktop",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\desktop.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_greeting",
            "description": "Get a personalized greeting",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\desktop.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "add",
            "description": "Add two numbers",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\desktop.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "echo_tool",
            "description": "Echo the input text",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\echo.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "echo_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\echo.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "echo_template",
            "description": "Echo the input text",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\echo.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "echo_prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\echo.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "from_content",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "examples\\memory.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "remember",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\memory.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "read_profile",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\memory.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_weather_forecast",
            "description": "Get the weather forecast for a location.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\mount_example.py",
            "decorator": [
                "weather_app.tool"
            ]
        },
        {
            "name": "weather_data",
            "description": "Return current weather data.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\mount_example.py",
            "decorator": [
                "weather_app.resource"
            ]
        },
        {
            "name": "get_news_headlines",
            "description": "Get the latest news headlines.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\mount_example.py",
            "decorator": [
                "news_app.tool"
            ]
        },
        {
            "name": "news_data",
            "description": "Return latest news data.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\mount_example.py",
            "decorator": [
                "news_app.resource"
            ]
        },
        {
            "name": "check_app_status",
            "description": "Check the status of the main application.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\mount_example.py",
            "decorator": [
                "app.tool"
            ]
        },
        {
            "name": "example_tool",
            "description": "Sample a completion from the LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\sampling.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "take_screenshot",
            "description": "\n    Take a screenshot of the user's screen and return it as an image. Use\n    this tool anytime the user wants you to look at something they're doing.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\screenshot.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_example_data",
            "description": "Returns some example data.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\serializer.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "echo",
            "description": "Echo the input text",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\simple_echo.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_users",
            "description": "Get all users - public endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\tags_example.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "create_user",
            "description": "Create a user - admin only",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\tags_example.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_admin_stats",
            "description": "Get admin statistics - internal use",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\tags_example.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "health_check",
            "description": "Public health check",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\tags_example.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_metrics",
            "description": "Metrics endpoint with no tags",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\tags_example.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "text_me",
            "description": "Sendatextmessagetome",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\text_me.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "hub_status",
            "description": "Checks the status of the main hub and connections.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\smart_home\\src\\smart_home\\hub.py",
            "decorator": [
                "hub_mcp.tool"
            ]
        },
        {
            "name": "read_all_lights",
            "description": "Lists the names of all available Hue lights using phue2.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\smart_home\\src\\smart_home\\lights\\server.py",
            "decorator": [
                "lights_mcp.tool"
            ]
        },
        {
            "name": "toggle_light",
            "description": "Turns a specific light on (true) or off (false) using phue2.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\smart_home\\src\\smart_home\\lights\\server.py",
            "decorator": [
                "lights_mcp.tool"
            ]
        },
        {
            "name": "set_brightness",
            "description": "Sets the brightness of a specific light (0-254) using phue2.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\smart_home\\src\\smart_home\\lights\\server.py",
            "decorator": [
                "lights_mcp.tool"
            ]
        },
        {
            "name": "list_groups",
            "description": "Lists the names of all available Hue light groups.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\smart_home\\src\\smart_home\\lights\\server.py",
            "decorator": [
                "lights_mcp.tool"
            ]
        },
        {
            "name": "list_scenes",
            "description": "Lists Hue scenes, grouped by the light group they belong to.\n\n    Returns:\n        dict[str, list[str]]: A dictionary mapping group names to a list of scene names within that group.\n        list[str]: An error message list if the bridge connection fails or an error occurs.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\smart_home\\src\\smart_home\\lights\\server.py",
            "decorator": [
                "lights_mcp.tool"
            ]
        },
        {
            "name": "activate_scene",
            "description": "Activates a specific scene within a specified light group, verifying the scene belongs to the group.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\smart_home\\src\\smart_home\\lights\\server.py",
            "decorator": [
                "lights_mcp.tool"
            ]
        },
        {
            "name": "set_light_attributes",
            "description": "Sets multiple attributes (e.g., hue, sat, bri, ct, xy, transitiontime) for a specific light.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\smart_home\\src\\smart_home\\lights\\server.py",
            "decorator": [
                "lights_mcp.tool"
            ]
        },
        {
            "name": "set_group_attributes",
            "description": "Sets multiple attributes for all lights within a specific group.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\smart_home\\src\\smart_home\\lights\\server.py",
            "decorator": [
                "lights_mcp.tool"
            ]
        },
        {
            "name": "list_lights_by_group",
            "description": "Lists Hue lights, grouped by the room/group they belong to.\n\n    Returns:\n        dict[str, list[str]]: A dictionary mapping group names to a list of light names within that group.\n        list[str]: An error message list if the bridge connection fails or an error occurs.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\smart_home\\src\\smart_home\\lights\\server.py",
            "decorator": [
                "lights_mcp.tool"
            ]
        },
        {
            "name": "setup_logging",
            "description": "Finalize the settings.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\settings.py",
            "decorator": [
                "model_validator"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\cli\\cli.py",
            "decorator": [
                "app.command"
            ]
        },
        {
            "name": "dev",
            "description": "Run a MCP server with the MCP Inspector.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\cli\\cli.py",
            "decorator": [
                "app.command"
            ]
        },
        {
            "name": "run",
            "description": "Run a MCP server or connect to a remote one.\n\n    The server can be specified in three ways:\n    1. Module approach: server.py - runs the module directly, looking for an object named mcp/server/app.\\n\n    2. Import approach: server.py:app - imports and runs the specified server object.\\n\n    3. URL approach: http://server-url - connects to a remote server and creates a proxy.\\n\\n\n\n    Note: This command runs the server directly. You are responsible for ensuring\n    all dependencies are available.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\cli\\cli.py",
            "decorator": [
                "app.command"
            ]
        },
        {
            "name": "install",
            "description": "Install a MCP server in the Claude desktop app.\n\n    Environment variables are preserved once added and only updated if new values\n    are explicitly provided.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\cli\\cli.py",
            "decorator": [
                "app.command"
            ]
        },
        {
            "name": "session",
            "description": "Get the current active session. Raises RuntimeError if not connected.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\client\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "initialize_result",
            "description": "Get the result of the initialization request.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\client\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_context_manager",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\client\\client.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "connect_session",
            "description": "\n        Establishes a connection and yields an active ClientSession.\n\n        The ClientSession is *not* expected to be initialized in this context manager.\n\n        The session is guaranteed to be valid only within the scope of the\n        async context manager. Connection setup and teardown are handled\n        within this context.\n\n        Args:\n            **session_kwargs: Keyword arguments to pass to the ClientSession\n                              constructor (e.g., callbacks, timeouts).\n\n        Yields:\n            A mcp.ClientSession instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "Yields": {
                        "type": "string"
                    }
                },
                "required": [
                    "Yields"
                ]
            },
            "file": "src\\fastmcp\\client\\transports.py",
            "decorator": [
                "abc.abstractmethod",
                "contextlib.asynccontextmanager"
            ]
        },
        {
            "name": "connect_session",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\client\\transports.py",
            "decorator": [
                "contextlib.asynccontextmanager"
            ]
        },
        {
            "name": "connect_session",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\client\\transports.py",
            "decorator": [
                "contextlib.asynccontextmanager"
            ]
        },
        {
            "name": "connect_session",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\client\\transports.py",
            "decorator": [
                "contextlib.asynccontextmanager"
            ]
        },
        {
            "name": "connect_session",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\client\\transports.py",
            "decorator": [
                "contextlib.asynccontextmanager"
            ]
        },
        {
            "name": "connect_session",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\client\\transports.py",
            "decorator": [
                "contextlib.asynccontextmanager"
            ]
        },
        {
            "name": "connect_session",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\client\\transports.py",
            "decorator": [
                "contextlib.asynccontextmanager"
            ]
        },
        {
            "name": "from_call_tool_result",
            "description": "\n        Create a CallToolRequestResult from a CallToolResult.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\contrib\\bulk_tool_caller\\bulk_tool_caller.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "call_tools_bulk",
            "description": "\n        Call multiple tools registered on this MCP server in a single request. Each call can\n         be for a different tool and can include different arguments. Useful for speeding up\n         what would otherwise take several individual tool calls.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\contrib\\bulk_tool_caller\\bulk_tool_caller.py",
            "decorator": [
                "mcp_tool"
            ]
        },
        {
            "name": "call_tool_bulk",
            "description": "\n        Call a single tool registered on this MCP server multiple times with a single request.\n         Each call can include different arguments. Useful for speeding up what would otherwise\n         take several individual tool calls.\n\n        Args:\n            tool: The name of the tool to call.\n            tool_arguments: A list of dictionaries, where each dictionary contains the arguments for an individual run of the tool.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string",
                        "description": "The name of the tool to call."
                    },
                    "tool_arguments": {
                        "type": "string",
                        "description": "A list of dictionaries, where each dictionary contains the arguments for an individual run of the tool."
                    }
                },
                "required": [
                    "tool",
                    "tool_arguments"
                ]
            },
            "file": "src\\fastmcp\\contrib\\bulk_tool_caller\\bulk_tool_caller.py",
            "decorator": [
                "mcp_tool"
            ]
        },
        {
            "name": "echo_tool",
            "description": "Echo the input text",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\contrib\\bulk_tool_caller\\example.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "first_tool",
            "description": "First tool description.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\contrib\\mcp_mixin\\example.py",
            "decorator": [
                "mcp_tool"
            ]
        },
        {
            "name": "first_resource",
            "description": "First resource description.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\contrib\\mcp_mixin\\example.py",
            "decorator": [
                "mcp_resource"
            ]
        },
        {
            "name": "first_prompt",
            "description": "First prompt description.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\contrib\\mcp_mixin\\example.py",
            "decorator": [
                "mcp_prompt"
            ]
        },
        {
            "name": "from_function",
            "description": "Create a Prompt from a function.\n\n        The function can return:\n        - A string (converted to a message)\n        - A Message object\n        - A dict (converted to a message)\n        - A sequence of any of the above\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\prompts\\prompt.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "set_default_mime_type",
            "description": "Set default MIME type if not provided.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\resources\\resource.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "set_default_name",
            "description": "Set default name from URI if not provided.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\resources\\resource.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "read",
            "description": "Read the resource content.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\resources\\resource.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "set_default_mime_type",
            "description": "Set default MIME type if not provided.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\resources\\template.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "from_function",
            "description": "Create a template from a function.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\resources\\template.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "validate_absolute_path",
            "description": "Ensure path is absolute.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\resources\\types.py",
            "decorator": [
                "pydantic.field_validator",
                "classmethod"
            ]
        },
        {
            "name": "set_binary_from_mime_type",
            "description": "Set is_binary based on mime_type if not explicitly set.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\resources\\types.py",
            "decorator": [
                "pydantic.field_validator",
                "classmethod"
            ]
        },
        {
            "name": "validate_absolute_path",
            "description": "Ensure path is absolute.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\resources\\types.py",
            "decorator": [
                "pydantic.field_validator",
                "classmethod"
            ]
        },
        {
            "name": "set_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\server\\context.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "request_context",
            "description": "Access to the underlying request context.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\server\\context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client_id",
            "description": "Get the client ID if available.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\server\\context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "request_id",
            "description": "Get the unique ID for this request.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\server\\context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "session",
            "description": "Access to the underlying session for advanced usage.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\server\\context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "lifespan",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\server\\http.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "set_http_request",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\server\\http.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "lifespan",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\server\\http.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "from_client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\server\\proxy.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\server\\proxy.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\server\\proxy.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\server\\proxy.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "default_lifespan",
            "description": "Default lifespan context manager that does nothing.\n\n    Args:\n        server: The server instance this lifespan is managing\n\n    Returns:\n        An empty context object\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "server": {
                        "type": "string",
                        "description": "The server instance this lifespan is managing"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "server",
                    "Returns"
                ]
            },
            "file": "src\\fastmcp\\server\\server.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "wrap",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\server\\server.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\server\\server.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "instructions",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\server\\server.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_openapi",
            "description": "\n        Create a FastMCP server from an OpenAPI specification.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\server\\server.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_fastapi",
            "description": "\n        Create a FastMCP server from a FastAPI application.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\server\\server.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "as_proxy",
            "description": "Create a FastMCP proxy server for the given backend.\n\n        The ``backend`` argument can be either an existing :class:`~fastmcp.client.Client`\n        instance or any value accepted as the ``transport`` argument of\n        :class:`~fastmcp.client.Client`. This mirrors the convenience of the\n        ``Client`` constructor.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\server\\server.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_client",
            "description": "\n        Create a FastMCP proxy server from a FastMCP client.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\server\\server.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_function",
            "description": "Create a Tool from a function.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\tools\\tool.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "__get__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\utilities\\decorators.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "__get__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\utilities\\decorators.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\fastmcp\\utilities\\mcp_config.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "temporary_settings",
            "description": "\n    Temporarily override ControlFlow setting values.\n\n    Args:\n        **kwargs: The settings to override, including nested settings.\n\n    Example:\n        Temporarily override a setting:\n        ```python\n        import fastmcp\n        from fastmcp.utilities.tests import temporary_settings\n\n        with temporary_settings(log_level='DEBUG'):\n            assert fastmcp.settings.settings.log_level == 'DEBUG'\n        assert fastmcp.settings.settings.log_level == 'INFO'\n        ```\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "Example": {
                        "type": "string"
                    }
                },
                "required": [
                    "Example"
                ]
            },
            "file": "src\\fastmcp\\utilities\\tests.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "run_server_in_process",
            "description": "\n    Context manager that runs a Starlette app in a separate process and returns the\n    server URL. When the context manager is exited, the server process is killed.\n\n    Args:\n        app: The Starlette app to run.\n\n    Returns:\n        The server URL.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app": {
                        "type": "string",
                        "description": "The Starlette app to run."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "app",
                    "Returns"
                ]
            },
            "file": "src\\fastmcp\\utilities\\tests.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "get_cached_typeadapter",
            "description": "\n    TypeAdapters are heavy objects, and in an application context we'd typically\n    create them once in a global scope and reuse them as often as possible.\n    However, this isn't feasible for user-generated functions. Instead, we use a\n    cache to minimize the cost of creating them as much as possible.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastmcp\\utilities\\types.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "mock_console",
            "description": "Mock the rich console to test output.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\cli\\test_cli.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_logger",
            "description": "Mock the logger to test logging.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\cli\\test_cli.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_exit",
            "description": "Mock sys.exit to prevent tests from exiting.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\cli\\test_cli.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "temp_python_file",
            "description": "Create a temporary Python file with a test server.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "tmp_path"
                ]
            },
            "file": "tests\\cli\\test_cli.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "temp_env_file",
            "description": "Create a temporary .env file.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "tmp_path"
                ]
            },
            "file": "tests\\cli\\test_cli.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_console",
            "description": "Mock the rich console to test output.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\cli\\test_run.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_logger",
            "description": "Mock the logger to test logging.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\cli\\test_run.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_exit",
            "description": "Mock sys.exit to prevent tests from exiting.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\cli\\test_run.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "temp_python_file",
            "description": "Create a temporary Python file with a test server.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "tmp_path"
                ]
            },
            "file": "tests\\cli\\test_run.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "temp_env_file",
            "description": "Create a temporary .env file.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "tmp_path"
                ]
            },
            "file": "tests\\cli\\test_run.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "fastmcp_server",
            "description": "Fixture that creates a FastMCP server with tools, resources, and prompts.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "greet",
            "description": "Greet someone by name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "add",
            "description": "Add two numbers together.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "sleep",
            "description": "Sleep for a given number of seconds.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "get_users",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "server.resource"
            ]
        },
        {
            "name": "get_user",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "server.resource"
            ]
        },
        {
            "name": "welcome",
            "description": "Example greeting prompt.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "server.prompt"
            ]
        },
        {
            "name": "tagged_resources_server",
            "description": "Fixture that creates a FastMCP server with tagged resources and templates.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "get_tagged_data",
            "description": "Ataggedresource\"\n",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "server.resource"
            ]
        },
        {
            "name": "get_template_data",
            "description": "Ataggedtemplate",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "server.resource"
            ]
        },
        {
            "name": "error_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "error_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "custom_error_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "exception_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "exception_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "error_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "exception_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "exception_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "error_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "test_timeout_tool_call_overrides_client_timeout_even_if_lower",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "pytest.mark.skipif"
            ]
        },
        {
            "name": "test_url_returns_sse_transport",
            "description": "Test that URLs with /sse/ pattern return SSETransport.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ]
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "test_url_returns_streamable_http_transport",
            "description": "Test that URLs without /sse/ pattern return StreamableHttpTransport.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ]
            },
            "file": "tests\\client\\test_client.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "fastmcp_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_logs.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "log",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_logs.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "echo_log",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_logs.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_headers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_openapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_header_by_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_openapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "post_headers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_openapi.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "shttp_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sse_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "proxy_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "clear_progress_messages",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_progress.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "fastmcp_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_progress.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "progress_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_progress.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "fastmcp_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_roots.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "list_roots",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_roots.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "test_invalid_roots",
            "description": "\n        Roots must be URIs\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_roots.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "test_invalid_urls",
            "description": "\n        At this time, root URIs must start with file://\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_roots.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "test_valid_roots",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_roots.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "fastmcp_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_sampling.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "simple_sample",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_sampling.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "sample_with_system_prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_sampling.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "sample_with_messages",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_sampling.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "greet",
            "description": "Greet someone by name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_sse.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "add",
            "description": "Add two numbers together.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_sse.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "sleep",
            "description": "Sleep for a given number of seconds.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_sse.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "get_users",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_sse.py",
            "decorator": [
                "server.resource"
            ]
        },
        {
            "name": "get_user",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_sse.py",
            "decorator": [
                "server.resource"
            ]
        },
        {
            "name": "get_headers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_sse.py",
            "decorator": [
                "server.resource"
            ]
        },
        {
            "name": "welcome",
            "description": "Example greeting prompt.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_sse.py",
            "decorator": [
                "server.prompt"
            ]
        },
        {
            "name": "sse_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_sse.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "greet",
            "description": "Greet someone by name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_streamable_http.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "add",
            "description": "Add two numbers together.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_streamable_http.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "sleep",
            "description": "Sleep for a given number of seconds.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_streamable_http.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "get_users",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_streamable_http.py",
            "decorator": [
                "server.resource"
            ]
        },
        {
            "name": "get_user",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_streamable_http.py",
            "decorator": [
                "server.resource"
            ]
        },
        {
            "name": "get_headers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_streamable_http.py",
            "decorator": [
                "server.resource"
            ]
        },
        {
            "name": "welcome",
            "description": "Example greeting prompt.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_streamable_http.py",
            "decorator": [
                "server.prompt"
            ]
        },
        {
            "name": "streamable_http_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\client\\test_streamable_http.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "live_server_with_tool",
            "description": "Fixture to create a FastMCP server instance with the echo_tool registered.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\contrib\\test_bulk_tool_caller.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "bulk_caller_live",
            "description": "Fixture to create a BulkToolCaller instance connected to the live server.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\contrib\\test_bulk_tool_caller.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_tool_registration",
            "description": "Test tool registration with prefix and separator variations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "prefix": {
                        "type": "string"
                    },
                    "separator": {
                        "type": "string"
                    },
                    "expected_key": {
                        "type": "string"
                    },
                    "unexpected_key": {
                        "type": "string"
                    }
                },
                "required": [
                    "prefix",
                    "separator",
                    "expected_key",
                    "unexpected_key"
                ]
            },
            "file": "tests\\contrib\\test_mcp_mixin.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "sample_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\contrib\\test_mcp_mixin.py",
            "decorator": [
                "mcp_tool"
            ]
        },
        {
            "name": "test_resource_registration",
            "description": "Test resource registration with prefix and separator variations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "prefix": {
                        "type": "string"
                    },
                    "separator": {
                        "type": "string"
                    },
                    "expected_uri_key": {
                        "type": "string"
                    },
                    "expected_name": {
                        "type": "string"
                    },
                    "unexpected_uri_key": {
                        "type": "string"
                    }
                },
                "required": [
                    "prefix",
                    "separator",
                    "expected_uri_key",
                    "expected_name",
                    "unexpected_uri_key"
                ]
            },
            "file": "tests\\contrib\\test_mcp_mixin.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "sample_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\contrib\\test_mcp_mixin.py",
            "decorator": [
                "mcp_resource"
            ]
        },
        {
            "name": "test_prompt_registration",
            "description": "Test prompt registration with prefix and separator variations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "prefix": {
                        "type": "string"
                    },
                    "separator": {
                        "type": "string"
                    },
                    "expected_name": {
                        "type": "string"
                    },
                    "unexpected_name": {
                        "type": "string"
                    }
                },
                "required": [
                    "prefix",
                    "separator",
                    "expected_name",
                    "unexpected_name"
                ]
            },
            "file": "tests\\contrib\\test_mcp_mixin.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "sample_prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\contrib\\test_mcp_mixin.py",
            "decorator": [
                "mcp_prompt"
            ]
        },
        {
            "name": "tool_all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\contrib\\test_mcp_mixin.py",
            "decorator": [
                "mcp_tool"
            ]
        },
        {
            "name": "resource_all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\contrib\\test_mcp_mixin.py",
            "decorator": [
                "mcp_resource"
            ]
        },
        {
            "name": "prompt_all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\contrib\\test_mcp_mixin.py",
            "decorator": [
                "mcp_prompt"
            ]
        },
        {
            "name": "tool_all_p",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\contrib\\test_mcp_mixin.py",
            "decorator": [
                "mcp_tool"
            ]
        },
        {
            "name": "resource_all_p",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\contrib\\test_mcp_mixin.py",
            "decorator": [
                "mcp_resource"
            ]
        },
        {
            "name": "prompt_all_p",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\contrib\\test_mcp_mixin.py",
            "decorator": [
                "mcp_prompt"
            ]
        },
        {
            "name": "tool_cust",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\contrib\\test_mcp_mixin.py",
            "decorator": [
                "mcp_tool"
            ]
        },
        {
            "name": "resource_cust",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\contrib\\test_mcp_mixin.py",
            "decorator": [
                "mcp_resource"
            ]
        },
        {
            "name": "prompt_cust",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\contrib\\test_mcp_mixin.py",
            "decorator": [
                "mcp_prompt"
            ]
        },
        {
            "name": "test_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\deprecated\\test_deprecated.py",
            "decorator": [
                "sub_app.tool"
            ]
        },
        {
            "name": "test_prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\deprecated\\test_deprecated.py",
            "decorator": [
                "sub_app.prompt"
            ]
        },
        {
            "name": "test_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\deprecated\\test_mount_separators.py",
            "decorator": [
                "sub_app.tool"
            ]
        },
        {
            "name": "test_prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\deprecated\\test_mount_separators.py",
            "decorator": [
                "sub_app.prompt"
            ]
        },
        {
            "name": "get_test",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\deprecated\\test_resource_prefixes.py",
            "decorator": [
                "sub_server.resource"
            ]
        },
        {
            "name": "get_test",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\deprecated\\test_resource_prefixes.py",
            "decorator": [
                "sub_server.resource"
            ]
        },
        {
            "name": "basic_openapi_spec",
            "description": "Create a simple OpenAPI spec for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\deprecated\\test_route_type_ignore.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_client",
            "description": "Create a mock client for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\deprecated\\test_route_type_ignore.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "temp_file",
            "description": "Create a temporary file for testing.\n\n    File is automatically cleaned up after the test if it still exists.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\resources\\test_file_resources.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_permission_error",
            "description": "Test reading a file without permissions.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\resources\\test_file_resources.py",
            "decorator": [
                "pytest.mark.skipif"
            ]
        },
        {
            "name": "temp_file",
            "description": "Create a temporary file for testing.\n\n    File is automatically cleaned up after the test if it still exists.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\resources\\test_resource_manager.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_match_uri_template_single_param",
            "description": "Test that match_uri_template uses the slash delimiter.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\resources\\test_resource_template.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "test_match_uri_template_simple_params",
            "description": "Test matching URIs against a template with simple parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\resources\\test_resource_template.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "test_match_uri_template_params_and_literal_segments",
            "description": "Test matching URIs against a template with parameters and literal segments.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\resources\\test_resource_template.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "test_match_uri_template_with_prefix",
            "description": "Test matching URIs against a template with a prefix.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\resources\\test_resource_template.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "test_match_uri_template_wildcard_param",
            "description": "Test that match_uri_template uses the slash delimiter.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\resources\\test_resource_template.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "test_match_uri_template_multiple_wildcard_params",
            "description": "Test that match_uri_template uses the slash delimiter.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\resources\\test_resource_template.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "test_match_uri_template_with_non_slash_suffix",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\resources\\test_resource_template.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "mock_oauth_provider",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_auth_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "auth_app",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_oauth_provider": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_oauth_provider"
                ]
            },
            "file": "tests\\server\\test_auth_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "auth_app": {
                        "type": "string"
                    }
                },
                "required": [
                    "auth_app"
                ]
            },
            "file": "tests\\server\\test_auth_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "registered_client",
            "description": "Create and register a test client.\n\n    Parameters can be customized via indirect parameterization:\n    @pytest.mark.parametrize(\"registered_client\",\n                            [{\"grant_types\": [\"authorization_code\"]}],\n                            indirect=True)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "request": {
                        "type": "string"
                    }
                },
                "required": [
                    "request"
                ]
            },
            "file": "tests\\server\\test_auth_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "pkce_challenge",
            "description": "Create a PKCE challenge with code_verifier and code_challenge.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_auth_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "auth_code",
            "description": "Get an authorization code.\n\n    Parameters can be customized via indirect parameterization:\n    @pytest.mark.parametrize(\"auth_code\",\n                            [{\"redirect_uri\": \"https://client.example.com/other-callback\"}],\n                            indirect=True)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_client": {
                        "type": "string"
                    },
                    "registered_client": {
                        "type": "string"
                    },
                    "pkce_challenge": {
                        "type": "string"
                    },
                    "request": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_client",
                    "registered_client",
                    "pkce_challenge",
                    "request"
                ]
            },
            "file": "tests\\server\\test_auth_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tokens",
            "description": "Exchange authorization code for tokens.\n\n    Parameters can be customized via indirect parameterization:\n    @pytest.mark.parametrize(\"tokens\",\n                            [{\"code_verifier\": \"wrong_verifier\"}],\n                            indirect=True)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_client": {
                        "type": "string"
                    },
                    "registered_client": {
                        "type": "string"
                    },
                    "auth_code": {
                        "type": "string"
                    },
                    "pkce_challenge": {
                        "type": "string"
                    },
                    "request": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_client",
                    "registered_client",
                    "auth_code",
                    "pkce_challenge",
                    "request"
                ]
            },
            "file": "tests\\server\\test_auth_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_token_redirect_uri_mismatch",
            "description": "Test token endpoint error - redirect URI mismatch.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_client": {
                        "type": "string"
                    },
                    "registered_client": {
                        "type": "string"
                    },
                    "auth_code": {
                        "type": "string"
                    },
                    "pkce_challenge": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_client",
                    "registered_client",
                    "auth_code",
                    "pkce_challenge"
                ]
            },
            "file": "tests\\server\\test_auth_integration.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "test_authorize_missing_redirect_uri_multiple_registered",
            "description": "Test endpoint with missing redirect_uri with multiple registered URIs.\n\n        If client has multiple registered redirect_uris, redirect_uri must be provided.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "registered_client": {
                        "type": "string"
                    },
                    "pkce_challenge": {
                        "type": "string"
                    }
                },
                "required": [
                    "registered_client",
                    "pkce_challenge"
                ]
            },
            "file": "tests\\server\\test_auth_integration.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_context.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_dir",
            "description": "Create a temporary directory with test files.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tmp_path_factory": {
                        "type": "string"
                    }
                },
                "required": [
                    "tmp_path_factory"
                ]
            },
            "file": "tests\\server\\test_file_server.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mcp",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_file_server.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "resources",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_file_server.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "list_test_dir",
            "description": "List the files in the test directory",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_file_server.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "read_example_py",
            "description": "Read the example.py file",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_file_server.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "read_readme_md",
            "description": "Read the readme.md file",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_file_server.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "read_config_json",
            "description": "Read the config.json file",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_file_server.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "tools",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_file_server.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "delete_file",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_file_server.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "sub_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_import_server.py",
            "decorator": [
                "sub_app.tool"
            ]
        },
        {
            "name": "get_forecast",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_import_server.py",
            "decorator": [
                "weather_app.tool"
            ]
        },
        {
            "name": "get_headlines",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_import_server.py",
            "decorator": [
                "news_app.tool"
            ]
        },
        {
            "name": "first_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_import_server.py",
            "decorator": [
                "first_app.tool"
            ]
        },
        {
            "name": "second_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_import_server.py",
            "decorator": [
                "second_app.tool"
            ]
        },
        {
            "name": "get_users",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_import_server.py",
            "decorator": [
                "data_app.resource"
            ]
        },
        {
            "name": "get_user_profile",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_import_server.py",
            "decorator": [
                "user_app.resource"
            ]
        },
        {
            "name": "greeting",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_import_server.py",
            "decorator": [
                "assistant_app.prompt"
            ]
        },
        {
            "name": "get_weather",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_import_server.py",
            "decorator": [
                "weather_app.resource"
            ]
        },
        {
            "name": "get_news",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_import_server.py",
            "decorator": [
                "news_app.resource"
            ]
        },
        {
            "name": "review_python",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_import_server.py",
            "decorator": [
                "python_app.prompt"
            ]
        },
        {
            "name": "explain_sql",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_import_server.py",
            "decorator": [
                "sql_app.prompt"
            ]
        },
        {
            "name": "get_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_import_server.py",
            "decorator": [
                "api_app.tool"
            ]
        },
        {
            "name": "greeting",
            "description": "Example greeting prompt.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_import_server.py",
            "decorator": [
                "api_app.prompt"
            ]
        },
        {
            "name": "get_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_import_server.py",
            "decorator": [
                "api_app.resource"
            ]
        },
        {
            "name": "create_user",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_import_server.py",
            "decorator": [
                "api_app.resource"
            ]
        },
        {
            "name": "test_lifespan",
            "description": "Test lifespan context that tracks startup/shutdown.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_lifespan.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "check_lifespan",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_lifespan.py",
            "decorator": [
                "server.call_tool"
            ]
        },
        {
            "name": "test_lifespan",
            "description": "Test lifespan context that tracks startup/shutdown.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_lifespan.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "check_lifespan",
            "description": "Tool that checks lifespan context.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_lifespan.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "ping_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_lifespan.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "mcp_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_logging.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_uvicorn_logging_default_level",
            "description": "Tests that FastMCP passes log_level to uvicorn.Config if no log_config is given.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_logging.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_uvicorn_logging_with_custom_log_config",
            "description": "Tests that FastMCP passes log_config to uvicorn.Config and not log_level.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_logging.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_uvicorn_logging_custom_log_config_overrides_log_level_param",
            "description": "Tests log_config precedence if log_level is also passed to run_http_async.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_logging.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "sub_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "sub_app.tool"
            ]
        },
        {
            "name": "greet",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "sub_app.tool"
            ]
        },
        {
            "name": "sub_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "sub_app.tool"
            ]
        },
        {
            "name": "sub_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "sub_app.tool"
            ]
        },
        {
            "name": "get_forecast",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "weather_app.tool"
            ]
        },
        {
            "name": "get_headlines",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "news_app.tool"
            ]
        },
        {
            "name": "first_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "first_app.tool"
            ]
        },
        {
            "name": "second_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "second_app.tool"
            ]
        },
        {
            "name": "dynamic_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "sub_app.tool"
            ]
        },
        {
            "name": "temp_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "sub_app.tool"
            ]
        },
        {
            "name": "get_users",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "data_app.resource"
            ]
        },
        {
            "name": "get_user_profile",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "user_app.resource"
            ]
        },
        {
            "name": "get_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "data_app.resource"
            ]
        },
        {
            "name": "greeting",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "assistant_app.prompt"
            ]
        },
        {
            "name": "farewell",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "assistant_app.prompt"
            ]
        },
        {
            "name": "get_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "original_server.tool"
            ]
        },
        {
            "name": "dynamic_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "original_server.tool"
            ]
        },
        {
            "name": "get_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "original_server.resource"
            ]
        },
        {
            "name": "welcome",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "original_server.prompt"
            ]
        },
        {
            "name": "lifespan",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "hello",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "sub.tool"
            ]
        },
        {
            "name": "lifespan",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "hello",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_mount.py",
            "decorator": [
                "sub.tool"
            ]
        },
        {
            "name": "fastmcp_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_proxy.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "greet",
            "description": "Greet someone by name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_proxy.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "tool_without_description",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_proxy.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "add",
            "description": "Add two numbers together.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_proxy.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "error_tool",
            "description": "This tool always raises an error.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_proxy.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "wave",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_proxy.py",
            "decorator": [
                "server.resource"
            ]
        },
        {
            "name": "get_test_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_resource_prefix_formats.py",
            "decorator": [
                "server_path.resource"
            ]
        },
        {
            "name": "get_test_protocol",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_resource_prefix_formats.py",
            "decorator": [
                "server_protocol.resource"
            ]
        },
        {
            "name": "get_test",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_resource_prefix_formats.py",
            "decorator": [
                "server.resource"
            ]
        },
        {
            "name": ": str = \"\u4e16\u754c",
            "description": "(\n\"\ud83c\udf1fThistoolusesemojisandUTF-8characters:\u00e1\u00e9\u00ed\u00f3\u00fa\u00f1\u6f22\u5b57\ud83c\udf89\"\n)\n",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "tool_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "add",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "error_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "image_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "mixed_content_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "mixed_list_fn",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "error_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "string_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "bytes_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "uuid_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "path_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "datetime_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "image_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "greet",
            "description": "A greeting tool",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "greet",
            "description": "A greeting tool",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "process_image",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "my_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "add_one",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "toggle",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "analyze",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "analyze",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "analyze",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "analyze",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "analyze",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "analyze",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "analyze",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "analyze",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "send_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "send_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "send_uuid",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "send_uuid",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "send_datetime",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "send_datetime",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "send_datetime",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "send_date",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "send_date",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "send_timedelta",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "send_timedelta",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "tool_with_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "tool_with_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "async_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "no_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "test_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "tool_with_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "sample_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "resource_with_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_data_fn",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "param": {
                        "type": "string"
                    }
                },
                "required": [
                    "param"
                ]
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_data_mismatched",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_static_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "func",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "add",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "lookup_user",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource",
                "mcp.resource"
            ]
        },
        {
            "name": "template_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "template_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "template_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "template_resource_with_params",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "template_resource_with_params",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "template_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "resource_template",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "fn",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "fn",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "fn",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "fn",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.prompt#type:ignore"
            ]
        },
        {
            "name": "fn",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "fn",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "fn",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "prompt_fn",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "get_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "template_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "sample_prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "prompt_fn",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_server_interactions.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "EchoTool",
            "description": "Echo back the message provided.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_tool_annotations.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "EchoTool",
            "description": "Echo back the message provided.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_tool_annotations.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "EchoTool",
            "description": "Echo back the message provided.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_tool_annotations.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "echo",
            "description": "Echo back the message provided.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_tool_annotations.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "modify",
            "description": "Modify the data provided.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_tool_annotations.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "modify",
            "description": "Modify the data provided.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\test_tool_annotations.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "server_with_custom_route",
            "description": "Create a FastMCP server with a custom route.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\http\\test_custom_routes.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "custom_route",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\http\\test_custom_routes.py",
            "decorator": [
                "server.custom_route"
            ]
        },
        {
            "name": "custom_route",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\http\\test_custom_routes.py",
            "decorator": [
                "server.custom_route"
            ]
        },
        {
            "name": "get_headers_tool",
            "description": "Get the HTTP headers from the request.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\http\\test_http_dependencies.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "get_headers_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\http\\test_http_dependencies.py",
            "decorator": [
                "server.resource"
            ]
        },
        {
            "name": "get_headers_prompt",
            "description": "Get the HTTP headers from the request.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\http\\test_http_dependencies.py",
            "decorator": [
                "server.prompt"
            ]
        },
        {
            "name": "shttp_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\http\\test_http_dependencies.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sse_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\http\\test_http_dependencies.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "users_db",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "fastapi_app",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "get_users",
            "description": "Get all users.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "search_users",
            "description": "Search users with optional filters.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_user",
            "description": "Get a user by ID.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_user_active_state",
            "description": "Get a user by ID and filter by active state.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "create_user",
            "description": "Create a new user.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "update_user_name",
            "description": "Update a user's name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "app.patch"
            ]
        },
        {
            "name": "ping",
            "description": "Ping the server.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "ping_bytes",
            "description": "Ping the server and get a bytes response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "api_client",
            "description": "Create a pre-configured httpx client for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "fastmcp_openapi_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "openapi_30_spec",
            "description": "Fixture that returns a simple OpenAPI 3.0 specification.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_30_client",
            "description": "Mock client that returns predefined responses for the 3.0 API.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "openapi_30_server",
            "description": "Create a FastMCPOpenAPI server from the OpenAPI 3.0 spec.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "openapi_30_spec": {
                        "type": "string"
                    },
                    "mock_30_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "openapi_30_spec",
                    "mock_30_client"
                ]
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "openapi_31_spec",
            "description": "Fixture that returns a simple OpenAPI 3.1 specification.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_31_client",
            "description": "Mock client that returns predefined responses for the 3.1 API.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "openapi_31_server",
            "description": "Create a FastMCPOpenAPI server from the OpenAPI 3.1 spec.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "openapi_31_spec": {
                        "type": "string"
                    },
                    "mock_31_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "openapi_31_spec",
                    "mock_31_client"
                ]
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "simple_openapi_spec",
            "description": "Create a minimal OpenAPI spec with obvious test descriptions.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_client",
            "description": "Create a mock client that returns simple responses.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_server",
            "description": "Create a FastMCPOpenAPI server with the simple test spec.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "simple_openapi_spec": {
                        "type": "string"
                    },
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "simple_openapi_spec",
                    "mock_client"
                ]
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "fastapi_app_with_descriptions",
            "description": "Create a simple FastAPI app with docstrings and annotations.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "list_items",
            "description": "FUNCTION_LIST_DESCRIPTION\n\n            Returns a list of items.\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_item",
            "description": "FUNCTION_GET_DESCRIPTION\n\n            Gets a specific item by ID.\n\n            Args:\n                item_id: The ID of the item to retrieve\n                fields: Optional fields to include\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "item_id": {
                        "type": "string",
                        "description": "The ID of the item to retrieve"
                    },
                    "fields": {
                        "type": "string",
                        "description": "Optional fields to include"
                    }
                },
                "required": [
                    "item_id",
                    "fields"
                ]
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "create_item",
            "description": "FUNCTION_CREATE_DESCRIPTION\n\n            Creates a new item.\n\n            Body:\n                Item object with name and price\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "fastapi_server",
            "description": "Create a FastMCP server from the FastAPI app with custom route mappings.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "fastapi_app_with_descriptions": {
                        "type": "string"
                    }
                },
                "required": [
                    "fastapi_app_with_descriptions"
                ]
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "read_item",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "basic_openapi_spec",
            "description": "Create a minimal OpenAPI spec with different HTTP methods.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_basic_client",
            "description": "Create a simple mock client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tagged_openapi_spec",
            "description": "Create an OpenAPI spec with various tags for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_client",
            "description": "Create a simple mock client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mcp_names_openapi_spec",
            "description": "OpenAPI spec with various operationIds for testing naming strategies.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_client",
            "description": "Mock client for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "get_users",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "create_user",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "array_path_spec",
            "description": "Load a minimal OpenAPI spec with an array path parameter.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi_path_parameters.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_client",
            "description": "Create a mock httpx.AsyncClient.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi_path_parameters.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "select_days",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_openapi_path_parameters.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "sample_openapi_spec",
            "description": "Sample OpenAPI spec for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_route_map_fn.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "http_client",
            "description": "HTTP client for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\server\\openapi\\test_route_map_fn.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "greet",
            "description": "Greet someone by name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_servers\\fastmcp_server.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "add",
            "description": "Add two numbers together.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_servers\\fastmcp_server.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "error_tool",
            "description": "This tool always raises an error.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_servers\\fastmcp_server.py",
            "decorator": [
                "server.tool"
            ]
        },
        {
            "name": "wave",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_servers\\fastmcp_server.py",
            "decorator": [
                "server.resource"
            ]
        },
        {
            "name": "enable_legacy_json_parsing",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\tools\\test_tool.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "process_list",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\tools\\test_tool.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "process_list",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\tools\\test_tool.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "process_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\tools\\test_tool.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "process_set",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\tools\\test_tool.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "process_tuple",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\tools\\test_tool.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\test_decorated_function.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "reset_decorator_called",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\test_decorated_function.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "add",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\test_decorated_function.py",
            "decorator": [
                "decorator"
            ]
        },
        {
            "name": "add_async",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\test_decorated_function.py",
            "decorator": [
                "decorator"
            ]
        },
        {
            "name": "add",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\test_decorated_function.py",
            "decorator": [
                "decorator"
            ]
        },
        {
            "name": "add_async",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\test_decorated_function.py",
            "decorator": [
                "decorator"
            ]
        },
        {
            "name": "add_classmethod",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "tests\\utilities\\test_decorated_function.py",
            "decorator": [
                "classmethod",
                "decorator"
            ]
        },
        {
            "name": "add_staticmethod",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\test_decorated_function.py",
            "decorator": [
                "staticmethod",
                "decorator"
            ]
        },
        {
            "name": "add_classmethod_async",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "tests\\utilities\\test_decorated_function.py",
            "decorator": [
                "classmethod",
                "decorator"
            ]
        },
        {
            "name": "add_staticmethod_async",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\test_decorated_function.py",
            "decorator": [
                "staticmethod",
                "decorator"
            ]
        },
        {
            "name": "add_classmethod_reverse_decorator_order",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "tests\\utilities\\test_decorated_function.py",
            "decorator": [
                "decorator",
                "classmethod"
            ]
        },
        {
            "name": "add_staticmethod_reverse_decorator_order",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\test_decorated_function.py",
            "decorator": [
                "decorator",
                "staticmethod"
            ]
        },
        {
            "name": "add_classmethod_async_reverse_decorator_order",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "tests\\utilities\\test_decorated_function.py",
            "decorator": [
                "decorator",
                "classmethod"
            ]
        },
        {
            "name": "add_staticmethod_async_reverse_decorator_order",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\test_decorated_function.py",
            "decorator": [
                "decorator",
                "staticmethod"
            ]
        },
        {
            "name": "static_method",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\test_types.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "class_method",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "tests\\utilities\\test_types.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "petstore_schema",
            "description": "Fixture that returns a simple Pet Store API schema.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "parsed_petstore_routes",
            "description": "Return parsed routes from the PetStore schema.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "petstore_schema": {
                        "type": "string"
                    }
                },
                "required": [
                    "petstore_schema"
                ]
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "bookstore_schema",
            "description": "Fixture that returns a Book Store API schema with different parameter types.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "parsed_bookstore_routes",
            "description": "Return parsed routes from the BookStore schema.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "bookstore_schema": {
                        "type": "string"
                    }
                },
                "required": [
                    "bookstore_schema"
                ]
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "fastapi_app",
            "description": "Fixture that returns a FastAPI app with various types of endpoints.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "list_items",
            "description": "List all items with pagination.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "create_item",
            "description": "Create a new item.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_item",
            "description": "Get an item by ID.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "update_item",
            "description": "Update an existing item.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "app.put"
            ]
        },
        {
            "name": "delete_item",
            "description": "Delete an item by ID.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "app.delete"
            ]
        },
        {
            "name": "get_item_tag",
            "description": "Get a specific tag for an item.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "upload_file",
            "description": "Upload a file (dummy endpoint for testing query params with POST).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "fastapi_openapi_schema",
            "description": "Fixture that returns the OpenAPI schema of the FastAPI app.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "fastapi_app": {
                        "type": "string"
                    }
                },
                "required": [
                    "fastapi_app"
                ]
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "parsed_fastapi_routes",
            "description": "Return parsed routes from a FastAPI OpenAPI schema.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "fastapi_openapi_schema": {
                        "type": "string"
                    }
                },
                "required": [
                    "fastapi_openapi_schema"
                ]
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "fastapi_route_map",
            "description": "Return a dictionary of routes by operation ID.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parsed_fastapi_routes": {
                        "type": "string"
                    }
                },
                "required": [
                    "parsed_fastapi_routes"
                ]
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "openapi_30_schema",
            "description": "Fixture that returns a simple OpenAPI 3.0.0 schema.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "openapi_31_schema",
            "description": "Fixture that returns a simple OpenAPI 3.1.0 schema.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "openapi_30_with_references",
            "description": "OpenAPI 3.0 schema with references to test resolution.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "openapi_31_with_references",
            "description": "OpenAPI 3.1 schema with references to test resolution.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "complex_schema",
            "description": "Fixture that returns a complex OpenAPI schema with nested references.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi_advanced.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "parsed_complex_routes",
            "description": "Return parsed routes from the complex schema.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "complex_schema": {
                        "type": "string"
                    }
                },
                "required": [
                    "complex_schema"
                ]
            },
            "file": "tests\\utilities\\openapi\\test_openapi_advanced.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "complex_route_map",
            "description": "Return a dictionary of routes by operation ID.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parsed_complex_routes": {
                        "type": "string"
                    }
                },
                "required": [
                    "parsed_complex_routes"
                ]
            },
            "file": "tests\\utilities\\openapi\\test_openapi_advanced.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "schema_with_invalid_reference",
            "description": "Fixture that returns a schema with an invalid reference.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi_advanced.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "schema_with_content_params",
            "description": "Fixture that returns a schema with content-based parameters (complex parameters).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi_advanced.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "parsed_content_param_routes",
            "description": "Return parsed routes from the schema with content parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "schema_with_content_params": {
                        "type": "string"
                    }
                },
                "required": [
                    "schema_with_content_params"
                ]
            },
            "file": "tests\\utilities\\openapi\\test_openapi_advanced.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "schema_all_http_methods",
            "description": "Fixture that returns a schema with all HTTP methods.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi_advanced.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "parsed_http_methods_routes",
            "description": "Return parsed routes from the schema with all HTTP methods.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "schema_all_http_methods": {
                        "type": "string"
                    }
                },
                "required": [
                    "schema_all_http_methods"
                ]
            },
            "file": "tests\\utilities\\openapi\\test_openapi_advanced.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "fastapi_app",
            "description": "Fixture that returns a FastAPI app for live OpenAPI schema testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi_fastapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "list_items",
            "description": "List all items with pagination and optional status filtering.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi_fastapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "create_item",
            "description": "Create a new item (requires authentication).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi_fastapi.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_item",
            "description": "Get details about a specific item.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi_fastapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "update_item",
            "description": "Update an existing item (requires authentication).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi_fastapi.py",
            "decorator": [
                "app.put"
            ]
        },
        {
            "name": "delete_item",
            "description": "Delete an item (requires authentication).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi_fastapi.py",
            "decorator": [
                "app.delete"
            ]
        },
        {
            "name": "update_item_tags",
            "description": "Update just the tags of an item.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi_fastapi.py",
            "decorator": [
                "app.patch"
            ]
        },
        {
            "name": "get_item_tag",
            "description": "Get a specific tag for an item.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi_fastapi.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "upload_file",
            "description": "Upload a file (dummy endpoint for testing query params).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi_fastapi.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "register_webhook",
            "description": "Register a webhook for processing notifications.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi_fastapi.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "fastapi_openapi_schema",
            "description": "Fixture that returns the OpenAPI schema from a live FastAPI server.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "fastapi_app": {
                        "type": "string"
                    }
                },
                "required": [
                    "fastapi_app"
                ]
            },
            "file": "tests\\utilities\\openapi\\test_openapi_fastapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "parsed_routes",
            "description": "Return parsed routes from a FastAPI OpenAPI schema.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "fastapi_openapi_schema": {
                        "type": "string"
                    }
                },
                "required": [
                    "fastapi_openapi_schema"
                ]
            },
            "file": "tests\\utilities\\openapi\\test_openapi_fastapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "route_map",
            "description": "Return a dictionary of routes by operation ID.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parsed_routes": {
                        "type": "string"
                    }
                },
                "required": [
                    "parsed_routes"
                ]
            },
            "file": "tests\\utilities\\openapi\\test_openapi_fastapi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_tag_order",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi_fastapi.py",
            "decorator": [
                "fastapi_app.get"
            ]
        },
        {
            "name": "test_duplicate_tags",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\utilities\\openapi\\test_openapi_fastapi.py",
            "decorator": [
                "fastapi_app.get"
            ]
        }
    ]
}