{
    "tools": [
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\load_balancer.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_servers",
            "description": "Get all server instances",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\load_balancer.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "add_server",
            "description": "Add new server instance",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\load_balancer.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "remove_server",
            "description": "Remove server instance",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\load_balancer.py",
            "decorator": [
                "app.delete"
            ]
        },
        {
            "name": "get_load_balancer_stats",
            "description": "Get load balancer statistics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\load_balancer.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_scaling_rules",
            "description": "Get auto-scaling rules",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\load_balancer.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_scaling_events",
            "description": "Get scaling events history",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\load_balancer.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_request_metrics",
            "description": "Get request metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\load_balancer.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "update_algorithm",
            "description": "Update load balancing algorithm",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\load_balancer.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "proxy_request",
            "description": "Proxy requests to backend servers",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\load_balancer.py",
            "decorator": [
                "app.api_route"
            ]
        },
        {
            "name": "lifespan",
            "description": "Initialize and cleanup AI services",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\main.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "lifespan",
            "description": "Application lifespan manager for startup and shutdown",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\main_consolidated.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "all_services",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\main_monorepo.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "all_connections",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\main_monorepo.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "lifespan",
            "description": "Application lifespan manager for startup and shutdown",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\main_monorepo.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "health_check",
            "description": "Simple health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\minimal_api.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "startup_event",
            "description": "Log startup event",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\minimal_api.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "shutdown_event",
            "description": "Log shutdown event",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\minimal_api.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "get_dashboard",
            "description": "Serve the monitoring dashboard HTML",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\monitoring_dashboard.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\optimization_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_cache_stats",
            "description": "Get cache statistics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\optimization_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_cached_value",
            "description": "Get value from cache",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\optimization_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "set_cached_value",
            "description": "Set value in cache",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\optimization_engine.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "optimize_performance",
            "description": "Generate performance optimization recommendations",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\optimization_engine.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_health_report",
            "description": "Generate and return system health report",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\optimization_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_recommendations",
            "description": "Get optimization recommendations",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\optimization_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_performance_metrics",
            "description": "Get performance metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\optimization_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "record_metric",
            "description": "Record a performance metric",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\optimization_engine.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_system_status",
            "description": "Get current system status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\optimization_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "track_requests",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "request": {
                        "type": "string"
                    },
                    "call_next": {
                        "type": "string"
                    }
                },
                "required": [
                    "request",
                    "call_next"
                ]
            },
            "file": "python-ai-services\\performance_monitor.py",
            "decorator": [
                "app.middleware"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\performance_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "record_metric",
            "description": "Record a metric value",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\performance_monitor.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_metrics",
            "description": "Get all metrics or filtered by category",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\performance_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_metric",
            "description": "Get specific metric details",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\performance_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "add_alert_rule",
            "description": "Add a new alert rule",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\performance_monitor.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_alerts",
            "description": "Get alerts, optionally filtered by status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\performance_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "resolve_alert",
            "description": "Resolve an active alert",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\performance_monitor.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_services_health",
            "description": "Get health status of all monitored services",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\performance_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_service_health",
            "description": "Get health status of a specific service",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\performance_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "generate_performance_report",
            "description": "Generate performance report",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\performance_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_performance_report",
            "description": "Get a specific performance report",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\performance_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_dashboard_data",
            "description": "Get dashboard summary data",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\performance_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_system_status",
            "description": "Get overall system status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\performance_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "login",
            "description": "Authenticate user and return JWT token",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\security_compliance_system.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "logout",
            "description": "Logout user and invalidate session",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\security_compliance_system.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_security_dashboard",
            "description": "Get comprehensive security dashboard",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\security_compliance_system.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_audit_events",
            "description": "Get audit events with filtering",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\security_compliance_system.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "generate_compliance_report",
            "description": "Generate compliance report for specified framework",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\security_compliance_system.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_security_alerts",
            "description": "Get security alerts with filtering",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\security_compliance_system.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "acknowledge_alert",
            "description": "Acknowledge a security alert",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\security_compliance_system.py",
            "decorator": [
                "app.put"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\security_compliance_system.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\system_health_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_dashboard",
            "description": "Get comprehensive dashboard data",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\system_health_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_all_services",
            "description": "Get all monitored services",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\system_health_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_service_health",
            "description": "Get specific service health",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\system_health_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_metrics",
            "description": "Get system metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\system_health_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_alerts",
            "description": "Get system alerts",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\system_health_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "resolve_alert",
            "description": "Resolve an alert",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\system_health_monitor.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_system_resources",
            "description": "Get system resource usage",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\system_health_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "websocket_endpoint",
            "description": "WebSocket endpoint for real-time updates",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\system_health_monitor.py",
            "decorator": [
                "app.websocket"
            ]
        },
        {
            "name": "get_dashboard_html",
            "description": "Get HTML dashboard",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\system_health_monitor.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "create_master_wallet",
            "description": "Create a new master wallet",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_master_wallets",
            "description": "Get all master wallets",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_wallet_details",
            "description": "Get detailed wallet information",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "allocate_funds",
            "description": "Allocate funds to a target (agent, farm, or goal)",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "execute_autonomous_distribution",
            "description": "Execute autonomous fund distribution",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "create_farm",
            "description": "Create a new agent farm",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_farms",
            "description": "Get all farms",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_farm_status",
            "description": "Get detailed farm status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "assign_agent_to_farm",
            "description": "Assign an agent to a farm",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "remove_agent_from_farm",
            "description": "Remove an agent from a farm",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.delete"
            ]
        },
        {
            "name": "activate_farm",
            "description": "Activate a farm",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "pause_farm",
            "description": "Pause a farm",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "create_goal",
            "description": "Create a new goal",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_goals",
            "description": "Get all goals",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_goal_status",
            "description": "Get detailed goal status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "assign_agent_to_goal",
            "description": "Assign an agent to a goal",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "complete_goal",
            "description": "Manually complete a goal",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_contract_status",
            "description": "Get smart contract service status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_chain_transactions",
            "description": "Get recent transactions for a blockchain",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_autonomous_system_status",
            "description": "Get comprehensive autonomous system status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\autonomous_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "create_master_wallet",
            "description": "\n    Create a new master wallet\n    Phase 2: Complete wallet creation with advanced configuration\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\comprehensive_wallet_api.py",
            "decorator": [
                "wallet_api_router.post"
            ]
        },
        {
            "name": "list_master_wallets",
            "description": "\n    List all master wallets with optional performance data\n    Phase 2: Enhanced wallet listing with comprehensive data\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\comprehensive_wallet_api.py",
            "decorator": [
                "wallet_api_router.get"
            ]
        },
        {
            "name": "get_wallet_details",
            "description": "\n    Get detailed wallet information\n    Phase 2: Comprehensive wallet details with optional data inclusion\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\comprehensive_wallet_api.py",
            "decorator": [
                "wallet_api_router.get"
            ]
        },
        {
            "name": "update_wallet_config",
            "description": "\n    Update wallet configuration\n    Phase 2: Advanced wallet configuration management\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\comprehensive_wallet_api.py",
            "decorator": [
                "wallet_api_router.put"
            ]
        },
        {
            "name": "allocate_wallet_funds",
            "description": "\n    Allocate funds from wallet to target (agent/farm/goal)\n    Phase 2: Enhanced fund allocation with advanced validation\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\comprehensive_wallet_api.py",
            "decorator": [
                "wallet_api_router.post"
            ]
        },
        {
            "name": "collect_wallet_funds",
            "description": "\n    Collect funds from allocation back to wallet\n    Phase 2: Enhanced fund collection with detailed reporting\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\comprehensive_wallet_api.py",
            "decorator": [
                "wallet_api_router.post"
            ]
        },
        {
            "name": "transfer_between_wallets",
            "description": "\n    Transfer funds between wallets\n    Phase 2: Inter-wallet transfer capability\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\comprehensive_wallet_api.py",
            "decorator": [
                "wallet_api_router.post"
            ]
        },
        {
            "name": "get_wallet_performance",
            "description": "\n    Get detailed wallet performance metrics\n    Phase 2: Advanced performance analytics\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\comprehensive_wallet_api.py",
            "decorator": [
                "wallet_api_router.get"
            ]
        },
        {
            "name": "get_wallet_balances",
            "description": "\n    Get current wallet balances across all chains\n    Phase 2: Real-time balance tracking with refresh capability\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\comprehensive_wallet_api.py",
            "decorator": [
                "wallet_api_router.get"
            ]
        },
        {
            "name": "get_wallet_allocations",
            "description": "\n    Get wallet fund allocations with filtering\n    Phase 2: Advanced allocation management and filtering\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\comprehensive_wallet_api.py",
            "decorator": [
                "wallet_api_router.get"
            ]
        },
        {
            "name": "get_wallet_analytics_summary",
            "description": "\n    Get comprehensive wallet analytics summary\n    Phase 2: Platform-wide wallet analytics\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\comprehensive_wallet_api.py",
            "decorator": [
                "wallet_api_router.get"
            ]
        },
        {
            "name": "emergency_stop_wallet",
            "description": "\n    Emergency stop all wallet operations\n    Phase 2: Advanced wallet safety controls\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\comprehensive_wallet_api.py",
            "decorator": [
                "wallet_api_router.post"
            ]
        },
        {
            "name": "submit_trading_signal",
            "description": "Submit a trading signal from an AI agent for execution",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_signal_status",
            "description": "Get status of a trading signal",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_active_signals",
            "description": "Get active trading signals",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "cancel_signal",
            "description": "Cancel an active trading signal",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.delete"
            ]
        },
        {
            "name": "get_bridge_status",
            "description": "Get agent trading bridge status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "enable_bridge",
            "description": "Enable the agent trading bridge",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "disable_bridge",
            "description": "Disable the agent trading bridge for safety",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_safety_status",
            "description": "Get comprehensive trading safety status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_agent_safety_status",
            "description": "Get safety status for specific agent",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "activate_emergency_stop",
            "description": "Activate emergency stop - halt all trading",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "deactivate_emergency_stop",
            "description": "Deactivate emergency stop",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "suspend_trading",
            "description": "Suspend all trading temporarily",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "resume_trading",
            "description": "Resume trading after suspension",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_agent_performance",
            "description": "Get comprehensive performance metrics for an agent",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_agent_rankings",
            "description": "Get agent performance rankings",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_portfolio_performance",
            "description": "Get overall portfolio performance across all agents",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "record_trade_entry",
            "description": "Record a new trade entry for performance tracking",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "record_trade_exit",
            "description": "Record trade exit and calculate PnL",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "analyze_symbol",
            "description": "Analyze a symbol using specified framework or best available",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "run_consensus_analysis",
            "description": "Run analysis using multiple frameworks and reach consensus",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_task_status",
            "description": "Get status of a coordination task",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "execute_trading_signal_via_coordination",
            "description": "Execute a trading signal through the coordination layer",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_coordination_status",
            "description": "Get comprehensive coordination service status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_phase2_status",
            "description": "Get comprehensive Phase 2 agent trading status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase2_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "create_goal_from_natural_language",
            "description": "Create a goal from natural language input using LLM analysis",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "analyze_natural_language_input",
            "description": "Analyze natural language input without creating a goal",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_enhanced_goal_status",
            "description": "Get comprehensive status of an enhanced goal",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_active_goals",
            "description": "Get all active goals for the current user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_goal_analytics",
            "description": "Get comprehensive goal analytics and insights",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_goal_recommendations",
            "description": "Get AI-powered goal recommendations",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "manage_goal_collaboration",
            "description": "Manage goal collaboration features",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "upload_knowledge_resource",
            "description": "Upload a new knowledge resource file",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "create_resource_from_url",
            "description": "Create a knowledge resource from a URL",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "search_knowledge_resources",
            "description": "Search farm knowledge resources",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_knowledge_resource",
            "description": "Get a specific knowledge resource",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_resource_content",
            "description": "Get the full content of a knowledge resource",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "handle_agent_knowledge_request",
            "description": "Handle agent knowledge requests with AI recommendations",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_trading_sops",
            "description": "Get relevant standard operating procedures",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_market_research",
            "description": "Get relevant market research documents",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "perform_bulk_resource_operation",
            "description": "Perform bulk operations on knowledge resources",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "stream_goal_events",
            "description": "Server-sent events for real-time goal updates",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "stream_knowledge_events",
            "description": "Server-sent events for real-time knowledge system updates",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_goal_service_status",
            "description": "Get enhanced goal management service status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_knowledge_service_status",
            "description": "Get farm knowledge service status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_phase8_overview",
            "description": "Get comprehensive Phase 8 system overview",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\phase8_endpoints.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_wallet_control_panel",
            "description": "\n    Get master wallet control panel data\n    Returns comprehensive wallet control interface data\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\wallet_dashboard_api.py",
            "decorator": [
                "wallet_dashboard_router.get"
            ]
        },
        {
            "name": "allocate_funds",
            "description": "\n    Execute fund allocation through dashboard\n    Allocates funds to agents, farms, or goals\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\wallet_dashboard_api.py",
            "decorator": [
                "wallet_dashboard_router.post"
            ]
        },
        {
            "name": "collect_funds",
            "description": "\n    Execute fund collection through dashboard\n    Collects funds from profitable allocations\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\wallet_dashboard_api.py",
            "decorator": [
                "wallet_dashboard_router.post"
            ]
        },
        {
            "name": "switch_active_wallet",
            "description": "\n    Switch active wallet in dashboard\n    Changes the currently selected wallet for operations\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\wallet_dashboard_api.py",
            "decorator": [
                "wallet_dashboard_router.post"
            ]
        },
        {
            "name": "get_wallet_enhanced_overview",
            "description": "\n    Get enhanced overview with wallet-centric data\n    Returns platform overview with master wallet integration\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\wallet_dashboard_api.py",
            "decorator": [
                "wallet_dashboard_router.get"
            ]
        },
        {
            "name": "get_allocation_opportunities",
            "description": "\n    Get available fund allocation opportunities\n    Returns agents, farms, and goals that could benefit from funding\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\wallet_dashboard_api.py",
            "decorator": [
                "wallet_dashboard_router.get"
            ]
        },
        {
            "name": "get_collection_opportunities",
            "description": "\n    Get fund collection opportunities\n    Returns profitable allocations ready for harvest\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\wallet_dashboard_api.py",
            "decorator": [
                "wallet_dashboard_router.get"
            ]
        },
        {
            "name": "get_fund_flow_analytics",
            "description": "\n    Get fund flow analytics for visualization\n    Returns fund movement analytics and performance data\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\wallet_dashboard_api.py",
            "decorator": [
                "wallet_dashboard_router.get"
            ]
        },
        {
            "name": "get_wallet_hierarchy",
            "description": "\n    Get wallet hierarchy visualization data\n    Returns master wallet \u2192 farm \u2192 agent hierarchy structure\n    \"\"\"\n   ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\wallet_dashboard_api.py",
            "decorator": [
                "wallet_dashboard_router.get"
            ]
        },
        {
            "name": "create_new_agent",
            "description": "\n    Create a new trading agent configuration.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\agent_management_routes.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "list_all_agents",
            "description": "\n    Retrieve a list of all configured trading agents.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\agent_management_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_specific_agent",
            "description": "\n    Retrieve the configuration for a specific trading agent by its ID.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\agent_management_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "update_existing_agent",
            "description": "\n    Update an existing trading agent's configuration.\n    Only fields provided in the request body will be updated.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\agent_management_routes.py",
            "decorator": [
                "router.put"
            ]
        },
        {
            "name": "delete_specific_agent",
            "description": "\n    Delete a specific trading agent by its ID.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\agent_management_routes.py",
            "decorator": [
                "router.delete"
            ]
        },
        {
            "name": "start_specific_agent",
            "description": "\n    Start a specific trading agent. (Simulated: updates status to 'running')\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\agent_management_routes.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "stop_specific_agent",
            "description": "\n    Stop a specific trading agent. (Simulated: updates status to 'stopped')\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\agent_management_routes.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_specific_agent_status",
            "description": "\n    Retrieve the current status of a specific trading agent.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\agent_management_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "create_alert_config_for_agent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\alert_routes.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "list_alert_configs_for_agent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\alert_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_specific_alert_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\alert_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "update_specific_alert_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\alert_routes.py",
            "decorator": [
                "router.put"
            ]
        },
        {
            "name": "delete_specific_alert_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\alert_routes.py",
            "decorator": [
                "router.delete"
            ]
        },
        {
            "name": "get_agent_portfolio_summary",
            "description": "\n    Retrieve the portfolio summary for a specific trading agent.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\dashboard_data_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_agent_trade_history",
            "description": "\n    Retrieve the trade history for a specific trading agent.\n    (Currently returns mocked data)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\dashboard_data_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_agent_open_orders",
            "description": "\n    Retrieve a list of open orders for a specific trading agent.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\dashboard_data_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_agent_order_history",
            "description": "\n    Retrieve the historical orders for a specific trading agent.\n    (Currently returns mocked data)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\dashboard_data_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_agent_equity_curve",
            "description": "\n    Retrieves historical portfolio equity data points for a given agent,\n    allowing for time-based filtering and pagination.\n    This data can be used to plot an equity curve.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\dashboard_data_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "create_expert_agent",
            "description": "Create a new specialized expert agent",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\expert_agents_routes.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "list_expert_agents",
            "description": "List all expert agents",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_expert_agent_details",
            "description": "Get detailed information about a specific expert agent",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "activate_expert_agent",
            "description": "Activate an expert agent",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\expert_agents_routes.py",
            "decorator": [
                "router.put"
            ]
        },
        {
            "name": "deactivate_expert_agent",
            "description": "Deactivate an expert agent",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\expert_agents_routes.py",
            "decorator": [
                "router.put"
            ]
        },
        {
            "name": "analyze_market",
            "description": "Perform coordinated market analysis using all active expert agents",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\expert_agents_routes.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_analysis_details",
            "description": "Get details of a specific analysis",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_performance_summary",
            "description": "Get performance summary for all expert agents",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "optimize_expert_weights",
            "description": "Optimize expert agent weights based on recent performance",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\expert_agents_routes.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_agent_performance_history",
            "description": "Get performance history for a specific expert agent",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_agent_memory",
            "description": "Get memory contents for a specific expert agent",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "trigger_agent_learning",
            "description": "Manually trigger learning process for an expert agent",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\expert_agents_routes.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_coordination_settings",
            "description": "Get current coordination settings",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "update_coordination_settings",
            "description": "Update coordination settings",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\expert_agents_routes.py",
            "decorator": [
                "router.put"
            ]
        },
        {
            "name": "list_tasks",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\monitoring_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_task_details",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\monitoring_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_agent_memory_stats_route",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\monitoring_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_system_health_summary",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\monitoring_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_agent_performance_metrics",
            "description": "\n    Calculate and retrieve performance metrics for a specific trading agent.\n    Metrics are calculated based on the agent's trade history.\n    Note: Trade history may be mocked, which will affect metric accuracy.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\performance_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "run_backtest_endpoint",
            "description": "\n    Runs a backtest simulation for a given agent configuration or ID against historical market data.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\simulation_routes.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "websocket_dashboard_endpoint",
            "description": "\n    WebSocket endpoint for real-time dashboard updates.\n    A unique client_id should be provided by each connecting client.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\api\\v1\\websocket_routes.py",
            "decorator": [
                "router.websocket"
            ]
        },
        {
            "name": "all_services",
            "description": "Get all initialized services",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\core\\service_registry.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "all_connections",
            "description": "Get all connections",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\core\\service_registry.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "service_lifecycle",
            "description": "Context manager for service lifecycle management",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\core\\service_registry.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "dashboard_home",
            "description": "Main dashboard home page",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\dashboard\\monorepo_dashboard.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_overview",
            "description": "Get system overview API",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\dashboard\\monorepo_dashboard.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_services",
            "description": "Get services information API",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\dashboard\\monorepo_dashboard.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_agents_dashboard",
            "description": "Get agents dashboard API",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\dashboard\\monorepo_dashboard.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_trading_dashboard",
            "description": "Get trading dashboard API",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\dashboard\\monorepo_dashboard.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_market_data_dashboard",
            "description": "Get market data dashboard API",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\dashboard\\monorepo_dashboard.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_ai_analytics_dashboard",
            "description": "Get AI analytics dashboard API",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\dashboard\\monorepo_dashboard.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "health_check",
            "description": "Dashboard health check",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\dashboard\\monorepo_dashboard.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "Get system capabilities",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "calculate_var",
            "description": "Calculate Value at Risk",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_risk_management.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_var_calculation",
            "description": "Get VaR calculation result",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "run_stress_test",
            "description": "Run stress tests",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_risk_management.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_stress_scenarios",
            "description": "Get available stress test scenarios",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_stress_results",
            "description": "Get stress test results for portfolio",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_risk_profile",
            "description": "Get comprehensive risk profile",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "add_risk_limit",
            "description": "Add new risk limit",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_risk_management.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_risk_limits",
            "description": "Get risk limits",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_risk_alerts",
            "description": "Get risk alerts",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "acknowledge_alert",
            "description": "Acknowledge risk alert",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_risk_management.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_portfolio_metrics",
            "description": "Get current risk metrics for portfolio",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "websocket_endpoint",
            "description": "WebSocket endpoint for real-time risk updates",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_risk_management.py",
            "decorator": [
                "app.websocket"
            ]
        },
        {
            "name": "get_system_metrics",
            "description": "Get system metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_trading_strategies.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "Get framework capabilities",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_trading_strategies.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "create_strategy",
            "description": "Create a new trading strategy",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_trading_strategies.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_strategies",
            "description": "Get all strategies",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_trading_strategies.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_strategy",
            "description": "Get specific strategy",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_trading_strategies.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "generate_strategy_signals",
            "description": "Generate signals for a strategy",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_trading_strategies.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_signals",
            "description": "Get trading signals",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_trading_strategies.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "run_backtest",
            "description": "Run strategy backtest",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_trading_strategies.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_backtest_result",
            "description": "Get backtest result",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_trading_strategies.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_strategy_performance",
            "description": "Get strategy performance metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_trading_strategies.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "websocket_endpoint",
            "description": "WebSocket endpoint for real-time strategy updates",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_trading_strategies.py",
            "decorator": [
                "app.websocket"
            ]
        },
        {
            "name": "get_metrics",
            "description": "Get system metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\advanced_trading_strategies.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "root",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\agent_trading_tools.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_tools_registry",
            "description": "Get all available tools for LLM integration",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\agent_trading_tools.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "execute_tool_endpoint",
            "description": "Execute a specific tool with parameters",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\agent_trading_tools.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_tool_info",
            "description": "Get information about a specific tool",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\agent_trading_tools.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_tools_performance",
            "description": "Get tools performance metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\agent_trading_tools.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ai_prediction_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "Get AI engine capabilities",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ai_prediction_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "generate_prediction",
            "description": "Generate a new AI prediction",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ai_prediction_engine.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_prediction",
            "description": "Get a specific prediction by ID",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ai_prediction_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_predictions",
            "description": "Get prediction history",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ai_prediction_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_model_performance",
            "description": "Get model performance metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ai_prediction_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_market_data",
            "description": "Get market data for a symbol",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ai_prediction_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_feature_importance",
            "description": "Get feature importance analysis for a symbol",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ai_prediction_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "websocket_endpoint",
            "description": "WebSocket endpoint for real-time predictions",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ai_prediction_engine.py",
            "decorator": [
                "app.websocket"
            ]
        },
        {
            "name": "get_metrics",
            "description": "Get system metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ai_prediction_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "startup_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alpaca_market_data.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "shutdown_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alpaca_market_data.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alpaca_market_data.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_metrics",
            "description": "Server metrics endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alpaca_market_data.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_latest_quotes",
            "description": "Get latest quotes for symbols",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alpaca_market_data.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_latest_trades",
            "description": "Get latest trades for symbols",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alpaca_market_data.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_historical_bars",
            "description": "Get historical bar data for symbols",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alpaca_market_data.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_asset_info",
            "description": "Get asset information for symbols",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alpaca_market_data.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_market_hours",
            "description": "Get market hours information",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alpaca_market_data.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "Get server capabilities",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alpaca_market_data.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "websocket_endpoint",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "websocket": {
                        "type": "string"
                    }
                },
                "required": [
                    "websocket"
                ]
            },
            "file": "python-ai-services\\mcp_servers\\alpaca_market_data.py",
            "decorator": [
                "app.websocket"
            ]
        },
        {
            "name": "startup_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alphavantage_data.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "shutdown_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alphavantage_data.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alphavantage_data.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_metrics",
            "description": "Server metrics endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alphavantage_data.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_fundamental_data",
            "description": "Get fundamental data for symbols",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alphavantage_data.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_technical_indicators",
            "description": "Get technical indicators for symbols",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alphavantage_data.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_earnings_data",
            "description": "Get earnings data for symbols",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alphavantage_data.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_news_sentiment",
            "description": "Get news and sentiment data for symbols",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alphavantage_data.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_economic_indicator",
            "description": "Get economic indicators",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alphavantage_data.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "Get server capabilities",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\alphavantage_data.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\external_data_integration.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "Get integration capabilities",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\external_data_integration.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "add_provider",
            "description": "Add a new data provider",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\external_data_integration.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_providers",
            "description": "Get all data providers",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\external_data_integration.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_provider",
            "description": "Get specific provider details",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\external_data_integration.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "query_data",
            "description": "Query data from external provider",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\external_data_integration.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_data_feeds",
            "description": "Get active data feeds",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\external_data_integration.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_provider_metrics",
            "description": "Get provider performance metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\external_data_integration.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_request_history",
            "description": "Get request history",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\external_data_integration.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "clear_cache",
            "description": "Clear cache entries",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\external_data_integration.py",
            "decorator": [
                "app.delete"
            ]
        },
        {
            "name": "websocket_endpoint",
            "description": "WebSocket endpoint for real-time updates",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\external_data_integration.py",
            "decorator": [
                "app.websocket"
            ]
        },
        {
            "name": "get_dashboard_data",
            "description": "Get dashboard summary data",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\external_data_integration.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_system_metrics",
            "description": "Get system metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\external_data_integration.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "handle_list_tools",
            "description": "List all available knowledge tools for agents",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\farm_knowledge_server.py",
            "decorator": [
                "self.server.list_tools"
            ]
        },
        {
            "name": "handle_call_tool",
            "description": "Handle tool calls from agents",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\farm_knowledge_server.py",
            "decorator": [
                "self.server.call_tool"
            ]
        },
        {
            "name": "handle_list_resources",
            "description": "List available knowledge resources",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\farm_knowledge_server.py",
            "decorator": [
                "self.server.list_resources"
            ]
        },
        {
            "name": "handle_read_resource",
            "description": "Read knowledge resource content",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\farm_knowledge_server.py",
            "decorator": [
                "self.server.read_resource"
            ]
        },
        {
            "name": "startup_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\financial_datasets.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "shutdown_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\financial_datasets.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\financial_datasets.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_metrics",
            "description": "Server metrics endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\financial_datasets.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_sector_data",
            "description": "Get sector performance data",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\financial_datasets.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_economic_data",
            "description": "Get economic indicators",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\financial_datasets.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_esg_data",
            "description": "Get ESG data for symbols",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\financial_datasets.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_alternative_data",
            "description": "Get alternative data",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\financial_datasets.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "Get server capabilities",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\financial_datasets.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\market_microstructure.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "Get system capabilities",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\market_microstructure.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "process_trade",
            "description": "Process incoming trade",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\market_microstructure.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "update_order_book",
            "description": "Update order book",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\market_microstructure.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_order_book",
            "description": "Get current order book",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\market_microstructure.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_order_flow_metrics",
            "description": "Get order flow metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\market_microstructure.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_liquidity_metrics",
            "description": "Get liquidity metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\market_microstructure.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "predict_market_impact",
            "description": "Predict market impact",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\market_microstructure.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_market_impact",
            "description": "Get market impact result",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\market_microstructure.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_market_regime",
            "description": "Get market regime analysis",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\market_microstructure.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_microstructure_signals",
            "description": "Get microstructure signals",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\market_microstructure.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_trades",
            "description": "Get recent trades",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\market_microstructure.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "websocket_endpoint",
            "description": "WebSocket endpoint for real-time microstructure data",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\market_microstructure.py",
            "decorator": [
                "app.websocket"
            ]
        },
        {
            "name": "get_system_metrics",
            "description": "Get system metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\market_microstructure.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ml_portfolio_optimizer.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "Get optimizer capabilities",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ml_portfolio_optimizer.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "optimize_portfolio",
            "description": "Optimize portfolio allocation",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ml_portfolio_optimizer.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_portfolios",
            "description": "Get all portfolios",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ml_portfolio_optimizer.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_portfolio",
            "description": "Get specific portfolio",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ml_portfolio_optimizer.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_optimization_result",
            "description": "Get optimization result",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ml_portfolio_optimizer.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_optimization_results",
            "description": "Get optimization results",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ml_portfolio_optimizer.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "run_backtest",
            "description": "Run strategy backtest",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ml_portfolio_optimizer.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_backtest_result",
            "description": "Get backtest result",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ml_portfolio_optimizer.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_asset_universe",
            "description": "Get available assets",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ml_portfolio_optimizer.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_asset_details",
            "description": "Get specific asset details",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ml_portfolio_optimizer.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "websocket_endpoint",
            "description": "WebSocket endpoint for real-time optimization updates",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ml_portfolio_optimizer.py",
            "decorator": [
                "app.websocket"
            ]
        },
        {
            "name": "get_metrics",
            "description": "Get system metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\ml_portfolio_optimizer.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "startup_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\mongodb_intelligence.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "health_check",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\mongodb_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_metrics",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\mongodb_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "store_document",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\mongodb_intelligence.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "query_documents",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\mongodb_intelligence.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_collections",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\mongodb_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_collection_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\mongodb_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_data_insights",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\mongodb_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_query_history",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\mongodb_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_collection_indexes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\mongodb_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "websocket_endpoint",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\mongodb_intelligence.py",
            "decorator": [
                "app.websocket"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\mongodb_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "startup_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\neo4j_intelligence.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "health_check",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\neo4j_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_metrics",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\neo4j_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "create_node",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\neo4j_intelligence.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "create_relationship",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\neo4j_intelligence.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "execute_cypher_query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\neo4j_intelligence.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "find_shortest_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\neo4j_intelligence.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_neighbors",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\neo4j_intelligence.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "calculate_centrality",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\neo4j_intelligence.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_communities",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\neo4j_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_graph_insights",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\neo4j_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_graph_statistics",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\neo4j_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "websocket_endpoint",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\neo4j_intelligence.py",
            "decorator": [
                "app.websocket"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\neo4j_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "startup_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\octagon_intelligence.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "health_check",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\octagon_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_metrics",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\octagon_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "perform_analysis",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\octagon_intelligence.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_analysis_result",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\octagon_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "search_patterns",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\octagon_intelligence.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_symbol_patterns",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\octagon_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_market_insights",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\octagon_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_predictive_models",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\octagon_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_sentiment_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\octagon_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "websocket_endpoint",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\octagon_intelligence.py",
            "decorator": [
                "app.websocket"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\octagon_intelligence.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "startup_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\order_management.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "health_check",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\order_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_metrics",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\order_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "submit_advanced_order",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\order_management.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_order_status",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\order_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "cancel_advanced_order",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\order_management.py",
            "decorator": [
                "app.delete"
            ]
        },
        {
            "name": "get_all_orders",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\order_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "websocket_endpoint",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\order_management.py",
            "decorator": [
                "app.websocket"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\order_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "startup_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\portfolio_management.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "health_check",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\portfolio_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_metrics",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\portfolio_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "create_portfolio",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\portfolio_management.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_portfolios",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\portfolio_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_portfolio",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\portfolio_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "add_trade",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\portfolio_management.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_performance_history",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\portfolio_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_risk_metrics",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\portfolio_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_rebalance_recommendations",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\portfolio_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "websocket_endpoint",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\portfolio_management.py",
            "decorator": [
                "app.websocket"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\portfolio_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "startup_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\risk_management.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "health_check",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_metrics",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "assess_order_risk",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\risk_management.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_portfolio_risk",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_risk_limits",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "create_risk_limit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\risk_management.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_compliance_checks",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_risk_alerts",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "acknowledge_alert",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\risk_management.py",
            "decorator": [
                "app.put"
            ]
        },
        {
            "name": "get_market_risk_factors",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "websocket_endpoint",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\risk_management.py",
            "decorator": [
                "app.websocket"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\risk_management.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\sentiment_analysis_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "Get sentiment analysis capabilities",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\sentiment_analysis_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "analyze_sentiment",
            "description": "Analyze sentiment of provided text",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\sentiment_analysis_engine.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "analyze_news_sentiment",
            "description": "Analyze sentiment for news related to a symbol",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\sentiment_analysis_engine.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_sentiment_signals",
            "description": "Get sentiment-based trading signals",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\sentiment_analysis_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_sentiment_summary",
            "description": "Get latest sentiment summary for a symbol",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\sentiment_analysis_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_news_articles",
            "description": "Get news articles with optional filtering",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\sentiment_analysis_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_sentiment_trends",
            "description": "Get sentiment trends for a symbol over time",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\sentiment_analysis_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "websocket_endpoint",
            "description": "WebSocket endpoint for real-time sentiment updates",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\sentiment_analysis_engine.py",
            "decorator": [
                "app.websocket"
            ]
        },
        {
            "name": "get_metrics",
            "description": "Get system metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\sentiment_analysis_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\technical_analysis_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "Get technical analysis capabilities",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\technical_analysis_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "perform_technical_analysis",
            "description": "Perform comprehensive technical analysis",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\technical_analysis_engine.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_analysis",
            "description": "Get a specific analysis by ID",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\technical_analysis_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_indicators",
            "description": "Get specific technical indicators for a symbol",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\technical_analysis_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_patterns",
            "description": "Get pattern analysis for a symbol",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\technical_analysis_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_support_resistance",
            "description": "Get support and resistance levels for a symbol",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\technical_analysis_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "websocket_endpoint",
            "description": "WebSocket endpoint for real-time technical analysis",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\technical_analysis_engine.py",
            "decorator": [
                "app.websocket"
            ]
        },
        {
            "name": "get_metrics",
            "description": "Get system metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\technical_analysis_engine.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "startup_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\trading_gateway.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "shutdown_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\trading_gateway.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\trading_gateway.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_metrics",
            "description": "Server metrics endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\trading_gateway.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "submit_order",
            "description": "Submit a new order",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\trading_gateway.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_orders",
            "description": "Get orders with optional filtering",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\trading_gateway.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_order",
            "description": "Get specific order by ID",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\trading_gateway.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "cancel_order",
            "description": "Cancel an order",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\trading_gateway.py",
            "decorator": [
                "app.delete"
            ]
        },
        {
            "name": "get_positions",
            "description": "Get current positions",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\trading_gateway.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_portfolio",
            "description": "Get current portfolio",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\trading_gateway.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_trades",
            "description": "Get trade history",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\trading_gateway.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "validate_order",
            "description": "Validate an order without submitting",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\trading_gateway.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_capabilities",
            "description": "Get server capabilities",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\mcp_servers\\trading_gateway.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "asset_symbol_required_for_position_metric",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    },
                    "values": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v",
                    "values"
                ]
            },
            "file": "python-ai-services\\models\\alert_models.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "email_required_for_email_channel",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    },
                    "values": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v",
                    "values"
                ]
            },
            "file": "python-ai-services\\models\\alert_models.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "webhook_url_required_for_webhook_channel",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    },
                    "values": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v",
                    "values"
                ]
            },
            "file": "python-ai-services\\models\\alert_models.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "validate_trade_action_str",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "value"
                ]
            },
            "file": "python-ai-services\\models\\crew_models.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "get_session",
            "description": "Get database session with context manager",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\models\\database_models.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "validate_input_text",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "python-ai-services\\models\\enhanced_goal_models.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "size_float",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\models\\hyperliquid_models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "entry_price_float",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\models\\hyperliquid_models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "unrealized_pnl_float",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\models\\hyperliquid_models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "margin_used_float",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\models\\hyperliquid_models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "liquidation_price_float",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\models\\hyperliquid_models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ensure_str",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "python-ai-services\\models\\hyperliquid_models.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "total_account_value_float",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\models\\hyperliquid_models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "total_pnl_float",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\models\\hyperliquid_models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "calculate_available_balance",
            "description": "Calculate available balance",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    },
                    "values": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v",
                    "values"
                ]
            },
            "file": "python-ai-services\\models\\master_wallet_models.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "check_positive_prices",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "python-ai-services\\models\\paper_trading_models.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "check_positive_prices",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "python-ai-services\\models\\paper_trading_models.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "quantity_cannot_be_zero",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "python-ai-services\\models\\paper_trading_models.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "check_config_or_id_present_v1",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "python-ai-services\\models\\simulation_models.py",
            "decorator": [
                "root_validator"
            ]
        },
        {
            "name": "check_fixed_brick_size_value",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "python-ai-services\\models\\strategy_models.py",
            "decorator": [
                "model_validator"
            ]
        },
        {
            "name": "check_smoothing_period",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "python-ai-services\\models\\strategy_models.py",
            "decorator": [
                "model_validator"
            ]
        },
        {
            "name": "validate_confidence",
            "description": "Validate confidence is between 0 and 100.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "python-ai-services\\models\\trading_strategy.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "validate_price",
            "description": "Validate price for different order types.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    },
                    "values": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v",
                    "values"
                ]
            },
            "file": "python-ai-services\\models\\trading_strategy.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "validate_stop_price",
            "description": "Validate stop_price for different order types.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    },
                    "values": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v",
                    "values"
                ]
            },
            "file": "python-ai-services\\models\\trading_strategy.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "check_one_value_source",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    },
                    "info": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v",
                    "info"
                ]
            },
            "file": "python-ai-services\\models\\visualization_models.py",
            "decorator": [
                "field_validator",
                "classmethod#Needstobeclassmethod"
            ]
        },
        {
            "name": "check_at_least_one_input_method",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "python-ai-services\\models\\watchlist_models.py",
            "decorator": [
                "root_validator",
                "classmethod#root_validatorneedstobeaclassmethod"
            ]
        },
        {
            "name": "get_provider_name",
            "description": "Return the provider name enum",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\providers\\base_market_provider.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_supported_assets",
            "description": "Return list of supported asset types",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\providers\\base_market_provider.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_supported_timeframes",
            "description": "Return list of supported timeframes",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\providers\\base_market_provider.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_quote",
            "description": "Get real-time quote for a symbol",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\providers\\base_market_provider.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_quotes",
            "description": "Get real-time quotes for multiple symbols",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\providers\\base_market_provider.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_historical_data",
            "description": "Get historical OHLCV data",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\providers\\base_market_provider.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_orderbook",
            "description": "Get order book snapshot",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\providers\\base_market_provider.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_recent_trades",
            "description": "Get recent trades",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\providers\\base_market_provider.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "search_symbols",
            "description": "Search for symbols by name or ticker",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\providers\\base_market_provider.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "create_expert_agent",
            "description": "Create a new expert agent",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_agents_status",
            "description": "Get status of all expert agents",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_agent_status",
            "description": "Get status of a specific expert agent",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "delete_expert_agent",
            "description": "Delete an expert agent",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.delete"
            ]
        },
        {
            "name": "analyze_symbol",
            "description": "Get expert analysis for a trading symbol",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "quick_analyze_symbol",
            "description": "Quick analysis with minimal market data",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "assign_goal_to_agent",
            "description": "Assign a goal to an expert agent",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_agent_goals",
            "description": "Get goals for an expert agent",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "update_agent_performance",
            "description": "Update agent performance metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_agent_performance",
            "description": "Get agent performance metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "trigger_learning_cycle",
            "description": "Trigger a learning cycle for an agent",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_agent_learning_status",
            "description": "Get agent learning status and memory",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "optimize_agent_parameters",
            "description": "Optimize agent parameters based on performance",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_coordination_status",
            "description": "Get agent coordination status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "configure_coordination",
            "description": "Configure agent coordination parameters",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.post"
            ]
        },
        {
            "name": "get_expert_agent_types",
            "description": "Get available expert agent types",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_learning_phases",
            "description": "Get available learning phases",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_confidence_levels",
            "description": "Get available confidence levels",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "get_analytics_summary",
            "description": "Get comprehensive analytics summary for all expert agents",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\routes\\expert_agents_routes.py",
            "decorator": [
                "router.get"
            ]
        },
        {
            "name": "adaptive_learning_context",
            "description": "Context manager for adaptive learning service",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\adaptive_learning_service.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "lifecycle_service_context",
            "description": "Context manager for lifecycle service",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\agent_lifecycle_service.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "monitoring_service_context",
            "description": "Context manager for monitoring service",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\agent_monitoring_service.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "backtesting_context",
            "description": "Context manager for backtesting service",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\backtesting_service.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "calculate_twap_schedule",
            "description": "Calculate TWAP (Time-Weighted Average Price) execution schedule",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\live_trading_service.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "calculate_vwap_weights",
            "description": "Calculate VWAP (Volume-Weighted Average Price) execution weights",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\live_trading_service.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "calculate_participation_rate",
            "description": "Calculate maximum order size based on market participation rate",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\live_trading_service.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "live_trading_context",
            "description": "Context manager for live trading service",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\live_trading_service.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "calculate_rsi",
            "description": "Calculate RSI (Relative Strength Index)",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\market_analysis_service.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "calculate_macd",
            "description": "Calculate MACD (Moving Average Convergence Divergence)",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\market_analysis_service.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "calculate_bollinger_bands",
            "description": "Calculate Bollinger Bands",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\market_analysis_service.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "calculate_moving_averages",
            "description": "Calculate multiple moving averages",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\market_analysis_service.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "calculate_stochastic",
            "description": "Calculate Stochastic Oscillator",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\market_analysis_service.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "market_analysis_context",
            "description": "Context manager for market analysis service",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\market_analysis_service.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "connect",
            "description": "Connect to exchange",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\multi_exchange_integration.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "disconnect",
            "description": "Disconnect from exchange",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\multi_exchange_integration.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_market_data",
            "description": "Get current market data",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\multi_exchange_integration.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_order_book",
            "description": "Get order book",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\multi_exchange_integration.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "place_order",
            "description": "Place order",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\multi_exchange_integration.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "cancel_order",
            "description": "Cancel order",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\multi_exchange_integration.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_order_status",
            "description": "Get order status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\multi_exchange_integration.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_balances",
            "description": "Get account balances",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\multi_exchange_integration.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_trade_history",
            "description": "Get trade history",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\multi_exchange_integration.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "performance_analytics_context",
            "description": "Context manager for performance analytics service",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\performance_analytics_service.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "mean_variance_optimization",
            "description": "Mean-variance optimization (Markowitz)",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\portfolio_management_service.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "risk_parity_optimization",
            "description": "Risk parity optimization - equal risk contribution",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\portfolio_management_service.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "black_litterman_optimization",
            "description": "Black-Litterman optimization with investor views",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\portfolio_management_service.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "portfolio_management_context",
            "description": "Context manager for portfolio management service",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\portfolio_management_service.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "risk_management_context",
            "description": "Context manager for risk management service",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\risk_management_service.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "strategy_coordination_context",
            "description": "Context manager for strategy coordination service",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\strategy_coordination_service.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "total_load",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\task_distribution_service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "available_capacity",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\task_distribution_service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "load_percentage",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\task_distribution_service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "task_distribution_context",
            "description": "Context manager for task distribution service",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\services\\task_distribution_service.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "from_model",
            "description": "\n        Create a strategy instance from a TradingStrategy model.\n        \n        Args:\n            model: The TradingStrategy model to convert.\n            \n        Returns:\n            BaseStrategy: A new instance of the strategy.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "python-ai-services\\strategies\\base_strategy.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_generate_signal_internal",
            "description": "\n        Strategy-specific signal generation logic.\n        \n        This method must be implemented by each strategy subclass.\n        \n        Args:\n            symbol: The trading symbol to generate a signal for.\n            timeframe: The timeframe to use for signal generation.\n            \n        Returns:\n            Tuple containing:\n            - SignalType: The type of signal (BUY, SELL, HOLD)\n            - Optional[float]: Confidence level (0-100)\n            - Dict[str, Any]: Additional metadata about the signal\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "symbol": {
                        "type": "string",
                        "description": "The trading symbol to generate a signal for."
                    },
                    "timeframe": {
                        "type": "string",
                        "description": "The timeframe to use for signal generation."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "symbol",
                    "timeframe",
                    "Returns"
                ]
            },
            "file": "python-ai-services\\strategies\\base_strategy.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_api_monitoring.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_agent_task_service_override",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_api_monitoring.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_memory_service_override",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_api_monitoring.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_a2a_protocol",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_integration_flows.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_google_sdk_bridge",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_integration_flows.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "agent_state_manager_fixture",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_integration_flows.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "trading_coordinator_fixture",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_google_sdk_bridge": {
                        "type": "string"
                    },
                    "mock_a2a_protocol": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_google_sdk_bridge",
                    "mock_a2a_protocol"
                ]
            },
            "file": "python-ai-services\\tests\\test_integration_flows.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "market_data_service_fixture",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_google_sdk_bridge": {
                        "type": "string"
                    },
                    "mock_a2a_protocol": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_google_sdk_bridge",
                    "mock_a2a_protocol"
                ]
            },
            "file": "python-ai-services\\tests\\test_integration_flows.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_flow_user_initiates_trading_analysis",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_integration_flows.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_flow_market_data_triggers_analysis",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_integration_flows.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_complete_trading_workflow",
            "description": "Test complete end-to-end trading workflow",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_phase10_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_persistence_service",
            "description": "Provides a mock AgentPersistenceService.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "agent_state_manager",
            "description": "Provides an AgentStateManager instance with a mocked persistence service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_google_sdk_bridge",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_a2a_protocol",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "market_data_service_instance",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_google_sdk_bridge": {
                        "type": "string"
                    },
                    "mock_a2a_protocol": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_google_sdk_bridge",
                    "mock_a2a_protocol"
                ]
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "trading_coordinator_instance",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_google_sdk_bridge": {
                        "type": "string"
                    },
                    "mock_a2a_protocol": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_google_sdk_bridge",
                    "mock_a2a_protocol"
                ]
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_get_agent_state_in_memory_cache_hit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_agent_state_redis_hit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_agent_state_supabase_hit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_agent_state_all_miss_returns_default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_agent_state_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_agent_state_supabase_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_state_field_success_refactored",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_agent_state_refactored",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_save_trading_decision_refactored",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_agent_checkpoint_refactored",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_restore_agent_checkpoint_refactored",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_historical_data_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_historical_data_api_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_subscribe_to_market_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_trade_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_trading_opportunity_no_account_id",
            "description": "Test analyze_trading_opportunity when account_id is None, so risk check is skipped.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_trading_opportunity_with_account_id_and_conditional_risk_check",
            "description": "Test analyze_trading_opportunity with account_id, conditional risk check based on AI decision, and prompt content.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio",
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "test_analyze_trading_opportunity_delegates_to_crew",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_trading_analysis_crew": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_trading_analysis_crew"
                ]
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_analyze_trading_opportunity_crew_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_trading_analysis_crew": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_trading_analysis_crew"
                ]
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "mock_supabase_client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "agent_task_service_with_mock_db",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "memory_service_instance",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_get_agent_memory_stats_success_stub",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_agent_memory_stats_no_instance",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_memory_service_initialization_failure_propagates",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_services.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_system_integration",
            "description": "Pytest test function",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_system_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "trading_crew_service_instance_for_llm_test",
            "description": "Provides a TradingCrewService instance for testing _get_llm_instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_trading_crew.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_get_llm_instance_openai_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_getenv": {
                        "type": "string"
                    },
                    "MockChatOpenAI": {
                        "type": "string"
                    },
                    "trading_crew_service_instance_for_llm_test": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_getenv",
                    "MockChatOpenAI",
                    "trading_crew_service_instance_for_llm_test"
                ]
            },
            "file": "python-ai-services\\tests\\test_trading_crew.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_get_llm_instance_gemini_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_getenv": {
                        "type": "string"
                    },
                    "MockChatGemini": {
                        "type": "string"
                    },
                    "trading_crew_service_instance_for_llm_test": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_getenv",
                    "MockChatGemini",
                    "trading_crew_service_instance_for_llm_test"
                ]
            },
            "file": "python-ai-services\\tests\\test_trading_crew.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_get_llm_instance_missing_api_key",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_getenv": {
                        "type": "string"
                    },
                    "trading_crew_service_instance_for_llm_test": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_getenv",
                    "trading_crew_service_instance_for_llm_test"
                ]
            },
            "file": "python-ai-services\\tests\\test_trading_crew.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "mock_persistence_service_for_crew",
            "description": "Provides a fully mocked AgentPersistenceService for TradingCrewService tests.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_trading_crew.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "trading_crew_service",
            "description": "Provides a TradingCrewService instance with mocked persistence and _get_llm_instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_trading_crew.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_run_analysis_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_trading_crew.py",
            "decorator": [
                "pytest.mark.asyncio",
                "pytest.mark.parametrize",
                "patch"
            ]
        },
        {
            "name": "test_run_analysis_llm_instantiation_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_trading_crew.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_analysis_crew_kickoff_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_trading_crew.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_run_analysis_invalid_crew_output_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_trading_crew.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_run_analysis_invalid_crew_output_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_trading_crew.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_run_analysis_crew_output_string_force_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_trading_crew.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_run_analysis_task_creation_fails",
            "description": "Test behavior when initial task creation fails.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_trading_crew.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_registry",
            "description": "Mock service registry for testing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_wallet_config",
            "description": "Sample wallet configuration for testing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_master_wallet",
            "description": "Sample master wallet for testing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sample_wallet_config": {
                        "type": "string"
                    }
                },
                "required": [
                    "sample_wallet_config"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "wallet_service",
            "description": "Master wallet service for testing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_registry": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_registry"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "coordination_service",
            "description": "Wallet coordination service for testing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_registry": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_registry"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "event_streaming_service",
            "description": "Event streaming service for testing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_registry": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_registry"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "agent_coordination_service",
            "description": "Agent coordination service for testing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_registry": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_registry"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "goal_integration_service",
            "description": "Goal integration service for testing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_registry": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_registry"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "integrated_dashboard",
            "description": "Integrated dashboard for testing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_registry": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_registry"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_dashboard_initialization",
            "description": "Test dashboard initialization with wallet services",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "integrated_dashboard": {
                        "type": "string"
                    }
                },
                "required": [
                    "integrated_dashboard"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_wallet_service_initialization",
            "description": "Test wallet service initialization in dashboard",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "integrated_dashboard": {
                        "type": "string"
                    }
                },
                "required": [
                    "integrated_dashboard"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_master_wallet_control_data",
            "description": "Test master wallet control panel data retrieval",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "integrated_dashboard": {
                        "type": "string"
                    }
                },
                "required": [
                    "integrated_dashboard"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_fund_allocation_execution",
            "description": "Test fund allocation execution through dashboard",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "integrated_dashboard": {
                        "type": "string"
                    }
                },
                "required": [
                    "integrated_dashboard"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_wallet_overview_data",
            "description": "Test enhanced overview data with wallet integration",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "integrated_dashboard": {
                        "type": "string"
                    }
                },
                "required": [
                    "integrated_dashboard"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_complete_dashboard_data",
            "description": "Test complete dashboard data retrieval",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "integrated_dashboard": {
                        "type": "string"
                    }
                },
                "required": [
                    "integrated_dashboard"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_wallet_creation_model_validation",
            "description": "Test wallet creation request model validation",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sample_wallet_config": {
                        "type": "string"
                    }
                },
                "required": [
                    "sample_wallet_config"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_allocation_request_validation",
            "description": "Test fund allocation request validation",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_collection_request_validation",
            "description": "Test fund collection request validation",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_coordination_service_initialization",
            "description": "Test coordination service initialization",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "coordination_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "coordination_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_service_integration_tracking",
            "description": "Test service integration tracking",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "coordination_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "coordination_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_allocation_coordination",
            "description": "Test coordinated allocation request",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "coordination_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "coordination_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_collection_coordination",
            "description": "Test coordinated collection request",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "coordination_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "coordination_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_coordination_status",
            "description": "Test coordination status retrieval",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "coordination_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "coordination_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_event_streaming_initialization",
            "description": "Test event streaming service initialization",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "event_streaming_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "event_streaming_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_event_emission",
            "description": "Test event emission",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "event_streaming_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "event_streaming_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_event_subscription",
            "description": "Test event subscription",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "event_streaming_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "event_streaming_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_event_history",
            "description": "Test event history retrieval",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "event_streaming_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "event_streaming_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_streaming_status",
            "description": "Test streaming service status",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "event_streaming_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "event_streaming_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_agent_coordination_initialization",
            "description": "Test agent coordination service initialization",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "agent_coordination_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "agent_coordination_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_agent_allocation_recommendation",
            "description": "Test agent allocation recommendations",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "agent_coordination_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "agent_coordination_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_agent_rebalancing",
            "description": "Test agent rebalancing execution",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "agent_coordination_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "agent_coordination_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_coordination_status",
            "description": "Test agent coordination status",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "agent_coordination_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "agent_coordination_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_goal_integration_initialization",
            "description": "Test goal integration service initialization",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "goal_integration_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "goal_integration_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_goal_creation",
            "description": "Test goal creation",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "goal_integration_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "goal_integration_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_goal_progress_calculation",
            "description": "Test goal progress calculation",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "goal_integration_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "goal_integration_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_goal_completion_check",
            "description": "Test goal completion detection",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "goal_integration_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "goal_integration_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_goals_for_wallet",
            "description": "Test goal retrieval for wallet",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "goal_integration_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "goal_integration_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_goal_analytics",
            "description": "Test goal analytics",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "goal_integration_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "goal_integration_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_integration_status",
            "description": "Test goal integration status",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "goal_integration_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "goal_integration_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_service_registry_performance",
            "description": "Test service registry performance with multiple services",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_registry": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_registry"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_event_processing_performance",
            "description": "Test event processing performance",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "event_streaming_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "event_streaming_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_concurrent_wallet_operations",
            "description": "Test concurrent wallet operations",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "wallet_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "wallet_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_memory_usage_optimization",
            "description": "Test memory usage with many goals",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "goal_integration_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "goal_integration_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_service_unavailable_handling",
            "description": "Test handling when services are unavailable",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "coordination_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "coordination_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_invalid_wallet_id_handling",
            "description": "Test handling of invalid wallet IDs",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "agent_coordination_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "agent_coordination_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_malformed_event_handling",
            "description": "Test handling of malformed events",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "event_streaming_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "event_streaming_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_network_timeout_simulation",
            "description": "Test network timeout simulation",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "wallet_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "wallet_service"
                ]
            },
            "file": "python-ai-services\\tests\\test_wallet_integration_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\test_live_trading_apis.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_auth_user",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\test_live_trading_apis.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_hl_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\test_live_trading_apis.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\test_phase4_apis.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_viz_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\test_phase4_apis.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_simulated_trade_executor",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\test_phase4_apis.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_strategy_config_service_for_api",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\test_phase4_apis.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_watchlist_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\test_phase4_apis.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_user_preference_service_api",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\test_phase4_apis.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_get_performance_teasers_cache_miss_then_hit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\test_phase4_apis.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_performance_teasers_redis_get_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\test_phase4_apis.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_strategy_chart_data_cache_miss_then_hit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\test_phase4_apis.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_strategy_chart_data_redis_get_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\test_phase4_apis.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "reset_mock_service",
            "description": "Reset the mock service before each test.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_agent_management_routes.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "reset_mock_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_alert_routes.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "reset_mock_service",
            "description": "Reset the mock service before each test.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_dashboard_data_routes.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_monitoring_routes.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_list_tasks_success_no_filters",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_monitoring_routes.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_list_tasks_with_filters",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_monitoring_routes.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_list_tasks_persistence_service_unavailable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_monitoring_routes.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_task_details_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_monitoring_routes.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_task_details_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_monitoring_routes.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_agent_memory_stats_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_monitoring_routes.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_agent_memory_stats_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_monitoring_routes.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_system_health_summary_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_monitoring_routes.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "reset_mock_service",
            "description": "Reset the mock service before each test.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_performance_routes.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_simulation_routes.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_run_backtest_endpoint_success_with_snapshot",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_simulation_routes.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_run_backtest_endpoint_success_with_agent_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_simulation_routes.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_run_backtest_endpoint_value_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_simulation_routes.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_run_backtest_endpoint_simulation_service_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_simulation_routes.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_run_backtest_endpoint_unexpected_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\api\\v1\\test_simulation_routes.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_get_current_active_user_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\auth\\test_dependencies.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_get_current_active_user_missing_jwt_secret",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\auth\\test_dependencies.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_get_current_active_user_missing_supabase_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\auth\\test_dependencies.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_get_current_active_user_jwt_error_expired",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\auth\\test_dependencies.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_get_current_active_user_missing_sub_claim",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\auth\\test_dependencies.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_get_current_active_user_pydantic_validation_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\auth\\test_dependencies.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_get_hl_service_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_factories.py",
            "decorator": [
                "patch.dict",
                "patch"
            ]
        },
        {
            "name": "test_get_hl_service_privkey_env_var_not_set",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_factories.py",
            "decorator": [
                "patch.dict"
            ]
        },
        {
            "name": "test_get_hl_service_init_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_factories.py",
            "decorator": [
                "patch.dict",
                "patch"
            ]
        },
        {
            "name": "test_get_dex_service_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_factories.py",
            "decorator": [
                "patch.dict",
                "patch"
            ]
        },
        {
            "name": "test_get_dex_service_missing_privkey_env_var",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_factories.py",
            "decorator": [
                "patch.dict"
            ]
        },
        {
            "name": "test_get_dex_service_missing_rpc_env_var",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_factories.py",
            "decorator": [
                "patch.dict"
            ]
        },
        {
            "name": "test_get_dex_service_init_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_factories.py",
            "decorator": [
                "patch.dict",
                "patch"
            ]
        },
        {
            "name": "mock_scheduler",
            "description": "Fixture to mock the global scheduler instance in scheduler_setup module.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_scheduler_setup.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_orchestrator_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_scheduler_setup.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_alert_monitoring_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_scheduler_setup.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_agent_management_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_scheduler_setup.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_run_alert_monitoring_no_active_agents",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_scheduler_setup.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_alert_monitoring_with_active_agents",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_scheduler_setup.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_alert_monitoring_agent_check_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_scheduler_setup.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_alert_monitoring_get_agents_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_scheduler_setup.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "manager",
            "description": "Returns a fresh ConnectionManager instance for each test.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_websocket_manager.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_websocket",
            "description": "Returns a MagicMock for a WebSocket connection.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_websocket_manager.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_connect_adds_client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_websocket_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_disconnect_removes_client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_websocket_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_disconnect_unknown_client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\core\\test_websocket_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_disconnect_specific_websocket_instance",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_websocket_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_send_to_client_sends_message",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_websocket_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_send_to_client_unknown_client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\core\\test_websocket_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_send_to_client_handles_exception_and_disconnects",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\core\\test_websocket_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_broadcast_to_all_sends_to_multiple_clients",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\core\\test_websocket_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_broadcast_to_all_no_clients",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\core\\test_websocket_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_broadcast_to_all_handles_send_exceptions_and_disconnects",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\core\\test_websocket_manager.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "db_session",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_management_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_management_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_create_agent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_management_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_agent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_management_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_agent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_management_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_agent_is_active_updates_status",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_management_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_load_agent_with_invalid_risk_config_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_management_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_load_agent_with_missing_risk_config_json_field",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_management_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_agent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_management_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_start_agent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_management_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_stop_agent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_management_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_child_agents",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_management_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_load_existing_statuses_from_db",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_management_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_agent_status_db_check",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_management_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_agent_heartbeat_db",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_management_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_agent_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_google_bridge",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_a2a_protocol",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_simulated_trade_executor",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_trade_history_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_risk_manager_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_event_bus_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_market_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_trading_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest_asyncio.fixture#Added"
            ]
        },
        {
            "name": "mock_portfolio_snapshot_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest_asyncio.fixture#Added"
            ]
        },
        {
            "name": "orchestrator_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_get_trading_coordinator_paper_agent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_trading_coordinator_hyperliquid_agent_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_get_trading_coordinator_hyperliquid_factory_returns_none",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_trading_coordinator_dex_agent_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_run_single_agent_cycle_agent_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_single_agent_cycle_agent_not_active",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_single_agent_cycle_tc_setup_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_single_agent_cycle_generic_agent_no_watched_symbols",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_single_agent_cycle_generic_agent_success_with_symbols",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_single_agent_cycle_specialized_agents_and_snapshot",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch",
                "patch",
                "patch",
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_run_single_agent_cycle_news_analysis_agent_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_run_all_active_agents_once_no_active_agents",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_all_active_agents_once_multiple_active",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_all_active_agents_one_cycle_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_orchestrator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "persistence_service_mock_clients",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "persistence_service_no_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_connect_clients_all_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "MockRedisFromUrl": {
                        "type": "string"
                    },
                    "MockSupabaseCreateClient": {
                        "type": "string"
                    }
                },
                "required": [
                    "MockRedisFromUrl",
                    "MockSupabaseCreateClient"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_connect_clients_redis_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "MockRedisFromUrl": {
                        "type": "string"
                    },
                    "MockSupabaseCreateClient": {
                        "type": "string"
                    },
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "MockRedisFromUrl",
                    "MockSupabaseCreateClient",
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_connect_clients_supabase_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "MockRedisFromUrl": {
                        "type": "string"
                    },
                    "MockSupabaseCreateClient": {
                        "type": "string"
                    },
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "MockRedisFromUrl",
                    "MockSupabaseCreateClient",
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_close_clients",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_save_realtime_state_to_redis_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_save_realtime_state_to_redis_json_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_save_realtime_state_to_redis_redis_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_realtime_state_from_redis_success_hit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_realtime_state_from_redis_success_miss",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_realtime_state_from_redis_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_save_agent_state_to_supabase",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_save_agent_memory_to_supabase",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_agent_memories_in_supabase",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_agent_task_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_agent_task_db_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_agent_task_status_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_agent_task_result_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_agent_task_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_agent_task_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_agent_tasks_no_filters",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_agent_tasks_with_filters",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_agent_tasks_db_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_agent_task_methods_no_supabase_client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_and_count_no_filters",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_and_count_with_all_filters",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_and_count_supabase_count_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_and_count_supabase_data_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_agent_persistence_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "service",
            "description": "Provides a fresh instance of AlertConfigurationService for each test.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_alert_configuration_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_create_alert_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_alert_configuration_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_alert_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_alert_configuration_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_alert_configs_for_agent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_alert_configuration_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_alert_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_alert_configuration_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_alert_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_alert_configuration_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_alert_config_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_alert_monitoring_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_trading_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_alert_monitoring_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_alert_monitoring_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "alert_monitoring_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_alert_monitoring_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_check_alerts_no_enabled_configs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_alert_monitoring_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_check_alerts_no_portfolio_summary",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_alert_monitoring_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_check_alerts_condition_met_and_triggered",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_alert_monitoring_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_check_alerts_condition_not_met",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_alert_monitoring_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_check_alerts_cooldown_prevents_trigger",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_alert_monitoring_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_send_notifications_publishes_to_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_alert_monitoring_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_send_notifications_event_bus_unavailable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_alert_monitoring_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_darvas_box_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_market_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_darvas_box_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_darvas_service_init_with_params",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_darvas_box_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_darvas_service_init_no_darvas_params_uses_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_darvas_box_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_insufficient_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_darvas_box_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_breakout_signal_published",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_darvas_box_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_no_breakout",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_darvas_box_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_box_range_too_small",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_darvas_box_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_box_range_check_disabled",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_darvas_box_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_web3_provider",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_account",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "dex_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_from_key": {
                        "type": "string"
                    },
                    "mock_web3_constructor": {
                        "type": "string"
                    },
                    "mock_web3_provider": {
                        "type": "string"
                    },
                    "mock_account": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_from_key",
                    "mock_web3_constructor",
                    "mock_web3_provider",
                    "mock_account"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "pytest.fixture",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_dex_service_initialization_poa_middleware_injected",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_from_key": {
                        "type": "string"
                    },
                    "mock_web3_constructor": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_from_key",
                    "mock_web3_constructor"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_dex_service_initialization_connection_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_web3_constructor": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_web3_constructor"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_dex_service_wallet_address_mismatch_warning",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_from_key": {
                        "type": "string"
                    },
                    "mock_web3_constructor": {
                        "type": "string"
                    },
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_from_key",
                    "mock_web3_constructor",
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_get_token_balance_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dex_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "dex_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_token_balance_failure",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dex_service": {
                        "type": "string"
                    },
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "dex_service",
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_approve_token_sufficient_allowance",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dex_service": {
                        "type": "string"
                    },
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "dex_service",
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_approve_token_approval_needed_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dex_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "dex_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_approve_token_approval_needed_tx_failed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dex_service": {
                        "type": "string"
                    },
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "dex_service",
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_approve_token_approval_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dex_service": {
                        "type": "string"
                    },
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "dex_service",
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_place_swap_order_native_eth_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dex_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "dex_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_place_swap_order_erc20_success_with_approval",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dex_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "dex_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_place_swap_order_approval_failed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dex_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "dex_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_place_swap_order_tx_reverted",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dex_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "dex_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_place_swap_order_contract_logic_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dex_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "dex_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_place_swap_order_transaction_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dex_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "dex_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_place_swap_order_parses_amount_out_from_logs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dex_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "dex_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_dex_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_market_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_elliott_wave_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_event_bus_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_elliott_wave_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_learning_logger_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_elliott_wave_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "elliott_wave_params",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_elliott_wave_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "agent_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_elliott_wave_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "ew_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_elliott_wave_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_find_significant_moves_no_moves",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_elliott_wave_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_find_significant_moves_upward_move",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_elliott_wave_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_find_significant_moves_downward_move",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_elliott_wave_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_symbol_no_wave1",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_elliott_wave_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_symbol_identifies_wave1_up_then_wave2_correction",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_elliott_wave_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_symbol_identifies_wave1_down_then_wave2_correction",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_elliott_wave_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_analysis_for_symbol_calls_market_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_elliott_wave_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_logging_called",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_elliott_wave_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "event_bus",
            "description": "Provides a fresh instance of EventBusService for each test.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_event_bus_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_subscribe_single_callback",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_event_bus_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_subscribe_multiple_callbacks_same_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_event_bus_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_subscribe_different_event_types",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_event_bus_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_subscribe_non_async_callback_logs_warning",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_event_bus_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_publish_no_subscribers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_event_bus_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_publish_to_single_subscriber",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_event_bus_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_publish_to_multiple_subscribers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_event_bus_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_publish_only_to_correct_event_type_subscribers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_event_bus_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_publish_handles_subscriber_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_event_bus_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_publish_with_non_async_subscriber_is_skipped",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_event_bus_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_heikin_ashi_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_market_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_heikin_ashi_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "ha_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_heikin_ashi_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_ha_calculate_atr_sufficient_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_heikin_ashi_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_not_enough_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_heikin_ashi_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_ha_buy_signal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_heikin_ashi_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_ha_sell_signal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_heikin_ashi_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_no_signal_choppy_market",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_heikin_ashi_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_hl_constants",
            "description": "Mocks the hyperliquid.utils.constants module used by the service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_hyperliquid_sdk_info",
            "description": "Mocks the hyperliquid.info.Info class.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_constants": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_constants"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_hyperliquid_sdk_exchange",
            "description": "Mocks the hyperliquid.exchange.Exchange class.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_constants": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_constants"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_eth_account",
            "description": "Mocks eth_account.Account.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_hyperliquid_service_init_mainnet_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.usefixtures"
            ]
        },
        {
            "name": "test_hyperliquid_service_init_testnet_with_url_override",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.usefixtures"
            ]
        },
        {
            "name": "test_hyperliquid_service_init_invalid_private_key",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.usefixtures"
            ]
        },
        {
            "name": "test_hyperliquid_service_init_sdk_not_installed_fully",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "MockInfo": {
                        "type": "string"
                    },
                    "MockExchange": {
                        "type": "string"
                    },
                    "MockAccount": {
                        "type": "string"
                    },
                    "MockHL_CONSTANTS": {
                        "type": "string"
                    }
                },
                "required": [
                    "MockInfo",
                    "MockExchange",
                    "MockAccount",
                    "MockHL_CONSTANTS"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_get_user_state_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_user_state_sdk_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_place_order_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_place_market_order_processed_correctly",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_place_order_sdk_returns_error_status",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_place_order_sdk_unexpected_response_no_statuses",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_place_order_sdk_raises_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_place_order_exchange_client_not_initialized",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_cancel_order_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_cancel_order_sdk_returns_error_status",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_cancel_order_sdk_unexpected_response",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_cancel_order_sdk_raises_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_order_status_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_order_status_sdk_returns_error_message",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_order_status_sdk_unexpected_response",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_order_status_sdk_raises_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_detailed_account_summary_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_detailed_account_summary_empty_state",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_detailed_account_summary_no_user_state",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_detailed_account_summary_parsing_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_all_open_positions_delegates_to_summary",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_all_open_orders_delegates_to_summary",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_asset_contexts_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_asset_contexts_sdk_returns_none",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_asset_contexts_sdk_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_asset_contexts_client_not_initialized",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_funding_history_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_funding_history_sdk_returns_non_list",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_funding_history_sdk_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_funding_history_client_not_initialized",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_account_margin_summary_success_cross",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_account_margin_summary_success_spot_fallback",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_account_margin_summary_no_margin_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_account_margin_summary_get_user_state_returns_none",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_account_margin_summary_sdk_error_via_get_user_state",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_account_margin_summary_client_not_initialized",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_account_margin_summary_malformed_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_asset_leverage_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_asset_leverage_asset_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_asset_leverage_no_leverage_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_asset_leverage_no_asset_positions",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_asset_leverage_user_address_override",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_asset_leverage_sdk_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_asset_leverage_client_not_initialized",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_set_asset_leverage_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_set_asset_leverage_success_new_response_format",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_set_asset_leverage_sdk_returns_error_status",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_set_asset_leverage_sdk_raises_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_set_asset_leverage_client_not_initialized",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_set_asset_leverage_invalid_leverage_value",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_fills_for_order_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_fills_for_order_no_fills_in_response",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_fills_for_order_api_error_response",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    },
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass",
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_fills_for_order_unexpected_response_structure",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    },
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass",
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_fills_for_order_sdk_call_raises_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_get_fills_for_order_info_client_not_initialized",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hl_init_bypass": {
                        "type": "string"
                    },
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hl_init_bypass",
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_hyperliquid_execution_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "mock_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_market_condition_classifier_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_market_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_market_condition_classifier_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_mcc_service_init_params",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_market_condition_classifier_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_mcc_insufficient_kline_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_market_condition_classifier_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_mcc_calculates_adx_proxy",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_market_condition_classifier_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_mcc_calculates_bollinger_bands",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_market_condition_classifier_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_mcc_trending_up_signal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_market_condition_classifier_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object",
                "patch.object"
            ]
        },
        {
            "name": "test_mcc_ranging_signal_narrow_bbw",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_market_condition_classifier_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object",
                "patch.object"
            ]
        },
        {
            "name": "mock_fetcher",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_market_data_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "market_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_market_data_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_get_historical_klines_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_market_data_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_historical_klines_fetcher_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_market_data_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_historical_klines_input_validation",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_market_data_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_current_order_book_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_market_data_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_current_order_book_fetcher_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_market_data_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_recent_trades_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_market_data_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_recent_trades_fetcher_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_market_data_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_persistence_service",
            "description": "Provides a mock AgentPersistenceService.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "memory_service_fixture",
            "description": "\n    Provides a MemoryService instance with mocked persistence and a\n    MagicMock for letta_client that is set up after connect_letta_client is called in tests.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_connect_letta_client_success_with_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_connect_letta_client_success_with_api_key",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_connect_letta_client_no_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_connect_letta_client_initialization_failure",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_connect_letta_client_lib_not_available",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_letta_agent_by_name_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_get_letta_agent_by_name_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_get_letta_agent_by_name_api_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_create_letta_agent_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_create_letta_agent_api_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_get_or_create_memgpt_agent_exists_in_cache",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_or_create_memgpt_agent_found_by_name_stub",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_or_create_memgpt_agent_creates_new_stub",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_or_create_memgpt_agent_creation_fails_stub",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_store_memory_message_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_store_memory_message_api_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_store_memory_message_agent_not_active",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_memory_response_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_get_memory_response_no_assistant_reply",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_get_memory_response_api_error_on_send",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_get_memory_response_api_error_on_list",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_get_memory_response_agent_not_active",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_close_letta_client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_memory_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_news_analysis_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_news_service_init_params",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_news_analysis_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_fetch_no_rss_urls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_news_analysis_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_fetch_and_analyze_feeds_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_news_analysis_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_fetch_feed_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_news_analysis_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_fetch_limit_per_feed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_news_analysis_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "db_session_orders",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_order_history_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "order_history_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_order_history_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_record_order_submission",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_order_history_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_order_from_hl_response_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_order_history_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_order_from_hl_response_error_status",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_order_history_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_order_from_dex_response_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_order_history_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_order_status_generic",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_order_history_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_link_fill_to_order",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_order_history_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_orders_for_agent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_order_history_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_order_by_internal_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_order_history_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_db_order_to_pydantic_log_item",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_order_history_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_trading_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "performance_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_calculate_performance_no_trades",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_performance_failed_to_fetch_trades",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_performance_with_pnl_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_performance_all_wins",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_performance_all_losses",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_performance_no_pnl_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_performance_invalid_pnl_values",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_agent_management_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_portfolio_optimizer_init_and_subscriptions",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_optimizer_init_no_params",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_agent_management_service": {
                        "type": "string"
                    },
                    "mock_event_bus": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_agent_management_service",
                    "mock_event_bus"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_market_condition_event_no_matching_rule",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_market_condition_event_applies_rule_target_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_market_condition_event_applies_rule_target_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_market_condition_event_no_actual_change",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_market_condition_event_invalid_payload",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_news_article_event_no_matching_sentiment_rule",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_news_article_event_applies_rule_no_symbol_filter_in_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_news_article_event_applies_rule_with_symbol_intersection",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_news_article_event_no_symbol_intersection",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_news_article_event_invalid_payload",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "db_session",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_snapshot_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_snapshot_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "snapshot_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_snapshot_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_record_snapshot_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_snapshot_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_record_snapshot_default_timestamp",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_snapshot_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_record_snapshot_no_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_snapshot_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_historical_snapshots_multiple_records",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_snapshot_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_historical_snapshots_no_records",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_portfolio_snapshot_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_renko_technical_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_market_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_renko_technical_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "renko_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_renko_technical_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_calculate_atr_sufficient_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_renko_technical_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_atr_insufficient_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_renko_technical_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_atr_empty_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_renko_technical_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_no_klines",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_renko_technical_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_atr_calculation_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_renko_technical_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_fixed_brick_size_invalid_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_renko_technical_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_not_enough_renko_bricks_for_signal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_renko_technical_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_buy_signal_generated",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_renko_technical_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_sell_signal_generated",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_renko_technical_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_agent_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_risk_manager_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_trading_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_risk_manager_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "risk_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_risk_manager_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_assess_trade_risk_agent_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_risk_manager_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_assess_trade_risk_signal_missing_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_risk_manager_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_assess_trade_risk_exceeds_max_capital",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_risk_manager_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_assess_trade_risk_symbol_not_in_whitelist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_risk_manager_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_assess_trade_risk_approved_no_specific_limits_hit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_risk_manager_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_assess_trade_risk_zero_max_capital_allocation_skips_check",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_risk_manager_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_assess_trade_risk_empty_whitelist_allows_all_symbols",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_risk_manager_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_assess_risk_max_loss_per_trade_percentage_balance_exceeded",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_risk_manager_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_assess_risk_max_loss_per_trade_no_portfolio_rejects",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_risk_manager_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_assess_risk_max_concurrent_open_trades_exceeded",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_risk_manager_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_assess_risk_max_exposure_per_asset_usd_exceeded",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_risk_manager_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_supabase_client_ste",
            "description": "Mocks the Supabase client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_event_service_ste",
            "description": "Mocks the EventService.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "trade_executor",
            "description": "Provides an instance of SimulatedTradeExecutor with mocked dependencies.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_submit_paper_order_market_buy_fills_at_next_open",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_submit_paper_order_market_sell_fills_at_next_open",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_submit_paper_order_no_market_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_paper_portfolio_valuation_no_positions",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_paper_portfolio_valuation_one_long_position_profit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_paper_portfolio_valuation_one_short_position_loss",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_paper_portfolio_valuation_multiple_positions",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_paper_portfolio_valuation_price_fetch_fails_for_one_asset",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_historical_paper_backtest_simple_buy_and_hold",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get_historical_data_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get_historical_data_tool"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_run_historical_paper_backtest_no_signals_generated",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get_historical_data_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get_historical_data_tool"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_calculate_realized_pnl_for_trades_placeholder",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_realized_pnl_for_trades_with_filters_placeholder",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_apply_fill_to_position_opens_new_long_position",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_apply_fill_to_position_opens_new_short_position",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_apply_fill_to_position_adds_to_existing_long",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_apply_fill_to_position_reduces_existing_long_not_closing",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_apply_fill_to_position_closes_long_position_exactly",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_apply_fill_to_position_flips_long_to_short",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_apply_fill_to_position_adds_to_existing_short",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_submit_paper_order_no_market_data_after_order_time",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_submit_paper_order_limit_buy_fills",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_submit_paper_order_limit_sell_fills",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_submit_paper_order_limit_buy_not_filled",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_submit_paper_order_limit_order_missing_price",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_submit_paper_order_unsupported_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_open_paper_orders_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_open_paper_orders_no_orders_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cancel_paper_order_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cancel_paper_order_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cancel_paper_order_not_cancellable_status",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulated_trade_executor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_market_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_agent_management_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "simulation_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_market_data_service": {
                        "type": "string"
                    },
                    "mock_agent_management_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_market_data_service",
                    "mock_agent_management_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_run_backtest_validation_no_agent_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_backtest_validation_both_agent_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_backtest_agent_id_ams_not_configured",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_backtest_agent_id_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_backtest_no_kline_data_in_range",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_backtest_darvas_buy_and_hold_profitable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_backtest_insufficient_capital_for_buy",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_market_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_sma_crossover_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_event_bus_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_sma_crossover_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_learning_logger_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_sma_crossover_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "sma_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_sma_crossover_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_sma_calculation",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_sma_crossover_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_ema_calculation",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_sma_crossover_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_no_signal_if_not_enough_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_sma_crossover_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_golden_cross_buy_signal_sma",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_sma_crossover_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_death_cross_sell_signal_ema",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_sma_crossover_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_no_signal_when_no_crossover",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_sma_crossover_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_logging_called_on_signal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_sma_crossover_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_logging_called_on_no_signal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_sma_crossover_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_supabase_client_scs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_strategy_config_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "strategy_config_service_instance",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_strategy_config_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_create_strategy_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_strategy_config_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_strategy_config_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_strategy_config_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_strategy_config_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_strategy_config_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_strategy_configs_by_user",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_strategy_config_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_strategy_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_strategy_config_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_strategy_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_strategy_config_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_all_user_strategies_with_performance_teasers_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_strategy_config_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_all_user_strategies_with_performance_teasers_no_strategies",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_strategy_config_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_supabase_client_viz",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_strategy_visualization_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_strategy_config_service_viz",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_strategy_visualization_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "visualization_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_supabase_client_viz": {
                        "type": "string"
                    },
                    "mock_strategy_config_service_viz": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_supabase_client_viz",
                    "mock_strategy_config_service_viz"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_strategy_visualization_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_get_strategy_visualization_data_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_strategy_visualization_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_get_strategy_visualization_data_config_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_strategy_visualization_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_get_strategy_visualization_data_no_price_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_strategy_visualization_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "db_session",
            "description": "Creates a new database session for a test, with tables created and dropped.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trade_history_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trade_history_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "service",
            "description": "Provides a fresh instance of TradeHistoryService using the test session factory.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trade_history_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_record_fill_db",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trade_history_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_fills_for_agent_db",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trade_history_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_record_fill_db_error_handling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trade_history_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_processed_trades_no_fills_db",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trade_history_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_processed_trades_simple_match_db",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trade_history_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_processed_trades_one_buy_multiple_sells_db",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trade_history_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_processed_trades_multiple_assets_db",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trade_history_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_google_bridge",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_a2a_protocol",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_simulated_executor",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_hyperliquid_executor",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_dex_executor",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_connection_manager",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_order_history_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "trading_coordinator",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_set_and_get_trade_execution_mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_set_trade_execution_mode_invalid",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_parse_crew_result_risk_approved_executes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_parse_crew_result_risk_rejected_does_not_execute",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_parse_crew_result_hold_action_skips_risk_check_and_execution",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_parse_crew_result_missing_params",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_parse_crew_result_invalid_json_string",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_execute_paper_trade_buy_limit_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_paper_trade_sell_market_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_paper_trade_executor_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_paper_trade_no_executor",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_google_bridge": {
                        "type": "string"
                    },
                    "mock_a2a_protocol": {
                        "type": "string"
                    },
                    "mock_hyperliquid_executor": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_google_bridge",
                    "mock_a2a_protocol",
                    "mock_hyperliquid_executor"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_live_trade_buy_limit_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_live_trade_fetches_and_records_actual_fills",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_live_trade_no_fills_found_for_order",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_live_trade_hyperliquid_service_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_live_trade_general_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_live_trade_no_hyperliquid_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_google_bridge": {
                        "type": "string"
                    },
                    "mock_a2a_protocol": {
                        "type": "string"
                    },
                    "mock_simulated_executor": {
                        "type": "string"
                    },
                    "mock_agent_management_service": {
                        "type": "string"
                    },
                    "mock_risk_manager_service": {
                        "type": "string"
                    },
                    "mock_trade_history_service": {
                        "type": "string"
                    },
                    "mock_event_bus_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_google_bridge",
                    "mock_a2a_protocol",
                    "mock_simulated_executor",
                    "mock_agent_management_service",
                    "mock_risk_manager_service",
                    "mock_trade_history_service",
                    "mock_event_bus_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_dex_trade_success_placeholder",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_dex_trade_no_dex_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_google_bridge": {
                        "type": "string"
                    },
                    "mock_a2a_protocol": {
                        "type": "string"
                    },
                    "mock_simulated_executor": {
                        "type": "string"
                    },
                    "mock_hyperliquid_executor": {
                        "type": "string"
                    },
                    "mock_trade_history_service": {
                        "type": "string"
                    },
                    "mock_risk_manager_service": {
                        "type": "string"
                    },
                    "mock_agent_management_service": {
                        "type": "string"
                    },
                    "mock_event_bus_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_google_bridge",
                    "mock_a2a_protocol",
                    "mock_simulated_executor",
                    "mock_hyperliquid_executor",
                    "mock_trade_history_service",
                    "mock_risk_manager_service",
                    "mock_agent_management_service",
                    "mock_event_bus_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_trade_unknown_mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_setup_event_subscriptions",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_setup_event_subscriptions_no_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_google_bridge": {
                        "type": "string"
                    },
                    "mock_a2a_protocol": {
                        "type": "string"
                    },
                    "mock_simulated_executor": {
                        "type": "string"
                    },
                    "mock_hyperliquid_executor": {
                        "type": "string"
                    },
                    "mock_trade_history_service": {
                        "type": "string"
                    },
                    "mock_risk_manager_service": {
                        "type": "string"
                    },
                    "mock_agent_management_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_google_bridge",
                    "mock_a2a_protocol",
                    "mock_simulated_executor",
                    "mock_hyperliquid_executor",
                    "mock_trade_history_service",
                    "mock_risk_manager_service",
                    "mock_agent_management_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_external_trade_signal_approved",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_handle_external_trade_signal_rejected",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_handle_external_trade_signal_missing_quantity",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_market_condition_event_logs_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_trade_history_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_data_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "trading_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_data_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_get_portfolio_summary_paper_agent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_data_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_portfolio_summary_hyperliquid_agent_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_data_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_portfolio_summary_hyperliquid_no_hles_instance",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_data_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_portfolio_summary_agent_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_data_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_trade_history_uses_trade_history_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_data_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_trade_history_service_error_returns_empty",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_data_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_open_orders_paper_agent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_data_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_open_orders_hyperliquid_agent_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_data_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_open_orders_hyperliquid_hles_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_data_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_order_history_mocked",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_trading_data_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_supabase_client_ups",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_user_preference_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "user_preference_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_user_preference_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_get_user_preferences_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_user_preference_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_user_preferences_not_found_returns_default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_user_preference_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_user_preferences_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_user_preference_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_user_preferences_db_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_user_preference_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_user_preferences_no_data_returned",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_user_preference_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_supabase_client_ws",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "watchlist_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_create_watchlist_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_watchlist_db_error_no_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_watchlist_db_explicit_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_watchlist_success_no_items",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_watchlist_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_watchlists_by_user_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_watchlist_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_watchlist_not_found_or_not_owned",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_watchlist_no_actual_update_fields",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_watchlist_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_add_item_to_watchlist_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_add_item_to_watchlist_watchlist_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_add_item_to_watchlist_item_already_exists",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_items_for_watchlist_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_items_for_watchlist_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_remove_item_from_watchlist_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_remove_item_from_watchlist_item_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_remove_item_from_watchlist_forbidden",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_add_multiple_items_to_watchlist_success_from_symbols",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_batch_quotes_for_symbols_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_get_batch_quotes_for_symbols_one_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_get_batch_quotes_for_symbols_tool_returns_error_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_get_batch_quotes_for_symbols_empty_list",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_watchlist_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_connection_manager",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_websocket_relay_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_websocket_relay_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "websocket_relay_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_websocket_relay_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_setup_subscriptions",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_websocket_relay_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_new_fill_recorded",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_websocket_relay_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_new_fill_recorded_no_agent_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_websocket_relay_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_alert_triggered_with_agent_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_websocket_relay_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_alert_triggered_no_agent_id_broadcasts",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_websocket_relay_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_portfolio_snapshot_taken",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_websocket_relay_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_portfolio_snapshot_taken_no_agent_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_websocket_relay_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_event_handler_invalid_payload_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_websocket_relay_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_williams_alligator_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_market_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\services\\test_williams_alligator_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_wa_service_init_params",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_williams_alligator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_sma",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_williams_alligator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_insufficient_kline_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_williams_alligator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_sma_calculation_results_in_nones",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_williams_alligator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_generates_buy_signal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_williams_alligator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_no_signal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_event_bus": {
                        "type": "string"
                    },
                    "mock_market_data_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_event_bus",
                    "mock_market_data_service"
                ]
            },
            "file": "python-ai-services\\tests\\services\\test_williams_alligator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "default_darvas_config",
            "description": "Provides a default DarvasBoxConfig for tests.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\strategies\\test_darvas_box.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "default_elliott_wave_config",
            "description": "Returns a default ElliottWaveConfig instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\strategies\\test_elliott_wave.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "custom_elliott_wave_config",
            "description": "Returns a custom ElliottWaveConfig instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\strategies\\test_elliott_wave.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "default_ha_config",
            "description": "Provides a default HeikinAshiConfig for tests.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\strategies\\test_heikin_ashi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "ha_config_min_trend_2",
            "description": "HA Config with min_trend_candles = 2 for easier testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\strategies\\test_heikin_ashi.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "atr_renko_config_default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\strategies\\test_renko.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "fixed_renko_config_default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\strategies\\test_renko.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_run_renko_fixed_brick_scenarios",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "price_data": {
                        "type": "string"
                    },
                    "expected_brick_count": {
                        "type": "string"
                    },
                    "min_actionable_signals": {
                        "type": "string"
                    }
                },
                "required": [
                    "price_data",
                    "expected_brick_count",
                    "min_actionable_signals"
                ]
            },
            "file": "python-ai-services\\tests\\strategies\\test_renko.py",
            "decorator": [
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "test_run_renko_atr_brick_size",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\strategies\\test_renko.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "default_alligator_config",
            "description": "Provides a default WilliamsAlligatorConfig for tests.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\strategies\\test_williams_alligator.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "short_period_alligator_config",
            "description": "A config with shorter periods for easier testing with less data.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\strategies\\test_williams_alligator.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_fetch_market_data_tool_success_service_call",
            "description": "Test fetch_market_data_tool successfully calls MarketDataService.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_market_data_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_fetch_market_data_tool_service_unavailable_uses_mock",
            "description": "Test tool falls back to mock data if MarketDataService is not in app_services.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_market_data_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_fetch_market_data_tool_service_returns_no_data_uses_mock",
            "description": "Test tool falls back to mock data if service returns None or empty list.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_market_data_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_fetch_market_data_tool_service_raises_exception_uses_mock",
            "description": "Test tool falls back to mock data if service call raises an exception.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_market_data_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_fetch_market_data_tool_limit_calculation",
            "description": "Test limit calculation for various timeframes.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "timeframe": {
                        "type": "string"
                    },
                    "days": {
                        "type": "string"
                    },
                    "expected_limit": {
                        "type": "string"
                    }
                },
                "required": [
                    "timeframe",
                    "days",
                    "expected_limit"
                ]
            },
            "file": "python-ai-services\\tests\\tools\\test_market_data_tools.py",
            "decorator": [
                "pytest.mark.asyncio",
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "test_fetch_market_data_tool_default_days_with_service_call",
            "description": "Test default historical_days is used when calling via schema with service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_market_data_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_store_memory_tool_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_memory_tools.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_store_memory_tool_service_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_memory_tools.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_store_memory_tool_service_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_memory_tools.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_store_memory_tool_service_unavailable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_memory_tools.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_recall_memories_tool_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_memory_tools.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_recall_memories_tool_service_returns_none",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_memory_tools.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_recall_memories_tool_service_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_memory_tools.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_recall_memories_tool_service_unavailable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_memory_tools.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "sample_darvas_config_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_apply_darvas_box_tool_success_buy_signal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_apply_darvas_box_tool_no_signal_hold",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_apply_darvas_box_tool_strategy_execution_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "sample_alligator_config_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_apply_williams_alligator_tool_success_signal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_apply_williams_alligator_tool_no_signal_hold",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_apply_williams_alligator_tool_strategy_execution_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "sample_renko_config_dict_fixed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_renko_config_dict_atr",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_apply_renko_tool_success_signal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_apply_renko_tool_no_signal_hold",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_apply_renko_tool_strategy_execution_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "sample_ha_config_dict",
            "description": "Returns a sample valid Heikin Ashi configuration dictionary.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_apply_heikin_ashi_tool_success_signal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_apply_heikin_ashi_tool_no_signal_hold",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_apply_heikin_ashi_tool_strategy_execution_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "sample_ew_config_dict",
            "description": "Returns a sample valid Elliott Wave configuration dictionary.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_apply_elliott_wave_tool_success_stub_signal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_apply_elliott_wave_tool_stub_with_mocked_simple_buy_signal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_apply_elliott_wave_tool_strategy_execution_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_strategy_application_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "sample_market_data_json_fixture",
            "description": "Provides a sample market_data_json string using the async fetch_market_data_tool.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_technical_analysis_tools.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_run_technical_analysis_tool_success",
            "description": "Test run_technical_analysis_tool with valid market_data_json.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tests\\tools\\test_technical_analysis_tools.py",
            "decorator": [
                "pytest.mark.asyncio#Marktestasasyncbecausethefixtureisasync"
            ]
        },
        {
            "name": "historical_stock_prices",
            "description": "\n    Fetches historical OHLCV stock price data for a given symbol and date range.\n    Returns data as a JSON string of records or an error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tools\\agent_analysis_tools.py",
            "decorator": [
                "tool"
            ]
        },
        {
            "name": "current_stock_quote",
            "description": "\n    Fetches the current stock quote (latest price, volume, etc.) for a symbol.\n    Returns data as a JSON string or an error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tools\\agent_analysis_tools.py",
            "decorator": [
                "tool"
            ]
        },
        {
            "name": "search_stock_symbols",
            "description": "\n    Searches for stock symbols and company names based on a query.\n    Returns a list of findings as a JSON string or an error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tools\\agent_analysis_tools.py",
            "decorator": [
                "tool"
            ]
        },
        {
            "name": "sma_calculation_tool",
            "description": "Calculates Simple Moving Average (SMA) for a stock over a period.\n    Returns SMA data as a JSON string (orient='split') or an error message.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tools\\agent_analysis_tools.py",
            "decorator": [
                "tool"
            ]
        },
        {
            "name": "ema_calculation_tool",
            "description": "Calculates Exponential Moving Average (EMA) for a stock. Returns JSON string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tools\\agent_analysis_tools.py",
            "decorator": [
                "tool"
            ]
        },
        {
            "name": "rsi_calculation_tool",
            "description": "Calculates Relative Strength Index (RSI) for a stock. Returns JSON string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tools\\agent_analysis_tools.py",
            "decorator": [
                "tool"
            ]
        },
        {
            "name": "macd_calculation_tool",
            "description": "Calculates MACD for a stock. Returns JSON string of DataFrame.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tools\\agent_analysis_tools.py",
            "decorator": [
                "tool"
            ]
        },
        {
            "name": "fetch_market_data_tool",
            "description": "FetcheshistoricalOHLCVmarketdataforagivenfinancialsymbolandtimeframe.Includessimulatedcurrentprice.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "symbol": {
                        "type": "string",
                        "description": "The trading symbol (e.g., 'BTC-USD', 'AAPL')."
                    },
                    "timeframe": {
                        "type": "string",
                        "description": "The timeframe for the data (e.g., '1h', '1d'). Corresponds to 'interval' in MarketDataService."
                    },
                    "historical_days": {
                        "type": "string",
                        "description": "Number of past days of historical OHLCV data to retrieve."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "symbol",
                    "timeframe",
                    "historical_days",
                    "Returns"
                ]
            },
            "file": "python-ai-services\\tools\\market_data_tools.py",
            "decorator": [
                "tool"
            ]
        },
        {
            "name": "store_memory_tool",
            "description": "Storesanobservationormessageintothespecifiedagent'slong-termmemoryviaMemoryService.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tools\\memory_tools.py",
            "decorator": [
                "tool"
            ]
        },
        {
            "name": "recall_memories_tool",
            "description": "Retrievesrelevantmemoriesorasynthesizedresponsefromthespecifiedagent'slong-termmemoryviaMemoryServicebasedonaquery.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-ai-services\\tools\\memory_tools.py",
            "decorator": [
                "tool"
            ]
        },
        {
            "name": "assess_trade_risk_tool",
            "description": "Assessestheriskofaproposedtradingactionbasedonitsparameters",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "symbol": {
                        "type": "string",
                        "description": "The trading symbol."
                    },
                    "proposed_action": {
                        "type": "string",
                        "description": "The proposed trading action (string: \"BUY\", \"SELL\", \"HOLD\")."
                    },
                    "confidence_score": {
                        "type": "string",
                        "description": "Confidence of the proposed action (0.0 to 1.0)."
                    },
                    "entry_price": {
                        "type": "string",
                        "description": "Proposed entry price."
                    },
                    "stop_loss_price": {
                        "type": "string",
                        "description": "Proposed stop-loss price."
                    },
                    "take_profit_price": {
                        "type": "string",
                        "description": "Proposed take-profit price."
                    },
                    "quantity_or_value": {
                        "type": "string",
                        "description": "Proposed quantity or monetary value of the trade."
                    },
                    "current_portfolio_value": {
                        "type": "string",
                        "description": "Total current value of the portfolio."
                    },
                    "existing_position_size": {
                        "type": "string",
                        "description": "Size of any existing position in the same symbol."
                    },
                    "portfolio_context": {
                        "type": "string",
                        "description": "Additional portfolio context dictionary."
                    },
                    "market_conditions_summary": {
                        "type": "string",
                        "description": "Text summary of current market conditions."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "symbol",
                    "proposed_action",
                    "confidence_score",
                    "entry_price",
                    "stop_loss_price",
                    "take_profit_price",
                    "quantity_or_value",
                    "current_portfolio_value",
                    "existing_position_size",
                    "portfolio_context",
                    "market_conditions_summary",
                    "Returns"
                ]
            },
            "file": "python-ai-services\\tools\\risk_assessment_tools.py",
            "decorator": [
                "tool"
            ]
        },
        {
            "name": "apply_darvas_box_tool",
            "description": "AppliestheDarvasBoxtradingstrategytotheprovidedmarketdatausingspecifiedconfigurations",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "processed_market_data_json": {
                        "type": "string",
                        "description": "JSON string from run_technical_analysis_tool."
                    },
                    "darvas_config": {
                        "type": "string",
                        "description": "A dictionary of parameters to instantiate DarvasBoxConfig."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "processed_market_data_json",
                    "darvas_config",
                    "Returns"
                ]
            },
            "file": "python-ai-services\\tools\\strategy_application_tools.py",
            "decorator": [
                "tool"
            ]
        },
        {
            "name": "apply_williams_alligator_tool",
            "description": "AppliestheWilliamsAlligatorstrategytomarketdataandreturnsastrategyapplicationresult.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "processed_market_data_json": {
                        "type": "string",
                        "description": "JSON string from run_technical_analysis_tool."
                    },
                    "alligator_config": {
                        "type": "string",
                        "description": "A dictionary of parameters to instantiate WilliamsAlligatorConfig."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "processed_market_data_json",
                    "alligator_config",
                    "Returns"
                ]
            },
            "file": "python-ai-services\\tools\\strategy_application_tools.py",
            "decorator": [
                "tool"
            ]
        },
        {
            "name": "apply_heikin_ashi_tool",
            "description": "AppliestheHeikinAshistrategytomarketdataandreturnsastrategyapplicationresult.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "processed_market_data_json": {
                        "type": "string",
                        "description": "JSON string from run_technical_analysis_tool."
                    },
                    "heikin_ashi_config": {
                        "type": "string",
                        "description": "A dictionary of parameters to instantiate HeikinAshiConfig."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "processed_market_data_json",
                    "heikin_ashi_config",
                    "Returns"
                ]
            },
            "file": "python-ai-services\\tools\\strategy_application_tools.py",
            "decorator": [
                "tool"
            ]
        },
        {
            "name": "apply_elliott_wave_tool",
            "description": "Appliesthe(stubbed)ElliottWaveanalysistomarketdataandreturnsastrategyapplicationresult.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "processed_market_data_json": {
                        "type": "string",
                        "description": "JSON string from run_technical_analysis_tool."
                    },
                    "elliott_wave_config": {
                        "type": "string",
                        "description": "A dictionary of parameters to instantiate ElliottWaveConfig."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "processed_market_data_json",
                    "elliott_wave_config",
                    "Returns"
                ]
            },
            "file": "python-ai-services\\tools\\strategy_application_tools.py",
            "decorator": [
                "tool"
            ]
        },
        {
            "name": "run_technical_analysis_tool",
            "description": "Processesmarketdata(OHLCV)tocalculatetechnicalindicatorslikeVolumeSMAandpreparesdataforstrategyapplication.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "market_data_json": {
                        "type": "string",
                        "description": "JSON string containing market data. Expected structure includes"
                    },
                    "volume_sma_period": {
                        "type": "string",
                        "description": "The lookback period for calculating the Volume SMA."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "market_data_json",
                    "volume_sma_period",
                    "Returns"
                ]
            },
            "file": "python-ai-services\\tools\\technical_analysis_tools.py",
            "decorator": [
                "tool"
            ]
        },
        {
            "name": "lifespan",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "python-viz-service\\main.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "Redis",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\lib\\mock_redis.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "test_run_backtest_endpoint_success_with_snapshot",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\api\\v1\\test_simulation_routes.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_run_backtest_endpoint_success_with_agent_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\api\\v1\\test_simulation_routes.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_run_backtest_endpoint_value_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\api\\v1\\test_simulation_routes.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_run_backtest_endpoint_server_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\api\\v1\\test_simulation_routes.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "mock_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_darvas_box_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_market_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_darvas_box_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_learning_logger_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_darvas_box_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "darvas_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_darvas_box_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_analyze_darvas_buy_signal_generated_and_logged",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_darvas_box_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_darvas_no_signal_logged",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_darvas_box_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_darvas_insufficient_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_darvas_box_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "cleanup_test_log_file",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_learning_data_logger_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "learning_logger_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_learning_data_logger_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_logger_service_init_directory_creation_failure",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_mkdir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_mkdir"
                ]
            },
            "file": "tests\\services\\test_learning_data_logger_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_log_entry_writes_correct_jsonl",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_learning_data_logger_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_log_entry_actual_file_write",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_learning_data_logger_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_log_entry_handles_write_sync_io_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "tests\\services\\test_learning_data_logger_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_log_entry_handles_serialization_failure",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "tests\\services\\test_learning_data_logger_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_market_condition_classifier_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_market_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_market_condition_classifier_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_learning_logger_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_market_condition_classifier_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mcc_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_market_condition_classifier_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_analyze_mcc_publishes_event_and_logs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_market_condition_classifier_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_mcc_insufficient_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_market_condition_classifier_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_news_analysis_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_learning_logger_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_news_analysis_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "news_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_news_analysis_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_fetch_and_analyze_positive_news_logged",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_news_analysis_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_fetch_and_analyze_no_feeds_configured",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_news_analysis_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_fetch_and_analyze_feed_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "tests\\services\\test_news_analysis_service.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "mock_trading_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_portfolio_snapshot_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "performance_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_calculate_performance_no_trades",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_performance_with_trades",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_advanced_metrics_insufficient_snapshots",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_advanced_metrics_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_advanced_metrics_flat_equity",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_advanced_metrics_max_drawdown",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_advanced_metrics_short_duration",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_cagr_zero_initial_equity",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_calculate_cagr_negative_total_return",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_performance_calculation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_agent_management_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_learning_logger_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest_asyncio.fixture#Added"
            ]
        },
        {
            "name": "optimizer_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest_asyncio.fixture#Addedcentralfixturefortheservice"
            ]
        },
        {
            "name": "test_portfolio_optimizer_init_and_subscriptions",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_optimizer_init_no_params",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_market_condition_event_no_matching_rule",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_market_condition_event_applies_rule_target_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_news_article_event_no_matching_sentiment_rule",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_news_article_event_applies_rule_with_symbol_intersection",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_news_article_event_applies_rule_no_symbol_filter_in_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_news_article_event_no_symbol_intersection",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_on_news_article_event_invalid_payload",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_portfolio_optimizer_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "sample_rules",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_regulatory_compliance_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "compliance_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_regulatory_compliance_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_init_compliance_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_regulatory_compliance_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_check_action_compliance_pass_no_violations",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_regulatory_compliance_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_check_action_max_order_value_violation",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_regulatory_compliance_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_check_action_restricted_symbol_violation",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_regulatory_compliance_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_check_action_restricted_symbol_pass",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_regulatory_compliance_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_check_action_max_daily_trades_placeholder",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "tests\\services\\test_regulatory_compliance_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_check_action_rule_applicability_agent_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_regulatory_compliance_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_check_action_rule_applicability_agent_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_regulatory_compliance_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_multiple_violations",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_regulatory_compliance_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_max_order_value_missing_signal_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "tests\\services\\test_regulatory_compliance_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_restricted_symbols_invalid_parameter_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "tests\\services\\test_regulatory_compliance_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_max_daily_trades_missing_symbol_in_params",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "tests\\services\\test_regulatory_compliance_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_market_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_agent_management_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "simulation_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_market_data_service": {
                        "type": "string"
                    },
                    "mock_agent_management_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_market_data_service",
                    "mock_agent_management_service"
                ]
            },
            "file": "tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_run_backtest_input_validation",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_backtest_agent_config_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_backtest_no_kline_data_returned",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_backtest_no_kline_data_in_range",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_backtest_darvas_buys_and_sells_profit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_backtest_no_signals_no_trades",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_simulation_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_agent_management_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_risk_manager_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_compliance_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_simulated_executor",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_hyperliquid_executor",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_dex_executor",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_trade_history_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_event_bus_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_google_bridge",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_a2a_protocol",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "trading_coordinator",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_learning_logger_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest_asyncio.fixture#Addednewfixture"
            ]
        },
        {
            "name": "test_parse_crew_result_compliance_fail",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_parse_crew_result_compliance_pass_risk_fail",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_parse_crew_result_compliance_pass_risk_pass_executes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_parse_crew_result_no_compliance_service_skips_check",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_handle_external_trade_signal_compliance_fail",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "test_handle_external_trade_signal_compliance_pass_risk_pass",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_trading_coordinator.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch.object"
            ]
        },
        {
            "name": "mock_event_bus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_williams_alligator_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_market_data_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_williams_alligator_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "mock_learning_logger_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_williams_alligator_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "alligator_service",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_williams_alligator_service.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_analyze_alligator_buy_signal_generated_and_logged",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_williams_alligator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_alligator_no_signal_logged",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_williams_alligator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_analyze_alligator_insufficient_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\services\\test_williams_alligator_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        }
    ]
}