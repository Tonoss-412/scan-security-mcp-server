{
    "tools": [
        {
            "name": "is_initialized",
            "description": "Check if server is initialized.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\server.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_running",
            "description": "Check if server is running.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\server.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ping",
            "description": "Simple ping tool for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "server_info",
            "description": "Get server information.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "query_knowledge_base",
            "description": "Query the knowledge base.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "manage_collections",
            "description": "Manage collections.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "ingest_documents",
            "description": "Ingest documents into the knowledge base.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "manage_projects",
            "description": "Manage research projects.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "augment_knowledge",
            "description": "Augment knowledge base with external information.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "submit_feedback",
            "description": "Submit user feedback (thumbs up/down) for a knowledge base chunk to improve content quality.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "detect_model_changes",
            "description": "Detect embedding model changes and identify collections requiring re-indexing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "reindex_collection",
            "description": "Re-index collections with the current embedding model.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "get_reindex_status",
            "description": "Get re-indexing status and progress information.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "tracked_wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\feedback\\progress_integration.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "async_wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\middleware\\error_middleware.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "sync_wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\middleware\\error_middleware.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "circuit_breaker_state",
            "description": "Get the overall circuit breaker state (for simple access in tests).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\protocol\\enhanced_error_handler.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "format_content",
            "description": "\n        Format content based on its type.\n        \n        Args:\n            content: Content to format\n            content_type: Type of content (text, markdown, json)\n            \n        Returns:\n            Formatted content as string\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Content to format"
                    },
                    "content_type": {
                        "type": "string",
                        "description": "Type of content (text, markdown, json)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "content",
                    "content_type",
                    "Returns"
                ]
            },
            "file": "src\\mcp_server\\protocol\\response_formatter.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_format_json_content",
            "description": "Format content as JSON.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\protocol\\response_formatter.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_format_markdown_content",
            "description": "Format content as markdown.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\protocol\\response_formatter.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_format_text_content",
            "description": "Format content as plain text.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\protocol\\response_formatter.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "create_response",
            "description": "\n        Create appropriate tool response based on tool name.\n        \n        Args:\n            tool_name: Name of the tool\n            request_id: Request ID\n            data: Tool response data\n            \n        Returns:\n            Appropriate tool response object\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_server\\protocol\\response_formatter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_create_query_response",
            "description": "Create QueryResponse instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\protocol\\response_formatter.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_create_collection_response",
            "description": "Create CollectionResponse instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\protocol\\response_formatter.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_create_ingest_response",
            "description": "Create IngestResponse instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\protocol\\response_formatter.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_create_project_response",
            "description": "Create ProjectResponse instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\protocol\\response_formatter.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_create_augment_response",
            "description": "Create AugmentResponse instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\protocol\\response_formatter.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "test_log_error",
            "description": "Test error logging.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger"
                ]
            },
            "file": "src\\mcp_server\\tests\\test_error_handler.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_log_error_no_context",
            "description": "Test error logging without context.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger"
                ]
            },
            "file": "src\\mcp_server\\tests\\test_error_handler.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_query_tool_execution",
            "description": "Test query tool execution with CLI integration.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_search": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_search"
                ]
            },
            "file": "src\\mcp_server\\tests\\test_mcp_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_collections_create_action",
            "description": "Test collections tool create action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_create": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_create"
                ]
            },
            "file": "src\\mcp_server\\tests\\test_mcp_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_collections_list_action",
            "description": "Test collections tool list action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_list": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_list"
                ]
            },
            "file": "src\\mcp_server\\tests\\test_mcp_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_ingest_single_document",
            "description": "Test ingesting a single document.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_add": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_add"
                ]
            },
            "file": "src\\mcp_server\\tests\\test_mcp_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_ingest_folder",
            "description": "Test ingesting a folder of documents.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_ingest": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_ingest"
                ]
            },
            "file": "src\\mcp_server\\tests\\test_mcp_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_projects_create_action",
            "description": "Test projects tool create action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_create": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_create"
                ]
            },
            "file": "src\\mcp_server\\tests\\test_mcp_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_augment_external_result",
            "description": "Test augment tool add external result action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_add": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_add"
                ]
            },
            "file": "src\\mcp_server\\tests\\test_mcp_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_execute_no_changes_detected",
            "description": "Test execute when no model changes are detected.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_model_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_changes_detected",
            "description": "Test execute when model changes are detected.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_model_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_cli_error",
            "description": "Test handling of CLI errors.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_model_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cli_command_building",
            "description": "Test that CLI commands are built correctly.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_model_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_successful_reindex",
            "description": "Test execute with successful reindexing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_model_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_partial_failure",
            "description": "Test execute with partial failures.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_model_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_complete_failure",
            "description": "Test execute with complete failure.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_model_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cli_command_building_detailed",
            "description": "Test that CLI commands are built with all parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_model_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_all_collections_status",
            "description": "Test getting status for all collections.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_model_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_single_collection_status",
            "description": "Test getting status for a specific collection.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_model_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_all_up_to_date",
            "description": "Test status when all collections are up to date.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_model_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_detect_and_reindex_workflow",
            "description": "Test the complete workflow from detection to reindexing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_model_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "failing_sync_function",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_production_error_handling.py",
            "decorator": [
                "middleware.capture_errors"
            ]
        },
        {
            "name": "failing_async_function",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_production_error_handling.py",
            "decorator": [
                "middleware.capture_errors"
            ]
        },
        {
            "name": "function_with_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_production_error_handling.py",
            "decorator": [
                "middleware.capture_errors"
            ]
        },
        {
            "name": "function_with_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_production_error_handling.py",
            "decorator": [
                "middleware.capture_errors"
            ]
        },
        {
            "name": "mock_tool_execution",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_production_error_handling.py",
            "decorator": [
                "middleware.capture_errors"
            ]
        },
        {
            "name": "fast_function",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_production_error_handling.py",
            "decorator": [
                "middleware.capture_errors"
            ]
        },
        {
            "name": "error_function",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_production_error_handling.py",
            "decorator": [
                "middleware.capture_errors"
            ]
        },
        {
            "name": "concurrent_operation",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "operation_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "operation_id"
                ]
            },
            "file": "src\\mcp_server\\tests\\test_production_error_handling.py",
            "decorator": [
                "middleware.capture_errors"
            ]
        },
        {
            "name": "test_async_message_reading",
            "description": "Test asynchronous message reading from stdin.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_stdio_communication.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_async_message_writing",
            "description": "Test asynchronous message writing to stdout.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_stdio_communication.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_concurrent_message_handling",
            "description": "Test handling multiple concurrent messages.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_stdio_communication.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_fastmcp_stdio_server_run",
            "description": "Test running FastMCP server in STDIO mode.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_stdio_communication.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_async_progress_reporting_initialization",
            "description": "Test initialization of asynchronous progress reporting system.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_structured_feedback.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_concurrent_progress_tracking",
            "description": "Test progress tracking for multiple concurrent operations.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_structured_feedback.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_async_progress_event_generation",
            "description": "Test asynchronous generation of progress events.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_structured_feedback.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_async_progress_event_consumption",
            "description": "Test asynchronous consumption of progress events by clients.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_structured_feedback.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_async_error_handling_in_progress_reporting",
            "description": "Test error handling in asynchronous progress reporting.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\test_structured_feedback.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_cli_path",
            "description": "Mock CLI path for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "temp_test_file",
            "description": "Create a temporary test file.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_create_collection_success",
            "description": "Test create_collection tool matches CLI create command.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cli_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cli_path"
                ]
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_collection_validation_error",
            "description": "Test create_collection tool validation matches CLI validation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cli_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cli_path"
                ]
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_collections_success",
            "description": "Test list_collections tool matches CLI list command.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cli_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cli_path"
                ]
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_collection_not_found",
            "description": "Test delete_collection tool handles not found errors like CLI.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cli_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cli_path"
                ]
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_documents_success",
            "description": "Test list_documents tool matches CLI list-documents command.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cli_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cli_path"
                ]
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_knowledge_base_status_success",
            "description": "Test get_knowledge_base_status tool matches CLI status command.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cli_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cli_path"
                ]
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_add_document_success",
            "description": "Test add_document tool matches CLI add-document command.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cli_path": {
                        "type": "string"
                    },
                    "temp_test_file": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cli_path",
                    "temp_test_file"
                ]
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_remove_document_not_found",
            "description": "Test remove_document tool handles not found errors like CLI.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cli_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cli_path"
                ]
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_query_knowledge_base_success",
            "description": "Test query_knowledge_base tool matches CLI query search command.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cli_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cli_path"
                ]
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_query_validation_error",
            "description": "Test query tool validation matches CLI validation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cli_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cli_path"
                ]
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_all_tools_return_standardized_format",
            "description": "Test that all MCP tools return the standardized response format.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cli_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cli_path"
                ]
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_parameter_validation_consistency",
            "description": "Test that parameter validation is consistent across tools.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cli_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cli_path"
                ]
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_required_parameter_validation",
            "description": "Test that required parameters are properly validated.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cli_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cli_path"
                ]
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "sample_cli_responses",
            "description": "Sample CLI responses for different commands.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_complete_document_workflow",
            "description": "Test complete workflow: create collection -> add document -> query -> remove.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cli_path": {
                        "type": "string"
                    },
                    "temp_test_file": {
                        "type": "string"
                    },
                    "sample_cli_responses": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cli_path",
                    "temp_test_file",
                    "sample_cli_responses"
                ]
            },
            "file": "src\\mcp_server\\tests\\integration\\test_mcp_cli_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_query_tool_cli_command_generation",
            "description": "Test query tool generates correct CLI commands.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_cli_backend_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_collections_tool_cli_command_generation",
            "description": "Test collections tool generates correct CLI commands for different actions.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_cli_backend_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_documents_tool_cli_command_generation",
            "description": "Test documents tool generates correct CLI commands.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_cli_backend_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_projects_tool_cli_command_generation",
            "description": "Test projects tool generates correct CLI commands.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_cli_backend_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_augment_tool_cli_command_generation",
            "description": "Test knowledge augmentation tool generates correct CLI commands.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_cli_backend_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cli_error_handling_integration",
            "description": "Test proper handling of CLI command errors.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_cli_backend_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cli_timeout_handling",
            "description": "Test handling of CLI command timeouts.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_cli_backend_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cli_json_response_parsing",
            "description": "Test parsing of JSON responses from CLI commands.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_cli_backend_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cli_parameter_sanitization",
            "description": "Test CLI parameters are properly sanitized for security.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_cli_backend_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cli_concurrent_execution",
            "description": "Test CLI can handle concurrent command execution.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_cli_backend_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_success_response_handling",
            "description": "Test handling of successful CLI responses.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_cli_backend_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_error_response_handling",
            "description": "Test handling of error responses from CLI.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_cli_backend_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_malformed_json_response_handling",
            "description": "Test handling of malformed JSON responses from CLI.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_cli_backend_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_mcp_server_initialization_and_startup",
            "description": "Test that the FastMCP server properly initializes and starts up.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_stdio_protocol_compliance",
            "description": "Test that STDIO communication follows MCP protocol standards.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_query_knowledge_base_tool_integration",
            "description": "Test end-to-end query knowledge base tool functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_collections_management_tool_integration",
            "description": "Test end-to-end collections management tool functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_document_ingestion_tool_integration",
            "description": "Test end-to-end document ingestion tool functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_projects_management_tool_integration",
            "description": "Test end-to-end projects management tool functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_knowledge_augmentation_tool_integration",
            "description": "Test end-to-end knowledge augmentation tool functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_parameter_validation_integration",
            "description": "Test parameter validation works correctly across all tools.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_error_handling_integration",
            "description": "Test error handling works correctly across the entire system.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_response_formatting_integration",
            "description": "Test response formatting works correctly for all tool types.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_feedback_system_integration",
            "description": "Test structured feedback and progress reporting integration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_concurrent_operations_integration",
            "description": "Test server can handle multiple concurrent operations correctly.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_end_to_end_workflow_integration",
            "description": "Test complete end-to-end workflow from client request to response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_security_validation_integration",
            "description": "Test security validation works across the entire request pipeline.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_performance_under_load_integration",
            "description": "Test system performance under load conditions.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_json_rpc_message_format_compliance",
            "description": "Test all messages follow JSON-RPC 2.0 format specifications.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_mcp_specific_message_compliance",
            "description": "Test MCP-specific message format requirements.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tests\\integration_tests\\test_fastmcp_server_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tools\\augment_tool.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "description",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tools\\augment_tool.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_schema",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tools\\augment_tool.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_tool_name",
            "description": "\n        Get the name of this MCP tool.\n        \n        Returns:\n            str: The tool name used for MCP registration\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tools\\base_tool.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_tool_description",
            "description": "\n        Get the description of this MCP tool.\n        \n        Returns:\n            str: Human-readable description of what this tool does\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tools\\base_tool.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "execute",
            "description": "\n        Execute the tool with the given parameters.\n        \n        Args:\n            parameters: Dictionary of parameters for the tool\n            \n        Returns:\n            Dict containing the tool execution result in standardized format\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string",
                        "description": "Dictionary of parameters for the tool"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters",
                    "Returns"
                ]
            },
            "file": "src\\mcp_server\\tools\\base_tool.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "main",
            "description": "\n    Research Agent CLI - AI-powered research with local-first RAG capabilities.\n    \n    The Research Agent provides intelligent document processing, embedding generation,\n    and semantic search capabilities for your research and knowledge management needs.\n    \n    Common workflows:\n    \u2022 Ingest documents: research-agent kb add-document path/to/doc.md\n    \u2022 Create collections: research-agent collections create my-collection\n    \u2022 Query knowledge: research-agent query \"What is machine learning?\"\n    \n    For detailed help on any command, use: research-agent <command> --help\n    \"\"\"\n    #",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\cli\\cli.py",
            "decorator": [
                "app.callback"
            ]
        },
        {
            "name": "create_collection",
            "description": "\n    Create a new knowledge collection.\n    \n    Collections organize documents by topic, project, or type.\n    They enable focused queries and better knowledge organization.\n    \n    Example:\n        research-agent collections create \"machine-learning\" --description \"ML research papers\"\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\cli\\collections.py",
            "decorator": [
                "collections_app.command"
            ]
        },
        {
            "name": "list_collections",
            "description": "\n    List all collections in the knowledge base.\n    \n    Shows collection names, types, descriptions, and optionally\n    statistics about document count and storage usage.\n    \n    Example:\n        research-agent collections list --stats\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\cli\\collections.py",
            "decorator": [
                "collections_app.command"
            ]
        },
        {
            "name": "collection_info",
            "description": "\n    Show detailed information about a collection.\n    \n    Displays collection metadata, statistics, configuration,\n    and recent activity.\n    \n    Example:\n        research-agent collections info \"machine-learning\"\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\cli\\collections.py",
            "decorator": [
                "collections_app.command"
            ]
        },
        {
            "name": "delete_collection",
            "description": "\n    Delete a collection from the knowledge base.\n    \n    By default, this removes the collection and all its documents.\n    Use --keep-documents to preserve documents in the default collection.\n    \n    Example:\n        research-agent collections delete \"old-project\" --confirm\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\cli\\collections.py",
            "decorator": [
                "collections_app.command"
            ]
        },
        {
            "name": "rename_collection",
            "description": "\n    Rename a collection.\n    \n    Changes the collection name while preserving all documents\n    and metadata.\n    \n    Example:\n        research-agent collections rename \"old-name\" \"new-name\"\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\cli\\collections.py",
            "decorator": [
                "collections_app.command"
            ]
        },
        {
            "name": "add_document",
            "description": "\n    Add a single document to the knowledge base.\n    \n    This command processes a document, chunks it, generates embeddings,\n    and stores it in the specified collection.\n    \n    Args:\n        ctx: Typer context for accessing global configuration.\n        file_path: Path to the document file to add.\n        collection: Name of the collection to add the document to.\n        force: Whether to overwrite existing documents.\n        \n    Example:\n        research-agent kb add-document path/to/document.md --collection my-docs\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string",
                        "description": "Typer context for accessing global configuration."
                    },
                    "file_path": {
                        "type": "string",
                        "description": "Path to the document file to add."
                    },
                    "collection": {
                        "type": "string",
                        "description": "Name of the collection to add the document to."
                    },
                    "force": {
                        "type": "string",
                        "description": "Whether to overwrite existing documents."
                    },
                    "Example": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "file_path",
                    "collection",
                    "force",
                    "Example"
                ]
            },
            "file": "src\\research_agent_backend\\cli\\knowledge_base.py",
            "decorator": [
                "kb_app.command"
            ]
        },
        {
            "name": "ingest_folder",
            "description": "\n    Ingest all documents from a folder into the knowledge base.\n    \n    This command processes all matching files in a folder, chunks them,\n    generates embeddings, and stores them in the specified collection.\n    \n    Args:\n        ctx: Typer context for accessing global configuration.\n        folder_path: Path to the folder containing documents to ingest.\n        collection: Name of the collection to add documents to.\n        pattern: File pattern to match for ingestion.\n        recursive: Whether to search subdirectories recursively.\n        \n    Example:\n        research-agent kb ingest-folder ./docs --collection project-docs --pattern \"*.md\"\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string",
                        "description": "Typer context for accessing global configuration."
                    },
                    "folder_path": {
                        "type": "string",
                        "description": "Path to the folder containing documents to ingest."
                    },
                    "collection": {
                        "type": "string",
                        "description": "Name of the collection to add documents to."
                    },
                    "pattern": {
                        "type": "string",
                        "description": "File pattern to match for ingestion."
                    },
                    "recursive": {
                        "type": "string",
                        "description": "Whether to search subdirectories recursively."
                    },
                    "Example": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "folder_path",
                    "collection",
                    "pattern",
                    "recursive",
                    "Example"
                ]
            },
            "file": "src\\research_agent_backend\\cli\\knowledge_base.py",
            "decorator": [
                "kb_app.command"
            ]
        },
        {
            "name": "list_documents",
            "description": "\n    List documents in the knowledge base.\n    \n    Shows document metadata including collection, ingestion date,\n    chunk count, and other relevant information.\n    \n    Args:\n        collection: Optional collection name to filter by.\n        limit: Maximum number of documents to display.\n        \n    Example:\n        research-agent kb list-documents --collection my-docs --limit 20\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "collection": {
                        "type": "string",
                        "description": "Optional collection name to filter by."
                    },
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of documents to display."
                    },
                    "Example": {
                        "type": "string"
                    }
                },
                "required": [
                    "collection",
                    "limit",
                    "Example"
                ]
            },
            "file": "src\\research_agent_backend\\cli\\knowledge_base.py",
            "decorator": [
                "kb_app.command"
            ]
        },
        {
            "name": "remove_document",
            "description": "\n    Remove a document from the knowledge base.\n    \n    This command removes the document and all its associated chunks\n    and embeddings from the vector store.\n    \n    Args:\n        ctx: Typer context for accessing global configuration.\n        document_id: ID of the document to remove.\n        confirm: Whether to skip the confirmation prompt.\n        \n    Example:\n        research-agent kb remove-document doc-123 --confirm\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string",
                        "description": "Typer context for accessing global configuration."
                    },
                    "document_id": {
                        "type": "string",
                        "description": "ID of the document to remove."
                    },
                    "confirm": {
                        "type": "string",
                        "description": "Whether to skip the confirmation prompt."
                    },
                    "Example": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "document_id",
                    "confirm",
                    "Example"
                ]
            },
            "file": "src\\research_agent_backend\\cli\\knowledge_base.py",
            "decorator": [
                "kb_app.command"
            ]
        },
        {
            "name": "status",
            "description": "\n    Show knowledge base status and statistics.\n    \n    Displays information about document count, collections,\n    storage usage, and other system metrics.\n        \n    Example:\n        research-agent kb status\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\cli\\knowledge_base.py",
            "decorator": [
                "kb_app.command"
            ]
        },
        {
            "name": "model_status",
            "description": "\n    Display current model status and change detection information.\n    \n    Shows the current embedding model configuration, registered models,\n    and any detected changes that may require user attention.\n    \n    Example:\n        research-agent model status\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\cli\\model_management.py",
            "decorator": [
                "model_app.command"
            ]
        },
        {
            "name": "create_project",
            "description": "\n    Create a new project.\n    \n    Creates a new project with metadata storage for organizing\n    collections and knowledge management.\n    \n    Example:\n        research-agent projects create \"my-research\" --description \"AI research project\" --tags \"ai,research\"\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\cli\\projects.py",
            "decorator": [
                "projects_app.command"
            ]
        },
        {
            "name": "project_info",
            "description": "\n    Show detailed information about a project.\n    \n    Displays project metadata, collections, recent activity,\n    and knowledge statistics.\n    \n    Example:\n        research-agent projects info \"my-research\"\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\cli\\projects.py",
            "decorator": [
                "projects_app.command"
            ]
        },
        {
            "name": "update_project",
            "description": "\n    Update project metadata.\n    \n    Updates project description, tags, and other metadata.\n    \n    Example:\n        research-agent projects update \"my-research\" --description \"Updated description\" --add-tags \"new-tag\"\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\cli\\projects.py",
            "decorator": [
                "projects_app.command"
            ]
        },
        {
            "name": "link_collection",
            "description": "\n    Link a collection to a project.\n    \n    Creates a relationship between a project and a collection,\n    allowing project-specific knowledge organization.\n    \n    Example:\n        research-agent projects link-collection \"my-research\" \"research-papers\" --description \"Core research papers\"\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\cli\\projects.py",
            "decorator": [
                "projects_app.command"
            ]
        },
        {
            "name": "unlink_collection",
            "description": "\n    Unlink a collection from a project.\n    \n    Removes the relationship between a project and a collection.\n    The collection itself is not deleted.\n    \n    Example:\n        research-agent projects unlink-collection \"my-research\" \"old-papers\" --confirm\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\cli\\projects.py",
            "decorator": [
                "projects_app.command"
            ]
        },
        {
            "name": "set_default_collections",
            "description": "\n    Set default collections for a project.\n    \n    Default collections are used automatically when querying\n    within the project context.\n    \n    Example:\n        research-agent projects set-default-collections \"my-research\" \"papers,docs\" --append\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\cli\\projects.py",
            "decorator": [
                "projects_app.command"
            ]
        },
        {
            "name": "list_project_collections",
            "description": "\n    List collections linked to a project.\n    \n    Shows all collections associated with a project,\n    optionally with statistics and filtering.\n    \n    Example:\n        research-agent projects list-project-collections \"my-research\" --stats\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\cli\\projects.py",
            "decorator": [
                "projects_app.command"
            ]
        },
        {
            "name": "content_hash",
            "description": "Generate a hash of the content for deduplication.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\augmentation_service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "file_size_mb",
            "description": "Get file size in MB.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\augmentation_service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "quality_grade",
            "description": "Get a letter grade for the overall quality.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\augmentation_service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "embed_text",
            "description": "\n        Generate embedding for a single text string.\n        \n        Args:\n            text: Input text to embed\n            \n        Returns:\n            List of float values representing the embedding vector\n            \n        Raises:\n            EmbeddingServiceError: If embedding generation fails\n            ModelNotFoundError: If the embedding model is not available\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "Input text to embed"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "Raises": {
                        "type": "string"
                    },
                    "EmbeddingServiceError": {
                        "type": "string",
                        "description": "If embedding generation fails"
                    },
                    "ModelNotFoundError": {
                        "type": "string",
                        "description": "If the embedding model is not available"
                    }
                },
                "required": [
                    "text",
                    "Returns",
                    "Raises",
                    "EmbeddingServiceError",
                    "ModelNotFoundError"
                ]
            },
            "file": "src\\research_agent_backend\\core\\embedding_service.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "embed_batch",
            "description": "\n        Generate embeddings for a batch of text strings.\n        \n        Args:\n            texts: List of input texts to embed\n            \n        Returns:\n            List of embedding vectors, one for each input text\n            \n        Raises:\n            BatchProcessingError: If batch processing fails\n            EmbeddingServiceError: If embedding generation fails\n            ModelNotFoundError: If the embedding model is not available\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "texts": {
                        "type": "string",
                        "description": "List of input texts to embed"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "Raises": {
                        "type": "string"
                    },
                    "BatchProcessingError": {
                        "type": "string",
                        "description": "If batch processing fails"
                    },
                    "EmbeddingServiceError": {
                        "type": "string",
                        "description": "If embedding generation fails"
                    },
                    "ModelNotFoundError": {
                        "type": "string",
                        "description": "If the embedding model is not available"
                    }
                },
                "required": [
                    "texts",
                    "Returns",
                    "Raises",
                    "BatchProcessingError",
                    "EmbeddingServiceError",
                    "ModelNotFoundError"
                ]
            },
            "file": "src\\research_agent_backend\\core\\embedding_service.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_model_info",
            "description": "\n        Get information about the embedding model.\n        \n        Returns:\n            Dictionary containing model metadata including:\n            - model_name: Name/identifier of the model\n            - dimension: Embedding vector dimension\n            - max_seq_length: Maximum sequence length (optional)\n            - model_type: Type of model (local/api)\n            \n        Raises:\n            EmbeddingServiceError: If model information cannot be retrieved\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\embedding_service.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_embedding_dimension",
            "description": "\n        Get the dimension of embeddings produced by this service.\n        \n        Returns:\n            Integer representing the embedding vector dimension\n            \n        Raises:\n            EmbeddingServiceError: If dimension cannot be determined\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\embedding_service.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "is_model_available",
            "description": "\n        Check if the embedding model is available for use.\n        \n        Returns:\n            True if model is available, False otherwise\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\embedding_service.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_embedding_cache",
            "description": "Lazy-loaded embedding cache for test compatibility.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\integrated_rag_pipeline.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_embedding_cache",
            "description": "Allow setting _embedding_cache for initialization.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "src\\research_agent_backend\\core\\integrated_rag_pipeline.py",
            "decorator": [
                "_embedding_cache.setter"
            ]
        },
        {
            "name": "_vector_store",
            "description": "Lazy-loaded vector store for test compatibility.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\integrated_rag_pipeline.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_vector_store",
            "description": "Allow setting _vector_store for initialization.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "src\\research_agent_backend\\core\\integrated_rag_pipeline.py",
            "decorator": [
                "_vector_store.setter"
            ]
        },
        {
            "name": "is_loaded",
            "description": "Check if the instance has been loaded.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\performance_benchmark.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "load_time",
            "description": "Get the time taken to load the instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\performance_benchmark.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "classify",
            "description": "\n        Classify the intent of a query based on its content.\n        \n        Args:\n            query: Natural language query string\n            \n        Returns:\n            Classified QueryIntent\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "extract_from_text",
            "description": "\n        Extract contextual filters from text using pattern matching.\n        \n        Args:\n            text: Input text to analyze for filters\n            \n        Returns:\n            List of extracted ContextualFilter objects\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create QueryContext from dictionary representation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create QueryResult from dictionary representation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_environment",
            "description": "\n        Create configuration from environment variables.\n        \n        Loads configuration parameters from environment variables using\n        standardized naming conventions: {PROVIDER}_API_KEY, {PROVIDER}_BASE_URL, etc.\n        \n        Args:\n            provider: API provider name (will be uppercased for environment variable names)\n            \n        Returns:\n            APIConfiguration instance with values loaded from environment\n            \n        Raises:\n            AuthenticationError: If required API key environment variable is not found\n            \n        Example:\n            >>> # With OPENAI_API_KEY set in environment\n            >>> config = APIConfiguration.from_environment(\"openai\")\n            >>> assert config.provider == \"openai\"\n            >>> assert config.api_key is not None\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\api_embedding_service\\config.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_environment",
            "description": "\n        Create service instance from environment variables.\n        \n        Convenience method that creates an APIConfiguration from environment\n        variables and initializes the service.\n        \n        Args:\n            provider: API provider name (e.g., \"openai\", \"anthropic\")\n            \n        Returns:\n            APIEmbeddingService instance configured from environment\n            \n        Raises:\n            AuthenticationError: If required environment variables are missing\n            \n        Example:\n            >>> # With OPENAI_API_KEY environment variable set\n            >>> service = APIEmbeddingService.from_environment(\"openai\")\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\api_embedding_service\\service.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "success_rate",
            "description": "Calculate success rate of processing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\data_preparation\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "filter_rate",
            "description": "Calculate filter rate of processing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\data_preparation\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "create_chunk_metadata",
            "description": "\n        Create chunk metadata from document metadata.\n        \n        Args:\n            doc_metadata: Source document metadata\n            sequence_id: Chunk sequence identifier\n            \n        Returns:\n            ChunkMetadata instance\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "doc_metadata": {
                        "type": "string",
                        "description": "Source document metadata"
                    },
                    "sequence_id": {
                        "type": "string",
                        "description": "Chunk sequence identifier"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "doc_metadata",
                    "sequence_id",
                    "Returns"
                ]
            },
            "file": "src\\research_agent_backend\\core\\document_insertion\\chunking.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "has_errors",
            "description": "Check if result has errors.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\document_insertion\\exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "success_rate",
            "description": "Calculate success rate of batch insertion.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\document_insertion\\exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "transaction_context",
            "description": "Access to transaction context manager.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\document_insertion\\manager.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "transaction_context",
            "description": "\n        Context manager for transaction operations.\n        \n        Provides automatic transaction management with rollback on exceptions.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\document_insertion\\transactions.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "from_dict",
            "description": "\n        Create configuration from dictionary.\n        \n        Args:\n            data: Dictionary with configuration parameters\n            \n        Returns:\n            ChunkConfig instance\n            \n        Raises:\n            ValueError: If required parameters are missing or invalid\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\document_processor\\chunking\\config.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_json",
            "description": "\n        Create configuration from JSON string.\n        \n        Args:\n            json_str: JSON string with configuration\n            \n        Returns:\n            ChunkConfig instance\n            \n        Raises:\n            json.JSONDecodeError: If JSON is invalid\n            ValueError: If configuration parameters are invalid\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\document_processor\\chunking\\config.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "total_matches",
            "description": "Total number of metadata items found.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\document_processor\\metadata\\inline.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "has_metadata",
            "description": "True if any metadata was found.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\document_processor\\metadata\\inline.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "has_metadata",
            "description": "True if document has any metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\document_processor\\metadata\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "all_metadata",
            "description": "Combined metadata from all sources.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\document_processor\\metadata\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "has_frontmatter",
            "description": "True if frontmatter was found.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\document_processor\\metadata\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "has_inline_metadata",
            "description": "True if inline metadata was found.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\document_processor\\metadata\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "extraction_successful",
            "description": "True if extraction completed without major errors.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\document_processor\\metadata\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "total_metadata_items",
            "description": "Total number of metadata items found.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\document_processor\\metadata\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_dict",
            "description": "\n        Reconstruct fingerprint from dictionary representation.\n        \n        Safely deserializes a fingerprint from its dictionary form,\n        handling type conversion and validation automatically.\n        \n        Args:\n            data: Dictionary containing fingerprint data\n            \n        Returns:\n            Reconstructed ModelFingerprint instance\n            \n        Raises:\n            ValueError: If data is malformed or invalid\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\model_change_detection\\fingerprint.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "service_instance": {
                        "type": "string"
                    }
                },
                "required": [
                    "service_instance"
                ]
            },
            "file": "src\\research_agent_backend\\core\\model_change_detection\\integration_hooks.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "reset_singleton",
            "description": "\n        Reset singleton instance for testing and development.\n        \n        Warning:\n            This method should only be used in test environments.\n            In production, the singleton should persist for the\n            application lifetime.\n            \n        Args:\n            target_class: The class to reset the singleton for\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\model_change_detection\\singleton.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "storage_path_str",
            "description": "Get storage path as string for backward compatibility.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\model_change_detection\\singleton.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "reset_singleton",
            "description": "\n        Reset singleton instance for testing and development.\n        \n        Warning:\n            This method should only be used in test environments.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\model_change_detection\\singleton.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "size",
            "description": "Get current cache size.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\query_manager\\cache.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "generate_result_feedback",
            "description": "\n        Generate comprehensive feedback for search results.\n        \n        Args:\n            query_context: The parsed query context with intent and filters\n            search_results: List of search results with metadata\n            top_k: Number of top results requested\n            \n        Returns:\n            Dictionary containing feedback components including explanations,\n            suggestions, and metrics\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query_context": {
                        "type": "string",
                        "description": "The parsed query context with intent and filters"
                    },
                    "search_results": {
                        "type": "string",
                        "description": "List of search results with metadata"
                    },
                    "top_k": {
                        "type": "string",
                        "description": "Number of top results requested"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "query_context",
                    "search_results",
                    "top_k",
                    "Returns"
                ]
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_generate_search_summary",
            "description": "Generate overall search summary.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_generate_result_explanations",
            "description": "Generate explanations for individual results.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_generate_refinement_suggestions",
            "description": "Generate contextual refinement suggestions.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_empty_results_suggestions",
            "description": "Generate suggestions for empty search results.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_generate_quality_based_suggestions",
            "description": "Generate suggestions based on result quality analysis.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_generate_collection_suggestions",
            "description": "Generate collection-related suggestions.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_check_semantic_collection_mismatch",
            "description": "Check for semantic mismatches between query and result collections.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_generate_intent_based_suggestions",
            "description": "Generate suggestions based on query intent.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_fallback_suggestions",
            "description": "Generate fallback suggestions when no specific issues detected.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_calculate_relevance_metrics",
            "description": "Calculate overall relevance quality metrics.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_calculate_relevance_score",
            "description": "Calculate normalized relevance score from distance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_generate_ranking_reason",
            "description": "Generate human-readable ranking explanation.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_relevance_description",
            "description": "Get human-readable relevance description.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_extract_content_match_reasons",
            "description": "Extract reasons based on content matches.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_collection_reason",
            "description": "Get collection-based reason if available.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_extract_preference_reasons",
            "description": "Extract reasons based on user preference alignment.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_extract_collections_from_results",
            "description": "Extract unique collections from search results.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_calculate_best_match_score",
            "description": "Calculate the best match score from results.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_calculate_query_coverage",
            "description": "Calculate how well results cover query terms.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\feedback_generation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "classify",
            "description": "\n        Classify the intent of a query based on its content.\n        \n        Args:\n            query: Natural language query string\n            \n        Returns:\n            Classified QueryIntent\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\query_context.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "extract_from_text",
            "description": "\n        Extract contextual filters from text using pattern matching.\n        \n        Args:\n            text: Input text to analyze for filters\n            \n        Returns:\n            List of extracted ContextualFilter objects\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\query_context.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create QueryContext from dictionary representation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\query_context.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "extract_key_terms",
            "description": "\n        Extract key terms from query based on intent and patterns.\n        \n        Args:\n            query: Original query string\n            intent: Classified query intent\n            \n        Returns:\n            List of extracted and processed key terms\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Original query string"
                    },
                    "intent": {
                        "type": "string",
                        "description": "Classified query intent"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "query",
                    "intent",
                    "Returns"
                ]
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\query_parsing.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_process_comparative_terms",
            "description": "Process terms for comparative analysis queries.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\query_parsing.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_process_compound_terms",
            "description": "Process compound terms like 'machine learning'.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\query_parsing.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_apply_term_capitalizations",
            "description": "Apply proper capitalizations for known terms.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\query_parsing.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_apply_domain_filtering",
            "description": "Apply domain-specific filtering rules for test compatibility.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\query_parsing.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "extract_preferences",
            "description": "\n        Extract user preferences from query patterns.\n        \n        Args:\n            query: Original query string\n            intent: Classified query intent\n            \n        Returns:\n            Dictionary of extracted preferences\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Original query string"
                    },
                    "intent": {
                        "type": "string",
                        "description": "Classified query intent"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "query",
                    "intent",
                    "Returns"
                ]
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\query_parsing.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "extract_entities",
            "description": "\n        Extract named entities from query.\n        \n        Args:\n            query: Original query string\n            \n        Returns:\n            Dictionary of categorized entities\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Original query string"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "query",
                    "Returns"
                ]
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\query_parsing.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "extract_temporal_context",
            "description": "\n        Extract temporal context from query.\n        \n        Args:\n            query: Original query string\n            \n        Returns:\n            Temporal context dictionary or None\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Original query string"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "query",
                    "Returns"
                ]
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\query_parsing.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "enhance_query_for_embedding",
            "description": "\n        Enhance the original query with contextual information for better embedding.\n        \n        Args:\n            query_context: Parsed query context\n            \n        Returns:\n            Enhanced query string optimized for embedding generation\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query_context": {
                        "type": "string",
                        "description": "Parsed query context"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "query_context",
                    "Returns"
                ]
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\query_parsing.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create QueryResult from dictionary representation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\rag_query_engine\\rag_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create config from dictionary.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\reranker\\config.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "content",
            "description": "Get content from original result.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\reranker\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "display_content",
            "description": "Get content for display (highlighted if available, otherwise original).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\reranker\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "document_id",
            "description": "Get document ID from original result.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\reranker\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chunk_id",
            "description": "Get chunk ID from original result.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\reranker\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "model_name",
            "description": "Get model name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\reranker\\service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "device",
            "description": "Get device.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\reranker\\service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "batch_size",
            "description": "Get batch size.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\reranker\\service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "max_length",
            "description": "Get max length.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\reranker\\service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create config from dictionary.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\core\\reranker\\pipeline\\config.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\reranker\\pipeline\\processor.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "process_search_results",
            "description": "\n        Process search results through the advanced re-ranking pipeline.\n        \n        Args:\n            query: Original search query\n            search_results: List of search results from retrieval pipeline\n            preserve_original_order: Override for preserving original order\n            \n        Returns:\n            PipelineResult with processed results and comprehensive metrics\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Original search query"
                    },
                    "search_results": {
                        "type": "string",
                        "description": "List of search results from retrieval pipeline"
                    },
                    "preserve_original_order": {
                        "type": "string",
                        "description": "Override for preserving original order"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "query",
                    "search_results",
                    "preserve_original_order",
                    "Returns"
                ]
            },
            "file": "src\\research_agent_backend\\core\\reranker\\pipeline\\processor.py",
            "decorator": [
                "monitor_performance"
            ]
        },
        {
            "name": "client",
            "description": "Get ChromaDB client, initializing if necessary.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\vector_store\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_connected",
            "description": "Check if database is connected and healthy.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\vector_store\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "success_rate",
            "description": "Calculate success rate as percentage.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\vector_store\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Get ChromaDB client, initializing if necessary.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\vector_store\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_connected",
            "description": "Check if database is connected and healthy.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\core\\vector_store\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "additional_data",
            "description": "Get additional data dictionary.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "additional_data",
            "description": "Set additional data dictionary.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "additional_data.setter"
            ]
        },
        {
            "name": "message",
            "description": "Get error message.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "severity",
            "description": "Get error severity.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "context",
            "description": "Get error context.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "context",
            "description": "Set error context.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "context.setter"
            ]
        },
        {
            "name": "suggested_actions",
            "description": "Get suggested recovery actions.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "original_exception",
            "description": "Get original exception if available.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "timestamp",
            "description": "Get error timestamp (lazy evaluation).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "error_id",
            "description": "Get unique error ID (lazy evaluation).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "config_file",
            "description": "Get configuration file path.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "validation_errors",
            "description": "Get validation errors.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "database_type",
            "description": "Get database type.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "connection_string",
            "description": "Get connection string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "operation",
            "description": "Get database operation.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "model_name",
            "description": "Get model name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "model_type",
            "description": "Get model type.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "error_type",
            "description": "Get error type.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "file_path",
            "description": "Get file path.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "operation",
            "description": "Get file operation.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "permissions_required",
            "description": "Get required permissions.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "endpoint",
            "description": "Get endpoint URL.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "status_code",
            "description": "Get HTTP status code.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "timeout_duration",
            "description": "Get timeout duration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "retry_count",
            "description": "Get retry count.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\exceptions\\system_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_chromadb_metadata",
            "description": "Create ChunkMetadata from ChromaDB metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\models\\metadata_schema\\chunk_metadata.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create from dictionary.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\models\\metadata_schema\\header_hierarchy.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_json",
            "description": "Create from JSON string.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\models\\metadata_schema\\header_hierarchy.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "name",
            "description": "Get project name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\models\\metadata_schema\\project_metadata.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "description",
            "description": "Get project description.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\models\\metadata_schema\\project_metadata.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "tags",
            "description": "Get project tags.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\models\\metadata_schema\\project_metadata.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "created_at",
            "description": "Get project creation time.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\models\\metadata_schema\\project_metadata.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "linked_collections_count",
            "description": "Get count of linked collections.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\models\\metadata_schema\\project_metadata.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "total_documents",
            "description": "Get total document count across all linked collections.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\models\\metadata_schema\\project_metadata.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "validate_string_field",
            "description": "Validate and normalize string fields.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\models\\metadata_schema\\validation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "validate_integer_field",
            "description": "Validate and normalize integer fields.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\models\\metadata_schema\\validation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "validate_enum_field",
            "description": "Validate and normalize enum fields.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\models\\metadata_schema\\validation.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "validate_chunk_metadata",
            "description": "Validate and normalize chunk metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\models\\metadata_schema\\validation.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "duration_seconds",
            "description": "Calculate backup duration in seconds.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\services\\backup_recovery_service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create from dictionary.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\research_agent_backend\\services\\backup_recovery_service.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "duration_seconds",
            "description": "Calculate recovery duration in seconds.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\services\\backup_recovery_service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "passed",
            "description": "Check if test passed.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\services\\migration_validation_service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "failed",
            "description": "Check if test failed.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\services\\migration_validation_service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "has_warnings",
            "description": "Check if test has warnings.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\services\\migration_validation_service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "duration_seconds",
            "description": "Calculate validation duration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\services\\migration_validation_service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "passed_tests",
            "description": "Get passed tests.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\services\\migration_validation_service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "failed_tests",
            "description": "Get failed tests.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\services\\migration_validation_service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "warning_tests",
            "description": "Get tests with warnings.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\services\\migration_validation_service.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "elapsed_time",
            "description": "Calculate elapsed time for the operation.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\services\\progress_dashboard.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "estimated_remaining_time",
            "description": "Estimate remaining time based on current progress.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\services\\progress_dashboard.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "processing_rate",
            "description": "Calculate items processed per second.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\services\\progress_dashboard.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ensure_integration_patches_cleanup",
            "description": "\n    Global fixture to ensure integration patches are always cleaned up.\n    \n    This prevents integration test patches from persisting across tests,\n    which was causing interface mismatch errors in the test suite.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "temp_directory",
            "description": "Provide a temporary directory for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "temp_vector_store",
            "description": "Provide a temporary vector store for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_embeddings",
            "description": "Provide sample embedding vectors for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_metadata",
            "description": "Provide sample metadata for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "config_manager",
            "description": "Provide a mock ConfigManager for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "in_memory_chroma_manager",
            "description": "Provide a mock ChromaDBManager for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "collection_type_manager",
            "description": "Provide a mock CollectionTypeManager for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "data_preparation_manager",
            "description": "Provide a mock DataPreparationManager for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_documents",
            "description": "Provide sample documents for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_embedding_service",
            "description": "Provide a mock embedding service for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_config",
            "description": "Provide test configuration settings.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "integration_config",
            "description": "Configuration optimized for integration testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_config": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_config"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_config_manager",
            "description": "Create a mock ConfigManager for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\test_collection_type_manager.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "collection_type_manager",
            "description": "Create CollectionTypeManager instance for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_config_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_config_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\test_collection_type_manager.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "manager_with_config",
            "description": "Create manager with realistic configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\test_collection_type_manager.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "insertion_manager",
            "description": "Create a mock DocumentInsertionManager for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\test_document_insertion.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "insertion_manager",
            "description": "Create a mock DocumentInsertionManager for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\test_document_insertion.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "insertion_manager",
            "description": "Create a mock DocumentInsertionManager for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\test_document_insertion.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "insertion_manager",
            "description": "Create a mock DocumentInsertionManager for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\test_document_insertion.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "insertion_manager",
            "description": "Create a mock DocumentInsertionManager with transaction support.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\test_document_insertion.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "query_manager",
            "description": "Create a QueryManager instance for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "in_memory_chroma_manager": {
                        "type": "string"
                    },
                    "config_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "in_memory_chroma_manager",
                    "config_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\test_query_manager.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_query_configs",
            "description": "Sample query configurations for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\test_query_manager.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_filter_configs",
            "description": "Sample filter configurations for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\test_query_manager.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_pagination_configs",
            "description": "Sample pagination configurations for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\test_query_manager.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_add_external_result_basic",
            "description": "Test adding a basic external search result.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_quality_score": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_quality_score"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_add_external_result_with_metadata",
            "description": "Test adding external result with rich metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_augmentation_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_augmentation_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_add_external_result_from_file",
            "description": "Test adding external result from JSON file.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_augmentation_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_augmentation_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_add_external_result_validation_error",
            "description": "Test error handling for invalid external result data.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_augmentation_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_augmentation_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_add_research_report_basic",
            "description": "Test adding a basic research report.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_augmentation_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_augmentation_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_add_research_report_with_auto_categorization",
            "description": "Test research report with automatic categorization.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_augmentation_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_augmentation_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_add_research_report_batch_mode",
            "description": "Test adding multiple research reports in batch.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_augmentation_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_augmentation_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_update_document_content",
            "description": "Test updating document content.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_augmentation_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_augmentation_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_update_document_metadata_only",
            "description": "Test updating only document metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_augmentation_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_augmentation_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_update_document_from_file",
            "description": "Test updating document from file.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_augmentation_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_augmentation_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_merge_duplicates_auto_detect",
            "description": "Test automatic duplicate detection and merging.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_augmentation_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_augmentation_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_merge_duplicates_manual_selection",
            "description": "Test manual duplicate selection and merging.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_augmentation_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_augmentation_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_merge_duplicates_preview_mode",
            "description": "Test duplicate detection in preview mode.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_augmentation_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_augmentation_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_submit_feedback_positive",
            "description": "Test submitting positive feedback.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_feedback_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_feedback_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_submit_feedback_negative",
            "description": "Test submitting negative feedback.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_feedback_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_feedback_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_feedback_analytics",
            "description": "Test feedback analytics command.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_feedback_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_feedback_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_feedback_export",
            "description": "Test feedback export functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_feedback_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_feedback_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_end_to_end_external_result_workflow",
            "description": "Test complete workflow: add external result -> get feedback -> update.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_feedback_service": {
                        "type": "string"
                    },
                    "mock_augmentation_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_feedback_service",
                    "mock_augmentation_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_augmentation_commands.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_search_basic_query",
            "description": "Test basic search functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_config_manager": {
                        "type": "string"
                    },
                    "mock_reranker": {
                        "type": "string"
                    },
                    "mock_chroma": {
                        "type": "string"
                    },
                    "mock_embedding": {
                        "type": "string"
                    },
                    "mock_rag_engine": {
                        "type": "string"
                    },
                    "mock_query_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_config_manager",
                    "mock_reranker",
                    "mock_chroma",
                    "mock_embedding",
                    "mock_rag_engine",
                    "mock_query_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch",
                "patch",
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_search_with_collections_filter",
            "description": "Test search with collections filter.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_query_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_query_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_search_with_reranking_disabled",
            "description": "Test search with reranking disabled.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_query_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_query_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_search_error_handling",
            "description": "Test search error handling.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_query_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_query_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_ask_basic_question",
            "description": "Test basic ask functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_rag_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_rag_engine"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_ask_with_collections",
            "description": "Test ask with collections filter.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_rag_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_rag_engine"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_ask_without_sources",
            "description": "Test ask without showing sources.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_rag_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_rag_engine"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_interactive_session_basic",
            "description": "Test basic interactive session.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_input": {
                        "type": "string"
                    },
                    "mock_rag_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_input",
                    "mock_rag_engine"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_interactive_with_refinement",
            "description": "Test interactive session with query refinement.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_input": {
                        "type": "string"
                    },
                    "mock_rag_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_input",
                    "mock_rag_engine"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_interactive_with_collections",
            "description": "Test interactive session with collections filter.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_input": {
                        "type": "string"
                    },
                    "mock_rag_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_input",
                    "mock_rag_engine"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_refine_basic",
            "description": "Test basic query refinement.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_rag_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_rag_engine"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_refine_with_collections",
            "description": "Test query refinement with collections.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_rag_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_rag_engine"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_find_similar_basic",
            "description": "Test basic similar document search.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_query_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_query_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_find_similar_same_collection_only",
            "description": "Test similar search within same collection only.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_query_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_query_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_explain_result_basic",
            "description": "Test basic result explanation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_rag_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_rag_engine"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_query_history_basic",
            "description": "Test basic query history.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_query_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_query_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_query_history_with_search",
            "description": "Test query history with search filter.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_query_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_query_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_end_to_end_search_flow",
            "description": "Test complete end-to-end search flow.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding": {
                        "type": "string"
                    },
                    "mock_rag": {
                        "type": "string"
                    },
                    "mock_query_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding",
                    "mock_rag",
                    "mock_query_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_error_handling_across_commands",
            "description": "Test error handling across different query commands.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_query_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_query_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_query_commands_load_config",
            "description": "Test that query commands properly load configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_config_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_config_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\cli\\test_query_commands.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "project_root",
            "description": "Get the project root directory.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\integration\\test_config_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "project_root",
            "description": "Get the project root directory.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\integration\\test_config_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "project_root",
            "description": "Get the project root directory.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\integration\\test_config_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_embedding_service",
            "description": "Create a mock embedding service for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\integration\\test_model_change_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "chunk_config",
            "description": "Create a basic chunk configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\integration\\test_model_change_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "chunker",
            "description": "Create a recursive chunker for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "chunk_config": {
                        "type": "string"
                    }
                },
                "required": [
                    "chunk_config"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\integration\\test_model_change_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "model_integration",
            "description": "Create a model change integration instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\integration\\test_model_change_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "chunking_pipeline",
            "description": "Create a chunking pipeline with model detection.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\integration\\test_model_change_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_embedding_service",
            "description": "Create a mock embedding service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\integration\\test_model_change_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "chunking_pipeline",
            "description": "Create a chunking pipeline with model detection.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\integration\\test_model_change_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "chunk_config_basic",
            "description": "Create a basic chunk configuration for edge case testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\integration\\test_model_change_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "chunker",
            "description": "Create a recursive chunker for edge case testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "chunk_config_basic": {
                        "type": "string"
                    }
                },
                "required": [
                    "chunk_config_basic"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\integration\\test_model_change_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_embedding_service_for_edge_cases",
            "description": "Create a mock embedding service for edge case testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\integration\\test_model_change_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "model_integration",
            "description": "Create a model change integration instance for edge case testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service_for_edge_cases": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service_for_edge_cases"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\integration\\test_model_change_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "temp_db_path",
            "description": "Create temporary database path for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\integration\\test_rag_pipeline_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "integrated_rag_pipeline",
            "description": "Create fully integrated RAG pipeline with all optimizations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_db_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_db_path"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\integration\\test_rag_pipeline_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_embed_text_connection_error",
            "description": "Test handling of connection errors.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_api_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_text_timeout_error",
            "description": "Test handling of timeout errors.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_api_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_text_401_authentication_error",
            "description": "Test handling of authentication errors.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_api_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_text_429_rate_limit_error",
            "description": "Test handling of rate limit errors.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_api_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_text_500_server_error",
            "description": "Test handling of server errors.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_api_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_text_invalid_json_response",
            "description": "Test handling of invalid JSON responses.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_api_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_text_missing_data_field",
            "description": "Test handling of response missing data field.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_api_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_text_missing_embedding_field",
            "description": "Test handling of response missing embedding field.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_api_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_openai_provider_request_format",
            "description": "Test OpenAI-specific request formatting.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_api_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_anthropic_provider_request_format",
            "description": "Test Anthropic-specific request formatting.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_api_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_custom_provider_request_format",
            "description": "Test custom provider request formatting.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_api_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_batch_large_batch_chunking",
            "description": "Test batch chunking for large batches.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_api_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_batch_partial_failure_handling",
            "description": "Test handling of partial failures in batch processing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_api_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_is_model_available_true",
            "description": "Test model availability check returns True for successful connection.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_api_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_config_manager_success",
            "description": "Test successful configuration manager creation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_config_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_config_manager_class"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_cli_framework.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_config_manager_configuration_error",
            "description": "Test configuration manager creation with configuration error.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_config_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_config_manager_class"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_cli_framework.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_cli_main_success",
            "description": "Test successful CLI main execution.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_app": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_app"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_cli_framework.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_cli_main_keyboard_interrupt",
            "description": "Test CLI main with keyboard interrupt.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_app": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_app"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_cli_framework.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_cli_main_generic_exception",
            "description": "Test CLI main with generic exception.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_app": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_app"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_cli_framework.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_info_command_success",
            "description": "Test the info command with successful configuration loading.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get_config_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get_config_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_cli_framework.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_info_command_config_error",
            "description": "Test the info command with configuration error.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get_config_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get_config_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_cli_framework.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_version_command_success",
            "description": "Test the version command with successful configuration loading.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get_config_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get_config_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_cli_framework.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_version_command_fallback",
            "description": "Test the version command with configuration error fallback.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get_config_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get_config_manager"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_cli_framework.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_init_with_env_loading",
            "description": "Test initialization with environment variable loading.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_load_dotenv": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_load_dotenv"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_config.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_environment_overrides",
            "description": "Test environment variable overrides.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_config.py",
            "decorator": [
                "patch.dict"
            ]
        },
        {
            "name": "test_full_config_pipeline",
            "description": "Test complete configuration loading pipeline.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_config.py",
            "decorator": [
                "patch.dict"
            ]
        },
        {
            "name": "large_document_content",
            "description": "Generate large document content for testing streaming processing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_document_processing_optimization.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_config_manager",
            "description": "Mock configuration manager for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_document_processing_optimization.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_vector_store",
            "description": "Mock vector store for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_document_processing_optimization.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_data_preparation_manager",
            "description": "Mock data preparation manager for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_document_processing_optimization.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_collection_type_manager",
            "description": "Mock collection type manager for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_document_processing_optimization.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_api_embedding_service_session_configuration",
            "description": "Test HTTP session configuration with proper headers and timeout.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_session_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_session_class"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_text_successful_request",
            "description": "Test successful single text embedding request.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_text_empty_input_error",
            "description": "Test error handling for empty text input.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_text_api_error_handling",
            "description": "Test handling of various API errors.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_text_network_error_handling",
            "description": "Test handling of network connectivity errors.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_batch_successful_request",
            "description": "Test successful batch embedding request.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_batch_empty_list",
            "description": "Test handling of empty batch input.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_batch_with_empty_strings",
            "description": "Test error handling when batch contains empty strings.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_batch_chunking_large_batches",
            "description": "Test automatic chunking of large batches.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_model_info_successful",
            "description": "Test successful model information retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_embedding_dimension_from_api",
            "description": "Test getting embedding dimension from API response.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_retry_on_temporary_failure",
            "description": "Test retry logic for temporary API failures.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sleep": {
                        "type": "string"
                    },
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sleep",
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_embedding_service.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_retry_exhaustion",
            "description": "Test behavior when all retry attempts are exhausted.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sleep": {
                        "type": "string"
                    },
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sleep",
                    "mock_post"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_embedding_service.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_default_model_initialization",
            "description": "Test initialization with default model (multi-qa-MiniLM-L6-cos-v1).",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_local_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_custom_model_initialization",
            "description": "Test initialization with custom model.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_local_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_model_initialization_failure",
            "description": "Test handling of model initialization failures.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_local_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_text_single_input",
            "description": "Test embedding generation for single text input.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_local_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_text_empty_input",
            "description": "Test handling of empty text input.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_local_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_text_model_error",
            "description": "Test handling of model encoding errors.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_local_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_batch_multiple_inputs",
            "description": "Test batch embedding generation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_local_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_batch_empty_list",
            "description": "Test batch embedding with empty list.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_local_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_embed_batch_with_empty_strings",
            "description": "Test batch embedding with some empty strings.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_local_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_model_info_default_model",
            "description": "Test getting model information for default model.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_local_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_model_info_custom_model",
            "description": "Test getting model information for custom model.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_local_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_embedding_dimension",
            "description": "Test getting embedding dimension.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_local_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_is_model_available_true",
            "description": "Test model availability check when model is loaded.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_local_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_or_load_model_new_model",
            "description": "Test loading a new model through cache manager.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_local_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_or_load_model_cached_model",
            "description": "Test retrieving a cached model.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_local_embedding_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_local_service_generates_fingerprint",
            "description": "Test that LocalEmbeddingService can generate model fingerprint.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_model_change_detection.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_local_service_detects_model_change",
            "description": "Test that LocalEmbeddingService detects model changes.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_model_change_detection.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_local_service_cache_invalidation",
            "description": "Test that LocalEmbeddingService invalidates cache on model change.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sentence_transformer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sentence_transformer"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_model_change_detection.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_cache_ttl_expiration",
            "description": "Test cache TTL expiration.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_time": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_time"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_query_manager.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_similarity_search_basic",
            "description": "Test basic similarity search functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_time": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_time"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\test_query_manager.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "mock_config_manager",
            "description": "Mock configuration manager with augmentation settings.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_augmentation_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_vector_store",
            "description": "Mock vector store for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_augmentation_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_embedding_service",
            "description": "Mock embedding service for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_augmentation_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_external_result",
            "description": "Sample external result for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_augmentation_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_config_manager",
            "description": "Mock configuration manager with feedback settings.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_feedback_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_storage_backend",
            "description": "Mock storage backend for feedback data.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_feedback_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_vector_store",
            "description": "Mock vector store for chunk operations.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_feedback_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_feedback",
            "description": "Sample user feedback for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_feedback_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_config_manager",
            "description": "Mock configuration manager with pipeline settings.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_reranker_pipeline_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_search_results",
            "description": "Sample search results for pipeline testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_reranker_pipeline_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_config_manager",
            "description": "Mock configuration manager with reranker settings.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_reranker_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_search_results",
            "description": "Sample search results for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_reranker_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "highlighter",
            "description": "Basic keyword highlighter instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_reranker_utils.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_text",
            "description": "Sample text content for highlighting tests.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_reranker_utils.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "extractor",
            "description": "Basic source attribution extractor instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_reranker_utils.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "rich_search_result",
            "description": "SearchResult with rich metadata for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_reranker_utils.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "minimal_search_result",
            "description": "SearchResult with minimal metadata for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_reranker_utils.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "analyzer",
            "description": "RelevanceAnalyzer with KeywordHighlighter.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_reranker_utils.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_search_result",
            "description": "Sample SearchResult for relevance analysis.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\tests\\unit\\core\\test_reranker_utils.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_hybrid_chunking_in_document_insertion",
            "description": "Test that document insertion uses HybridChunker for chunking.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_svc": {
                        "type": "string"
                    },
                    "mock_prep_svc": {
                        "type": "string"
                    },
                    "mock_validator": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_svc",
                    "mock_prep_svc",
                    "mock_validator"
                ]
            },
            "file": "src\\research_agent_backend\\tests\\unit\\document_insertion\\test_manager_hybrid_integration.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "_get_base_log_data",
            "description": "Cache base log data for repeated log entries.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\utils\\logging_config.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "time_operation",
            "description": "Context manager for timing operations with optimized logging.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\utils\\logging_config.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "config",
            "description": "Get the current configuration. Loads if not already loaded.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\utils\\config\\manager.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_loaded",
            "description": "Check if configuration has been loaded.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\utils\\config\\manager.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "migration_warnings",
            "description": "Get warnings from the last configuration migration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\research_agent_backend\\utils\\config\\manager.py",
            "decorator": [
                "property"
            ]
        }
    ]
}