{
    "tools": [
        {
            "name": "main",
            "description": "Run FastAgent function for HubSpot SSE integration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\fastagent-sse\\agent.py",
            "decorator": [
                "fast.agent"
            ]
        },
        {
            "name": "main",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\fastagent-stdio\\agent.py",
            "decorator": [
                "fast.agent"
            ]
        },
        {
            "name": "handle_list_tools",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\__main__.py",
            "decorator": [
                "server.list_tools"
            ]
        },
        {
            "name": "handle_call_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\__main__.py",
            "decorator": [
                "server.call_tool"
            ]
        },
        {
            "name": "handle_list_prompts",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\__main__.py",
            "decorator": [
                "server.list_prompts"
            ]
        },
        {
            "name": "handle_get_prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\__main__.py",
            "decorator": [
                "server.get_prompt"
            ]
        },
        {
            "name": "handle_list_resources",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\__main__.py",
            "decorator": [
                "server.list_resources"
            ]
        },
        {
            "name": "handle_read_resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\__main__.py",
            "decorator": [
                "server.read_resource"
            ]
        },
        {
            "name": "format_contacts",
            "description": "Format the contacts list for display.\n\n        Args:\n            contacts: List of contact dictionaries from HubSpot API\n\n        Returns:\n            str: Formatted string representation of contacts\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "contacts": {
                        "type": "string",
                        "description": "List of contact dictionaries from HubSpot API"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "str": {
                        "type": "string",
                        "description": "Formatted string representation of contacts"
                    }
                },
                "required": [
                    "contacts",
                    "Returns",
                    "str"
                ]
            },
            "file": "src\\hubspot_mcp\\formatters\\hubspot_formatter.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_prompt_definitions",
            "description": "Get all available prompt definitions.\n\n        Returns:\n            List[types.Prompt]: List of all prompt definitions\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\prompts\\hubspot_prompts.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_hubspot_basics_prompt",
            "description": "Prompt explaining HubSpot MCP server basics.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\prompts\\hubspot_prompts.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_hubspot_search_guide_prompt",
            "description": "Prompt explaining advanced search capabilities.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\prompts\\hubspot_prompts.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_hubspot_ai_search_prompt",
            "description": "Prompt explaining AI-powered semantic search.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\prompts\\hubspot_prompts.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_hubspot_performance_prompt",
            "description": "Prompt explaining performance optimization.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\prompts\\hubspot_prompts.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_hubspot_api_compatibility_prompt",
            "description": "Prompt explaining HubSpot API compatibility and parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\prompts\\hubspot_prompts.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "generate_prompt_content",
            "description": "Generate the actual prompt content based on name and arguments.\n\n        Args:\n            prompt_name: Name of the prompt to generate\n            arguments: Arguments provided by the client\n\n        Returns:\n            str: Generated prompt content\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "prompt_name": {
                        "type": "string",
                        "description": "Name of the prompt to generate"
                    },
                    "arguments": {
                        "type": "string",
                        "description": "Arguments provided by the client"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "str": {
                        "type": "string",
                        "description": "Generated prompt content"
                    }
                },
                "required": [
                    "prompt_name",
                    "arguments",
                    "Returns",
                    "str"
                ]
            },
            "file": "src\\hubspot_mcp\\prompts\\hubspot_prompts.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_generate_basics_content",
            "description": "Generate content for the basics guide prompt.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\prompts\\hubspot_prompts.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_resource_definitions",
            "description": "Get all available resource definitions.\n\n        Returns:\n            List[types.Resource]: List of all resource definitions\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\resources\\hubspot_resources.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_tool_examples_resource",
            "description": "Resource with JSON examples for all tools.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\resources\\hubspot_resources.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_field_mappings_resource",
            "description": "Resource with HubSpot field mappings and schemas.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\resources\\hubspot_resources.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_configuration_template_resource",
            "description": "Resource with configuration templates.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\resources\\hubspot_resources.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_best_practices_resource",
            "description": "Resource with best practices guide.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\resources\\hubspot_resources.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_troubleshooting_resource",
            "description": "Resource with troubleshooting guide.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\resources\\hubspot_resources.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_api_reference_resource",
            "description": "Resource with condensed API reference.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\resources\\hubspot_resources.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "read_resource",
            "description": "Read the content of a resource by URI.\n\n        Args:\n            uri: The URI of the resource to read\n\n        Returns:\n            str: The content of the resource\n\n        Raises:\n            ValueError: If the resource URI is not found\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "The URI of the resource to read"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "str": {
                        "type": "string",
                        "description": "The content of the resource"
                    },
                    "Raises": {
                        "type": "string"
                    },
                    "ValueError": {
                        "type": "string",
                        "description": "If the resource URI is not found"
                    }
                },
                "required": [
                    "uri",
                    "Returns",
                    "str",
                    "Raises",
                    "ValueError"
                ]
            },
            "file": "src\\hubspot_mcp\\resources\\hubspot_resources.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_generate_tool_examples",
            "description": "Generate comprehensive tool usage examples.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\resources\\hubspot_resources.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_generate_field_mappings",
            "description": "Generate HubSpot field mappings and schemas.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\resources\\hubspot_resources.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_generate_configuration_template",
            "description": "Generate server configuration template.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\resources\\hubspot_resources.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_generate_best_practices",
            "description": "Generate best practices guide.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\resources\\hubspot_resources.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_tool_definition",
            "description": "Return the tool definition for MCP.\n\n        Returns:\n            types.Tool: The tool definition containing name, description, and input schema\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\hubspot_mcp\\tools\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "execute",
            "description": "Execute the tool with provided arguments.\n\n        Args:\n            arguments: Dictionary containing the tool's input parameters\n\n        Returns:\n            List[types.TextContent]: List of text content items representing the tool's output\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "arguments": {
                        "type": "string",
                        "description": "Dictionary containing the tool's input parameters"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "arguments",
                    "Returns"
                ]
            },
            "file": "src\\hubspot_mcp\\tools\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "clear_cache",
            "description": "Clear the entire cache.\n\n        Useful for testing or when fresh data is required.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\hubspot_mcp\\tools\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_cache_info",
            "description": "Get information about the current cache state.\n\n        Returns:\n            Dict[str, Any]: Cache statistics including size, max size, and TTL\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\hubspot_mcp\\tools\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_embedding_manager",
            "description": "Get the shared embedding manager instance.\n\n        Returns:\n            EmbeddingManager instance or None if not initialized\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\hubspot_mcp\\tools\\enhanced_base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "clear_embedding_cache",
            "description": "Clear the embedding cache and index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\hubspot_mcp\\tools\\enhanced_base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "mock_hubspot_client",
            "description": "Mock HubSpot API client for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_contact",
            "description": "Create a sample contact for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_contacts",
            "description": "Create multiple contacts for bulk testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_company",
            "description": "Create a sample company for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_deal",
            "description": "Create a sample deal for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_deals",
            "description": "Create multiple deals for bulk testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_mcp_server",
            "description": "Mock MCP server for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_environment",
            "description": "Set up test environment variables.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_api_response",
            "description": "Mock API response structure.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "reset_mocks",
            "description": "Reset all mocks before each test.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_faiss_data_endpoint_success",
            "description": "Test successful FAISS data endpoint response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_faiss_endpoint.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_faiss_data_endpoint_no_embedding_manager",
            "description": "Test FAISS data endpoint when embedding manager is not initialized.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_faiss_endpoint.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_faiss_data_endpoint_index_not_ready",
            "description": "Test FAISS data endpoint when index is not ready.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_faiss_endpoint.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_faiss_data_endpoint_exception_handling",
            "description": "Test FAISS data endpoint exception handling.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_faiss_endpoint.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_faiss_data_endpoint_empty_metadata",
            "description": "Test FAISS data endpoint with empty entity metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_faiss_endpoint.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_faiss_data_endpoint_with_missing_entity_fields",
            "description": "Test FAISS data endpoint with entities missing some fields.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_faiss_endpoint.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "api_client",
            "description": "Create HubSpot client with test configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_environment"
                ]
            },
            "file": "tests\\integration\\test_hubspot_api\\test_api_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_contacts_api_integration",
            "description": "Test integration between contacts tool and HubSpot API.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "api_client": {
                        "type": "string"
                    },
                    "mock_api_response": {
                        "type": "string"
                    }
                },
                "required": [
                    "api_client",
                    "mock_api_response"
                ]
            },
            "file": "tests\\integration\\test_hubspot_api\\test_api_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_companies_api_integration",
            "description": "Test integration between companies tool and HubSpot API.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "api_client": {
                        "type": "string"
                    },
                    "mock_api_response": {
                        "type": "string"
                    }
                },
                "required": [
                    "api_client",
                    "mock_api_response"
                ]
            },
            "file": "tests\\integration\\test_hubspot_api\\test_api_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_deals_api_integration",
            "description": "Test integration between deals tool and HubSpot API.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "api_client": {
                        "type": "string"
                    },
                    "mock_api_response": {
                        "type": "string"
                    }
                },
                "required": [
                    "api_client",
                    "mock_api_response"
                ]
            },
            "file": "tests\\integration\\test_hubspot_api\\test_api_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_api_error_handling_integration",
            "description": "Test API error handling integration.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "api_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "api_client"
                ]
            },
            "file": "tests\\integration\\test_hubspot_api\\test_api_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_pagination_integration",
            "description": "Test API pagination handling integration.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "api_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "api_client"
                ]
            },
            "file": "tests\\integration\\test_hubspot_api\\test_api_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_contacts_tool_with_api_client",
            "description": "Test contacts tool integration with API client.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\integration\\test_hubspot_api\\test_api_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_companies_tool_with_api_client",
            "description": "Test companies tool integration with API client.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\integration\\test_hubspot_api\\test_api_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_deals_tool_with_api_client",
            "description": "Test deals tool integration with API client.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\integration\\test_hubspot_api\\test_api_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_parse_arguments_default",
            "description": "Test argument parsing with default values.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_parse_arguments_custom",
            "description": "Test argument parsing with custom values.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_main_stdio_mode",
            "description": "Test stdio mode.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_main_sse_mode",
            "description": "Test SSE mode.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_main_stdio_mode_with_logger",
            "description": "Test stdio mode with logger verification.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_main_sse_mode_with_logger",
            "description": "Test SSE mode with logger verification.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_main_keyboard_interrupt",
            "description": "Test user interruption without raising actual KeyboardInterrupt.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_list_tools",
            "description": "Test the list_tools handler.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "handle_list_tools",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main.py",
            "decorator": [
                "server.list_tools"
            ]
        },
        {
            "name": "test_handle_call_tool",
            "description": "Test the call_tool handler.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "handle_call_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main.py",
            "decorator": [
                "server.call_tool"
            ]
        },
        {
            "name": "test_main_stdio_mode_execution",
            "description": "Test main() function execution in stdio mode to cover handlers and logging.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main_coverage.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_main_sse_mode_execution",
            "description": "Test main() function execution in SSE mode to cover SSE logging.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main_coverage.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_main_complete_sse_flow",
            "description": "Test complete SSE flow including Starlette app creation.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main_coverage.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_health_check_endpoint_with_api_key",
            "description": "Test health check endpoint when HUBSPOT_API_KEY is set.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main_coverage.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_health_check_endpoint_without_api_key",
            "description": "Test health check endpoint when HUBSPOT_API_KEY is not set.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main_coverage.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_health_check_endpoint_with_exception",
            "description": "Test health check endpoint when an exception occurs.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main_coverage.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_readiness_check_endpoint_with_api_key",
            "description": "Test readiness check endpoint when HUBSPOT_API_KEY is set.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main_coverage.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_readiness_check_endpoint_without_api_key",
            "description": "Test readiness check endpoint when HUBSPOT_API_KEY is not set.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main_coverage.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_readiness_check_endpoint_with_exception",
            "description": "Test readiness check endpoint when an exception occurs.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main_coverage.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sse_mode_imports_and_logging",
            "description": "Test SSE mode to trigger the import statements and logging lines.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main_coverage.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sse_mode_without_auth",
            "description": "Test SSE mode without authentication to cover the warning message.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main_coverage.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sse_health_endpoint_no_api_key",
            "description": "Test health endpoint when HUBSPOT_API_KEY is not set.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main_coverage.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sse_readiness_endpoint_no_api_key",
            "description": "Test readiness endpoint when HUBSPOT_API_KEY is not set.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_main_coverage.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_client",
            "description": "Create a mock HubSpot client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_prompts_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "handlers",
            "description": "Create MCP handlers instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_client"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_prompts_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_full_prompt_workflow",
            "description": "Test complete workflow from listing to getting prompts.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_prompts_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_prompts_with_different_argument_combinations",
            "description": "Test prompts with various argument combinations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_prompts_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_prompt_error_resilience",
            "description": "Test that prompt system handles errors gracefully.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_prompts_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_prompts_contain_tool_references",
            "description": "Test that prompts reference actual tools available in the system.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_prompts_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_api_compatibility_prompt_accuracy",
            "description": "Test that API compatibility prompts contain accurate information.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_prompts_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_prompt_consistency_across_runs",
            "description": "Test that prompts generate consistent content across multiple runs.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_prompts_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_all_prompt_arguments_documented",
            "description": "Test that all prompt arguments are properly documented.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_prompts_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_prompt_content_structure",
            "description": "Test that prompt content follows expected structure.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_prompts_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_prompts_integration_with_tools",
            "description": "Test that prompts work alongside tools without conflicts.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_prompts_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_prompt_error_logging",
            "description": "Test that prompt errors are properly logged.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_prompts_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_prompt_argument_validation",
            "description": "Test that prompt arguments are properly validated.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_prompts_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_comprehensive_prompt_coverage",
            "description": "Test that prompts cover all major aspects of the HubSpot MCP server.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_prompts_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_prompt_performance",
            "description": "Test that prompt generation performs reasonably well.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_prompts_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_client",
            "description": "Create a mock HubSpot client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_resources_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "handlers",
            "description": "Create handlers instance with mock client.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_client"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_resources_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_full_resources_workflow",
            "description": "Test complete resource workflow from list to read.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_resources_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_resource_uri_patterns",
            "description": "Test that resource URIs follow expected patterns.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_resources_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_json_resources_structure",
            "description": "Test that JSON resources have expected structure.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_resources_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_markdown_resources_content_quality",
            "description": "Test that Markdown resources have quality content.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_resources_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cross_resource_consistency",
            "description": "Test consistency across different resources.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_resources_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_error_resilience",
            "description": "Test that resource system handles errors gracefully.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_resources_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_resource_metadata_completeness",
            "description": "Test that all resources have complete metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_resources_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_performance_characteristics",
            "description": "Test performance characteristics of resource operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_resources_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_resource_content_uniqueness",
            "description": "Test that each resource provides unique content.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_resources_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_practical_usage_scenarios",
            "description": "Test practical usage scenarios for resources.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\integration\\test_mcp_protocol\\test_resources_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_middleware_call_without_auth_key",
            "description": "Test middleware call without auth key (auth disabled).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_authentication.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_middleware_call_exempt_path",
            "description": "Test middleware call for exempt paths.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_authentication.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_middleware_call_with_valid_auth",
            "description": "Test middleware call with valid authentication.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_authentication.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_middleware_call_with_invalid_auth",
            "description": "Test middleware call with invalid authentication.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_authentication.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_middleware_call_without_auth_header",
            "description": "Test middleware call without authentication header.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_authentication.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_data_protection_disabled_exempts_force_reindex",
            "description": "Test that /force-reindex is exempt when DATA_PROTECTION_DISABLED=true.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_authentication.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_data_protection_enabled_requires_auth_for_force_reindex",
            "description": "Test that /force-reindex requires auth when DATA_PROTECTION_DISABLED=false.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_authentication.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_faiss_data_secured_by_default",
            "description": "Test that /faiss-data is secured by default (FAISS_DATA_SECURE=true).",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_settings": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_settings"
                ]
            },
            "file": "tests\\unit\\test_authentication.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_faiss_data_unsecured_when_disabled",
            "description": "Test that /faiss-data is unsecured when FAISS_DATA_SECURE=false.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_settings": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_settings"
                ]
            },
            "file": "tests\\unit\\test_authentication.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_handle_sse_connection",
            "description": "Test handle_sse establishes SSE connection and runs server.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_sse_endpoints.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_health_check_healthy_with_api_key",
            "description": "Test health_check returns healthy status when API key is configured.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_sse_endpoints.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_health_check_exception_handling",
            "description": "Test health_check exception handling.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_sse_endpoints.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_readiness_check_ready_with_api_key",
            "description": "Test readiness_check returns ready status when API key is configured.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_sse_endpoints.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_readiness_check_client_creation_failure",
            "description": "Test readiness_check when HubSpot client creation fails.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_sse_endpoints.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_readiness_check_settings_exception",
            "description": "Test readiness_check exception handling from settings access.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_sse_endpoints.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_faiss_data_endpoint_successful_with_entities",
            "description": "Test successful FAISS data endpoint with various entity types.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_sse_endpoints.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_faiss_data_endpoint_with_missing_entity_fields",
            "description": "Test FAISS endpoint with entities that have missing or incomplete fields.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_sse_endpoints.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_health_check_without_api_key",
            "description": "Test health_check when no API key is configured (line 31).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_sse_endpoints.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_readiness_check_without_api_key",
            "description": "Test readiness_check when no API key is configured (line 62).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_sse_endpoints.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_faiss_data_endpoint_no_embedding_manager",
            "description": "Test FAISS endpoint when no embedding manager is available (line 103).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_sse_endpoints.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_faiss_data_endpoint_index_not_ready",
            "description": "Test FAISS endpoint when index is not ready (line 116).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_sse_endpoints.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_faiss_data_endpoint_exception_handling",
            "description": "Test FAISS endpoint exception handling (lines 184-186).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_sse_endpoints.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_force_reindex_success_basic",
            "description": "Test successful force reindex operation.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_sse_endpoints.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "sample_contact_properties",
            "description": "Sample contact properties data.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_auto_properties_loading.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_company_properties",
            "description": "Sample company properties data.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_auto_properties_loading.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_deal_properties",
            "description": "Sample deal properties data.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_auto_properties_loading.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "client_with_auto_loading",
            "description": "Create a client with auto-loading enabled.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_auto_properties_loading.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "client_without_auto_loading",
            "description": "Create a client with auto-loading disabled.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_auto_properties_loading.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_contacts_auto_loading_enabled",
            "description": "Test contacts retrieval with auto-loading enabled.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client_with_auto_loading": {
                        "type": "string"
                    },
                    "sample_contact_properties": {
                        "type": "string"
                    }
                },
                "required": [
                    "client_with_auto_loading",
                    "sample_contact_properties"
                ]
            },
            "file": "tests\\unit\\test_client\\test_auto_properties_loading.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_contacts_auto_loading_disabled",
            "description": "Test contacts retrieval with auto-loading disabled.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client_without_auto_loading": {
                        "type": "string"
                    }
                },
                "required": [
                    "client_without_auto_loading"
                ]
            },
            "file": "tests\\unit\\test_client\\test_auto_properties_loading.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_companies_auto_loading_enabled",
            "description": "Test companies retrieval with auto-loading enabled.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client_with_auto_loading": {
                        "type": "string"
                    },
                    "sample_company_properties": {
                        "type": "string"
                    }
                },
                "required": [
                    "client_with_auto_loading",
                    "sample_company_properties"
                ]
            },
            "file": "tests\\unit\\test_client\\test_auto_properties_loading.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_deals_auto_loading_enabled",
            "description": "Test deals retrieval with auto-loading enabled.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client_with_auto_loading": {
                        "type": "string"
                    },
                    "sample_deal_properties": {
                        "type": "string"
                    }
                },
                "required": [
                    "client_with_auto_loading",
                    "sample_deal_properties"
                ]
            },
            "file": "tests\\unit\\test_client\\test_auto_properties_loading.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_properties_caching",
            "description": "Test that properties are cached and not fetched multiple times.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client_with_auto_loading": {
                        "type": "string"
                    },
                    "sample_contact_properties": {
                        "type": "string"
                    }
                },
                "required": [
                    "client_with_auto_loading",
                    "sample_contact_properties"
                ]
            },
            "file": "tests\\unit\\test_client\\test_auto_properties_loading.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_extra_properties_merged_with_auto_loaded",
            "description": "Test that extra properties are merged with auto-loaded properties.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client_with_auto_loading": {
                        "type": "string"
                    },
                    "sample_contact_properties": {
                        "type": "string"
                    }
                },
                "required": [
                    "client_with_auto_loading",
                    "sample_contact_properties"
                ]
            },
            "file": "tests\\unit\\test_client\\test_auto_properties_loading.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_methods_use_auto_loading",
            "description": "Test that search methods also use auto-loading.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client_with_auto_loading": {
                        "type": "string"
                    },
                    "sample_deal_properties": {
                        "type": "string"
                    }
                },
                "required": [
                    "client_with_auto_loading",
                    "sample_deal_properties"
                ]
            },
            "file": "tests\\unit\\test_client\\test_auto_properties_loading.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_property_exclusion_logic",
            "description": "Test the property exclusion logic.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client_with_auto_loading": {
                        "type": "string"
                    }
                },
                "required": [
                    "client_with_auto_loading"
                ]
            },
            "file": "tests\\unit\\test_client\\test_auto_properties_loading.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_properties_loading_error_handling",
            "description": "Test error handling during properties loading.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client_with_auto_loading": {
                        "type": "string"
                    }
                },
                "required": [
                    "client_with_auto_loading"
                ]
            },
            "file": "tests\\unit\\test_client\\test_auto_properties_loading.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "client",
            "description": "Create a HubSpot client instance for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_get_contacts_success",
            "description": "Test successful contact listing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_contacts_error",
            "description": "Test contact listing with API error.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_companies_success",
            "description": "Test successful company listing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_companies_error",
            "description": "Test company listing with API error.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_deals_success",
            "description": "Test successful deal listing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_deals_error",
            "description": "Test deal listing with API error.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_deal_success",
            "description": "Test successful deal creation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_deal_error",
            "description": "Test deal creation with API error.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_deal_by_name_success",
            "description": "Test successful deal retrieval by name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_deal_by_name_not_found",
            "description": "Test deal retrieval by name when not found.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_deal_by_name_error",
            "description": "Test deal retrieval by name with API error.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_contact_properties_success",
            "description": "Test successful contact properties retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_contact_properties_error",
            "description": "Test contact properties retrieval with API error.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_company_properties_success",
            "description": "Test successful company properties retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_company_properties_error",
            "description": "Test company properties retrieval with API error.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_deal_properties_success",
            "description": "Test successful deal properties retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_deal_properties_error",
            "description": "Test deal properties retrieval with API error.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_deal_success",
            "description": "Test successful deal update.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_deal_error",
            "description": "Test deal update with API error.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_deal_not_found",
            "description": "Test deal update when deal not found.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "client",
            "description": "Return a HubSpot client instance for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_engagements.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_get_engagements_success",
            "description": "get_engagements should return parsed results on success.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_engagements.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_engagements_error",
            "description": "get_engagements should raise the underlying HTTPStatusError.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_engagements.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_engagements_with_pagination",
            "description": "Ensure pagination cursor is forwarded as query param.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_engagements.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "client",
            "description": "Return a HubSpotClient instance bound to a fake API key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_extra_properties.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_list_methods_support_after_and_extra_properties",
            "description": "Each *list* method should honour *after* and *extra_properties*.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_extra_properties.py",
            "decorator": [
                "pytest.mark.asyncio",
                "pytest.mark.parametrize"
            ]
        },
        {
            "name": "test_search_deals_includes_extra_properties_and_deduplicates",
            "description": "search_deals must merge & deduplicate the *extra_properties* list.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_extra_properties.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_hubspot_client",
            "description": "Create a mock HubSpot client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_get_all_contacts_with_pagination_single_page",
            "description": "Test get_all_contacts_with_pagination with single page of results.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_all_contacts_with_pagination_multiple_pages",
            "description": "Test get_all_contacts_with_pagination with multiple pages.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_all_contacts_with_pagination_max_entities_limit",
            "description": "Test get_all_contacts_with_pagination with max_entities limit.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_all_contacts_with_pagination_empty_results",
            "description": "Test get_all_contacts_with_pagination with empty results.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_all_contacts_with_pagination_with_extra_properties",
            "description": "Test get_all_contacts_with_pagination with extra properties.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_all_companies_with_pagination_single_page",
            "description": "Test get_all_companies_with_pagination with single page.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_all_companies_with_pagination_multiple_pages",
            "description": "Test get_all_companies_with_pagination with multiple pages.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_all_companies_with_pagination_max_entities_limit",
            "description": "Test get_all_companies_with_pagination with max_entities limit.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_all_companies_with_pagination_empty_results",
            "description": "Test get_all_companies_with_pagination with empty results.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_contacts_page_with_paging_basic",
            "description": "Test _get_contacts_page_with_paging basic functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_contacts_page_with_paging_with_after_cursor",
            "description": "Test _get_contacts_page_with_paging with after cursor.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_contacts_page_with_paging_with_extra_properties",
            "description": "Test _get_contacts_page_with_paging with extra properties and deduplication.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_companies_page_with_paging_basic",
            "description": "Test _get_companies_page_with_paging basic functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_companies_page_with_paging_with_after_cursor",
            "description": "Test _get_companies_page_with_paging with after cursor.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_companies_page_with_paging_with_extra_properties",
            "description": "Test _get_companies_page_with_paging with extra properties and deduplication.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_all_deals_with_pagination_single_page",
            "description": "Test get_all_deals_with_pagination with single page.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_all_deals_with_pagination_multiple_pages",
            "description": "Test get_all_deals_with_pagination with multiple pages.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_all_deals_with_pagination_max_entities_limit",
            "description": "Test get_all_deals_with_pagination with max_entities limit.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_all_deals_with_pagination_empty_results",
            "description": "Test get_all_deals_with_pagination with empty results.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_deals_page_with_paging_basic",
            "description": "Test _get_deals_page_with_paging basic functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_deals_page_with_paging_with_after_cursor",
            "description": "Test _get_deals_page_with_paging with after cursor.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_deals_page_with_paging_with_extra_properties",
            "description": "Test _get_deals_page_with_paging with extra properties and deduplication.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_pagination_error_handling",
            "description": "Test error handling in pagination methods.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_pagination_missing_paging_info",
            "description": "Test pagination when paging info is missing from response.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_pagination_missing_next_info",
            "description": "Test pagination when next page info is missing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_pagination_missing_after_cursor",
            "description": "Test pagination when after cursor is missing from next info.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_hubspot_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_hubspot_client"
                ]
            },
            "file": "tests\\unit\\test_client\\test_hubspot_client_pagination.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_contacts_builds_correct_payload",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_search_contacts_companies.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_companies_builds_correct_payload",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_search_contacts_companies.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_contacts_defaults_to_id_gt_zero",
            "description": "Calling *search_contacts* without filters should add id > 0 filter group.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_search_contacts_companies.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_companies_defaults_to_id_gt_zero_on_unsupported_filter",
            "description": "Unsupported filters should be ignored and default filter added.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_search_contacts_companies.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_deals_with_various_filters",
            "description": "search_deals builds correct filter groups for supported keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_search_deals.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_deals_without_filters_defaults_to_id_gt_zero",
            "description": "When no filters provided, a default id > 0 filter is sent.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_search_deals.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_deals_with_duplicate_extra_properties",
            "description": "Ensure deduplication logic executes when extra_properties repeats defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_search_deals_companies_extra.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_companies_multiple_filters_groups",
            "description": "Providing several supported filters results in >1 filterGroups list.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_search_deals_companies_extra.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_deals_defaults_and_deduplicates",
            "description": "Calling search_deals without filters exercises default filter branch.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_client\\test_search_deals_extra.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_contacts_deduplicates_extra_properties",
            "description": "Test that search_contacts deduplicates extra properties correctly.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monkeypatch": {
                        "type": "string"
                    }
                },
                "required": [
                    "monkeypatch"
                ]
            },
            "file": "tests\\unit\\test_client\\test_search_extra_properties.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_companies_deduplicates_extra_properties",
            "description": "Test that search_companies deduplicates extra properties correctly.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monkeypatch": {
                        "type": "string"
                    }
                },
                "required": [
                    "monkeypatch"
                ]
            },
            "file": "tests\\unit\\test_client\\test_search_extra_properties.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "manager",
            "description": "Create an EmbeddingManager instance for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_embeddings\\test_embedding_manager.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_entities",
            "description": "Create mock HubSpot entities for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_embeddings\\test_embedding_manager.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_generate_embeddings_with_cache",
            "description": "Test embedding generation with caching.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_transformer": {
                        "type": "string"
                    },
                    "manager": {
                        "type": "string"
                    },
                    "mock_entities": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_transformer",
                    "manager",
                    "mock_entities"
                ]
            },
            "file": "tests\\unit\\test_embeddings\\test_embedding_manager.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_generate_embeddings_empty_entities",
            "description": "Test embedding generation with empty entities.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_transformer": {
                        "type": "string"
                    },
                    "manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_transformer",
                    "manager"
                ]
            },
            "file": "tests\\unit\\test_embeddings\\test_embedding_manager.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_build_index_flat",
            "description": "Test building a flat FAISS index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_index_class": {
                        "type": "string"
                    },
                    "mock_transformer": {
                        "type": "string"
                    },
                    "manager": {
                        "type": "string"
                    },
                    "mock_entities": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_index_class",
                    "mock_transformer",
                    "manager",
                    "mock_entities"
                ]
            },
            "file": "tests\\unit\\test_embeddings\\test_embedding_manager.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_build_index_ivf",
            "description": "Test building an IVF FAISS index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_flat_index": {
                        "type": "string"
                    },
                    "mock_ivf_index": {
                        "type": "string"
                    },
                    "mock_transformer": {
                        "type": "string"
                    },
                    "manager": {
                        "type": "string"
                    },
                    "mock_entities": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_flat_index",
                    "mock_ivf_index",
                    "mock_transformer",
                    "manager",
                    "mock_entities"
                ]
            },
            "file": "tests\\unit\\test_embeddings\\test_embedding_manager.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_build_index_invalid_type",
            "description": "Test building index with invalid index type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_transformer": {
                        "type": "string"
                    },
                    "manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_transformer",
                    "manager"
                ]
            },
            "file": "tests\\unit\\test_embeddings\\test_embedding_manager.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_search_similar_no_index",
            "description": "Test search with no index available.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_transformer": {
                        "type": "string"
                    },
                    "manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_transformer",
                    "manager"
                ]
            },
            "file": "tests\\unit\\test_embeddings\\test_embedding_manager.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_search_similar_with_results",
            "description": "Test successful similarity search.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_transformer": {
                        "type": "string"
                    },
                    "manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_transformer",
                    "manager"
                ]
            },
            "file": "tests\\unit\\test_embeddings\\test_embedding_manager.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_save_index",
            "description": "Test saving index to file.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_joblib_dump": {
                        "type": "string"
                    },
                    "mock_json_dump": {
                        "type": "string"
                    },
                    "mock_open": {
                        "type": "string"
                    },
                    "mock_faiss_write": {
                        "type": "string"
                    },
                    "manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_joblib_dump",
                    "mock_json_dump",
                    "mock_open",
                    "mock_faiss_write",
                    "manager"
                ]
            },
            "file": "tests\\unit\\test_embeddings\\test_embedding_manager.py",
            "decorator": [
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_load_index",
            "description": "Test loading index from file.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_joblib_load": {
                        "type": "string"
                    },
                    "mock_json_load": {
                        "type": "string"
                    },
                    "mock_open": {
                        "type": "string"
                    },
                    "mock_faiss_read": {
                        "type": "string"
                    },
                    "manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_joblib_load",
                    "mock_json_load",
                    "mock_open",
                    "mock_faiss_read",
                    "manager"
                ]
            },
            "file": "tests\\unit\\test_embeddings\\test_embedding_manager.py",
            "decorator": [
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_load_index_no_cache_file",
            "description": "Test loading index when cache file doesn't exist.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_joblib_load": {
                        "type": "string"
                    },
                    "mock_json_load": {
                        "type": "string"
                    },
                    "mock_open": {
                        "type": "string"
                    },
                    "mock_faiss_read": {
                        "type": "string"
                    },
                    "manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_joblib_load",
                    "mock_json_load",
                    "mock_open",
                    "mock_faiss_read",
                    "manager"
                ]
            },
            "file": "tests\\unit\\test_embeddings\\test_embedding_manager.py",
            "decorator": [
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_load_index_file_error",
            "description": "Test loading index when file doesn't exist.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_faiss_read": {
                        "type": "string"
                    },
                    "manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_faiss_read",
                    "manager"
                ]
            },
            "file": "tests\\unit\\test_embeddings\\test_embedding_manager.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "mock_client",
            "description": "Create a mock HubSpot client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "handlers",
            "description": "Create MCP handlers instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_client"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_handle_list_prompts",
            "description": "Test listing all available prompts.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_get_prompt_basics_guide",
            "description": "Test getting the basics guide prompt.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_get_prompt_with_arguments",
            "description": "Test getting a prompt with arguments.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_get_prompt_search_guide",
            "description": "Test getting the search guide prompt.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_get_prompt_ai_search_guide",
            "description": "Test getting the AI search guide prompt.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_get_prompt_performance_guide",
            "description": "Test getting the performance guide prompt.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_get_prompt_api_compatibility",
            "description": "Test getting the API compatibility prompt.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_get_prompt_no_arguments",
            "description": "Test getting a prompt with no arguments provided.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_get_prompt_with_none_arguments",
            "description": "Test getting a prompt with None arguments to cover line 106.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_get_prompt_empty_arguments",
            "description": "Test getting a prompt with empty arguments dict.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_get_prompt_unknown_prompt",
            "description": "Test handling unknown prompt name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_get_prompt_error_handling",
            "description": "Test error handling in prompt generation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_prompts_initialization",
            "description": "Test that prompts are properly initialized in handlers.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_client"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_all_prompts_generate_content",
            "description": "Test that all defined prompts can generate content.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_prompt_arguments_are_optional",
            "description": "Test that all prompt arguments are optional.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_prompt_content_consistency",
            "description": "Test that prompt content is consistent across calls.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_list_prompts_exception_handling",
            "description": "Test exception handling in handle_list_prompts method.\n\n        Tests that the handler correctly handles exceptions raised during\n        prompt listing by logging the error and returning an empty list\n        to achieve 100% coverage of lines 87-89.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_prompts_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_client",
            "description": "Create a mock HubSpot client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_server\\test_resources_handlers.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "handlers",
            "description": "Create handlers instance with mock client.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_client"
                ]
            },
            "file": "tests\\unit\\test_server\\test_resources_handlers.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_handle_list_resources",
            "description": "Test listing all available resources.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_resources_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_list_resources_error_handling",
            "description": "Test error handling in list resources.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_resources_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_read_resource_tool_examples",
            "description": "Test reading tool examples resource.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_resources_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_read_resource_field_mappings",
            "description": "Test reading field mappings resource.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_resources_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_read_resource_configuration_template",
            "description": "Test reading configuration template resource.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_resources_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_read_resource_best_practices",
            "description": "Test reading best practices resource.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_resources_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_read_resource_troubleshooting",
            "description": "Test reading troubleshooting resource.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_resources_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_read_resource_api_reference",
            "description": "Test reading API reference resource.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_resources_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_read_resource_invalid_uri",
            "description": "Test reading resource with invalid URI.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_resources_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_read_resource_error_handling",
            "description": "Test error handling in read resource.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_resources_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_mime_type_determination",
            "description": "Test that MIME types are correctly determined.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_resources_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_resource_content_not_empty",
            "description": "Test that all resources return non-empty content.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_resources_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_resource_consistency",
            "description": "Test that resource definitions match readable resources.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "handlers": {
                        "type": "string"
                    }
                },
                "required": [
                    "handlers"
                ]
            },
            "file": "tests\\unit\\test_server\\test_resources_handlers.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_client",
            "description": "Create a mock HubSpot client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_bulk_cache_loader.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tool",
            "description": "Create a BulkCacheLoaderTool instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_client"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_bulk_cache_loader.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_properties",
            "description": "Sample property definitions.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_bulk_cache_loader.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_contacts",
            "description": "Sample contact data.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_bulk_cache_loader.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_companies",
            "description": "Sample company data.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_bulk_cache_loader.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_deals",
            "description": "Sample deal data.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_bulk_cache_loader.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_deal_properties",
            "description": "Sample deal property definitions.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_bulk_cache_loader.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_execute_invalid_entity_type",
            "description": "Test execution with invalid entity type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_bulk_cache_loader.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_client",
            "description": "Create a mock HubSpot client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_cache.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "contacts_tool",
            "description": "Create a contacts tool with mock client.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_client"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_cache.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_cache_miss_and_hit",
            "description": "Test cache miss followed by cache hit.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "contacts_tool": {
                        "type": "string"
                    },
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "contacts_tool",
                    "mock_client"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_different_parameters",
            "description": "Test that different parameters result in different cache entries.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "contacts_tool": {
                        "type": "string"
                    },
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "contacts_tool",
                    "mock_client"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_shared_across_tools",
            "description": "Test that cache is shared across different tool instances.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_client"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_with_api_key_isolation",
            "description": "Test that different API keys result in different cache entries.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_client"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_error_handling",
            "description": "Test that errors are not cached.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "contacts_tool": {
                        "type": "string"
                    },
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "contacts_tool",
                    "mock_client"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_ttl_behavior",
            "description": "Test that cache respects TTL (time-to-live).",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "contacts_tool": {
                        "type": "string"
                    },
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "contacts_tool",
                    "mock_client"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_full_tool_execution_with_cache",
            "description": "Test full tool execution using the cache system.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "contacts_tool": {
                        "type": "string"
                    },
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "contacts_tool",
                    "mock_client"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_cache_management_tool.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_execute_info_with_data",
            "description": "Ensure the `info` action returns formatted statistics with sample keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_cache_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_clear",
            "description": "Ensure the `clear` action empties the cache and returns confirmation.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_cache_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_invalid_action",
            "description": "Invalid action should return error message.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_cache_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_handles_exception",
            "description": "Simulate unexpected error inside execute and ensure it's handled.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monkeypatch": {
                        "type": "string"
                    }
                },
                "required": [
                    "monkeypatch"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_cache_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_client",
            "description": "Create a mock HubSpot client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tool",
            "description": "Create an EmbeddingManagementTool instance for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_client"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_execute_info_action_disabled",
            "description": "Test info action when embeddings are disabled.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_info_action_enabled_no_entities",
            "description": "Test info action when embeddings are enabled but no entities indexed.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_info_action_enabled_with_entities",
            "description": "Test info action when embeddings are enabled with indexed entities.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_build_action_disabled",
            "description": "Test build action when embeddings are disabled.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_build_action_success",
            "description": "Test successful build action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_build_action_multiple_entity_types",
            "description": "Test build action with multiple entity types.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_build_action_with_error",
            "description": "Test build action when an error occurs.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_rebuild_action",
            "description": "Test rebuild action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_clear_action",
            "description": "Test clear action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_clear_action_with_error",
            "description": "Test clear action when an error occurs.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_invalid_action",
            "description": "Test execution with invalid action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_embedding_info_disabled",
            "description": "Test _get_embedding_info when disabled.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_build_indexes_success",
            "description": "Test _build_indexes with successful builds.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_build_indexes_failure",
            "description": "Test _build_indexes with build failures.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_rebuild_indexes",
            "description": "Test _rebuild_indexes functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_with_default_parameters",
            "description": "Test execution with default parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_with_exception",
            "description": "Test execution when an unexpected exception occurs.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_embedding_management_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_engagements_tool_execute_returns_formatted_text",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_engagements_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_client",
            "description": "Create a mock HubSpot client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_enhanced_base.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tool_with_embeddings",
            "description": "Create a ConcreteEnhancedBaseTool with embeddings enabled.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_client"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_enhanced_base.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tool_without_embeddings",
            "description": "Create a ConcreteEnhancedBaseTool with embeddings disabled.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_client"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_enhanced_base.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_embedding_manager",
            "description": "Create a mock embedding manager.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_enhanced_base.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_execute_invalid_action",
            "description": "Test executing with invalid action.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_stats_no_embedding_manager",
            "description": "Test stats action when no embedding manager is available.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_stats_index_not_ready",
            "description": "Test stats action when index is not ready.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_stats_success",
            "description": "Test successful stats action.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_list_no_embedding_manager",
            "description": "Test list action when no embedding manager is available.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_list_index_not_ready",
            "description": "Test list action when index is not ready.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_list_success_basic",
            "description": "Test successful list action with basic parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_list_with_pagination",
            "description": "Test list action with pagination.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_list_with_entity_type_filter",
            "description": "Test list action with entity type filter.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_list_with_include_content",
            "description": "Test list action with include_content=True.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_list_offset_exceeds_total",
            "description": "Test list action when offset exceeds total count.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_search_no_search_text",
            "description": "Test search action without search text.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_search_success",
            "description": "Test successful search action.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_search_case_insensitive",
            "description": "Test search is case insensitive.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_search_no_matches",
            "description": "Test search with no matches.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_search_with_entity_type_filter",
            "description": "Test search with entity type filter.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_search_with_pagination",
            "description": "Test search with pagination.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_search_with_include_content",
            "description": "Test search with include_content=True.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_with_exception",
            "description": "Test execution with exception handling.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_entity_name_extraction_contacts",
            "description": "Test entity name extraction for contacts.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_entity_name_extraction_deals",
            "description": "Test entity name extraction for deals.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_entity_name_fallback_to_unnamed",
            "description": "Test entity name fallback when no name properties are available.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_text_context_display",
            "description": "Test that search results show proper context around matches.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_empty_metadata",
            "description": "Test list action with empty metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_faiss_data_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_contacts_tool_execute",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_search_contacts_companies_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_companies_tool_execute",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_search_contacts_companies_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_client",
            "description": "Create a mock HubSpot client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_semantic_search_tool.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tool",
            "description": "Create a SemanticSearchTool instance for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_client"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_semantic_search_tool.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_entities",
            "description": "Create mock entities for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_semantic_search_tool.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_execute_empty_query",
            "description": "Test execution with empty query.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_semantic_search_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_embeddings_disabled",
            "description": "Test execution when embeddings are disabled.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_semantic_search_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_no_embeddings_available",
            "description": "Test execution when no embedding stats are available.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_semantic_search_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_semantic_search_mode",
            "description": "Test execution with semantic search mode.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_entities": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_entities"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_semantic_search_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_hybrid_search_mode",
            "description": "Test execution with hybrid search mode.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_entities": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_entities"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_semantic_search_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_auto_search_mode",
            "description": "Test execution with auto search mode.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_entities": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_entities"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_semantic_search_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_no_results",
            "description": "Test execution when no results are found.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_semantic_search_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_with_search_error",
            "description": "Test execution when search throws an error.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_semantic_search_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_with_custom_parameters",
            "description": "Test execution with custom parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_entities": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_entities"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_semantic_search_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_semantic_mode_with_filtering",
            "description": "Test semantic mode with entity type filtering to cover lines 173-174.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_semantic_search_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_auto_mode_fallback_to_semantic",
            "description": "Test auto mode fallback to semantic search to cover line 201.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\test_tools\\test_semantic_search_tool.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_contacts_tool_execute",
            "description": "Test contacts tool execution.\n\n    Tests the execution of the contacts tool with mock data.\n    Verifies that the tool correctly formats and returns contact information.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_companies_tool_execute",
            "description": "Test companies tool execution.\n\n    Tests the execution of the companies tool with mock data.\n    Verifies that the tool correctly formats and returns company information.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_deals_tool_execute",
            "description": "Test deals tool execution.\n\n    Tests the execution of the deals tool with mock data.\n    Verifies that the tool correctly formats and returns deal information.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_deals_tool_with_pagination",
            "description": "Test deals tool with pagination.\n\n    Tests the execution of the deals tool with pagination cursor.\n    Verifies that the tool correctly handles pagination parameters.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_tool_error_handling",
            "description": "Test tool error handling.\n\n    Tests the error handling of tools when API errors occur.\n    Verifies that errors are properly caught and formatted.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_deal_by_name_tool_execute",
            "description": "Test deal by name tool execution.\n\n    Tests the execution of the deal by name tool with mock data.\n    Verifies that the tool correctly formats and returns deal information.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_deal_by_name_tool_not_found",
            "description": "Test deal by name tool when no deal is found.\n\n    Tests the behavior of the deal by name tool when no matching deal is found.\n    Verifies that the tool returns an appropriate \"not found\" message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_deal_by_name_tool_missing_name",
            "description": "Test deal by name tool without provided name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_contact_properties_tool_execute",
            "description": "Test contact properties tool execution.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_contact_properties_tool_empty",
            "description": "Test contact properties tool with empty response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_contact_properties_tool_error",
            "description": "Test contact properties tool error handling.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_deal_properties_tool_execute",
            "description": "Test deal properties tool execution.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_deal_properties_tool_empty",
            "description": "Test deal properties tool with empty response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_deal_tool_execute",
            "description": "Test create deal tool execution.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_deals_tool_passes_extra_properties",
            "description": "`properties` array should be forwarded as extra_properties in DealsTool.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_tools_extra_properties_de.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_engagements_tool_passes_extra_properties",
            "description": "`properties` array should be forwarded as extra_properties in EngagementsTool.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools\\test_tools_extra_properties_de.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        }
    ]
}