{
    "tools": [
        {
            "name": "read_root",
            "description": "Root endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\example_app.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\example_app.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "create_item",
            "description": "Create a new item",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\example_app.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "read_items",
            "description": "Get all items with pagination",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\example_app.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "read_item",
            "description": "Get a specific item by ID",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\example_app.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "update_item",
            "description": "Update an existing item",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\example_app.py",
            "decorator": [
                "app.put"
            ]
        },
        {
            "name": "delete_item",
            "description": "Delete an item",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\example_app.py",
            "decorator": [
                "app.delete"
            ]
        },
        {
            "name": "serve",
            "description": "Start the FastDEV MCP server",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastdev\\cli.py",
            "decorator": [
                "app.command"
            ]
        },
        {
            "name": "version",
            "description": "Show FastDEV version",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastdev\\cli.py",
            "decorator": [
                "app.command"
            ]
        },
        {
            "name": "status",
            "description": "Show status of all managed servers",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastdev\\cli.py",
            "decorator": [
                "app.command"
            ]
        },
        {
            "name": "docs",
            "description": "Open FastDEV documentation in browser",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastdev\\cli.py",
            "decorator": [
                "app.command"
            ]
        },
        {
            "name": "ensure_running",
            "description": "\n            Ensure a FastAPI server is running. If already running, returns current info.\n            If not, starts it intelligently.\n\n            Args:\n                name: Unique name for the server\n                path: Path to the FastAPI app\n                mode: Running mode (dev, prod, test)\n\n            Returns:\n                Server information including port and status\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Unique name for the server"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path to the FastAPI app"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Running mode (dev, prod, test)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "path",
                    "mode",
                    "Returns"
                ]
            },
            "file": "src\\fastdev\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "stop_server",
            "description": "\n            Gracefully stop a running server\n\n            Args:\n                name: Name of the server to stop\n\n            Returns:\n                Status of the operation\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the server to stop"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "Returns"
                ]
            },
            "file": "src\\fastdev\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "get_logs",
            "description": "\n            Get server logs\n\n            Args:\n                name: Server name\n                tail: Number of recent lines to return\n                level: Filter by log level (ERROR, WARNING, INFO, DEBUG)\n\n            Returns:\n                List of log lines\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Server name"
                    },
                    "tail": {
                        "type": "string",
                        "description": "Number of recent lines to return"
                    },
                    "level": {
                        "type": "string",
                        "description": "Filter by log level (ERROR, WARNING, INFO, DEBUG)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "tail",
                    "level",
                    "Returns"
                ]
            },
            "file": "src\\fastdev\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "diagnose_crash",
            "description": "\n            Diagnose why a server crashed with actionable insights\n\n            Args:\n                name: Server name\n\n            Returns:\n                Crash analysis with error, solution, and context\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Server name"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "Returns"
                ]
            },
            "file": "src\\fastdev\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "analyze_code",
            "description": "\n            Run comprehensive code analysis using multiple tools\n\n            Args:\n                path: Path to analyze\n                fix: Whether to auto-fix issues\n\n            Returns:\n                Analysis results with issues, suggestions, and metrics\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "Path to analyze"
                    },
                    "fix": {
                        "type": "string",
                        "description": "Whether to auto-fix issues"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "path",
                    "fix",
                    "Returns"
                ]
            },
            "file": "src\\fastdev\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "run_tests",
            "description": "\n            Run tests for a server in isolation\n\n            Args:\n                name: Server name\n                test_path: Specific test file/directory\n                watch: Enable watch mode\n\n            Returns:\n                Test results\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Server name"
                    },
                    "test_path": {
                        "type": "string",
                        "description": "Specific test file/directory"
                    },
                    "watch": {
                        "type": "string",
                        "description": "Enable watch mode"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "test_path",
                    "watch",
                    "Returns"
                ]
            },
            "file": "src\\fastdev\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "health_check",
            "description": "\n            Comprehensive health check for a server\n\n            Args:\n                name: Server name\n\n            Returns:\n                Health status with metrics and recommendations\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Server name"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "Returns"
                ]
            },
            "file": "src\\fastdev\\server.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "list_servers",
            "description": "List all managed servers with their status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastdev\\server.py",
            "decorator": [
                "self.mcp.resource"
            ]
        },
        {
            "name": "server_info",
            "description": "Get detailed information about a specific server",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastdev\\server.py",
            "decorator": [
                "self.mcp.resource"
            ]
        },
        {
            "name": "metrics_summary",
            "description": "Get overall metrics for all servers",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastdev\\server.py",
            "decorator": [
                "self.mcp.resource"
            ]
        },
        {
            "name": "url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastdev\\core\\server_manager.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "docs_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\fastdev\\core\\server_manager.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "port_manager",
            "description": "Create a PortManager with temporary config file",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_port_manager.py",
            "decorator": [
                "pytest.fixture"
            ]
        }
    ]
}