{
    "tools": [
        {
            "name": "get_forecast",
            "description": "\n    **CORE PURPOSE:** Retrieve **future** weather forecasts and weather data for the **very recent past**. Uses the main Open-Meteo real-time forecast API.\n\n    **WHEN TO USE THIS TOOL:**\n    - Use for requests about **future** weather: \"tomorrow\", \"next 5 days\", \"this weekend\", \"what will the weather be like next week?\".\n    - Use for requests about the **immediate or very recent past**: \"yesterday\", \"last 2 days\", \"past 72 hours\". Specify the number of days using the `past_days` parameter.\n    - Use when the user asks for a forecast spanning *from* the recent past *into* the future (e.g., \"last 3 days and next 5 days\").\n\n    **WHEN **NOT** TO USE THIS TOOL:**\n    - **DO NOT USE** for requests about **specific historical dates or date ranges far in the past** (e.g., \"last month\", \"July 2023\", \"on January 15th, 2024\", \"between 2023-01-01 and 2023-01-10\").\n    - **For any historical data older than roughly 1-3 months, or when a specific past date/range is mentioned, YOU MUST USE the `get_history` tool instead.**\n\n    **PARAMETERS:**\n    - `place` OR `latitude`/`longitude`: Specify the location. `place` (e.g., \"Prague, CZ\") triggers geocoding. If `place` is provided, `latitude`/`longitude` are ignored. One of these location methods is required.\n    - `granularity` (Optional[int], Default: 60): Time resolution in minutes.\n        - `15`: 15-minute intervals (if available, uses 'minutely_15' variables).\n        - `60`: Hourly intervals (default).\n        - `>=1440`: Daily summary intervals.\n    - `forecast_days` (Optional[int], Default: 7): How many days *into the future* to retrieve (1-16).\n    - `past_days` (Optional[int], Default: 0): How many days *into the past* (relative to today) to retrieve (0-~92, exact limit depends on Open-Meteo model). **Crucial for accessing recent history with this tool.**\n    - - `variables` (Optional[str]): Comma-separated list of specific **hourly or 15-minutely** weather variable names (e.g., \"temperature_2m,precipitation,shortwave_radiation\"). \n        If None, default hourly list is used if granularity is 15 or 60.\n    - `daily_variables` (Optional[str]): Comma-separated list of specific **daily aggregation** weather variable names (e.g., \"temperature_2m_max,precipitation_sum,sunrise,sunset\"). \n        If None, default daily list is used if granularity is >= 1440 OR if specific daily vars are needed alongside hourly/minutely data. **Use this to request daily summaries like sunrise/sunset even when getting hourly data.**\n    **RETURNS:**\n    - Weather data containing predictions for the future period requested (`forecast_days`) and/or observations/analysis for the recent past period requested (`past_days`).\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "server.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_history",
            "description": "\n    **CORE PURPOSE:** Retrieve **historical** archived weather data for **specific past dates or date ranges**. Uses the dedicated Open-Meteo Archive API.\n\n    **WHEN TO USE THIS TOOL:**\n    - Use **whenever** the request asks for weather data for a **specific past date** (e.g., \"on January 15th, 2024\", \"New Year's Day 2023\").\n    - Use **whenever** the request asks for weather data over a **specific past date range** (e.g., \"last month\", \"July 2023\", \"the first week of March 2022\", \"between 2023-01-01 and 2023-01-10\").\n    - Use for **any historical query older than roughly 1-3 months**, even if a range isn't specified (e.g., \"weather back in summer 2022\"). You will need to infer appropriate `start_date` and `end_date`.\n\n    **WHEN **NOT** TO USE THIS TOOL:**\n    - **DO NOT USE** for requests about **future** weather (\"tomorrow\", \"next week\"). Use `get_forecast`.\n    - **DO NOT USE** for requests about the **very recent past relative to today** (e.g., \"yesterday\", \"last 3 days\") UNLESS a specific date is given. For relative recent past, `get_forecast` with the `past_days` parameter is generally preferred and might use more recent models. However, using `get_history` with calculated dates for the recent past is also acceptable if easier.\n\n    **PARAMETERS:**\n    - `place` OR `latitude`/`longitude`: Specify the location. `place` (e.g., \"Prague, CZ\") triggers geocoding. If `place` is provided, `latitude`/`longitude` are ignored. One of these location methods is required.\n    - `start_date` (**Required** [str]): The **start date** for the historical data range in **YYYY-MM-DD format**. This parameter is essential for this tool.\n    - `end_date` (**Required** [str]): The **end date** for the historical data range in **YYYY-MM-DD format**. This parameter is essential. Must be the same as or later than `start_date`. For a single day, set `start_date` and `end_date` to the same value.\n    - `granularity` (Optional[int], Default: 60): Time resolution in minutes.\n        - `60`: Hourly intervals (default).\n        - `>=1440`: Daily summary intervals.\n        - **Note:** 15-minute data is typically **not available** via the historical archive API. Do not request `granularity=15`.\n    - `variables` (Optional[str]): Comma-separated list of specific weather variable names (e.g., \"temperature_2m,precipitation_sum,sunshine_duration\") to override the defaults. Ensure variables are valid for the chosen granularity and available in the historical archive. If None, default hourly/daily lists are used based on granularity.\n\n    **RETURNS:**\n    - Archived historical weather data for the specified location and date range.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "server.py",
            "decorator": [
                "mcp.tool"
            ]
        }
    ]
}