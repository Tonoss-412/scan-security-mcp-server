{
    "tools": [
        {
            "name": "show_roots",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\mcp\\mcp_root_test\\root_test_server.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "handle_list_tools",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\mcp\\mcp_sse\\server.py",
            "decorator": [
                "server.list_tools"
            ]
        },
        {
            "name": "handle_call_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\mcp\\mcp_sse\\server.py",
            "decorator": [
                "server.call_tool"
            ]
        },
        {
            "name": "main",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\mcp\\mcp_streamable_http\\stateless_server.py",
            "decorator": [
                "click.command",
                "click.option",
                "click.option",
                "click.option"
            ]
        },
        {
            "name": "call_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\mcp\\mcp_streamable_http\\stateless_server.py",
            "decorator": [
                "app.call_tool"
            ]
        },
        {
            "name": "list_tools",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\mcp\\mcp_streamable_http\\stateless_server.py",
            "decorator": [
                "app.list_tools"
            ]
        },
        {
            "name": "lifespan",
            "description": "Context manager for session manager.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\mcp\\mcp_streamable_http\\stateless_server.py",
            "decorator": [
                "contextlib.asynccontextmanager"
            ]
        },
        {
            "name": "run",
            "description": "\n        Run the basic agent workflow.\n\n        Args:\n            input: The input string to prompt the agent.\n\n        Returns:\n            WorkflowResult containing the processed data.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input": {
                        "type": "string",
                        "description": "The input string to prompt the agent."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "input",
                    "Returns"
                ]
            },
            "file": "examples\\mcp_agent_server\\asyncio\\basic_agent_server.py",
            "decorator": [
                "app.workflow_run"
            ]
        },
        {
            "name": "run",
            "description": "\n        Run the workflow, processing the input data.\n\n        Args:\n            input_data: The data to process\n\n        Returns:\n            A WorkflowResult containing the processed data\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_data": {
                        "type": "string",
                        "description": "The data to process"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "input_data",
                    "Returns"
                ]
            },
            "file": "examples\\mcp_agent_server\\asyncio\\basic_agent_server.py",
            "decorator": [
                "app.workflow_run"
            ]
        },
        {
            "name": "run",
            "description": "\n        Run the basic agent workflow.\n\n        Args:\n            input: The input string to prompt the agent.\n\n        Returns:\n            WorkflowResult containing the processed data.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input": {
                        "type": "string",
                        "description": "The input string to prompt the agent."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "input",
                    "Returns"
                ]
            },
            "file": "examples\\mcp_agent_server\\temporal\\basic_agent_server.py",
            "decorator": [
                "app.workflow_run"
            ]
        },
        {
            "name": "run",
            "description": "\n        Run the pause-resume workflow.\n\n        Args:\n            message: A message to include in the workflow result.\n\n        Returns:\n            WorkflowResult containing the processed data.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "A message to include in the workflow result."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "message",
                    "Returns"
                ]
            },
            "file": "examples\\mcp_agent_server\\temporal\\basic_agent_server.py",
            "decorator": [
                "app.workflow_run"
            ]
        },
        {
            "name": "run",
            "description": "\n        Run the workflow, processing the input data.\n\n        Args:\n            input_data: The data to process\n\n        Returns:\n            A WorkflowResult containing the processed data\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_data": {
                        "type": "string",
                        "description": "The data to process"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "input_data",
                    "Returns"
                ]
            },
            "file": "examples\\temporal\\basic.py",
            "decorator": [
                "app.workflow_run"
            ]
        },
        {
            "name": "run",
            "description": "\n        Run the workflow, processing the input data.\n\n        Args:\n            input_data: The data to process\n\n        Returns:\n            A WorkflowResult containing the processed data\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_data": {
                        "type": "string",
                        "description": "The data to process"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "input_data",
                    "Returns"
                ]
            },
            "file": "examples\\temporal\\evaluator_optimizer.py",
            "decorator": [
                "app.workflow_run"
            ]
        },
        {
            "name": "run",
            "description": "\n        Run the workflow, processing the input data.\n\n        Args:\n            input_data: The data to process\n\n        Returns:\n            A WorkflowResult containing the processed data\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_data": {
                        "type": "string",
                        "description": "The data to process"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "input_data",
                    "Returns"
                ]
            },
            "file": "examples\\temporal\\orchestrator.py",
            "decorator": [
                "app.workflow_run"
            ]
        },
        {
            "name": "run",
            "description": "\n        Run the workflow, processing the input data.\n\n        Args:\n            input_data: The data to process\n\n        Returns:\n            A WorkflowResult containing the processed data\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_data": {
                        "type": "string",
                        "description": "The data to process"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "input_data",
                    "Returns"
                ]
            },
            "file": "examples\\temporal\\parallel.py",
            "decorator": [
                "app.workflow_run"
            ]
        },
        {
            "name": "run",
            "description": "\n        Run the workflow, processing the input data.\n\n        Args:\n            input_data: The data to process\n\n        Returns:\n            A WorkflowResult containing the processed data\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_data": {
                        "type": "string",
                        "description": "The data to process"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "input_data",
                    "Returns"
                ]
            },
            "file": "examples\\temporal\\router.py",
            "decorator": [
                "app.workflow_run"
            ]
        },
        {
            "name": "handle_list_tools",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\tracing\\mcp\\server.py",
            "decorator": [
                "server.list_tools",
                "telemetry.traced"
            ]
        },
        {
            "name": "handle_call_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\tracing\\mcp\\server.py",
            "decorator": [
                "server.call_tool",
                "telemetry.traced"
            ]
        },
        {
            "name": "_",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mo": {
                        "type": "string"
                    }
                },
                "required": [
                    "mo"
                ]
            },
            "file": "examples\\usecases\\marimo_mcp_basic_agent\\notebook.py",
            "decorator": [
                "app.cell"
            ]
        },
        {
            "name": "test_rcm_with_real_calls",
            "description": "Test RCM with mocked LLM calls using readable output",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\usecases\\reliable_conversation\\test_basic.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create from dictionary",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "examples\\usecases\\reliable_conversation\\src\\models\\conversation_models.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create from dictionary",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "examples\\usecases\\reliable_conversation\\src\\models\\conversation_models.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "overall_score",
            "description": "Paper's composite scoring formula",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\usecases\\reliable_conversation\\src\\models\\conversation_models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create from dictionary",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "examples\\usecases\\reliable_conversation\\src\\models\\conversation_models.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create from dictionary",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "examples\\usecases\\reliable_conversation\\src\\models\\conversation_models.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create from dictionary",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "examples\\usecases\\reliable_conversation\\src\\models\\conversation_models.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "evaluate_quality_with_llm",
            "description": "\n    LLM-based quality evaluation implementing paper's quality dimensions.\n    From paper Section 5.4.2.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\usecases\\reliable_conversation\\src\\tasks\\llm_evaluators.py",
            "decorator": [
                "app.workflow_task"
            ]
        },
        {
            "name": "extract_requirements_with_llm",
            "description": "\n    LLM-based requirement extraction to prevent instruction forgetting.\n    From paper Section 5.4.3.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\usecases\\reliable_conversation\\src\\tasks\\llm_evaluators.py",
            "decorator": [
                "app.workflow_task"
            ]
        },
        {
            "name": "consolidate_context_with_llm",
            "description": "\n    LLM-based context consolidation to prevent lost-in-middle-turns.\n    From paper Section 5.4.4.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\usecases\\reliable_conversation\\src\\tasks\\llm_evaluators.py",
            "decorator": [
                "app.workflow_task"
            ]
        },
        {
            "name": "process_turn_with_quality",
            "description": "\n    Main turn processing implementing paper's quality refinement methodology.\n    From paper Section 5.4.1 - uses real LLMs for requirement extraction, quality evaluation, and response refinement.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\usecases\\reliable_conversation\\src\\tasks\\quality_control.py",
            "decorator": [
                "app.workflow_task"
            ]
        },
        {
            "name": "generate_response_with_constraints",
            "description": "\n    Generate response with quality constraints and context awareness.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "examples\\usecases\\reliable_conversation\\src\\tasks\\quality_control.py",
            "decorator": [
                "app.workflow_task"
            ]
        },
        {
            "name": "context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "server_registry",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "executor",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "engine",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "upstream_session",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "upstream_session",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "src\\mcp_agent\\app.py",
            "decorator": [
                "upstream_session.setter"
            ]
        },
        {
            "name": "workflows",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "tasks",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "session_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "logger",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "run",
            "description": "\n        Run the application. Use as context manager.\n\n        Example:\n            async with app.run() as running_app:\n                # App is initialized here\n                pass\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\app.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\app.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\app.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "_bound_adapter",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\app.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "_bound_adapter",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\app.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "validate_uri",
            "description": "Validate that the URI starts with file:// (required by specification 2024-11-05)",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\config.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "find_config",
            "description": "Find the config file in the current directory or parent directories.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\config.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "find_secrets",
            "description": "Find the secrets file in the current directory or parent directories.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\config.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_find_config",
            "description": "Find the config file of one of the possible names in the current directory or parent directories.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\config.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "main",
            "description": "Main entry point for the MCP Agent CLI.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\cli\\main.py",
            "decorator": [
                "app.callback"
            ]
        },
        {
            "name": "show",
            "description": "Show the configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\cli\\commands\\config.py",
            "decorator": [
                "app.command"
            ]
        },
        {
            "name": "context",
            "description": "\n        Get context, with graceful fallback to global context if needed.\n        Raises clear error if no context is available.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\core\\context_dependent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "use_context",
            "description": "Temporarily use a different context.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\core\\context_dependent.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "execution_context",
            "description": "Context manager for execution setup/teardown.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\executor.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "execute",
            "description": "Execute a list of tasks and return their results",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\executor.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "execute_many",
            "description": "Execute a list of tasks and return their results",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\executor.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "execute_streaming",
            "description": "Execute tasks and yield results as they complete",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\executor.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "execute",
            "description": "\n        Execute a task and return its results.\n\n        Args:\n            task: The task to execute\n            *args: Positional arguments to pass to the task\n            **kwargs: Additional arguments to pass to the tasks\n\n        Returns:\n            A result or exception\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "task": {
                        "type": "string",
                        "description": "The task to execute"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "task",
                    "Returns"
                ]
            },
            "file": "src\\mcp_agent\\executor\\executor.py",
            "decorator": [
                "telemetry.traced"
            ]
        },
        {
            "name": "execute_many",
            "description": "\n        Execute a list of tasks and return their results.\n\n        Args:\n            tasks: The tasks to execute\n            *args: Positional arguments to pass to each task\n            **kwargs: Additional arguments to pass to the tasks\n\n        Returns:\n            A list of results or exceptions\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tasks": {
                        "type": "string",
                        "description": "The tasks to execute"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "tasks",
                    "Returns"
                ]
            },
            "file": "src\\mcp_agent\\executor\\executor.py",
            "decorator": [
                "telemetry.traced"
            ]
        },
        {
            "name": "execute_streaming",
            "description": "\n        Execute tasks and yield results as they complete.\n\n        Args:\n            tasks: The tasks to execute\n            *args: Positional arguments to pass to each task\n            **kwargs: Additional arguments to pass to the tasks\n\n        Yields:\n            Results or exceptions as tasks complete\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tasks": {
                        "type": "string",
                        "description": "The tasks to execute"
                    },
                    "Yields": {
                        "type": "string"
                    }
                },
                "required": [
                    "tasks",
                    "Yields"
                ]
            },
            "file": "src\\mcp_agent\\executor\\executor.py",
            "decorator": [
                "telemetry.traced"
            ]
        },
        {
            "name": "signal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\executor.py",
            "decorator": [
                "telemetry.traced"
            ]
        },
        {
            "name": "wait_for_signal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\executor.py",
            "decorator": [
                "telemetry.traced"
            ]
        },
        {
            "name": "executor",
            "description": "Get the workflow executor from the context.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\workflow.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "id",
            "description": "\n        Get the workflow ID for this workflow.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\workflow.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "run_id",
            "description": "\n        Get the workflow run ID if it has been assigned.\n        NOTE: The run() method will assign a new workflow ID on every run.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\workflow.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "create",
            "description": "\n        Factory method to create and initialize a workflow instance.\n\n        This default implementation creates a workflow instance and calls initialize().\n        Subclasses can override this method for custom initialization logic.\n\n        Args:\n            name: Optional name for the workflow (defaults to class name)\n            context: Optional context to use (falls back to global context if not provided)\n            **kwargs: Additional parameters to pass to the workflow constructor\n\n        Returns:\n            An initialized workflow instance\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\executor\\workflow.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "run",
            "description": "\n        Main workflow implementation. Must be overridden by subclasses.\n\n        This is where the user-defined application logic goes. Typically, this involves:\n        1. Setting up Agents and attaching LLMs to them\n        2. Executing operations using the Agents and their LLMs\n        3. Processing results and returning them\n\n        Returns:\n            WorkflowResult containing the output of the workflow\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\workflow.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_signal_receiver",
            "description": "Dynamic signal handler for Temporal workflows.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\workflow.py",
            "decorator": [
                "workflow.signal"
            ]
        },
        {
            "name": "register",
            "description": "\n        Register a workflow instance (i.e. a workflow run).\n\n         Args:\n            workflow: The workflow instance\n            run_id: The unique ID for this specific workflow run. If unspecified, it will be retrieved from the workflow instance.\n            workflow_id: The unique ID for the workflow type. If unspecified, it will be retrieved from the workflow instance.\n            task: The asyncio task running the workflow\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workflow": {
                        "type": "string",
                        "description": "The workflow instance"
                    },
                    "run_id": {
                        "type": "string",
                        "description": "The unique ID for this specific workflow run. If unspecified, it will be retrieved from the workflow instance."
                    },
                    "workflow_id": {
                        "type": "string",
                        "description": "The unique ID for the workflow type. If unspecified, it will be retrieved from the workflow instance."
                    },
                    "task": {
                        "type": "string",
                        "description": "The asyncio task running the workflow"
                    }
                },
                "required": [
                    "workflow",
                    "run_id",
                    "workflow_id",
                    "task"
                ]
            },
            "file": "src\\mcp_agent\\executor\\workflow_registry.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "unregister",
            "description": "\n        Remove a workflow instance from the registry.\n\n        Args:\n            run_id: The unique ID for this specific workflow run.\n            workflow_id: The ID of the workflow.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "run_id": {
                        "type": "string",
                        "description": "The unique ID for this specific workflow run."
                    },
                    "workflow_id": {
                        "type": "string",
                        "description": "The ID of the workflow."
                    }
                },
                "required": [
                    "run_id",
                    "workflow_id"
                ]
            },
            "file": "src\\mcp_agent\\executor\\workflow_registry.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_workflow",
            "description": "\n        Get a workflow instance by run ID.\n\n        Args:\n            run_id: The unique ID for this specific workflow run.\n            workflow_id: The ID of the workflow to retrieve\n\n        Returns:\n            The workflow instance, or None if not found\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "run_id": {
                        "type": "string",
                        "description": "The unique ID for this specific workflow run."
                    },
                    "workflow_id": {
                        "type": "string",
                        "description": "The ID of the workflow to retrieve"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "run_id",
                    "workflow_id",
                    "Returns"
                ]
            },
            "file": "src\\mcp_agent\\executor\\workflow_registry.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "resume_workflow",
            "description": "\n        Resume a paused workflow.\n\n        Args:\n            run_id: The unique ID for this specific workflow run\n            workflow_id: The ID of the workflow to resume\n            signal_name: Name of the signal to send to the workflow (default is \"resume\")\n            payload: Payload to send with the signal\n\n        Returns:\n            True if the resume signal was sent successfully, False otherwise\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "run_id": {
                        "type": "string",
                        "description": "The unique ID for this specific workflow run"
                    },
                    "workflow_id": {
                        "type": "string",
                        "description": "The ID of the workflow to resume"
                    },
                    "signal_name": {
                        "type": "string",
                        "description": "Name of the signal to send to the workflow (default is \"resume\")"
                    },
                    "payload": {
                        "type": "string",
                        "description": "Payload to send with the signal"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "run_id",
                    "workflow_id",
                    "signal_name",
                    "payload",
                    "Returns"
                ]
            },
            "file": "src\\mcp_agent\\executor\\workflow_registry.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "cancel_workflow",
            "description": "\n        Cancel (terminate) a running workflow.\n\n        Args:\n            run_id: The unique ID for this specific workflow run\n            workflow_id: The ID of the workflow to cancel\n\n        Returns:\n            True if the cancel signal was sent successfully, False otherwise\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "run_id": {
                        "type": "string",
                        "description": "The unique ID for this specific workflow run"
                    },
                    "workflow_id": {
                        "type": "string",
                        "description": "The ID of the workflow to cancel"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "run_id",
                    "workflow_id",
                    "Returns"
                ]
            },
            "file": "src\\mcp_agent\\executor\\workflow_registry.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_workflow_status",
            "description": "\n        Get the status of a workflow run.\n\n        Args:\n            run_id: The unique ID for this specific workflow run\n            workflow_id: The ID of the workflow to cancel\n\n        Returns:\n            The last available workflow status if found, None otherwise\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "run_id": {
                        "type": "string",
                        "description": "The unique ID for this specific workflow run"
                    },
                    "workflow_id": {
                        "type": "string",
                        "description": "The ID of the workflow to cancel"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "run_id",
                    "workflow_id",
                    "Returns"
                ]
            },
            "file": "src\\mcp_agent\\executor\\workflow_registry.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "list_workflow_statuses",
            "description": "\n        List all registered workflow instances with their status.\n\n        Returns:\n            A list of dictionaries with workflow information\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\workflow_registry.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "list_workflows",
            "description": "\n        List all registered workflow instances.\n\n        Returns:\n            A list of workflow instances\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\workflow_registry.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "signal",
            "description": "Emit a signal to all waiting handlers and registered callbacks.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\workflow_signal.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "wait_for_signal",
            "description": "Wait for a signal to be emitted.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\workflow_signal.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "signal",
            "description": "Emit a signal to all waiting handlers and registered callbacks.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\workflow_signal.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "wait_for_signal",
            "description": "Wait for a signal to be emitted.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\workflow_signal.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "wrap_as_activity",
            "description": "\n        Convert a function into a Temporal activity and return its info.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\temporal\\__init__.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "wrapped_activity",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\executor\\temporal\\__init__.py",
            "decorator": [
                "activity.defn"
            ]
        },
        {
            "name": "handle_event",
            "description": "Process an incoming event.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\logging\\listeners.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "event_context",
            "description": "\n    Times a synchronous block, logs an event after completion.\n    Because logger methods are async, we schedule the final log.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\logging\\logger.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "async_event_context",
            "description": "\n    Times an asynchronous block, logs an event after completion.\n    Because logger methods are async, we schedule the final log.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\logging\\logger.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "configure",
            "description": "\n        Configure the logging system.\n\n        Args:\n            event_filter: Default filter for all loggers\n            transport: Transport for sending events to external systems\n            batch_size: Default batch size for batching listener\n            flush_interval: Default flush interval for batching listener\n            **kwargs: Additional configuration options\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\logging\\logger.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "shutdown",
            "description": "Shutdown the logging system gracefully.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\logging\\logger.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "managed",
            "description": "Context manager for the logging system lifecycle.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\logging\\logger.py",
            "decorator": [
                "classmethod",
                "asynccontextmanager"
            ]
        },
        {
            "name": "paused",
            "description": "Context manager for temporarily pausing the display.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\logging\\rich_progress.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "send_matched_event",
            "description": "Send an event to the external system.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\logging\\transport.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "is_closed",
            "description": "Check if transport is closed.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\logging\\transport.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get",
            "description": "Get the singleton instance of the event bus.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\logging\\transport.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "reset",
            "description": "\n        Reset the singleton instance.\n        This is primarily useful for testing scenarios where you need to ensure\n        a clean state between tests.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\logging\\transport.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "gen_client",
            "description": "\n    Create a client session to the specified server.\n    Handles server startup, initialization, and message receive loop setup.\n    If required, callers can specify their own message receive loop and ClientSession class constructor to customize further.\n    For persistent connections, use connect() or MCPConnectionManager instead.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\mcp\\gen_client.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "create",
            "description": "\n        Factory method to create and initialize an MCPAggregator.\n        Use this instead of constructor since we need async initialization.\n        If connection_persistence is True, the aggregator will maintain a\n        persistent connection to the servers for as long as this aggregator is around.\n        By default we do not maintain a persistent connection.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\mcp\\mcp_aggregator.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "start_server",
            "description": "\n        Starts the server process based on its configuration. To initialize, call initialize_server\n\n        Args:\n            server_name (str): The name of the server to initialize.\n\n        Returns:\n            StdioServerParameters: The server parameters for stdio transport.\n\n        Raises:\n            ValueError: If the server is not found or has an unsupported transport.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "server_name": {
                        "type": "string",
                        "description": "The name of the server to initialize."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "StdioServerParameters": {
                        "type": "string",
                        "description": "The server parameters for stdio transport."
                    },
                    "Raises": {
                        "type": "string"
                    },
                    "ValueError": {
                        "type": "string",
                        "description": "If the server is not found or has an unsupported transport."
                    }
                },
                "required": [
                    "server_name",
                    "Returns",
                    "StdioServerParameters",
                    "Raises",
                    "ValueError"
                ]
            },
            "file": "src\\mcp_agent\\mcp\\mcp_server_registry.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "initialize_server",
            "description": "\n        Initialize a server based on its configuration.\n        After initialization, also calls any registered or provided initialization hook for the server.\n\n        Args:\n            server_name (str): The name of the server to initialize.\n            init_hook (InitHookCallable): Optional initialization hook function to call after initialization.\n\n        Returns:\n            StdioServerParameters: The server parameters for stdio transport.\n\n        Raises:\n            ValueError: If the server is not found or has an unsupported transport.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "server_name": {
                        "type": "string",
                        "description": "The name of the server to initialize."
                    },
                    "init_hook": {
                        "type": "string",
                        "description": "Optional initialization hook function to call after initialization."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "StdioServerParameters": {
                        "type": "string",
                        "description": "The server parameters for stdio transport."
                    },
                    "Raises": {
                        "type": "string"
                    },
                    "ValueError": {
                        "type": "string",
                        "description": "If the server is not found or has an unsupported transport."
                    }
                },
                "required": [
                    "server_name",
                    "Returns",
                    "StdioServerParameters",
                    "Raises",
                    "ValueError"
                ]
            },
            "file": "src\\mcp_agent\\mcp\\mcp_server_registry.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "app",
            "description": "Get the MCPApp instance associated with this server context.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\server\\app_server.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "workflows",
            "description": "Get the workflows registered in this server context.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\server\\app_server.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "workflow_registry",
            "description": "Get the workflow registry for this server context.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\server\\app_server.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "app_specific_lifespan",
            "description": "Initialize and manage MCPApp lifecycle.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\server\\app_server.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "list_workflows",
            "description": "\n        List all available workflow types with their detailed information.\n        Returns information about each workflow type including name, description, and parameters.\n        This helps in making an informed decision about which workflow to run.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\server\\app_server.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_workflow_runs",
            "description": "\n        List all workflow instances (runs) with their detailed status information.\n\n        This returns information about actual workflow instances (runs), not workflow types.\n        For each running workflow, returns its ID, name, current state, and available operations.\n        This helps in identifying and managing active workflow instances.\n\n        Returns:\n            A dictionary mapping workflow instance IDs to their detailed status information.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\server\\app_server.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "run_workflow",
            "description": "\n        Run a workflow with the given name.\n\n        Args:\n            workflow_name: The name of the workflow to run.\n            run_parameters: Arguments to pass to the workflow run.\n                workflows/list method will return the run_parameters schema for each workflow.\n\n        Returns:\n            The run ID of the started workflow run, which can be passed to\n            workflows/get_status, workflows/resume, and workflows/cancel.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workflow_name": {
                        "type": "string",
                        "description": "The name of the workflow to run."
                    },
                    "run_parameters": {
                        "type": "string",
                        "description": "Arguments to pass to the workflow run."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workflow_name",
                    "run_parameters",
                    "Returns"
                ]
            },
            "file": "src\\mcp_agent\\server\\app_server.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_workflow_status",
            "description": "\n        Get the status of a running workflow.\n\n        Provides detailed information about a workflow instance including its current state,\n        whether it's running or completed, and any results or errors encountered.\n\n        Args:\n            workflow_name: The name of the workflow to check.\n            run_id: The ID of the workflow instance to check,\n                received from workflows/run or workflows/runs/list.\n\n        Returns:\n            A dictionary with comprehensive information about the workflow status.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workflow_name": {
                        "type": "string",
                        "description": "The name of the workflow to check."
                    },
                    "run_id": {
                        "type": "string",
                        "description": "The ID of the workflow instance to check,"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workflow_name",
                    "run_id",
                    "Returns"
                ]
            },
            "file": "src\\mcp_agent\\server\\app_server.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "resume_workflow",
            "description": "\n        Resume a paused workflow.\n\n        Args:\n            run_id: The ID of the workflow to resume,\n                received from workflows/run or workflows/runs/list.\n            workflow_name: The name of the workflow to resume.\n            signal_name: Optional name of the signal to send to resume the workflow.\n                This will default to \"resume\", but can be a custom signal name\n                if the workflow was paused on a specific signal.\n            payload: Optional payload to provide the workflow upon resumption.\n                For example, if a workflow is waiting for human input,\n                this can be the human input.\n\n        Returns:\n            True if the workflow was resumed, False otherwise.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "run_id": {
                        "type": "string",
                        "description": "The ID of the workflow to resume,"
                    },
                    "workflow_name": {
                        "type": "string",
                        "description": "The name of the workflow to resume."
                    },
                    "signal_name": {
                        "type": "string",
                        "description": "Optional name of the signal to send to resume the workflow."
                    },
                    "payload": {
                        "type": "string",
                        "description": "Optional payload to provide the workflow upon resumption."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "run_id",
                    "workflow_name",
                    "signal_name",
                    "payload",
                    "Returns"
                ]
            },
            "file": "src\\mcp_agent\\server\\app_server.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "cancel_workflow",
            "description": "\n        Cancel a running workflow.\n\n        Args:\n            run_id: The ID of the workflow instance to cancel,\n                received from workflows/run or workflows/runs/list.\n            workflow_name: The name of the workflow to cancel.\n\n        Returns:\n            True if the workflow was cancelled, False otherwise.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "run_id": {
                        "type": "string",
                        "description": "The ID of the workflow instance to cancel,"
                    },
                    "workflow_name": {
                        "type": "string",
                        "description": "The name of the workflow to cancel."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "run_id",
                    "workflow_name",
                    "Returns"
                ]
            },
            "file": "src\\mcp_agent\\server\\app_server.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "run",
            "description": "f\"\"\"\nRunthe'{workflow_name}'workflowandgetarunIDback.\nWorkflowDescription:{workflow_cls.__doc__}\n\n{run_fn_tool.description}\n\nArgs:\nrun_parameters:Dictionaryofparametersfortheworkflowrun.\nTheschemafortheseparametersisasfollows:\n{run_fn_tool_params}\n",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\server\\app_server.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_status",
            "description": "f\"\"\"\nGetthestatusofarunning{workflow_name}workflow.\n\nArgs:\nrun_id:TherunIDoftherunningworkflow",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\server\\app_server.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "async_wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\tracing\\telemetry.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "sync_wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\tracing\\telemetry.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "configure",
            "description": "\n        Configure the tracing system.\n\n        Args:\n            session_id: Optional session ID for exported traces\n            **kwargs: Additional configuration options\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\tracing\\tracer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_get_type_origin_name",
            "description": "Get a standardized name for a type origin.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\utils\\pydantic_type_serializer.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "serialize_type",
            "description": "\n        Serialize a type object into a JSON-serializable dictionary.\n\n        Args:\n            typ: The type to serialize\n\n        Returns:\n            A dictionary representing the serialized type\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "typ": {
                        "type": "string",
                        "description": "The type to serialize"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "typ",
                    "Returns"
                ]
            },
            "file": "src\\mcp_agent\\utils\\pydantic_type_serializer.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_serialize_validators",
            "description": "Serialize the validators of a model class.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\utils\\pydantic_type_serializer.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_all_fields",
            "description": "\n        Get all field definitions for a model class, including fields from parent classes.\n\n        Args:\n            model_class: The Pydantic model class\n\n        Returns:\n            A dictionary of field definitions\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "model_class": {
                        "type": "string",
                        "description": "The Pydantic model class"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "model_class",
                    "Returns"
                ]
            },
            "file": "src\\mcp_agent\\utils\\pydantic_type_serializer.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_serialize_fields",
            "description": "Serialize the field definitions of a model class.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\utils\\pydantic_type_serializer.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_serialize_config",
            "description": "Serialize the model's config.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\utils\\pydantic_type_serializer.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "deserialize_type",
            "description": "\n        Reconstruct a type from its serialized representation.\n\n        Args:\n            serialized: The serialized type dictionary\n\n        Returns:\n            The reconstructed type\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "serialized": {
                        "type": "string",
                        "description": "The serialized type dictionary"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "serialized",
                    "Returns"
                ]
            },
            "file": "src\\mcp_agent\\utils\\pydantic_type_serializer.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "reconstruct_model",
            "description": "\n        Reconstruct a Pydantic model class from its serialized representation.\n\n        Args:\n            serialized: The serialized model dictionary\n\n        Returns:\n            The reconstructed model class\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "serialized": {
                        "type": "string",
                        "description": "The serialized model dictionary"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "serialized",
                    "Returns"
                ]
            },
            "file": "src\\mcp_agent\\utils\\pydantic_type_serializer.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "serialize_model_type",
            "description": "\n        Serialize a Pydantic model class into a JSON-serializable dictionary.\n\n        Args:\n            model_class: The Pydantic model class to serialize\n\n        Returns:\n            A dictionary containing the serialized model type\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\utils\\pydantic_type_serializer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "deserialize_model_type",
            "description": "\n        Deserialize a dictionary back into a Pydantic model class.\n\n        Args:\n            serialized: The serialized model dictionary\n\n        Returns:\n            The reconstructed Pydantic model class\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\utils\\pydantic_type_serializer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "embed",
            "description": "\n        Generate embeddings for a list of messages\n\n        Args:\n            data: List of text strings to embed\n\n        Returns:\n            Array of embeddings, shape (len(texts), embedding_dim)\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "List of text strings to embed"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "Returns"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\embedding\\embedding_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "embedding_dim",
            "description": "Return the dimensionality of the embeddings",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\workflows\\embedding\\embedding_base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "embedding_dim",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\workflows\\embedding\\embedding_cohere.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "embedding_dim",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\workflows\\embedding\\embedding_openai.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "classify",
            "description": "\n        Classify the input request into one or more intents.\n\n        Args:\n            request: The input text to classify\n            top_k: Maximum number of top intent matches to return. May return fewer.\n\n        Returns:\n            List of classification results, ordered by confidence\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "request": {
                        "type": "string",
                        "description": "The input text to classify"
                    },
                    "top_k": {
                        "type": "string",
                        "description": "Maximum number of top intent matches to return. May return fewer."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "request",
                    "top_k",
                    "Returns"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\intent_classifier\\intent_classifier_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "create",
            "description": "\n        Factory method to create and initialize a classifier.\n        Use this instead of constructor since we need async initialization.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\intent_classifier\\intent_classifier_embedding.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "create",
            "description": "\n        Factory method to create and initialize a classifier.\n        Use this instead of constructor since we need async initialization.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\intent_classifier\\intent_classifier_embedding_cohere.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "create",
            "description": "\n        Factory method to create and initialize a classifier.\n        Use this instead of constructor since we need async initialization.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\intent_classifier\\intent_classifier_embedding_openai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "create",
            "description": "\n        Factory method to create and initialize a classifier.\n        Use this instead of constructor since we need async initialization.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\intent_classifier\\intent_classifier_llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "create",
            "description": "\n        Factory method to create and initialize a classifier.\n        Use this instead of constructor since we need async initialization.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\intent_classifier\\intent_classifier_llm_anthropic.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "create",
            "description": "\n        Factory method to create and initialize a classifier.\n        Use this instead of constructor since we need async initialization.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\intent_classifier\\intent_classifier_llm_openai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "to_mcp_message_result",
            "description": "Convert an LLM response to an MCP message result type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_mcp_message_result",
            "description": "Convert an MCP message result to an LLM response type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "to_mcp_message_param",
            "description": "Convert an LLM input to an MCP message (SamplingMessage) type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_mcp_message_param",
            "description": "Convert an MCP message (SamplingMessage) to an LLM input type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_mcp_tool_result",
            "description": "Convert an MCP tool result to an LLM input type",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "convert_message_to_message_param",
            "description": "Convert a response object to an input parameter object to allow LLM calls to be chained.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_azure.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "request_completion_task",
            "description": "\n        Request a completion from Azure's API.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_azure.py",
            "decorator": [
                "staticmethod",
                "workflow_task"
            ]
        },
        {
            "name": "from_mcp_message_result",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_azure.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "to_mcp_message_result",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_azure.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_mcp_message_param",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_azure.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "to_mcp_message_param",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_azure.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "convert_message_to_message_param",
            "description": "Convert a response object to an input parameter object to allow LLM calls to be chained.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_bedrock.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "request_completion_task",
            "description": "\n        Request a completion from Bedrock's API.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_bedrock.py",
            "decorator": [
                "staticmethod",
                "workflow_task"
            ]
        },
        {
            "name": "request_structured_completion_task",
            "description": "\n        Request a structured completion using Instructor's Bedrock API.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_bedrock.py",
            "decorator": [
                "staticmethod",
                "workflow_task"
            ]
        },
        {
            "name": "from_mcp_message_result",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_bedrock.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "to_mcp_message_result",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_bedrock.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_mcp_message_param",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_bedrock.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "to_mcp_message_param",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_bedrock.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "convert_message_to_message_param",
            "description": "Convert a response object to an input parameter object to allow LLM calls to be chained.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "message"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_google.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "request_completion_task",
            "description": "\n        Request a completion from Google's API.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_google.py",
            "decorator": [
                "staticmethod",
                "workflow_task"
            ]
        },
        {
            "name": "request_structured_completion_task",
            "description": "\n        Request a structured completion using Instructor's Google API.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_google.py",
            "decorator": [
                "staticmethod",
                "workflow_task"
            ]
        },
        {
            "name": "from_mcp_message_result",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_google.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_mcp_message_param",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_google.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "to_mcp_message_result",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_google.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "to_mcp_message_param",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_google.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_mcp_tool_result",
            "description": "Convert an MCP tool result to an LLM input type",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_google.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "request_structured_completion_task",
            "description": "\n        Request a structured completion using Instructor's OpenAI API.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_ollama.py",
            "decorator": [
                "staticmethod",
                "workflow_task"
            ]
        },
        {
            "name": "convert_message_to_message_param",
            "description": "Convert a response object to an input parameter object to allow LLM calls to be chained.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_openai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "request_completion_task",
            "description": "\n        Request a completion from OpenAI's API.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_openai.py",
            "decorator": [
                "staticmethod",
                "workflow_task",
                "telemetry.traced"
            ]
        },
        {
            "name": "request_structured_completion_task",
            "description": "\n        Request a structured completion using Instructor's OpenAI API.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_openai.py",
            "decorator": [
                "staticmethod",
                "workflow_task",
                "telemetry.traced"
            ]
        },
        {
            "name": "from_mcp_message_result",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_openai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "to_mcp_message_result",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_openai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_mcp_message_param",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_openai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "to_mcp_message_param",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\llm\\augmented_llm_openai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "route",
            "description": "\n        Route the input request to one or more MCP servers, agents, or functions.\n        If no routing decision can be made, returns an empty list.\n\n        Args:\n            request: The input to route.\n            top_k: The maximum number of top routing results to return. May return fewer.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "request": {
                        "type": "string",
                        "description": "The input to route."
                    },
                    "top_k": {
                        "type": "string",
                        "description": "The maximum number of top routing results to return. May return fewer."
                    }
                },
                "required": [
                    "request",
                    "top_k"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\router\\router_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "route_to_server",
            "description": "Route the input to one or more MCP servers.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\workflows\\router\\router_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "route_to_agent",
            "description": "Route the input to one or more agents.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_agent\\workflows\\router\\router_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "route_to_function",
            "description": "\n        Route the input to one or more functions.\n\n        Args:\n            input: The input to route.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input": {
                        "type": "string",
                        "description": "The input to route."
                    }
                },
                "required": [
                    "input"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\router\\router_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "create",
            "description": "\n        Factory method to create and initialize a router.\n        Use this instead of constructor since we need async initialization.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\router\\router_embedding.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "create",
            "description": "\n        Factory method to create and initialize a router.\n        Use this instead of constructor since we need async initialization.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\router\\router_embedding_cohere.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "create",
            "description": "\n        Factory method to create and initialize a router.\n        Use this instead of constructor since we need async initialization.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\router\\router_embedding_openai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "create",
            "description": "\n        Factory method to create and initialize a router.\n        Use this instead of constructor since we need async initialization.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\router\\router_llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "create",
            "description": "\n        Factory method to create and initialize a router.\n        Use this instead of constructor since we need async initialization.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\router\\router_llm_anthropic.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "create",
            "description": "\n        Factory method to create and initialize a classifier.\n        Use this instead of constructor since we need async initialization.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_agent\\workflows\\router\\router_llm_openai.py",
            "decorator": [
                "classmethod"
            ]
        }
    ]
}