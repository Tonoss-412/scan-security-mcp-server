{
    "tools": [
        {
            "name": "validate_variables_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "validate_variables_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "validate_variables_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "validate_variables_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "validate_extra_vars_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "validate_extra_vars_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "validate_extra_vars_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "validate_inputs_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "validate_inputs_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "list_inventories",
            "description": "List all inventories.\n    \n    Args:\n        page_size: Maximum number of results to return\n        page: Page number to retrieve\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "page_size": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number to retrieve"
                    }
                },
                "required": [
                    "page_size",
                    "page"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_inventory",
            "description": "Get details about a specific inventory.\n    \n    Args:\n        inventory_id: ID of the inventory\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "inventory_id": {
                        "type": "string",
                        "description": "ID of the inventory"
                    }
                },
                "required": [
                    "inventory_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_inventory",
            "description": "Create a new inventory.\n    \n    Args:\n        name: Name of the inventory\n        organization_id: ID of the organization\n        description: Description of the inventory\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the inventory"
                    },
                    "organization_id": {
                        "type": "string",
                        "description": "ID of the organization"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the inventory"
                    }
                },
                "required": [
                    "name",
                    "organization_id",
                    "description"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_inventory",
            "description": "Update an existing inventory.\n    \n    Args:\n        inventory_id: ID of the inventory\n        name: New name for the inventory\n        description: New description for the inventory\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "inventory_id": {
                        "type": "string",
                        "description": "ID of the inventory"
                    },
                    "name": {
                        "type": "string",
                        "description": "New name for the inventory"
                    },
                    "description": {
                        "type": "string",
                        "description": "New description for the inventory"
                    }
                },
                "required": [
                    "inventory_id",
                    "name",
                    "description"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_inventory",
            "description": "Delete an inventory.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_hosts",
            "description": "List hosts, optionally filtered by inventory.\n    \n    Args:\n        inventory_id: Optional ID of inventory to filter hosts\n        page_size: Maximum number of results to return\n        page: Page number to retrieve\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "inventory_id": {
                        "type": "string",
                        "description": "Optional ID of inventory to filter hosts"
                    },
                    "page_size": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number to retrieve"
                    }
                },
                "required": [
                    "inventory_id",
                    "page_size",
                    "page"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_host",
            "description": "Get details about a specific host.\n    \n    Args:\n        host_id: ID of the host\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "host_id": {
                        "type": "string",
                        "description": "ID of the host"
                    }
                },
                "required": [
                    "host_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_host",
            "description": "Create a new host in an inventory.\n    \n    Args:\n        name: Name or IP address of the host\n        inventory_id: ID of the inventory to add the host to\n        variables: JSON string of host variables\n        description: Description of the host\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name or IP address of the host"
                    },
                    "inventory_id": {
                        "type": "string",
                        "description": "ID of the inventory to add the host to"
                    },
                    "variables": {
                        "type": "string",
                        "description": "JSON string of host variables"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the host"
                    }
                },
                "required": [
                    "name",
                    "inventory_id",
                    "variables",
                    "description"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_host",
            "description": "Update an existing host.\n    \n    Args:\n        host_id: ID of the host\n        name: New name for the host\n        variables: JSON string of host variables\n        description: New description for the host\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "host_id": {
                        "type": "string",
                        "description": "ID of the host"
                    },
                    "name": {
                        "type": "string",
                        "description": "New name for the host"
                    },
                    "variables": {
                        "type": "string",
                        "description": "JSON string of host variables"
                    },
                    "description": {
                        "type": "string",
                        "description": "New description for the host"
                    }
                },
                "required": [
                    "host_id",
                    "name",
                    "variables",
                    "description"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_host",
            "description": "Delete a host.\n    \n    Args:\n        host_id: ID of the host\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "host_id": {
                        "type": "string",
                        "description": "ID of the host"
                    }
                },
                "required": [
                    "host_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_groups",
            "description": "List groups in an inventory.\n    \n    Args:\n        inventory_id: ID of the inventory\n        limit: Maximum number of results to return\n        offset: Number of results to skip\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "inventory_id": {
                        "type": "string",
                        "description": "ID of the inventory"
                    },
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "offset": {
                        "type": "string",
                        "description": "Number of results to skip"
                    }
                },
                "required": [
                    "inventory_id",
                    "limit",
                    "offset"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_group",
            "description": "Get details about a specific group.\n    \n    Args:\n        group_id: ID of the group\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "group_id": {
                        "type": "string",
                        "description": "ID of the group"
                    }
                },
                "required": [
                    "group_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_group",
            "description": "Create a new group in an inventory.\n    \n    Args:\n        name: Name of the group\n        inventory_id: ID of the inventory to add the group to\n        variables: JSON string of group variables\n        description: Description of the group\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the group"
                    },
                    "inventory_id": {
                        "type": "string",
                        "description": "ID of the inventory to add the group to"
                    },
                    "variables": {
                        "type": "string",
                        "description": "JSON string of group variables"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the group"
                    }
                },
                "required": [
                    "name",
                    "inventory_id",
                    "variables",
                    "description"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_group",
            "description": "Update an existing group.\n    \n    Args:\n        group_id: ID of the group\n        name: New name for the group\n        variables: JSON string of group variables\n        description: New description for the group\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "group_id": {
                        "type": "string",
                        "description": "ID of the group"
                    },
                    "name": {
                        "type": "string",
                        "description": "New name for the group"
                    },
                    "variables": {
                        "type": "string",
                        "description": "JSON string of group variables"
                    },
                    "description": {
                        "type": "string",
                        "description": "New description for the group"
                    }
                },
                "required": [
                    "group_id",
                    "name",
                    "variables",
                    "description"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_group",
            "description": "Delete a group.\n    \n    Args:\n        group_id: ID of the group\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "group_id": {
                        "type": "string",
                        "description": "ID of the group"
                    }
                },
                "required": [
                    "group_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "add_host_to_group",
            "description": "Add a host to a group.\n    \n    Args:\n        group_id: ID of the group\n        host_id: ID of the host\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "group_id": {
                        "type": "string",
                        "description": "ID of the group"
                    },
                    "host_id": {
                        "type": "string",
                        "description": "ID of the host"
                    }
                },
                "required": [
                    "group_id",
                    "host_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "remove_host_from_group",
            "description": "Remove a host from a group.\n    \n    Args:\n        group_id: ID of the group\n        host_id: ID of the host\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "group_id": {
                        "type": "string",
                        "description": "ID of the group"
                    },
                    "host_id": {
                        "type": "string",
                        "description": "ID of the host"
                    }
                },
                "required": [
                    "group_id",
                    "host_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_job_templates",
            "description": "List all job templates.\n    \n    Args:\n        page_size: Maximum number of results to return\n        page: Page number to retrieve\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "page_size": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number to retrieve"
                    }
                },
                "required": [
                    "page_size",
                    "page"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_job_template",
            "description": "Get details about a specific job template.\n    \n    Args:\n        template_id: ID of the job template\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "template_id": {
                        "type": "string",
                        "description": "ID of the job template"
                    }
                },
                "required": [
                    "template_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_job_template",
            "description": "Create a new job template.\n    \n    Args:\n        name: Name of the job template\n        inventory_id: ID of the inventory\n        project_id: ID of the project\n        playbook: Name of the playbook (e.g., \"playbook.yml\")\n        credential_id: Optional ID of the credential\n        description: Description of the job template\n        extra_vars: JSON string of extra variables\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the job template"
                    },
                    "inventory_id": {
                        "type": "string",
                        "description": "ID of the inventory"
                    },
                    "project_id": {
                        "type": "string",
                        "description": "ID of the project"
                    },
                    "playbook": {
                        "type": "string",
                        "description": "Name of the playbook (e.g., \"playbook.yml\")"
                    },
                    "credential_id": {
                        "type": "string",
                        "description": "Optional ID of the credential"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the job template"
                    },
                    "extra_vars": {
                        "type": "string",
                        "description": "JSON string of extra variables"
                    }
                },
                "required": [
                    "name",
                    "inventory_id",
                    "project_id",
                    "playbook",
                    "credential_id",
                    "description",
                    "extra_vars"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_job_template",
            "description": "Update an existing job template.\n    \n    Args:\n        template_id: ID of the job template\n        name: New name for the job template\n        inventory_id: New inventory ID\n        playbook: New playbook name\n        description: New description\n        extra_vars: JSON string of extra variables\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "template_id": {
                        "type": "string",
                        "description": "ID of the job template"
                    },
                    "name": {
                        "type": "string",
                        "description": "New name for the job template"
                    },
                    "inventory_id": {
                        "type": "string",
                        "description": "New inventory ID"
                    },
                    "playbook": {
                        "type": "string",
                        "description": "New playbook name"
                    },
                    "description": {
                        "type": "string",
                        "description": "New description"
                    },
                    "extra_vars": {
                        "type": "string",
                        "description": "JSON string of extra variables"
                    }
                },
                "required": [
                    "template_id",
                    "name",
                    "inventory_id",
                    "playbook",
                    "description",
                    "extra_vars"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_job_template",
            "description": "Delete a job template.\n    \n    Args:\n        template_id: ID of the job template\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "template_id": {
                        "type": "string",
                        "description": "ID of the job template"
                    }
                },
                "required": [
                    "template_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "launch_job",
            "description": "Launch a job from a job template.\n    \n    Args:\n        template_id: ID of the job template\n        extra_vars: JSON string of extra variables to override the template's variables\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "template_id": {
                        "type": "string",
                        "description": "ID of the job template"
                    },
                    "extra_vars": {
                        "type": "string",
                        "description": "JSON string of extra variables to override the template's variables"
                    }
                },
                "required": [
                    "template_id",
                    "extra_vars"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_jobs",
            "description": "List all jobs, optionally filtered by status.\n    \n    Args:\n        status: Filter by job status (pending, waiting, running, successful, failed, canceled)\n        page_size: Maximum number of results to return\n        page: Page number to retrieve\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Filter by job status (pending, waiting, running, successful, failed, canceled)"
                    },
                    "page_size": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number to retrieve"
                    }
                },
                "required": [
                    "status",
                    "page_size",
                    "page"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_job",
            "description": "Get details about a specific job.\n    \n    Args:\n        job_id: ID of the job\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "job_id": {
                        "type": "string",
                        "description": "ID of the job"
                    }
                },
                "required": [
                    "job_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "cancel_job",
            "description": "Cancel a running job.\n    \n    Args:\n        job_id: ID of the job\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "job_id": {
                        "type": "string",
                        "description": "ID of the job"
                    }
                },
                "required": [
                    "job_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_job_events",
            "description": "Get events for a specific job.\n    \n    Args:\n        job_id: ID of the job\n        limit: Maximum number of results to return\n        offset: Number of results to skip\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "job_id": {
                        "type": "string",
                        "description": "ID of the job"
                    },
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "offset": {
                        "type": "string",
                        "description": "Number of results to skip"
                    }
                },
                "required": [
                    "job_id",
                    "limit",
                    "offset"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_job_stdout",
            "description": "Get the standard output of a job.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_projects",
            "description": "List all projects.\n    \n    Args:\n        page_size: Maximum number of results to return\n        page: Page number to retrieve\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "page_size": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number to retrieve"
                    }
                },
                "required": [
                    "page_size",
                    "page"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_project",
            "description": "Get details about a specific project.\n    \n    Args:\n        project_id: ID of the project\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "ID of the project"
                    }
                },
                "required": [
                    "project_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_project",
            "description": "Create a new project.\n    \n    Args:\n        name: Name of the project\n        organization_id: ID of the organization\n        scm_type: SCM type (git, hg, svn, manual)\n        scm_url: URL for the repository\n        scm_branch: Branch/tag/commit to checkout\n        credential_id: ID of the credential for SCM access\n        description: Description of the project\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the project"
                    },
                    "organization_id": {
                        "type": "string",
                        "description": "ID of the organization"
                    },
                    "scm_type": {
                        "type": "string",
                        "description": "SCM type (git, hg, svn, manual)"
                    },
                    "scm_url": {
                        "type": "string",
                        "description": "URL for the repository"
                    },
                    "scm_branch": {
                        "type": "string",
                        "description": "Branch/tag/commit to checkout"
                    },
                    "credential_id": {
                        "type": "string",
                        "description": "ID of the credential for SCM access"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the project"
                    }
                },
                "required": [
                    "name",
                    "organization_id",
                    "scm_type",
                    "scm_url",
                    "scm_branch",
                    "credential_id",
                    "description"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_project",
            "description": "Update an existing project.\n    \n    Args:\n        project_id: ID of the project\n        name: New name for the project\n        scm_type: New SCM type (git, hg, svn, manual)\n        scm_url: New URL for the repository\n        scm_branch: New branch/tag/commit to checkout\n        description: New description\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "ID of the project"
                    },
                    "name": {
                        "type": "string",
                        "description": "New name for the project"
                    },
                    "scm_type": {
                        "type": "string",
                        "description": "New SCM type (git, hg, svn, manual)"
                    },
                    "scm_url": {
                        "type": "string",
                        "description": "New URL for the repository"
                    },
                    "scm_branch": {
                        "type": "string",
                        "description": "New branch/tag/commit to checkout"
                    },
                    "description": {
                        "type": "string",
                        "description": "New description"
                    }
                },
                "required": [
                    "project_id",
                    "name",
                    "scm_type",
                    "scm_url",
                    "scm_branch",
                    "description"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_project",
            "description": "Delete a project.\n    \n    Args:\n        project_id: ID of the project\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "ID of the project"
                    }
                },
                "required": [
                    "project_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "sync_project",
            "description": "Sync a project with its SCM source.\n    \n    Args:\n        project_id: ID of the project\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "ID of the project"
                    }
                },
                "required": [
                    "project_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_credentials",
            "description": "List all credentials.\n    \n    Args:\n        page_size: Maximum number of results to return\n        page: Page number to retrieve\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "page_size": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number to retrieve"
                    }
                },
                "required": [
                    "page_size",
                    "page"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_credential",
            "description": "Get details about a specific credential.\n    \n    Args:\n        credential_id: ID of the credential\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "credential_id": {
                        "type": "string",
                        "description": "ID of the credential"
                    }
                },
                "required": [
                    "credential_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_credential_types",
            "description": "List all credential types.\n    \n    Args:\n        limit: Maximum number of results to return\n        offset: Number of results to skip\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "offset": {
                        "type": "string",
                        "description": "Number of results to skip"
                    }
                },
                "required": [
                    "limit",
                    "offset"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_credential",
            "description": "Create a new credential.\n    \n    Args:\n        name: Name of the credential\n        credential_type_id: ID of the credential type\n        organization_id: ID of the organization\n        inputs: JSON string of credential inputs (e.g., username, password)\n        description: Description of the credential\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the credential"
                    },
                    "credential_type_id": {
                        "type": "string",
                        "description": "ID of the credential type"
                    },
                    "organization_id": {
                        "type": "string",
                        "description": "ID of the organization"
                    },
                    "inputs": {
                        "type": "string",
                        "description": "JSON string of credential inputs (e.g., username, password)"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the credential"
                    }
                },
                "required": [
                    "name",
                    "credential_type_id",
                    "organization_id",
                    "inputs",
                    "description"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_credential",
            "description": "Update an existing credential.\n    \n    Args:\n        credential_id: ID of the credential\n        name: New name for the credential\n        inputs: JSON string of credential inputs\n        description: New description\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "credential_id": {
                        "type": "string",
                        "description": "ID of the credential"
                    },
                    "name": {
                        "type": "string",
                        "description": "New name for the credential"
                    },
                    "inputs": {
                        "type": "string",
                        "description": "JSON string of credential inputs"
                    },
                    "description": {
                        "type": "string",
                        "description": "New description"
                    }
                },
                "required": [
                    "credential_id",
                    "name",
                    "inputs",
                    "description"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_credential",
            "description": "Delete a credential.\n    \n    Args:\n        credential_id: ID of the credential\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "credential_id": {
                        "type": "string",
                        "description": "ID of the credential"
                    }
                },
                "required": [
                    "credential_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_organizations",
            "description": "List all organizations.\n    \n    Args:\n        page_size: Maximum number of results to return\n        page: Page number to retrieve\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "page_size": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number to retrieve"
                    }
                },
                "required": [
                    "page_size",
                    "page"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_organization",
            "description": "Get details about a specific organization.\n    \n    Args:\n        organization_id: ID of the organization\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "organization_id": {
                        "type": "string",
                        "description": "ID of the organization"
                    }
                },
                "required": [
                    "organization_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_organization",
            "description": "Create a new organization.\n    \n    Args:\n        name: Name of the organization\n        description: Description of the organization\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the organization"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the organization"
                    }
                },
                "required": [
                    "name",
                    "description"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_organization",
            "description": "Update an existing organization.\n    \n    Args:\n        organization_id: ID of the organization\n        name: New name for the organization\n        description: New description\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "organization_id": {
                        "type": "string",
                        "description": "ID of the organization"
                    },
                    "name": {
                        "type": "string",
                        "description": "New name for the organization"
                    },
                    "description": {
                        "type": "string",
                        "description": "New description"
                    }
                },
                "required": [
                    "organization_id",
                    "name",
                    "description"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_organization",
            "description": "Delete an organization.\n    \n    Args:\n        organization_id: ID of the organization\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "organization_id": {
                        "type": "string",
                        "description": "ID of the organization"
                    }
                },
                "required": [
                    "organization_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_teams",
            "description": "List teams, optionally filtered by organization.\n    \n    Args:\n        organization_id: Optional ID of organization to filter teams\n        limit: Maximum number of results to return\n        offset: Number of results to skip\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "organization_id": {
                        "type": "string",
                        "description": "Optional ID of organization to filter teams"
                    },
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "offset": {
                        "type": "string",
                        "description": "Number of results to skip"
                    }
                },
                "required": [
                    "organization_id",
                    "limit",
                    "offset"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_team",
            "description": "Get details about a specific team.\n    \n    Args:\n        team_id: ID of the team\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "team_id": {
                        "type": "string",
                        "description": "ID of the team"
                    }
                },
                "required": [
                    "team_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_team",
            "description": "Create a new team.\n    \n    Args:\n        name: Name of the team\n        organization_id: ID of the organization\n        description: Description of the team\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the team"
                    },
                    "organization_id": {
                        "type": "string",
                        "description": "ID of the organization"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the team"
                    }
                },
                "required": [
                    "name",
                    "organization_id",
                    "description"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_team",
            "description": "Update an existing team.\n    \n    Args:\n        team_id: ID of the team\n        name: New name for the team\n        description: New description\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "team_id": {
                        "type": "string",
                        "description": "ID of the team"
                    },
                    "name": {
                        "type": "string",
                        "description": "New name for the team"
                    },
                    "description": {
                        "type": "string",
                        "description": "New description"
                    }
                },
                "required": [
                    "team_id",
                    "name",
                    "description"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_team",
            "description": "Delete a team.\n    \n    Args:\n        team_id: ID of the team\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "team_id": {
                        "type": "string",
                        "description": "ID of the team"
                    }
                },
                "required": [
                    "team_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_users",
            "description": "List all users.\n    \n    Args:\n        limit: Maximum number of results to return\n        offset: Number of results to skip\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "offset": {
                        "type": "string",
                        "description": "Number of results to skip"
                    }
                },
                "required": [
                    "limit",
                    "offset"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_user",
            "description": "Get details about a specific user.\n    \n    Args:\n        user_id: ID of the user\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "ID of the user"
                    }
                },
                "required": [
                    "user_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_user",
            "description": "Create a new user.\n    \n    Args:\n        username: Username for the new user\n        password: Password for the new user\n        first_name: First name of the user\n        last_name: Last name of the user\n        email: Email address of the user\n        is_superuser: Whether the user should be a superuser\n        is_system_auditor: Whether the user should be a system auditor\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Username for the new user"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the new user"
                    },
                    "first_name": {
                        "type": "string",
                        "description": "First name of the user"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "Last name of the user"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the user"
                    },
                    "is_superuser": {
                        "type": "string",
                        "description": "Whether the user should be a superuser"
                    },
                    "is_system_auditor": {
                        "type": "string",
                        "description": "Whether the user should be a system auditor"
                    }
                },
                "required": [
                    "username",
                    "password",
                    "first_name",
                    "last_name",
                    "email",
                    "is_superuser",
                    "is_system_auditor"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_user",
            "description": "Update an existing user.\n    \n    Args:\n        user_id: ID of the user\n        username: New username\n        password: New password\n        first_name: New first name\n        last_name: New last name\n        email: New email address\n        is_superuser: Whether the user should be a superuser\n        is_system_auditor: Whether the user should be a system auditor\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "ID of the user"
                    },
                    "username": {
                        "type": "string",
                        "description": "New username"
                    },
                    "password": {
                        "type": "string",
                        "description": "New password"
                    },
                    "first_name": {
                        "type": "string",
                        "description": "New first name"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "New last name"
                    },
                    "email": {
                        "type": "string",
                        "description": "New email address"
                    },
                    "is_superuser": {
                        "type": "string",
                        "description": "Whether the user should be a superuser"
                    },
                    "is_system_auditor": {
                        "type": "string",
                        "description": "Whether the user should be a system auditor"
                    }
                },
                "required": [
                    "user_id",
                    "username",
                    "password",
                    "first_name",
                    "last_name",
                    "email",
                    "is_superuser",
                    "is_system_auditor"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_user",
            "description": "Delete a user.\n    \n    Args:\n        user_id: ID of the user\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "ID of the user"
                    }
                },
                "required": [
                    "user_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "run_ad_hoc_command",
            "description": "Run an ad hoc command.\n    \n    Args:\n        inventory_id: ID of the inventory\n        credential_id: ID of the credential\n        module_name: Module name (e.g., command, shell, ping)\n        module_args: Module arguments\n        limit: Host pattern to target\n        verbosity: Verbosity level (0-4)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "inventory_id": {
                        "type": "string",
                        "description": "ID of the inventory"
                    },
                    "credential_id": {
                        "type": "string",
                        "description": "ID of the credential"
                    },
                    "module_name": {
                        "type": "string",
                        "description": "Module name (e.g., command, shell, ping)"
                    },
                    "module_args": {
                        "type": "string",
                        "description": "Module arguments"
                    },
                    "limit": {
                        "type": "string",
                        "description": "Host pattern to target"
                    },
                    "verbosity": {
                        "type": "string",
                        "description": "Verbosity level (0-4)"
                    }
                },
                "required": [
                    "inventory_id",
                    "credential_id",
                    "module_name",
                    "module_args",
                    "limit",
                    "verbosity"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_ad_hoc_command",
            "description": "Get details about a specific ad hoc command.\n    \n    Args:\n        command_id: ID of the ad hoc command\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "command_id": {
                        "type": "string",
                        "description": "ID of the ad hoc command"
                    }
                },
                "required": [
                    "command_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "cancel_ad_hoc_command",
            "description": "Cancel a running ad hoc command.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_workflow_templates",
            "description": "List all workflow templates.\n    \n    Args:\n        limit: Maximum number of results to return\n        offset: Number of results to skip\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "offset": {
                        "type": "string",
                        "description": "Number of results to skip"
                    }
                },
                "required": [
                    "limit",
                    "offset"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_workflow_template",
            "description": "Get details about a specific workflow template.\n    \n    Args:\n        template_id: ID of the workflow template\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "template_id": {
                        "type": "string",
                        "description": "ID of the workflow template"
                    }
                },
                "required": [
                    "template_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "launch_workflow",
            "description": "Launch a workflow from a workflow template.\n    \n    Args:\n        template_id: ID of the workflow template\n        extra_vars: JSON string of extra variables to override the template's variables\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "template_id": {
                        "type": "string",
                        "description": "ID of the workflow template"
                    },
                    "extra_vars": {
                        "type": "string",
                        "description": "JSON string of extra variables to override the template's variables"
                    }
                },
                "required": [
                    "template_id",
                    "extra_vars"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_workflow_jobs",
            "description": "List all workflow jobs, optionally filtered by status.\n    \n    Args:\n        status: Filter by job status (pending, waiting, running, successful, failed, canceled)\n        limit: Maximum number of results to return\n        offset: Number of results to skip\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Filter by job status (pending, waiting, running, successful, failed, canceled)"
                    },
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "offset": {
                        "type": "string",
                        "description": "Number of results to skip"
                    }
                },
                "required": [
                    "status",
                    "limit",
                    "offset"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_workflow_job",
            "description": "Get details about a specific workflow job.\n    \n    Args:\n        job_id: ID of the workflow job\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "job_id": {
                        "type": "string",
                        "description": "ID of the workflow job"
                    }
                },
                "required": [
                    "job_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "cancel_workflow_job",
            "description": "Cancel a running workflow job.\n    \n    Args:\n        job_id: ID of the workflow job\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "job_id": {
                        "type": "string",
                        "description": "ID of the workflow job"
                    }
                },
                "required": [
                    "job_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_schedules",
            "description": "List schedules, optionally filtered by job template.\n    \n    Args:\n        unified_job_template_id: Optional ID of job or workflow template to filter schedules\n        limit: Maximum number of results to return\n        offset: Number of results to skip\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "unified_job_template_id": {
                        "type": "string",
                        "description": "Optional ID of job or workflow template to filter schedules"
                    },
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "offset": {
                        "type": "string",
                        "description": "Number of results to skip"
                    }
                },
                "required": [
                    "unified_job_template_id",
                    "limit",
                    "offset"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_schedule",
            "description": "Get details about a specific schedule.\n    \n    Args:\n        schedule_id: ID of the schedule\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "schedule_id": {
                        "type": "string",
                        "description": "ID of the schedule"
                    }
                },
                "required": [
                    "schedule_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_schedule",
            "description": "Create a new schedule.\n    \n    Args:\n        name: Name of the schedule\n        unified_job_template_id: ID of the job or workflow template\n        rrule: iCal recurrence rule (e.g., \"DTSTART:20231001T120000Z RRULE:FREQ=DAILY;INTERVAL=1\")\n        description: Description of the schedule\n        extra_data: JSON string of extra variables\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the schedule"
                    },
                    "unified_job_template_id": {
                        "type": "string",
                        "description": "ID of the job or workflow template"
                    },
                    "rrule": {
                        "type": "string",
                        "description": "iCal recurrence rule (e.g., \"DTSTART:20231001T120000Z RRULE:FREQ=DAILY;INTERVAL=1\")"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the schedule"
                    },
                    "extra_data": {
                        "type": "string",
                        "description": "JSON string of extra variables"
                    }
                },
                "required": [
                    "name",
                    "unified_job_template_id",
                    "rrule",
                    "description",
                    "extra_data"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_schedule",
            "description": "Update an existing schedule.\n    \n    Args:\n        schedule_id: ID of the schedule\n        name: New name for the schedule\n        rrule: New iCal recurrence rule\n        description: New description\n        extra_data: JSON string of extra variables\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "schedule_id": {
                        "type": "string",
                        "description": "ID of the schedule"
                    },
                    "name": {
                        "type": "string",
                        "description": "New name for the schedule"
                    },
                    "rrule": {
                        "type": "string",
                        "description": "New iCal recurrence rule"
                    },
                    "description": {
                        "type": "string",
                        "description": "New description"
                    },
                    "extra_data": {
                        "type": "string",
                        "description": "JSON string of extra variables"
                    }
                },
                "required": [
                    "schedule_id",
                    "name",
                    "rrule",
                    "description",
                    "extra_data"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_schedule",
            "description": "Delete a schedule.\n    \n    Args:\n        schedule_id: ID of the schedule\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "schedule_id": {
                        "type": "string",
                        "description": "ID of the schedule"
                    }
                },
                "required": [
                    "schedule_id"
                ]
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_ansible_version",
            "description": "Get Ansible Tower/AWX version information.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_dashboard_stats",
            "description": "Get dashboard statistics.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_metrics",
            "description": "Get system metrics.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\ansible_tower\\ansible_tower_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_applications",
            "description": "List all applications, optionally filtered by project.\n    \n    Args:\n        project: Optional project name to filter applications\n        limit: Maximum number of results to return\n        offset: Number of results to skip\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project": {
                        "type": "string",
                        "description": "Optional project name to filter applications"
                    },
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "offset": {
                        "type": "string",
                        "description": "Number of results to skip"
                    }
                },
                "required": [
                    "project",
                    "limit",
                    "offset"
                ]
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_application",
            "description": "Get details about a specific application.\n    \n    Args:\n        name: Name of the application\n        project: Optional project name for the application\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the application"
                    },
                    "project": {
                        "type": "string",
                        "description": "Optional project name for the application"
                    }
                },
                "required": [
                    "name",
                    "project"
                ]
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_application",
            "description": "Create a new application.\n    \n    Args:\n        name: Name of the application\n        project: Project name\n        repo_url: Repository URL\n        path: Path in repository\n        dest_server: Destination server\n        dest_namespace: Destination namespace\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the application"
                    },
                    "project": {
                        "type": "string",
                        "description": "Project name"
                    },
                    "repo_url": {
                        "type": "string",
                        "description": "Repository URL"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path in repository"
                    },
                    "dest_server": {
                        "type": "string",
                        "description": "Destination server"
                    },
                    "dest_namespace": {
                        "type": "string",
                        "description": "Destination namespace"
                    }
                },
                "required": [
                    "name",
                    "project",
                    "repo_url",
                    "path",
                    "dest_server",
                    "dest_namespace"
                ]
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_application",
            "description": "Delete an application.\n    \n    Args:\n        name: Name of the application\n        cascade: Whether to cascade delete resources\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the application"
                    },
                    "cascade": {
                        "type": "string",
                        "description": "Whether to cascade delete resources"
                    }
                },
                "required": [
                    "name",
                    "cascade"
                ]
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "sync_application",
            "description": "Sync an application.\n    \n    Args:\n        name: Name of the application\n        revision: Revision to sync to (defaults to HEAD)\n        prune: Whether to prune resources\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the application"
                    },
                    "revision": {
                        "type": "string",
                        "description": "Revision to sync to (defaults to HEAD)"
                    },
                    "prune": {
                        "type": "string",
                        "description": "Whether to prune resources"
                    }
                },
                "required": [
                    "name",
                    "revision",
                    "prune"
                ]
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_projects",
            "description": "List all projects.\n    \n    Args:\n        limit: Maximum number of results to return\n        offset: Number of results to skip\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "offset": {
                        "type": "string",
                        "description": "Number of results to skip"
                    }
                },
                "required": [
                    "limit",
                    "offset"
                ]
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_project",
            "description": "Get details about a specific project.\n    \n    Args:\n        name: Name of the project\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the project"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_project",
            "description": "Create a new project.\n    \n    Args:\n        name: Name of the project\n        description: Description of the project\n        source_repos: List of source repositories (defaults to [\"*\"])\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the project"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the project"
                    },
                    "source_repos": {
                        "type": "string",
                        "description": "List of source repositories (defaults to [\"*\"])"
                    }
                },
                "required": [
                    "name",
                    "description",
                    "source_repos"
                ]
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_project",
            "description": "Delete a project.\n    \n    Args:\n        name: Name of the project\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the project"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_repositories",
            "description": "List all repositories.\n    \n    Args:\n        limit: Maximum number of results to return\n        offset: Number of results to skip\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "offset": {
                        "type": "string",
                        "description": "Number of results to skip"
                    }
                },
                "required": [
                    "limit",
                    "offset"
                ]
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_repository",
            "description": "Get details about a specific repository.\n    \n    Args:\n        repo_url: URL of the repository\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repo_url": {
                        "type": "string",
                        "description": "URL of the repository"
                    }
                },
                "required": [
                    "repo_url"
                ]
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_repository",
            "description": "Create a new repository.\n    \n    Args:\n        repo: Repository URL\n        username: Username for private repositories\n        password: Password for private repositories\n        ssh_private_key: SSH private key for private repositories\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repo": {
                        "type": "string",
                        "description": "Repository URL"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username for private repositories"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for private repositories"
                    },
                    "ssh_private_key": {
                        "type": "string",
                        "description": "SSH private key for private repositories"
                    }
                },
                "required": [
                    "repo",
                    "username",
                    "password",
                    "ssh_private_key"
                ]
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_repository",
            "description": "Delete a repository.\n    \n    Args:\n        repo_url: URL of the repository\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repo_url": {
                        "type": "string",
                        "description": "URL of the repository"
                    }
                },
                "required": [
                    "repo_url"
                ]
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_clusters",
            "description": "List all clusters.\n    \n    Args:\n        limit: Maximum number of results to return\n        offset: Number of results to skip\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    },
                    "offset": {
                        "type": "string",
                        "description": "Number of results to skip"
                    }
                },
                "required": [
                    "limit",
                    "offset"
                ]
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_cluster",
            "description": "Get details about a specific cluster.\n    \n    Args:\n        server: Server URL of the cluster\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "server": {
                        "type": "string",
                        "description": "Server URL of the cluster"
                    }
                },
                "required": [
                    "server"
                ]
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_version",
            "description": "Get Argo CD version information.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_settings",
            "description": "Get Argo CD settings.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\argocd\\argocd_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "deploy_artifact",
            "description": "Deploy an artifact to a specified repository.\n    \n    Args:\n        repo_key: The repository key\n        item_path: The path within the repository\n        file_path: The local file path to upload\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repo_key": {
                        "type": "string",
                        "description": "The repository key"
                    },
                    "item_path": {
                        "type": "string",
                        "description": "The path within the repository"
                    },
                    "file_path": {
                        "type": "string",
                        "description": "The local file path to upload"
                    }
                },
                "required": [
                    "repo_key",
                    "item_path",
                    "file_path"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_artifact_info",
            "description": "Retrieve information about a specific artifact.\n    \n    Args:\n        repo_key: The repository key\n        item_path: The path within the repository\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repo_key": {
                        "type": "string",
                        "description": "The repository key"
                    },
                    "item_path": {
                        "type": "string",
                        "description": "The path within the repository"
                    }
                },
                "required": [
                    "repo_key",
                    "item_path"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_artifact",
            "description": "Delete an artifact from a repository.\n    \n    Args:\n        repo_key: The repository key\n        item_path: The path within the repository\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repo_key": {
                        "type": "string",
                        "description": "The repository key"
                    },
                    "item_path": {
                        "type": "string",
                        "description": "The path within the repository"
                    }
                },
                "required": [
                    "repo_key",
                    "item_path"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "search_artifacts",
            "description": "Search for artifacts based on name, repository, or properties.\n    \n    Args:\n        name: The artifact name pattern (e.g., *.jar)\n        repos: The repository to search in\n        properties: Properties to filter by\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The artifact name pattern (e.g., *.jar)"
                    },
                    "repos": {
                        "type": "string",
                        "description": "The repository to search in"
                    },
                    "properties": {
                        "type": "string",
                        "description": "Properties to filter by"
                    }
                },
                "required": [
                    "name",
                    "repos",
                    "properties"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "advanced_search",
            "description": "Utilize Artifactory Query Language (AQL) for complex searches.\n    \n    Args:\n        query: The AQL query string\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "The AQL query string"
                    }
                },
                "required": [
                    "query"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_repository",
            "description": "Create a new repository with specified type and package type.\n    \n    Args:\n        repo_key: The repository key\n        repo_type: The repository type (local, remote, virtual)\n        package_type: The package type (maven, npm, docker, etc.)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repo_key": {
                        "type": "string",
                        "description": "The repository key"
                    },
                    "repo_type": {
                        "type": "string",
                        "description": "The repository type (local, remote, virtual)"
                    },
                    "package_type": {
                        "type": "string",
                        "description": "The package type (maven, npm, docker, etc.)"
                    }
                },
                "required": [
                    "repo_key",
                    "repo_type",
                    "package_type"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_repository",
            "description": "Retrieve information about a specific repository.\n    \n    Args:\n        repo_key: The repository key\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repo_key": {
                        "type": "string",
                        "description": "The repository key"
                    }
                },
                "required": [
                    "repo_key"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_repositories",
            "description": "List all repositories, optionally filtered by type.\n    \n    Args:\n        repo_type: Optional repository type filter (local, remote, virtual, federated)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repo_type": {
                        "type": "string",
                        "description": "Optional repository type filter (local, remote, virtual, federated)"
                    }
                },
                "required": [
                    "repo_type"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_repository",
            "description": "Delete a specified repository.\n    \n    Args:\n        repo_key: The repository key to delete\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repo_key": {
                        "type": "string",
                        "description": "The repository key to delete"
                    }
                },
                "required": [
                    "repo_key"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_federated_repository",
            "description": "Manage federated repositories for distributed environments.\n    \n    Args:\n        repo_key: The repository key\n        package_type: Package type (maven, npm, docker, etc.)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repo_key": {
                        "type": "string",
                        "description": "The repository key"
                    },
                    "package_type": {
                        "type": "string",
                        "description": "Package type (maven, npm, docker, etc.)"
                    }
                },
                "required": [
                    "repo_key",
                    "package_type"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "setup_repository_replication",
            "description": "Manage replication between repositories for redundancy.\n    \n    Args:\n        repo_key: The source repository key\n        target_url: The target repository URL\n        username: Username for authentication\n        password: Password for authentication\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repo_key": {
                        "type": "string",
                        "description": "The source repository key"
                    },
                    "target_url": {
                        "type": "string",
                        "description": "The target repository URL"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username for authentication"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for authentication"
                    }
                },
                "required": [
                    "repo_key",
                    "target_url",
                    "username",
                    "password"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_user",
            "description": "Create a new user with specified details.\n    \n    Args:\n        username: The username\n        email: User's email address\n        password: User's password\n        admin: Whether the user should have admin privileges\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username"
                    },
                    "email": {
                        "type": "string",
                        "description": "User's email address"
                    },
                    "password": {
                        "type": "string",
                        "description": "User's password"
                    },
                    "admin": {
                        "type": "string",
                        "description": "Whether the user should have admin privileges"
                    }
                },
                "required": [
                    "username",
                    "email",
                    "password",
                    "admin"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_user",
            "description": "Retrieve information about a specific user.\n    \n    Args:\n        username: The username\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username"
                    }
                },
                "required": [
                    "username"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_users",
            "description": "List all users.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_user",
            "description": "Update an existing user's details.\n    \n    Args:\n        username: The username\n        email: New email address (optional)\n        password: New password (optional)\n        admin: New admin status (optional)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username"
                    },
                    "email": {
                        "type": "string",
                        "description": "New email address (optional)"
                    },
                    "password": {
                        "type": "string",
                        "description": "New password (optional)"
                    },
                    "admin": {
                        "type": "string",
                        "description": "New admin status (optional)"
                    }
                },
                "required": [
                    "username",
                    "email",
                    "password",
                    "admin"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_user",
            "description": "Delete a specified user.\n    \n    Args:\n        username: The username\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username"
                    }
                },
                "required": [
                    "username"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_system_info",
            "description": "Retrieve general system information.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_system_health",
            "description": "Check the health of the system.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_system_configuration",
            "description": "Retrieve system configuration (requires admin privileges).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_storage_info",
            "description": "Retrieve storage information.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_version",
            "description": "Retrieve Artifactory version information.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "integrate_build",
            "description": "Integrate with build tools like Maven or Gradle to capture build metadata.\n    \n    Args:\n        build_name: The name of the build\n        build_number: The build number\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "build_name": {
                        "type": "string",
                        "description": "The name of the build"
                    },
                    "build_number": {
                        "type": "string",
                        "description": "The build number"
                    }
                },
                "required": [
                    "build_name",
                    "build_number"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_webhook",
            "description": "Manage webhooks for real-time notifications on system events.\n    \n    Args:\n        name: The webhook name\n        url: The URL to notify\n        events: List of event types to trigger the webhook\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The webhook name"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to notify"
                    },
                    "events": {
                        "type": "string",
                        "description": "List of event types to trigger the webhook"
                    }
                },
                "required": [
                    "name",
                    "url",
                    "events"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "manage_permissions",
            "description": "Manage roles and permissions for fine-grained access control.\n    \n    Args:\n        name: The permission name\n        repositories: List of repository keys\n        principals: List of principal names\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The permission name"
                    },
                    "repositories": {
                        "type": "string",
                        "description": "List of repository keys"
                    },
                    "principals": {
                        "type": "string",
                        "description": "List of principal names"
                    }
                },
                "required": [
                    "name",
                    "repositories",
                    "principals"
                ]
            },
            "file": "servers\\artifactory\\artifactory_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_s3_buckets",
            "description": "List all S3 buckets in the AWS account.\n    \n    Args:\n        region: Optional AWS region to limit the search\n    \n    Returns:\n        JSON string with bucket information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "Optional AWS region to limit the search"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "region",
                    "Returns"
                ]
            },
            "file": "servers\\aws\\aws_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_s3_objects",
            "description": "List objects in an S3 bucket.\n    \n    Args:\n        bucket_name: Name of the S3 bucket\n        prefix: Optional prefix to filter objects\n        max_items: Maximum number of items to return\n    \n    Returns:\n        JSON string with object information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "bucket_name": {
                        "type": "string",
                        "description": "Name of the S3 bucket"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "Optional prefix to filter objects"
                    },
                    "max_items": {
                        "type": "string",
                        "description": "Maximum number of items to return"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "bucket_name",
                    "prefix",
                    "max_items",
                    "Returns"
                ]
            },
            "file": "servers\\aws\\aws_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_ec2_instances",
            "description": "List EC2 instances with their details.\n    \n    Args:\n        region: Optional AWS region\n        state: Optional instance state filter (running, stopped, etc.)\n    \n    Returns:\n        JSON string with EC2 instance information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "Optional AWS region"
                    },
                    "state": {
                        "type": "string",
                        "description": "Optional instance state filter (running, stopped, etc.)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "region",
                    "state",
                    "Returns"
                ]
            },
            "file": "servers\\aws\\aws_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_ec2_amis",
            "description": "List available AMIs (Amazon Machine Images).\n    \n    Args:\n        owners: List of AMI owners (default: self)\n        region: Optional AWS region\n    \n    Returns:\n        JSON string with AMI information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "owners": {
                        "type": "string",
                        "description": "List of AMI owners (default: self)"
                    },
                    "region": {
                        "type": "string",
                        "description": "Optional AWS region"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "owners",
                    "region",
                    "Returns"
                ]
            },
            "file": "servers\\aws\\aws_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "start_ec2_instance",
            "description": "Start an EC2 instance.\n    \n    Args:\n        instance_id: ID of the EC2 instance\n        region: Optional AWS region\n    \n    Returns:\n        JSON string with result information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "instance_id": {
                        "type": "string",
                        "description": "ID of the EC2 instance"
                    },
                    "region": {
                        "type": "string",
                        "description": "Optional AWS region"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "instance_id",
                    "region",
                    "Returns"
                ]
            },
            "file": "servers\\aws\\aws_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "stop_ec2_instance",
            "description": "Stop an EC2 instance.\n    \n    Args:\n        instance_id: ID of the EC2 instance\n        region: Optional AWS region\n    \n    Returns:\n        JSON string with result information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "instance_id": {
                        "type": "string",
                        "description": "ID of the EC2 instance"
                    },
                    "region": {
                        "type": "string",
                        "description": "Optional AWS region"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "instance_id",
                    "region",
                    "Returns"
                ]
            },
            "file": "servers\\aws\\aws_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_ec2_instance",
            "description": "Launch a new EC2 instance.\n    \n    Args:\n        ami_id: ID of the AMI to use\n        instance_type: EC2 instance type (default: t2.micro)\n        key_name: Optional SSH key pair name\n        security_group_ids: Optional list of security group IDs\n        subnet_id: Optional subnet ID\n        name: Optional name tag for the instance\n        region: Optional AWS region\n    \n    Returns:\n        JSON string with instance information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ami_id": {
                        "type": "string",
                        "description": "ID of the AMI to use"
                    },
                    "instance_type": {
                        "type": "string",
                        "description": "EC2 instance type (default: t2.micro)"
                    },
                    "key_name": {
                        "type": "string",
                        "description": "Optional SSH key pair name"
                    },
                    "security_group_ids": {
                        "type": "string",
                        "description": "Optional list of security group IDs"
                    },
                    "subnet_id": {
                        "type": "string",
                        "description": "Optional subnet ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "Optional name tag for the instance"
                    },
                    "region": {
                        "type": "string",
                        "description": "Optional AWS region"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "ami_id",
                    "instance_type",
                    "key_name",
                    "security_group_ids",
                    "subnet_id",
                    "name",
                    "region",
                    "Returns"
                ]
            },
            "file": "servers\\aws\\aws_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_security_groups",
            "description": "List EC2 security groups.\n    \n    Args:\n        region: Optional AWS region\n    \n    Returns:\n        JSON string with security group information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "Optional AWS region"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "region",
                    "Returns"
                ]
            },
            "file": "servers\\aws\\aws_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_lambda_functions",
            "description": "List all Lambda functions in the AWS account.\n    \n    Args:\n        region: Optional AWS region\n    \n    Returns:\n        JSON string with Lambda function information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "Optional AWS region"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "region",
                    "Returns"
                ]
            },
            "file": "servers\\aws\\aws_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "run_aws_code",
            "description": "Run Python code that interacts with AWS services.\n    \n    Args:\n        code: Python code to run (using boto3)\n        imports: Optional import statements to include\n    \n    Returns:\n        Output from the executed code\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Python code to run (using boto3)"
                    },
                    "imports": {
                        "type": "string",
                        "description": "Optional import statements to include"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "imports",
                    "Returns"
                ]
            },
            "file": "servers\\aws\\aws_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_aws_regions",
            "description": "Return a list of AWS regions as a resource.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\aws\\aws_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "list_instance_types",
            "description": "Return a list of common EC2 instance types.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\aws\\aws_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "list_resource_groups",
            "description": "List all resource groups in the Azure subscription.\n    \n    Args:\n        subscription_id: Optional Azure subscription ID\n    \n    Returns:\n        JSON string with resource group information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "subscription_id": {
                        "type": "string",
                        "description": "Optional Azure subscription ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "subscription_id",
                    "Returns"
                ]
            },
            "file": "servers\\azure\\azure_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_resource_group",
            "description": "Create a new resource group.\n    \n    Args:\n        name: Name of the resource group\n        location: Azure region for the resource group\n        tags: Optional tags to apply to the resource group\n        subscription_id: Optional Azure subscription ID\n    \n    Returns:\n        JSON string with resource group information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the resource group"
                    },
                    "location": {
                        "type": "string",
                        "description": "Azure region for the resource group"
                    },
                    "tags": {
                        "type": "string",
                        "description": "Optional tags to apply to the resource group"
                    },
                    "subscription_id": {
                        "type": "string",
                        "description": "Optional Azure subscription ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "location",
                    "tags",
                    "subscription_id",
                    "Returns"
                ]
            },
            "file": "servers\\azure\\azure_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_storage_accounts",
            "description": "List storage accounts in the subscription or resource group.\n    \n    Args:\n        resource_group: Optional resource group name to filter by\n        subscription_id: Optional Azure subscription ID\n    \n    Returns:\n        JSON string with storage account information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "resource_group": {
                        "type": "string",
                        "description": "Optional resource group name to filter by"
                    },
                    "subscription_id": {
                        "type": "string",
                        "description": "Optional Azure subscription ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "resource_group",
                    "subscription_id",
                    "Returns"
                ]
            },
            "file": "servers\\azure\\azure_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_storage_containers",
            "description": "List blob containers in a storage account.\n    \n    Args:\n        account_name: Name of the storage account\n        resource_group: Resource group of the storage account\n        subscription_id: Optional Azure subscription ID\n    \n    Returns:\n        JSON string with container information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_name": {
                        "type": "string",
                        "description": "Name of the storage account"
                    },
                    "resource_group": {
                        "type": "string",
                        "description": "Resource group of the storage account"
                    },
                    "subscription_id": {
                        "type": "string",
                        "description": "Optional Azure subscription ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "account_name",
                    "resource_group",
                    "subscription_id",
                    "Returns"
                ]
            },
            "file": "servers\\azure\\azure_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_storage_account",
            "description": "Create a new storage account.\n    \n    Args:\n        name: Name of the storage account (must be globally unique)\n        resource_group: Resource group for the storage account\n        location: Azure region for the storage account\n        sku: Storage account SKU (default: Standard_LRS)\n        kind: Storage account kind (default: StorageV2)\n        subscription_id: Optional Azure subscription ID\n    \n    Returns:\n        JSON string with storage account information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the storage account (must be globally unique)"
                    },
                    "resource_group": {
                        "type": "string",
                        "description": "Resource group for the storage account"
                    },
                    "location": {
                        "type": "string",
                        "description": "Azure region for the storage account"
                    },
                    "sku": {
                        "type": "string",
                        "description": "Storage account SKU (default: Standard_LRS)"
                    },
                    "kind": {
                        "type": "string",
                        "description": "Storage account kind (default: StorageV2)"
                    },
                    "subscription_id": {
                        "type": "string",
                        "description": "Optional Azure subscription ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "resource_group",
                    "location",
                    "sku",
                    "kind",
                    "subscription_id",
                    "Returns"
                ]
            },
            "file": "servers\\azure\\azure_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_virtual_machines",
            "description": "List virtual machines in the subscription or resource group.\n    \n    Args:\n        resource_group: Optional resource group name to filter by\n        subscription_id: Optional Azure subscription ID\n    \n    Returns:\n        JSON string with VM information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "resource_group": {
                        "type": "string",
                        "description": "Optional resource group name to filter by"
                    },
                    "subscription_id": {
                        "type": "string",
                        "description": "Optional Azure subscription ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "resource_group",
                    "subscription_id",
                    "Returns"
                ]
            },
            "file": "servers\\azure\\azure_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "start_virtual_machine",
            "description": "Start a virtual machine.\n    \n    Args:\n        name: Name of the VM\n        resource_group: Resource group of the VM\n        subscription_id: Optional Azure subscription ID\n    \n    Returns:\n        JSON string with result information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the VM"
                    },
                    "resource_group": {
                        "type": "string",
                        "description": "Resource group of the VM"
                    },
                    "subscription_id": {
                        "type": "string",
                        "description": "Optional Azure subscription ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "resource_group",
                    "subscription_id",
                    "Returns"
                ]
            },
            "file": "servers\\azure\\azure_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "stop_virtual_machine",
            "description": "Stop a virtual machine.\n    \n    Args:\n        name: Name of the VM\n        resource_group: Resource group of the VM\n        deallocate: Whether to deallocate the VM (default: True)\n        subscription_id: Optional Azure subscription ID\n    \n    Returns:\n        JSON string with result information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the VM"
                    },
                    "resource_group": {
                        "type": "string",
                        "description": "Resource group of the VM"
                    },
                    "deallocate": {
                        "type": "string",
                        "description": "Whether to deallocate the VM (default: True)"
                    },
                    "subscription_id": {
                        "type": "string",
                        "description": "Optional Azure subscription ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "resource_group",
                    "deallocate",
                    "subscription_id",
                    "Returns"
                ]
            },
            "file": "servers\\azure\\azure_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_virtual_machine",
            "description": "Create a new virtual machine.\n    \n    Args:\n        name: Name for the VM\n        resource_group: Resource group for the VM\n        location: Azure region for the VM\n        vm_size: VM size (default: Standard_DS1_v2)\n        admin_username: Admin username for the VM\n        image_reference: Dict containing publisher, offer, sku, version (default: Ubuntu Server)\n        generate_ssh_keys: Whether to generate SSH keys (default: True)\n        subscription_id: Optional Azure subscription ID\n    \n    Returns:\n        JSON string with VM creation information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name for the VM"
                    },
                    "resource_group": {
                        "type": "string",
                        "description": "Resource group for the VM"
                    },
                    "location": {
                        "type": "string",
                        "description": "Azure region for the VM"
                    },
                    "vm_size": {
                        "type": "string",
                        "description": "VM size (default: Standard_DS1_v2)"
                    },
                    "admin_username": {
                        "type": "string",
                        "description": "Admin username for the VM"
                    },
                    "image_reference": {
                        "type": "string",
                        "description": "Dict containing publisher, offer, sku, version (default: Ubuntu Server)"
                    },
                    "generate_ssh_keys": {
                        "type": "string",
                        "description": "Whether to generate SSH keys (default: True)"
                    },
                    "subscription_id": {
                        "type": "string",
                        "description": "Optional Azure subscription ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "resource_group",
                    "location",
                    "vm_size",
                    "admin_username",
                    "image_reference",
                    "generate_ssh_keys",
                    "subscription_id",
                    "Returns"
                ]
            },
            "file": "servers\\azure\\azure_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_container_groups",
            "description": "List Azure Container Instances container groups.\n    \n    Args:\n        resource_group: Optional resource group name to filter by\n        subscription_id: Optional Azure subscription ID\n    \n    Returns:\n        JSON string with container group information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "resource_group": {
                        "type": "string",
                        "description": "Optional resource group name to filter by"
                    },
                    "subscription_id": {
                        "type": "string",
                        "description": "Optional Azure subscription ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "resource_group",
                    "subscription_id",
                    "Returns"
                ]
            },
            "file": "servers\\azure\\azure_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_app_services",
            "description": "List Azure App Services web apps.\n    \n    Args:\n        resource_group: Optional resource group name to filter by\n        subscription_id: Optional Azure subscription ID\n    \n    Returns:\n        JSON string with web app information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "resource_group": {
                        "type": "string",
                        "description": "Optional resource group name to filter by"
                    },
                    "subscription_id": {
                        "type": "string",
                        "description": "Optional Azure subscription ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "resource_group",
                    "subscription_id",
                    "Returns"
                ]
            },
            "file": "servers\\azure\\azure_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "run_azure_code",
            "description": "Run Python code that interacts with Azure services.\n    \n    Args:\n        code: Python code to run\n        imports: Optional import statements to include\n    \n    Returns:\n        Output from the executed code\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Python code to run"
                    },
                    "imports": {
                        "type": "string",
                        "description": "Optional import statements to include"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "imports",
                    "Returns"
                ]
            },
            "file": "servers\\azure\\azure_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_azure_regions",
            "description": "Return a list of Azure regions as a resource.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\azure\\azure_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "list_vm_sizes",
            "description": "Return a list of common Azure VM sizes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\azure\\azure_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "list_storage_skus",
            "description": "Return a list of Azure Storage Account SKUs.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\azure\\azure_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_current_user",
            "description": "\n    Retrieve the authenticated user's profile information.\n    \n    Returns information about the authenticated user's Bitbucket account.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_user_profile",
            "description": "\n    Fetch public profile data for a specific user account.\n    Args:\n        username: The username or UUID of the Bitbucket user.\n    Returns:\n        JSON data containing the user's public profile information.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username or UUID of the Bitbucket user."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "username",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_workspaces",
            "description": "\n    List workspaces the authenticated user has access to.\n    \n    Args:\n        role: Optional filter by role (member, owner, collaborator)\n        page: Page number for pagination\n        pagelen: Number of items per page (max 100)\n    \n    Returns:\n        JSON data containing the list of workspaces.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "role": {
                        "type": "string",
                        "description": "Optional filter by role (member, owner, collaborator)"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number for pagination"
                    },
                    "pagelen": {
                        "type": "string",
                        "description": "Number of items per page (max 100)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "role",
                    "page",
                    "pagelen",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_workspace",
            "description": "\n    Retrieves details of a specific workspace.\n    \n    Args:\n        workspace: The workspace ID (slug) to retrieve.\n    \n    Returns:\n        JSON data containing the workspace details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug) to retrieve."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_projects",
            "description": "\n    List projects in a workspace.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        page: Page number for pagination\n        pagelen: Number of items per page (max 100)\n    \n    Returns:\n        JSON data containing the list of projects.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number for pagination"
                    },
                    "pagelen": {
                        "type": "string",
                        "description": "Number of items per page (max 100)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "page",
                    "pagelen",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_project",
            "description": "\n    Create a new project in a workspace.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        name: The name of the project\n        key: Optional project key (will be auto-generated if not provided)\n        description: Optional project description\n        is_private: Whether the project is private (default True)\n    \n    Returns:\n        JSON data for the created project.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project"
                    },
                    "key": {
                        "type": "string",
                        "description": "Optional project key (will be auto-generated if not provided)"
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional project description"
                    },
                    "is_private": {
                        "type": "string",
                        "description": "Whether the project is private (default True)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "name",
                    "key",
                    "description",
                    "is_private",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_project",
            "description": "\n    Get details for a specific project.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        project_key: The project key\n    \n    Returns:\n        JSON data containing the project details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "project_key": {
                        "type": "string",
                        "description": "The project key"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "project_key",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_project",
            "description": "\n    Update project information.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        project_key: The project key\n        name: New project name (optional)\n        description: New project description (optional)\n        is_private: New private status (optional)\n    \n    Returns:\n        JSON data for the updated project.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "project_key": {
                        "type": "string",
                        "description": "The project key"
                    },
                    "name": {
                        "type": "string",
                        "description": "New project name (optional)"
                    },
                    "description": {
                        "type": "string",
                        "description": "New project description (optional)"
                    },
                    "is_private": {
                        "type": "string",
                        "description": "New private status (optional)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "project_key",
                    "name",
                    "description",
                    "is_private",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_project",
            "description": "\n    Delete a project.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        project_key: The project key\n    \n    Returns:\n        Status of the deletion operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "project_key": {
                        "type": "string",
                        "description": "The project key"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "project_key",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_repositories",
            "description": "\n    List repositories.\n    \n    Args:\n        workspace: Optional workspace ID to filter repositories by workspace\n        role: Optional role filter (admin, contributor, member, owner)\n        page: Page number for pagination\n        pagelen: Number of items per page (max 100)\n    \n    Returns:\n        JSON data containing the list of repositories.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "Optional workspace ID to filter repositories by workspace"
                    },
                    "role": {
                        "type": "string",
                        "description": "Optional role filter (admin, contributor, member, owner)"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number for pagination"
                    },
                    "pagelen": {
                        "type": "string",
                        "description": "Number of items per page (max 100)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "role",
                    "page",
                    "pagelen",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_repository",
            "description": "\n    Get details for a specific repository.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n    \n    Returns:\n        JSON data containing the repository details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_repository",
            "description": "\n    Create a new repository in a workspace.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug (name)\n        description: Optional repository description\n        is_private: Whether the repository is private (default True)\n        fork_policy: Fork policy (allow_forks, no_public_forks, no_forks)\n        project_key: Optional project key to associate the repository with\n    \n    Returns:\n        JSON data for the created repository.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug (name)"
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional repository description"
                    },
                    "is_private": {
                        "type": "string",
                        "description": "Whether the repository is private (default True)"
                    },
                    "fork_policy": {
                        "type": "string",
                        "description": "Fork policy (allow_forks, no_public_forks, no_forks)"
                    },
                    "project_key": {
                        "type": "string",
                        "description": "Optional project key to associate the repository with"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "description",
                    "is_private",
                    "fork_policy",
                    "project_key",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_repository",
            "description": "\n    Update repository settings.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        description: New repository description (optional)\n        is_private: New private status (optional)\n        fork_policy: New fork policy (optional)\n        project_key: New project key (optional)\n        name: New repository name (optional)\n    \n    Returns:\n        JSON data for the updated repository.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "description": {
                        "type": "string",
                        "description": "New repository description (optional)"
                    },
                    "is_private": {
                        "type": "string",
                        "description": "New private status (optional)"
                    },
                    "fork_policy": {
                        "type": "string",
                        "description": "New fork policy (optional)"
                    },
                    "project_key": {
                        "type": "string",
                        "description": "New project key (optional)"
                    },
                    "name": {
                        "type": "string",
                        "description": "New repository name (optional)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "description",
                    "is_private",
                    "fork_policy",
                    "project_key",
                    "name",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_repository",
            "description": "\n    Delete a repository.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n    \n    Returns:\n        Status of the deletion operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_branches",
            "description": "\n    List branches in a repository.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        page: Page number for pagination\n        pagelen: Number of items per page (max 100)\n    \n    Returns:\n        JSON data containing the list of branches.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number for pagination"
                    },
                    "pagelen": {
                        "type": "string",
                        "description": "Number of items per page (max 100)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "page",
                    "pagelen",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_branch",
            "description": "\n    Create a new branch in a repository.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        name: The name of the new branch\n        target: The target commit hash or branch name\n    \n    Returns:\n        JSON data for the created branch.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the new branch"
                    },
                    "target": {
                        "type": "string",
                        "description": "The target commit hash or branch name"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "name",
                    "target",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_tags",
            "description": "\n    List tags in a repository.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        page: Page number for pagination\n        pagelen: Number of items per page (max 100)\n    \n    Returns:\n        JSON data containing the list of tags.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number for pagination"
                    },
                    "pagelen": {
                        "type": "string",
                        "description": "Number of items per page (max 100)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "page",
                    "pagelen",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_tag",
            "description": "\n    Create a new tag in a repository.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        name: The name of the new tag\n        target: The target commit hash\n        message: Optional tag message\n    \n    Returns:\n        JSON data for the created tag.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the new tag"
                    },
                    "target": {
                        "type": "string",
                        "description": "The target commit hash"
                    },
                    "message": {
                        "type": "string",
                        "description": "Optional tag message"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "name",
                    "target",
                    "message",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_commits",
            "description": "\n    List commits in a repository or branch.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        branch: Optional branch name to filter commits\n        page: Page number for pagination\n        pagelen: Number of items per page (max 100)\n    \n    Returns:\n        JSON data containing the list of commits.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "branch": {
                        "type": "string",
                        "description": "Optional branch name to filter commits"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number for pagination"
                    },
                    "pagelen": {
                        "type": "string",
                        "description": "Number of items per page (max 100)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "branch",
                    "page",
                    "pagelen",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_commit",
            "description": "\n    Get detailed information for a single commit.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        commit: The commit hash\n    \n    Returns:\n        JSON data containing the commit details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "commit": {
                        "type": "string",
                        "description": "The commit hash"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "commit",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_commit_diff",
            "description": "\n    Get the diff for a commit or comparison between commits.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        spec: The commit hash or revision spec (e.g., 'master..feature')\n        context_lines: Number of context lines around each change\n    \n    Returns:\n        Unified diff content.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "spec": {
                        "type": "string",
                        "description": "The commit hash or revision spec (e.g., 'master..feature')"
                    },
                    "context_lines": {
                        "type": "string",
                        "description": "Number of context lines around each change"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "spec",
                    "context_lines",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "add_commit_comment",
            "description": "\n    Add a comment to a commit.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        commit: The commit hash\n        content: The comment text content\n        line: Optional line number to comment on\n        file_path: Optional file path to comment on\n    \n    Returns:\n        JSON data for the created comment.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "commit": {
                        "type": "string",
                        "description": "The commit hash"
                    },
                    "content": {
                        "type": "string",
                        "description": "The comment text content"
                    },
                    "line": {
                        "type": "string",
                        "description": "Optional line number to comment on"
                    },
                    "file_path": {
                        "type": "string",
                        "description": "Optional file path to comment on"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "commit",
                    "content",
                    "line",
                    "file_path",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_file_content",
            "description": "\n    Get the content of a file in a repository.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        file_path: The path to the file\n        commit: Optional commit hash or branch (defaults to the default branch)\n    \n    Returns:\n        File content as text.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "file_path": {
                        "type": "string",
                        "description": "The path to the file"
                    },
                    "commit": {
                        "type": "string",
                        "description": "Optional commit hash or branch (defaults to the default branch)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "file_path",
                    "commit",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_pull_requests",
            "description": "\n    List pull requests in a repository.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        state: Optional filter by state (OPEN, MERGED, DECLINED, SUPERSEDED)\n        page: Page number for pagination\n        pagelen: Number of items per page (max 100)\n    \n    Returns:\n        JSON data containing the list of pull requests.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "state": {
                        "type": "string",
                        "description": "Optional filter by state (OPEN, MERGED, DECLINED, SUPERSEDED)"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number for pagination"
                    },
                    "pagelen": {
                        "type": "string",
                        "description": "Number of items per page (max 100)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "state",
                    "page",
                    "pagelen",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_pull_request",
            "description": "\n    Create a new pull request.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        title: The title of the pull request\n        source_branch: The source branch name\n        destination_branch: The destination branch name\n        description: Optional pull request description\n        close_source_branch: Whether to close the source branch after merge (default False)\n    \n    Returns:\n        JSON data for the created pull request.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the pull request"
                    },
                    "source_branch": {
                        "type": "string",
                        "description": "The source branch name"
                    },
                    "destination_branch": {
                        "type": "string",
                        "description": "The destination branch name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional pull request description"
                    },
                    "close_source_branch": {
                        "type": "string",
                        "description": "Whether to close the source branch after merge (default False)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "title",
                    "source_branch",
                    "destination_branch",
                    "description",
                    "close_source_branch",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_pull_request",
            "description": "\n    Get details for a specific pull request.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        pull_request_id: The pull request ID\n    \n    Returns:\n        JSON data containing the pull request details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "pull_request_id": {
                        "type": "string",
                        "description": "The pull request ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "pull_request_id",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "approve_pull_request",
            "description": "\n    Approve a pull request.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        pull_request_id: The pull request ID\n    \n    Returns:\n        JSON data containing the approval status.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "pull_request_id": {
                        "type": "string",
                        "description": "The pull request ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "pull_request_id",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "unapprove_pull_request",
            "description": "\n    Remove approval from a pull request.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        pull_request_id: The pull request ID\n    \n    Returns:\n        Status of the unapproval operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "pull_request_id": {
                        "type": "string",
                        "description": "The pull request ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "pull_request_id",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "merge_pull_request",
            "description": "\n    Merge a pull request.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        pull_request_id: The pull request ID\n        merge_strategy: Merge strategy (merge_commit, squash, or fast_forward)\n        message: Optional custom merge commit message\n    \n    Returns:\n        JSON data containing the merge status.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "pull_request_id": {
                        "type": "string",
                        "description": "The pull request ID"
                    },
                    "merge_strategy": {
                        "type": "string",
                        "description": "Merge strategy (merge_commit, squash, or fast_forward)"
                    },
                    "message": {
                        "type": "string",
                        "description": "Optional custom merge commit message"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "pull_request_id",
                    "merge_strategy",
                    "message",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "decline_pull_request",
            "description": "\n    Decline a pull request.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        pull_request_id: The pull request ID\n    \n    Returns:\n        JSON data containing the decline status.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "pull_request_id": {
                        "type": "string",
                        "description": "The pull request ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "pull_request_id",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "add_pull_request_comment",
            "description": "\n    Add a comment to a pull request.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        pull_request_id: The pull request ID\n        content: The comment text content\n        line: Optional line number to comment on\n        file_path: Optional file path to comment on\n    \n    Returns:\n        JSON data for the created comment.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "pull_request_id": {
                        "type": "string",
                        "description": "The pull request ID"
                    },
                    "content": {
                        "type": "string",
                        "description": "The comment text content"
                    },
                    "line": {
                        "type": "string",
                        "description": "Optional line number to comment on"
                    },
                    "file_path": {
                        "type": "string",
                        "description": "Optional file path to comment on"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "pull_request_id",
                    "content",
                    "line",
                    "file_path",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_branch_restrictions",
            "description": "\n    List branch restrictions for a repository.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        page: Page number for pagination\n        pagelen: Number of items per page (max 100)\n    \n    Returns:\n        JSON data containing the list of branch restrictions.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number for pagination"
                    },
                    "pagelen": {
                        "type": "string",
                        "description": "Number of items per page (max 100)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "page",
                    "pagelen",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_branch_restriction",
            "description": "\n    Create a new branch restriction.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        kind: Type of restriction (e.g., push, force, delete, merge)\n        pattern: Branch pattern to apply restriction to (e.g., \"master\", \"release/*\")\n        users: Optional list of user UUIDs allowed to perform the action\n        groups: Optional list of group UUIDs allowed to perform the action\n    \n    Returns:\n        JSON data for the created branch restriction.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "kind": {
                        "type": "string",
                        "description": "Type of restriction (e.g., push, force, delete, merge)"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Branch pattern to apply restriction to (e.g., \"master\", \"release/*\")"
                    },
                    "users": {
                        "type": "string",
                        "description": "Optional list of user UUIDs allowed to perform the action"
                    },
                    "groups": {
                        "type": "string",
                        "description": "Optional list of group UUIDs allowed to perform the action"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "kind",
                    "pattern",
                    "users",
                    "groups",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_deploy_keys",
            "description": "\n    List deploy keys for a repository.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        page: Page number for pagination\n        pagelen: Number of items per page (max 100)\n    \n    Returns:\n        JSON data containing the list of deploy keys.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number for pagination"
                    },
                    "pagelen": {
                        "type": "string",
                        "description": "Number of items per page (max 100)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "page",
                    "pagelen",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "add_deploy_key",
            "description": "\n    Add a deploy key to a repository.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        key: The SSH public key content\n        label: A label for the deploy key\n    \n    Returns:\n        JSON data for the added deploy key.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "key": {
                        "type": "string",
                        "description": "The SSH public key content"
                    },
                    "label": {
                        "type": "string",
                        "description": "A label for the deploy key"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "key",
                    "label",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_deploy_key",
            "description": "\n    Delete a deploy key from a repository.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        key_id: The ID of the deploy key\n    \n    Returns:\n        Status of the deletion operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "key_id": {
                        "type": "string",
                        "description": "The ID of the deploy key"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "key_id",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_webhooks",
            "description": "\n    List webhooks for a repository.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        page: Page number for pagination\n        pagelen: Number of items per page (max 100)\n    \n    Returns:\n        JSON data containing the list of webhooks.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number for pagination"
                    },
                    "pagelen": {
                        "type": "string",
                        "description": "Number of items per page (max 100)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "page",
                    "pagelen",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_webhook",
            "description": "\n    Create a new webhook for a repository.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        url: The URL to send webhook events to\n        description: Optional webhook description\n        events: List of events to trigger the webhook (e.g., [\"repo:push\", \"pullrequest:created\"])\n        active: Whether the webhook is active (default True)\n    \n    Returns:\n        JSON data for the created webhook.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to send webhook events to"
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional webhook description"
                    },
                    "events": {
                        "type": "string",
                        "description": "List of events to trigger the webhook (e.g., [\"repo:push\", \"pullrequest:created\"])"
                    },
                    "active": {
                        "type": "string",
                        "description": "Whether the webhook is active (default True)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "url",
                    "description",
                    "events",
                    "active",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_webhook",
            "description": "\n    Delete a webhook from a repository.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        webhook_id: The ID of the webhook\n    \n    Returns:\n        Status of the deletion operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "webhook_id": {
                        "type": "string",
                        "description": "The ID of the webhook"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "webhook_id",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_issues",
            "description": "\n    List issues in a repository's issue tracker.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        status: Optional filter by status (new, open, resolved, etc.)\n        assignee: Optional filter by assignee username\n        reporter: Optional filter by reporter username\n        page: Page number for pagination\n        pagelen: Number of items per page (max 100)\n    \n    Returns:\n        JSON data containing the list of issues.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "status": {
                        "type": "string",
                        "description": "Optional filter by status (new, open, resolved, etc.)"
                    },
                    "assignee": {
                        "type": "string",
                        "description": "Optional filter by assignee username"
                    },
                    "reporter": {
                        "type": "string",
                        "description": "Optional filter by reporter username"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number for pagination"
                    },
                    "pagelen": {
                        "type": "string",
                        "description": "Number of items per page (max 100)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "status",
                    "assignee",
                    "reporter",
                    "page",
                    "pagelen",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_issue",
            "description": "\n    Create a new issue in the repository's issue tracker.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        title: The issue title\n        content: Optional issue description content\n        kind: Issue kind (bug, enhancement, proposal, task)\n        priority: Issue priority (trivial, minor, major, critical, blocker)\n        assignee: Optional assignee username\n    \n    Returns:\n        JSON data for the created issue.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "title": {
                        "type": "string",
                        "description": "The issue title"
                    },
                    "content": {
                        "type": "string",
                        "description": "Optional issue description content"
                    },
                    "kind": {
                        "type": "string",
                        "description": "Issue kind (bug, enhancement, proposal, task)"
                    },
                    "priority": {
                        "type": "string",
                        "description": "Issue priority (trivial, minor, major, critical, blocker)"
                    },
                    "assignee": {
                        "type": "string",
                        "description": "Optional assignee username"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "title",
                    "content",
                    "kind",
                    "priority",
                    "assignee",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_issue",
            "description": "\n    Get details for a specific issue.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        issue_id: The issue ID\n    \n    Returns:\n        JSON data containing the issue details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "issue_id": {
                        "type": "string",
                        "description": "The issue ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "issue_id",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_issue",
            "description": "\n    Update an existing issue.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        issue_id: The issue ID\n        title: Optional new issue title\n        content: Optional new issue description content\n        kind: Optional new issue kind\n        priority: Optional new issue priority\n        assignee: Optional new assignee username\n        status: Optional new status (new, open, resolved, etc.)\n    \n    Returns:\n        JSON data for the updated issue.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "issue_id": {
                        "type": "string",
                        "description": "The issue ID"
                    },
                    "title": {
                        "type": "string",
                        "description": "Optional new issue title"
                    },
                    "content": {
                        "type": "string",
                        "description": "Optional new issue description content"
                    },
                    "kind": {
                        "type": "string",
                        "description": "Optional new issue kind"
                    },
                    "priority": {
                        "type": "string",
                        "description": "Optional new issue priority"
                    },
                    "assignee": {
                        "type": "string",
                        "description": "Optional new assignee username"
                    },
                    "status": {
                        "type": "string",
                        "description": "Optional new status (new, open, resolved, etc.)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "issue_id",
                    "title",
                    "content",
                    "kind",
                    "priority",
                    "assignee",
                    "status",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "add_issue_comment",
            "description": "\n    Add a comment to an issue.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        issue_id: The issue ID\n        content: The comment text content\n    \n    Returns:\n        JSON data for the created comment.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "issue_id": {
                        "type": "string",
                        "description": "The issue ID"
                    },
                    "content": {
                        "type": "string",
                        "description": "The comment text content"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "issue_id",
                    "content",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_pipelines",
            "description": "\n    List pipelines for a repository.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        status: Optional filter by status (PENDING, BUILDING, COMPLETED, etc.)\n        page: Page number for pagination\n        pagelen: Number of items per page (max 100)\n    \n    Returns:\n        JSON data containing the list of pipelines.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "status": {
                        "type": "string",
                        "description": "Optional filter by status (PENDING, BUILDING, COMPLETED, etc.)"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number for pagination"
                    },
                    "pagelen": {
                        "type": "string",
                        "description": "Number of items per page (max 100)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "status",
                    "page",
                    "pagelen",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "trigger_pipeline",
            "description": "\n    Trigger a new pipeline run on a specific branch.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        branch: The branch to run the pipeline on\n        variables: Optional dictionary of pipeline variables\n    \n    Returns:\n        JSON data for the triggered pipeline.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "branch": {
                        "type": "string",
                        "description": "The branch to run the pipeline on"
                    },
                    "variables": {
                        "type": "string",
                        "description": "Optional dictionary of pipeline variables"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "branch",
                    "variables",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_pipeline",
            "description": "\n    Get details for a specific pipeline run.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        pipeline_uuid: The UUID of the pipeline\n    \n    Returns:\n        JSON data containing the pipeline details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "pipeline_uuid": {
                        "type": "string",
                        "description": "The UUID of the pipeline"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "pipeline_uuid",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "stop_pipeline",
            "description": "\n    Stop a running pipeline.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        repo_slug: The repository slug\n        pipeline_uuid: The UUID of the pipeline\n    \n    Returns:\n        JSON data containing the stop operation status.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "repo_slug": {
                        "type": "string",
                        "description": "The repository slug"
                    },
                    "pipeline_uuid": {
                        "type": "string",
                        "description": "The UUID of the pipeline"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "repo_slug",
                    "pipeline_uuid",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_snippets",
            "description": "\n    List snippets, optionally filtered by workspace.\n    \n    Args:\n        workspace: Optional workspace ID to filter snippets\n        role: Optional role filter (owner, contributor, member)\n        page: Page number for pagination\n        pagelen: Number of items per page (max 100)\n    \n    Returns:\n        JSON data containing the list of snippets.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "Optional workspace ID to filter snippets"
                    },
                    "role": {
                        "type": "string",
                        "description": "Optional role filter (owner, contributor, member)"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number for pagination"
                    },
                    "pagelen": {
                        "type": "string",
                        "description": "Number of items per page (max 100)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "role",
                    "page",
                    "pagelen",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_snippet",
            "description": "\n    Create a new snippet in a workspace.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        title: The snippet title\n        filename: The name of the file\n        content: The content of the snippet file\n        is_private: Whether the snippet is private (default True)\n    \n    Returns:\n        JSON data for the created snippet.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "title": {
                        "type": "string",
                        "description": "The snippet title"
                    },
                    "filename": {
                        "type": "string",
                        "description": "The name of the file"
                    },
                    "content": {
                        "type": "string",
                        "description": "The content of the snippet file"
                    },
                    "is_private": {
                        "type": "string",
                        "description": "Whether the snippet is private (default True)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "title",
                    "filename",
                    "content",
                    "is_private",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_snippet",
            "description": "\n    Get details for a specific snippet.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        snippet_id: The snippet ID\n    \n    Returns:\n        JSON data containing the snippet details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "snippet_id": {
                        "type": "string",
                        "description": "The snippet ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "snippet_id",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_snippet_file",
            "description": "\n    Get the content of a specific file in a snippet.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        snippet_id: The snippet ID\n        filename: The name of the file\n    \n    Returns:\n        File content as text.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "snippet_id": {
                        "type": "string",
                        "description": "The snippet ID"
                    },
                    "filename": {
                        "type": "string",
                        "description": "The name of the file"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "snippet_id",
                    "filename",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_snippet",
            "description": "\n    Delete a snippet.\n    \n    Args:\n        workspace: The workspace ID (slug)\n        snippet_id: The snippet ID\n    \n    Returns:\n        Status of the deletion operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID (slug)"
                    },
                    "snippet_id": {
                        "type": "string",
                        "description": "The snippet ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workspace",
                    "snippet_id",
                    "Returns"
                ]
            },
            "file": "servers\\bitbucket_cloud\\bitbucket_cloud_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_context",
            "description": "\n    Creates a new context in CircleCI.\n    \n    Args:\n        name: The user-defined name of the context\n        owner: Object containing the owner information with 'id' and 'type' fields\n              Example: {\"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"type\": \"organization\"}\n    \n    Returns:\n        The newly created context object\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The user-defined name of the context"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Object containing the owner information with 'id' and 'type' fields"
                    },
                    "Example": {
                        "type": "string",
                        "description": "{\"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"type\": \"organization\"}"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "owner",
                    "Example",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_contexts",
            "description": "\n    List all contexts for an owner.\n    \n    Args:\n        owner_id: The unique ID of the owner of the context. Specify either this or owner-slug.\n        owner_slug: A string that represents an organization. Specify either this or owner-id.\n        owner_type: The type of the owner. Defaults to \"organization\". Accounts are only used as context owners in server.\n        page_token: A token to retrieve the next page of results.\n    \n    Returns:\n        A paginated list of contexts\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "owner_id": {
                        "type": "string",
                        "description": "The unique ID of the owner of the context. Specify either this or owner-slug."
                    },
                    "owner_slug": {
                        "type": "string",
                        "description": "A string that represents an organization. Specify either this or owner-id."
                    },
                    "owner_type": {
                        "type": "string",
                        "description": "The type of the owner. Defaults to \"organization\". Accounts are only used as context owners in server."
                    },
                    "page_token": {
                        "type": "string",
                        "description": "A token to retrieve the next page of results."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "owner_id",
                    "owner_slug",
                    "owner_type",
                    "page_token",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_context",
            "description": "\n    Delete a context by ID.\n    \n    Args:\n        context_id: ID of the context (UUID)\n    \n    Returns:\n        A confirmation message\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "context_id": {
                        "type": "string",
                        "description": "ID of the context (UUID)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "context_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_context",
            "description": "\n    Returns basic information about a context.\n    \n    Args:\n        context_id: ID of the context (UUID)\n    \n    Returns:\n        The context details\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "context_id": {
                        "type": "string",
                        "description": "ID of the context (UUID)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "context_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_environment_variables",
            "description": "\n    List information about environment variables in a context, not including their values.\n    \n    Args:\n        context_id: ID of the context (UUID)\n        page_token: A token to retrieve the next page of results.\n    \n    Returns:\n        A paginated list of environment variables\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "context_id": {
                        "type": "string",
                        "description": "ID of the context (UUID)"
                    },
                    "page_token": {
                        "type": "string",
                        "description": "A token to retrieve the next page of results."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "context_id",
                    "page_token",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "add_or_update_environment_variable",
            "description": "\n    Create or update an environment variable within a context.\n    \n    Args:\n        context_id: ID of the context (UUID)\n        env_var_name: The name of the environment variable\n        value: The value of the environment variable\n    \n    Returns:\n        The new environment variable information (without the value)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "context_id": {
                        "type": "string",
                        "description": "ID of the context (UUID)"
                    },
                    "env_var_name": {
                        "type": "string",
                        "description": "The name of the environment variable"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the environment variable"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "context_id",
                    "env_var_name",
                    "value",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "remove_environment_variable",
            "description": "\n    Delete an environment variable from a context.\n    \n    Args:\n        context_id: ID of the context (UUID)\n        env_var_name: The name of the environment variable\n    \n    Returns:\n        A confirmation message\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "context_id": {
                        "type": "string",
                        "description": "ID of the context (UUID)"
                    },
                    "env_var_name": {
                        "type": "string",
                        "description": "The name of the environment variable"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "context_id",
                    "env_var_name",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_context_restrictions",
            "description": "\n    Gets a list of project restrictions associated with a context.\n    \n    Args:\n        context_id: An opaque identifier of a context.\n    \n    Returns:\n        List of project restrictions\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "context_id": {
                        "type": "string",
                        "description": "An opaque identifier of a context."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "context_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_context_restriction",
            "description": "\n    Creates project restriction on a context.\n    \n    Args:\n        context_id: An opaque identifier of a context.\n        restriction_type: Type of restriction\n        restriction_value: Value for the restriction\n    \n    Returns:\n        The created restriction\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "context_id": {
                        "type": "string",
                        "description": "An opaque identifier of a context."
                    },
                    "restriction_type": {
                        "type": "string",
                        "description": "Type of restriction"
                    },
                    "restriction_value": {
                        "type": "string",
                        "description": "Value for the restriction"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "context_id",
                    "restriction_type",
                    "restriction_value",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_context_restriction",
            "description": "\n    Deletes a project restriction on a context.\n    \n    Args:\n        context_id: An opaque identifier of a context.\n        restriction_id: An opaque identifier of a context restriction.\n    \n    Returns:\n        A confirmation message\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "context_id": {
                        "type": "string",
                        "description": "An opaque identifier of a context."
                    },
                    "restriction_id": {
                        "type": "string",
                        "description": "An opaque identifier of a context restriction."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "context_id",
                    "restriction_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_project_summary_metrics",
            "description": "\n    Get summary metrics and trends for a project across its workflows and branches.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        reporting_window: The time window used to calculate metrics (e.g., \"last-90-days\")\n        branches: The names of VCS branches to include in branch-level workflow metrics.\n        workflow_names: The names of workflows to include in workflow-level metrics.\n    \n    Returns:\n        Aggregated summary metrics and trends by workflow and branches\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "reporting_window": {
                        "type": "string",
                        "description": "The time window used to calculate metrics (e.g., \"last-90-days\")"
                    },
                    "branches": {
                        "type": "string",
                        "description": "The names of VCS branches to include in branch-level workflow metrics."
                    },
                    "workflow_names": {
                        "type": "string",
                        "description": "The names of workflows to include in workflow-level metrics."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "reporting_window",
                    "branches",
                    "workflow_names",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_job_timeseries_data",
            "description": "\n    Get timeseries data for all jobs within a workflow.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        workflow_name: The name of the workflow.\n        branch: The name of a vcs branch. If not passed scope to default branch.\n        granularity: The granularity for which to query timeseries data (\"daily\" or \"hourly\").\n        start_date: Include only executions that started at or after this date.\n        end_date: Include only executions that started before this date.\n    \n    Returns:\n        An array of timeseries data, one entry per job.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "workflow_name": {
                        "type": "string",
                        "description": "The name of the workflow."
                    },
                    "branch": {
                        "type": "string",
                        "description": "The name of a vcs branch. If not passed scope to default branch."
                    },
                    "granularity": {
                        "type": "string",
                        "description": "The granularity for which to query timeseries data (\"daily\" or \"hourly\")."
                    },
                    "start_date": {
                        "type": "string",
                        "description": "Include only executions that started at or after this date."
                    },
                    "end_date": {
                        "type": "string",
                        "description": "Include only executions that started before this date."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "workflow_name",
                    "branch",
                    "granularity",
                    "start_date",
                    "end_date",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_org_summary_metrics",
            "description": "\n    Get summary metrics with trends for the entire org, and for each project.\n    \n    Args:\n        org_slug: Org slug in the form vcs-slug/org-name.\n        reporting_window: The time window used to calculate summary metrics.\n        project_names: List of project names.\n    \n    Returns:\n        Summary metrics with trends for an entire org and its projects.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "org_slug": {
                        "type": "string",
                        "description": "Org slug in the form vcs-slug/org-name."
                    },
                    "reporting_window": {
                        "type": "string",
                        "description": "The time window used to calculate summary metrics."
                    },
                    "project_names": {
                        "type": "string",
                        "description": "List of project names."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "org_slug",
                    "reporting_window",
                    "project_names",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_all_branches",
            "description": "\n    Get a list of all branches for a specified project.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        workflow_name: The name of a workflow.\n    \n    Returns:\n        A list of branches for a project\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "workflow_name": {
                        "type": "string",
                        "description": "The name of a workflow."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "workflow_name",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_flaky_tests",
            "description": "\n    Get a list of flaky tests for a given project.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n    \n    Returns:\n        A list of flaky tests for a project\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_workflow_summary_metrics",
            "description": "\n    Get summary metrics for a project's workflows.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        page_token: A token to retrieve the next page of results.\n        all_branches: Whether to retrieve data for all branches combined.\n        branch: The name of a vcs branch. If not passed scope to default branch.\n        reporting_window: The time window used to calculate summary metrics.\n    \n    Returns:\n        A paginated list of summary metrics by workflow\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "page_token": {
                        "type": "string",
                        "description": "A token to retrieve the next page of results."
                    },
                    "all_branches": {
                        "type": "string",
                        "description": "Whether to retrieve data for all branches combined."
                    },
                    "branch": {
                        "type": "string",
                        "description": "The name of a vcs branch. If not passed scope to default branch."
                    },
                    "reporting_window": {
                        "type": "string",
                        "description": "The time window used to calculate summary metrics."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "page_token",
                    "all_branches",
                    "branch",
                    "reporting_window",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_recent_workflow_runs",
            "description": "\n    Get recent runs of a workflow.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        workflow_name: The name of the workflow.\n        all_branches: Whether to retrieve data for all branches combined.\n        branch: The name of a vcs branch. If not passed scope to default branch.\n        page_token: A token to retrieve the next page of results.\n        start_date: Include only executions that started at or after this date.\n        end_date: Include only executions that started before this date.\n    \n    Returns:\n        A paginated list of recent workflow runs\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "workflow_name": {
                        "type": "string",
                        "description": "The name of the workflow."
                    },
                    "all_branches": {
                        "type": "string",
                        "description": "Whether to retrieve data for all branches combined."
                    },
                    "branch": {
                        "type": "string",
                        "description": "The name of a vcs branch. If not passed scope to default branch."
                    },
                    "page_token": {
                        "type": "string",
                        "description": "A token to retrieve the next page of results."
                    },
                    "start_date": {
                        "type": "string",
                        "description": "Include only executions that started at or after this date."
                    },
                    "end_date": {
                        "type": "string",
                        "description": "Include only executions that started before this date."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "workflow_name",
                    "all_branches",
                    "branch",
                    "page_token",
                    "start_date",
                    "end_date",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_pipelines",
            "description": "\n    Returns all pipelines for the most recently built projects (max 250) you follow in an organization.\n    \n    Args:\n        org_slug: Org slug in the form vcs-slug/org-name.\n        page_token: A token to retrieve the next page of results.\n        mine: Only include entries created by your user.\n    \n    Returns:\n        A sequence of pipelines.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "org_slug": {
                        "type": "string",
                        "description": "Org slug in the form vcs-slug/org-name."
                    },
                    "page_token": {
                        "type": "string",
                        "description": "A token to retrieve the next page of results."
                    },
                    "mine": {
                        "type": "string",
                        "description": "Only include entries created by your user."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "org_slug",
                    "page_token",
                    "mine",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "continue_pipeline",
            "description": "\n    Continue a pipeline from the setup phase.\n    \n    Args:\n        continuation_key: A pipeline continuation key.\n        configuration: A configuration string for the pipeline.\n        parameters: An object containing pipeline parameters and their values.\n    \n    Returns:\n        A confirmation message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "continuation_key": {
                        "type": "string",
                        "description": "A pipeline continuation key."
                    },
                    "configuration": {
                        "type": "string",
                        "description": "A configuration string for the pipeline."
                    },
                    "parameters": {
                        "type": "string",
                        "description": "An object containing pipeline parameters and their values."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "continuation_key",
                    "configuration",
                    "parameters",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_pipeline",
            "description": "\n    Returns a pipeline by the pipeline ID.\n    \n    Args:\n        pipeline_id: The unique ID of the pipeline.\n    \n    Returns:\n        A pipeline object.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pipeline_id": {
                        "type": "string",
                        "description": "The unique ID of the pipeline."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "pipeline_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_pipeline_config",
            "description": "\n    Returns a pipeline's configuration by ID.\n    \n    Args:\n        pipeline_id: The unique ID of the pipeline.\n    \n    Returns:\n        The configuration strings for the pipeline.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pipeline_id": {
                        "type": "string",
                        "description": "The unique ID of the pipeline."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "pipeline_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_pipeline_values",
            "description": "\n    Returns a map of pipeline values by pipeline ID.\n    \n    Args:\n        pipeline_id: The unique ID of the pipeline.\n    \n    Returns:\n        A JSON object of pipeline values\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pipeline_id": {
                        "type": "string",
                        "description": "The unique ID of the pipeline."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "pipeline_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_pipeline_workflows",
            "description": "\n    Returns a paginated list of workflows by pipeline ID.\n    \n    Args:\n        pipeline_id: The unique ID of the pipeline.\n        page_token: A token to retrieve the next page of results.\n    \n    Returns:\n        A paginated list of workflow objects.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pipeline_id": {
                        "type": "string",
                        "description": "The unique ID of the pipeline."
                    },
                    "page_token": {
                        "type": "string",
                        "description": "A token to retrieve the next page of results."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "pipeline_id",
                    "page_token",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_project_pipelines",
            "description": "\n    Returns all pipelines for this project.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        branch: The name of a vcs branch.\n        page_token: A token to retrieve the next page of results.\n    \n    Returns:\n        A sequence of pipelines.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "branch": {
                        "type": "string",
                        "description": "The name of a vcs branch."
                    },
                    "page_token": {
                        "type": "string",
                        "description": "A token to retrieve the next page of results."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "branch",
                    "page_token",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "trigger_pipeline",
            "description": "\n    Trigger a new pipeline on the project.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        branch: The branch where the pipeline ran.\n        tag: The tag used by the pipeline.\n        parameters: An object containing pipeline parameters and their values.\n    \n    Returns:\n        The created pipeline.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "branch": {
                        "type": "string",
                        "description": "The branch where the pipeline ran."
                    },
                    "tag": {
                        "type": "string",
                        "description": "The tag used by the pipeline."
                    },
                    "parameters": {
                        "type": "string",
                        "description": "An object containing pipeline parameters and their values."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "branch",
                    "tag",
                    "parameters",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_my_pipelines",
            "description": "\n    Returns a sequence of all pipelines for this project triggered by the user.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        page_token: A token to retrieve the next page of results.\n    \n    Returns:\n        A sequence of pipelines.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "page_token": {
                        "type": "string",
                        "description": "A token to retrieve the next page of results."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "page_token",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_pipeline_by_number",
            "description": "\n    Returns a pipeline by the pipeline number.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        pipeline_number: The number of the pipeline.\n    \n    Returns:\n        A pipeline object.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "pipeline_number": {
                        "type": "string",
                        "description": "The number of the pipeline."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "pipeline_number",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "trigger_new_pipeline",
            "description": "\n    Trigger a pipeline given a pipeline definition ID.\n    \n    Args:\n        provider: The provider segment of a project or org slug (e.g., \"gh\", \"bitbucket\").\n        organization: The organization segment of a project or org slug.\n        project: The project segment of a project slug.\n        definition_id: The unique id for the pipeline definition.\n        config: Pipeline configuration parameters.\n        checkout: Checkout configuration parameters.\n        parameters: Pipeline parameters.\n    \n    Returns:\n        The created pipeline.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string",
                        "description": "The provider segment of a project or org slug (e.g., \"gh\", \"bitbucket\")."
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization segment of a project or org slug."
                    },
                    "project": {
                        "type": "string",
                        "description": "The project segment of a project slug."
                    },
                    "definition_id": {
                        "type": "string",
                        "description": "The unique id for the pipeline definition."
                    },
                    "config": {
                        "type": "string",
                        "description": "Pipeline configuration parameters."
                    },
                    "checkout": {
                        "type": "string",
                        "description": "Checkout configuration parameters."
                    },
                    "parameters": {
                        "type": "string",
                        "description": "Pipeline parameters."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "provider",
                    "organization",
                    "project",
                    "definition_id",
                    "config",
                    "checkout",
                    "parameters",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "cancel_job",
            "description": "\n    Cancel job with a given job ID.\n    \n    Args:\n        job_id: The unique ID of the job.\n    \n    Returns:\n        Job cancelled successfully.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "job_id": {
                        "type": "string",
                        "description": "The unique ID of the job."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "job_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_job_details",
            "description": "\n    Returns job details.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        job_number: The number of the job.\n    \n    Returns:\n        Job details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "job_number": {
                        "type": "string",
                        "description": "The number of the job."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "job_number",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "cancel_job_by_number",
            "description": "\n    Cancel job with a given job number.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        job_number: The number of the job.\n    \n    Returns:\n        A confirmation message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "job_number": {
                        "type": "string",
                        "description": "The number of the job."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "job_number",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_job_artifacts",
            "description": "\n    Returns a job's artifacts.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        job_number: The number of the job.\n    \n    Returns:\n        A paginated list of the job's artifacts.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "job_number": {
                        "type": "string",
                        "description": "The number of the job."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "job_number",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_test_metadata",
            "description": "\n    Get test metadata for a build.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        job_number: The number of the job.\n    \n    Returns:\n        A paginated list of test results.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "job_number": {
                        "type": "string",
                        "description": "The number of the job."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "job_number",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_workflow",
            "description": "\n    Returns summary fields of a workflow by ID.\n    \n    Args:\n        workflow_id: The unique ID of the workflow.\n    \n    Returns:\n        A workflow object.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workflow_id": {
                        "type": "string",
                        "description": "The unique ID of the workflow."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workflow_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "approve_job",
            "description": "\n    Approves a pending approval job in a workflow.\n    \n    Args:\n        workflow_id: The unique ID of the workflow.\n        approval_request_id: The ID of the job being approved.\n    \n    Returns:\n        A confirmation message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workflow_id": {
                        "type": "string",
                        "description": "The unique ID of the workflow."
                    },
                    "approval_request_id": {
                        "type": "string",
                        "description": "The ID of the job being approved."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workflow_id",
                    "approval_request_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "cancel_workflow",
            "description": "\n    Cancels a running workflow.\n    \n    Args:\n        workflow_id: The unique ID of the workflow.\n    \n    Returns:\n        A confirmation message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workflow_id": {
                        "type": "string",
                        "description": "The unique ID of the workflow."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workflow_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_workflow_jobs",
            "description": "\n    Returns a sequence of jobs for a workflow.\n    \n    Args:\n        workflow_id: The unique ID of the workflow.\n    \n    Returns:\n        A paginated sequence of jobs.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workflow_id": {
                        "type": "string",
                        "description": "The unique ID of the workflow."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workflow_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "rerun_workflow",
            "description": "\n    Reruns a workflow.\n    \n    Args:\n        workflow_id: The unique ID of the workflow.\n        enable_ssh: Whether to enable SSH access for the triggering user.\n        from_failed: Whether to rerun the workflow from the failed job.\n        jobs: A list of job IDs to rerun.\n        sparse_tree: Completes rerun using sparse trees logic.\n    \n    Returns:\n        A confirmation message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "workflow_id": {
                        "type": "string",
                        "description": "The unique ID of the workflow."
                    },
                    "enable_ssh": {
                        "type": "string",
                        "description": "Whether to enable SSH access for the triggering user."
                    },
                    "from_failed": {
                        "type": "string",
                        "description": "Whether to rerun the workflow from the failed job."
                    },
                    "jobs": {
                        "type": "string",
                        "description": "A list of job IDs to rerun."
                    },
                    "sparse_tree": {
                        "type": "string",
                        "description": "Completes rerun using sparse trees logic."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "workflow_id",
                    "enable_ssh",
                    "from_failed",
                    "jobs",
                    "sparse_tree",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_project",
            "description": "\n    Retrieves a project by project slug.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n    \n    Returns:\n        A project object\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_all_checkout_keys",
            "description": "\n    Returns a sequence of checkout keys for a project.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        digest: The fingerprint digest type to return (md5 or sha256).\n    \n    Returns:\n        A sequence of checkout keys.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "digest": {
                        "type": "string",
                        "description": "The fingerprint digest type to return (md5 or sha256)."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "digest",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_checkout_key",
            "description": "\n    Creates a new checkout key.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        type: The type of checkout key to create (deploy-key or user-key).\n    \n    Returns:\n        The checkout key.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of checkout key to create (deploy-key or user-key)."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "type",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_checkout_key",
            "description": "\n    Returns an individual checkout key via fingerprint.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        fingerprint: An SSH key fingerprint.\n    \n    Returns:\n        The checkout key.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "An SSH key fingerprint."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "fingerprint",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_checkout_key",
            "description": "\n    Deletes the checkout key via fingerprint.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        fingerprint: An SSH key fingerprint.\n    \n    Returns:\n        A confirmation message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "An SSH key fingerprint."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "fingerprint",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_environment_variable",
            "description": "\n    Creates a new environment variable.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        name: The name of the environment variable.\n        value: The value of the environment variable.\n    \n    Returns:\n        The environment variable.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment variable."
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the environment variable."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "name",
                    "value",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_environment_variables",
            "description": "\n    Returns environment variables for a project.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n    \n    Returns:\n        A sequence of environment variables.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_masked_environment_variable",
            "description": "\n    Returns the masked value of environment variable by name.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        name: The name of the environment variable.\n    \n    Returns:\n        The environment variable with masked value.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment variable."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "name",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_environment_variable",
            "description": "\n    Deletes the environment variable by name.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        name: The name of the environment variable.\n    \n    Returns:\n        A confirmation message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment variable."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "name",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_project",
            "description": "\n    Creates a new CircleCI project.\n    \n    Args:\n        provider: The provider segment of a project (gh, bb).\n        organization: The organization segment of a project.\n        project: The project segment of a project.\n    \n    Returns:\n        The project's advanced settings.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string",
                        "description": "The provider segment of a project (gh, bb)."
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization segment of a project."
                    },
                    "project": {
                        "type": "string",
                        "description": "The project segment of a project."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "provider",
                    "organization",
                    "project",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_project_settings",
            "description": "\n    Returns a list of advanced settings for a CircleCI project.\n    \n    Args:\n        provider: The provider segment of a project (gh, bb).\n        organization: The organization segment of a project.\n        project: The project segment of a project.\n    \n    Returns:\n        The project's advanced settings.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string",
                        "description": "The provider segment of a project (gh, bb)."
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization segment of a project."
                    },
                    "project": {
                        "type": "string",
                        "description": "The project segment of a project."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "provider",
                    "organization",
                    "project",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_project_settings",
            "description": "\n    Updates one or more of the advanced settings for a CircleCI project.\n    \n    Args:\n        provider: The provider segment of a project (gh, bb).\n        organization: The organization segment of a project.\n        project: The project segment of a project.\n        advanced: Settings to update.\n    \n    Returns:\n        The updated project settings.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string",
                        "description": "The provider segment of a project (gh, bb)."
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization segment of a project."
                    },
                    "project": {
                        "type": "string",
                        "description": "The project segment of a project."
                    },
                    "advanced": {
                        "type": "string",
                        "description": "Settings to update."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "provider",
                    "organization",
                    "project",
                    "advanced",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_schedule",
            "description": "\n    Creates a schedule and returns the created schedule.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        name: Name of the schedule.\n        timetable: Timetable that specifies when a schedule triggers.\n        attribution_actor: The attribution-actor of the scheduled pipeline (\"current\" or \"system\").\n        parameters: Pipeline parameters represented as key-value pairs. Must contain branch or tag.\n        description: Description of the schedule.\n    \n    Returns:\n        A schedule object.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the schedule."
                    },
                    "timetable": {
                        "type": "string",
                        "description": "Timetable that specifies when a schedule triggers."
                    },
                    "attribution_actor": {
                        "type": "string",
                        "description": "The attribution-actor of the scheduled pipeline (\"current\" or \"system\")."
                    },
                    "parameters": {
                        "type": "string",
                        "description": "Pipeline parameters represented as key-value pairs. Must contain branch or tag."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the schedule."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "name",
                    "timetable",
                    "attribution_actor",
                    "parameters",
                    "description",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_all_schedules",
            "description": "\n    Returns all schedules for this project.\n    \n    Args:\n        project_slug: Project slug in the form vcs-slug/org-name/repo-name.\n        page_token: A token to retrieve the next page of results.\n    \n    Returns:\n        A sequence of schedules.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_slug": {
                        "type": "string",
                        "description": "Project slug in the form vcs-slug/org-name/repo-name."
                    },
                    "page_token": {
                        "type": "string",
                        "description": "A token to retrieve the next page of results."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_slug",
                    "page_token",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_schedule",
            "description": "\n    Deletes the schedule by id.\n    \n    Args:\n        schedule_id: The unique ID of the schedule.\n    \n    Returns:\n        A confirmation message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "schedule_id": {
                        "type": "string",
                        "description": "The unique ID of the schedule."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "schedule_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_schedule",
            "description": "\n    Updates a schedule and returns the updated schedule.\n    \n    Args:\n        schedule_id: The unique ID of the schedule.\n        description: Description of the schedule.\n        name: Name of the schedule.\n        timetable: Timetable that specifies when a schedule triggers.\n        attribution_actor: The attribution-actor of the scheduled pipeline.\n        parameters: Pipeline parameters represented as key-value pairs.\n    \n    Returns:\n        A schedule object.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "schedule_id": {
                        "type": "string",
                        "description": "The unique ID of the schedule."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the schedule."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the schedule."
                    },
                    "timetable": {
                        "type": "string",
                        "description": "Timetable that specifies when a schedule triggers."
                    },
                    "attribution_actor": {
                        "type": "string",
                        "description": "The attribution-actor of the scheduled pipeline."
                    },
                    "parameters": {
                        "type": "string",
                        "description": "Pipeline parameters represented as key-value pairs."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "schedule_id",
                    "description",
                    "name",
                    "timetable",
                    "attribution_actor",
                    "parameters",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_schedule",
            "description": "\n    Get a schedule by id.\n    \n    Args:\n        schedule_id: The unique ID of the schedule.\n    \n    Returns:\n        A schedule object.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "schedule_id": {
                        "type": "string",
                        "description": "The unique ID of the schedule."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "schedule_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_webhooks",
            "description": "\n    Get a list of outbound webhooks that match the given scope-type and scope-id.\n    \n    Args:\n        scope_id: ID of the scope being used (at the moment, only project ID is supported).\n        scope_type: Type of the scope being used (currently only \"project\").\n    \n    Returns:\n        A list of webhooks.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "scope_id": {
                        "type": "string",
                        "description": "ID of the scope being used (at the moment, only project ID is supported)."
                    },
                    "scope_type": {
                        "type": "string",
                        "description": "Type of the scope being used (currently only \"project\")."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "scope_id",
                    "scope_type",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_webhook",
            "description": "\n    Creates an outbound webhook.\n    \n    Args:\n        name: Name of the webhook.\n        events: Events that will trigger the webhook.\n        url: URL to deliver the webhook to (only https is supported).\n        verify_tls: Whether to enforce TLS certificate verification.\n        signing_secret: Secret used to build an HMAC hash.\n        scope: The scope in which the relevant events will trigger webhooks.\n    \n    Returns:\n        A webhook.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the webhook."
                    },
                    "events": {
                        "type": "string",
                        "description": "Events that will trigger the webhook."
                    },
                    "url": {
                        "type": "string",
                        "description": "URL to deliver the webhook to (only https is supported)."
                    },
                    "verify_tls": {
                        "type": "string",
                        "description": "Whether to enforce TLS certificate verification."
                    },
                    "signing_secret": {
                        "type": "string",
                        "description": "Secret used to build an HMAC hash."
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope in which the relevant events will trigger webhooks."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "events",
                    "url",
                    "verify_tls",
                    "signing_secret",
                    "scope",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_webhook",
            "description": "\n    Updates an outbound webhook.\n    \n    Args:\n        webhook_id: ID of the webhook (UUID).\n        name: Name of the webhook.\n        events: Events that will trigger the webhook.\n        url: URL to deliver the webhook to (only https is supported).\n        signing_secret: Secret used to build an HMAC hash.\n        verify_tls: Whether to enforce TLS certificate verification.\n    \n    Returns:\n        A webhook.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "webhook_id": {
                        "type": "string",
                        "description": "ID of the webhook (UUID)."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the webhook."
                    },
                    "events": {
                        "type": "string",
                        "description": "Events that will trigger the webhook."
                    },
                    "url": {
                        "type": "string",
                        "description": "URL to deliver the webhook to (only https is supported)."
                    },
                    "signing_secret": {
                        "type": "string",
                        "description": "Secret used to build an HMAC hash."
                    },
                    "verify_tls": {
                        "type": "string",
                        "description": "Whether to enforce TLS certificate verification."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "webhook_id",
                    "name",
                    "events",
                    "url",
                    "signing_secret",
                    "verify_tls",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_webhook",
            "description": "\n    Deletes an outbound webhook.\n    \n    Args:\n        webhook_id: ID of the webhook (UUID).\n    \n    Returns:\n        A confirmation message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "webhook_id": {
                        "type": "string",
                        "description": "ID of the webhook (UUID)."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "webhook_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_webhook",
            "description": "\n    Get an outbound webhook by id.\n    \n    Args:\n        webhook_id: ID of the webhook (UUID).\n    \n    Returns:\n        A webhook.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "webhook_id": {
                        "type": "string",
                        "description": "ID of the webhook (UUID)."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "webhook_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_org_level_claims",
            "description": "\n    Deletes org-level custom claims of OIDC identity tokens.\n    \n    Args:\n        orgID: Organization ID.\n        claims: Comma separated list of claims to delete (\"audience\" and/or \"ttl\").\n    \n    Returns:\n        The updated claims.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "orgID": {
                        "type": "string",
                        "description": "Organization ID."
                    },
                    "claims": {
                        "type": "string",
                        "description": "Comma separated list of claims to delete (\"audience\" and/or \"ttl\")."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "orgID",
                    "claims",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_org_level_claims",
            "description": "\n    Fetches org-level custom claims of OIDC identity tokens.\n    \n    Args:\n        orgID: Organization ID.\n    \n    Returns:\n        The organization's claims.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "orgID": {
                        "type": "string",
                        "description": "Organization ID."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "orgID",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "patch_org_level_claims",
            "description": "\n    Creates/Updates org-level custom claims of OIDC identity tokens.\n    \n    Args:\n        orgID: Organization ID.\n        audience: List of audience claims.\n        ttl: TTL claim value.\n    \n    Returns:\n        The updated claims.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "orgID": {
                        "type": "string",
                        "description": "Organization ID."
                    },
                    "audience": {
                        "type": "string",
                        "description": "List of audience claims."
                    },
                    "ttl": {
                        "type": "string",
                        "description": "TTL claim value."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "orgID",
                    "audience",
                    "ttl",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_project_level_claims",
            "description": "\n    Deletes project-level custom claims of OIDC identity tokens.\n    \n    Args:\n        orgID: Organization ID.\n        projectID: Project ID.\n        claims: Comma separated list of claims to delete (\"audience\" and/or \"ttl\").\n    \n    Returns:\n        The updated claims.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "orgID": {
                        "type": "string",
                        "description": "Organization ID."
                    },
                    "projectID": {
                        "type": "string",
                        "description": "Project ID."
                    },
                    "claims": {
                        "type": "string",
                        "description": "Comma separated list of claims to delete (\"audience\" and/or \"ttl\")."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "orgID",
                    "projectID",
                    "claims",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_project_level_claims",
            "description": "\n    Fetches project-level custom claims of OIDC identity tokens.\n    \n    Args:\n        orgID: Organization ID.\n        projectID: Project ID.\n    \n    Returns:\n        The project's claims.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "orgID": {
                        "type": "string",
                        "description": "Organization ID."
                    },
                    "projectID": {
                        "type": "string",
                        "description": "Project ID."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "orgID",
                    "projectID",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "patch_project_level_claims",
            "description": "\n    Creates/Updates project-level custom claims of OIDC identity tokens.\n    \n    Args:\n        orgID: Organization ID.\n        projectID: Project ID.\n        audience: List of audience claims.\n        ttl: TTL claim value.\n    \n    Returns:\n        The updated claims.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "orgID": {
                        "type": "string",
                        "description": "Organization ID."
                    },
                    "projectID": {
                        "type": "string",
                        "description": "Project ID."
                    },
                    "audience": {
                        "type": "string",
                        "description": "List of audience claims."
                    },
                    "ttl": {
                        "type": "string",
                        "description": "TTL claim value."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "orgID",
                    "projectID",
                    "audience",
                    "ttl",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_usage_export",
            "description": "\n    Submits a request to create a usage export for an organization.\n    \n    Args:\n        org_id: An opaque identifier of an organization.\n        start: The start date & time (inclusive) of the range from which data will be pulled.\n        end: The end date & time (inclusive) of the range from which data will be pulled.\n        shared_org_ids: Optional list of additional organization IDs to include.\n    \n    Returns:\n        Usage export created confirmation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "org_id": {
                        "type": "string",
                        "description": "An opaque identifier of an organization."
                    },
                    "start": {
                        "type": "string",
                        "description": "The start date & time (inclusive) of the range from which data will be pulled."
                    },
                    "end": {
                        "type": "string",
                        "description": "The end date & time (inclusive) of the range from which data will be pulled."
                    },
                    "shared_org_ids": {
                        "type": "string",
                        "description": "Optional list of additional organization IDs to include."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "org_id",
                    "start",
                    "end",
                    "shared_org_ids",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_usage_export",
            "description": "\n    Gets a usage export for an organization.\n    \n    Args:\n        org_id: An opaque identifier of an organization.\n        usage_export_job_id: An opaque identifier of a usage export job.\n    \n    Returns:\n        Usage export details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "org_id": {
                        "type": "string",
                        "description": "An opaque identifier of an organization."
                    },
                    "usage_export_job_id": {
                        "type": "string",
                        "description": "An opaque identifier of a usage export job."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "org_id",
                    "usage_export_job_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_decision_audit_logs",
            "description": "\n    Retrieves the owner's decision audit logs.\n    \n    Args:\n        ownerID: Owner ID.\n        context: Context name.\n        status: Return decisions matching this decision status.\n        after: Return decisions made after this date.\n        before: Return decisions made before this date.\n        branch: Return decisions made on this branch.\n        project_id: Return decisions made for this project.\n        build_number: Return decisions made for this build number.\n        offset: Sets the offset when retrieving the decisions, for paging.\n    \n    Returns:\n        List of decision logs.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ownerID": {
                        "type": "string",
                        "description": "Owner ID."
                    },
                    "context": {
                        "type": "string",
                        "description": "Context name."
                    },
                    "status": {
                        "type": "string",
                        "description": "Return decisions matching this decision status."
                    },
                    "after": {
                        "type": "string",
                        "description": "Return decisions made after this date."
                    },
                    "before": {
                        "type": "string",
                        "description": "Return decisions made before this date."
                    },
                    "branch": {
                        "type": "string",
                        "description": "Return decisions made on this branch."
                    },
                    "project_id": {
                        "type": "string",
                        "description": "Return decisions made for this project."
                    },
                    "build_number": {
                        "type": "string",
                        "description": "Return decisions made for this build number."
                    },
                    "offset": {
                        "type": "string",
                        "description": "Sets the offset when retrieving the decisions, for paging."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "ownerID",
                    "context",
                    "status",
                    "after",
                    "before",
                    "branch",
                    "project_id",
                    "build_number",
                    "offset",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "make_decision",
            "description": "\n    Makes a decision by evaluating input data against owner's policies.\n    \n    Args:\n        ownerID: Owner ID.\n        context: Context name.\n        input_data: Input data to evaluate.\n        metadata: Additional metadata.\n    \n    Returns:\n        Decision result.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ownerID": {
                        "type": "string",
                        "description": "Owner ID."
                    },
                    "context": {
                        "type": "string",
                        "description": "Context name."
                    },
                    "input_data": {
                        "type": "string",
                        "description": "Input data to evaluate."
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Additional metadata."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "ownerID",
                    "context",
                    "input_data",
                    "metadata",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_decision_settings",
            "description": "\n    Retrieves the current decision settings.\n    \n    Args:\n        ownerID: Owner ID.\n        context: Context name.\n    \n    Returns:\n        Current decision settings.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ownerID": {
                        "type": "string",
                        "description": "Owner ID."
                    },
                    "context": {
                        "type": "string",
                        "description": "Context name."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "ownerID",
                    "context",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "set_decision_settings",
            "description": "\n    Sets the decision settings.\n    \n    Args:\n        ownerID: Owner ID.\n        context: Context name.\n        enabled: Whether to enable policy evaluation.\n    \n    Returns:\n        Updated decision settings.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ownerID": {
                        "type": "string",
                        "description": "Owner ID."
                    },
                    "context": {
                        "type": "string",
                        "description": "Context name."
                    },
                    "enabled": {
                        "type": "string",
                        "description": "Whether to enable policy evaluation."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "ownerID",
                    "context",
                    "enabled",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_decision_log",
            "description": "\n    Retrieves a decision log by ID.\n    \n    Args:\n        ownerID: Owner ID.\n        context: Context name.\n        decisionID: Decision ID.\n    \n    Returns:\n        The requested decision log.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ownerID": {
                        "type": "string",
                        "description": "Owner ID."
                    },
                    "context": {
                        "type": "string",
                        "description": "Context name."
                    },
                    "decisionID": {
                        "type": "string",
                        "description": "Decision ID."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "ownerID",
                    "context",
                    "decisionID",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_policy_bundle_for_decision",
            "description": "\n    Retrieves a policy bundle for a given decision log ID.\n    \n    Args:\n        ownerID: Owner ID.\n        context: Context name.\n        decisionID: Decision ID.\n    \n    Returns:\n        The policy bundle for the given decision.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ownerID": {
                        "type": "string",
                        "description": "Owner ID."
                    },
                    "context": {
                        "type": "string",
                        "description": "Context name."
                    },
                    "decisionID": {
                        "type": "string",
                        "description": "Decision ID."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "ownerID",
                    "context",
                    "decisionID",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_policy_bundle",
            "description": "\n    Retrieves a policy bundle.\n    \n    Args:\n        ownerID: Owner ID.\n        context: Context name.\n    \n    Returns:\n        The policy bundle.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ownerID": {
                        "type": "string",
                        "description": "Owner ID."
                    },
                    "context": {
                        "type": "string",
                        "description": "Context name."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "ownerID",
                    "context",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_policy_bundle",
            "description": "\n    Creates policy bundle for the context.\n    \n    Args:\n        ownerID: Owner ID.\n        context: Context name.\n        policies: Policy bundle content.\n        dry: Whether to perform a dry run.\n    \n    Returns:\n        Policy bundle creation result.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ownerID": {
                        "type": "string",
                        "description": "Owner ID."
                    },
                    "context": {
                        "type": "string",
                        "description": "Context name."
                    },
                    "policies": {
                        "type": "string",
                        "description": "Policy bundle content."
                    },
                    "dry": {
                        "type": "string",
                        "description": "Whether to perform a dry run."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "ownerID",
                    "context",
                    "policies",
                    "dry",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_policy_document",
            "description": "\n    Retrieves a policy document.\n    \n    Args:\n        ownerID: Owner ID.\n        context: Context name.\n        policyName: The policy name set by the rego policy_name rule.\n    \n    Returns:\n        The policy document.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ownerID": {
                        "type": "string",
                        "description": "Owner ID."
                    },
                    "context": {
                        "type": "string",
                        "description": "Context name."
                    },
                    "policyName": {
                        "type": "string",
                        "description": "The policy name set by the rego policy_name rule."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "ownerID",
                    "context",
                    "policyName",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_current_user",
            "description": "\n    Provides information about the user that is currently signed in.\n    \n    Returns:\n        User login information.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_collaborations",
            "description": "\n    Provides the set of organizations of which a user is a member or a collaborator.\n    \n    Returns:\n        List of collaborations.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_user",
            "description": "\n    Provides information about the user with the given ID.\n    \n    Args:\n        user_id: The unique ID of the user.\n    \n    Returns:\n        User login information.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "The unique ID of the user."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "user_id",
                    "Returns"
                ]
            },
            "file": "servers\\circleci\\circleci_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "validate_meta_json",
            "description": "Validate that meta is valid JSON if provided.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\consul\\consul_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "validate_service_identities_json",
            "description": "Validate that service_identities is valid JSON if provided.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\consul\\consul_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "validate_meta_json",
            "description": "Validate that meta is valid JSON if provided.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\consul\\consul_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "list_datacenters",
            "description": "\n    Returns a list of all known datacenters sorted by estimated median round trip time.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\consul\\consul_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_nodes",
            "description": "\n    Returns the nodes registered in a given datacenter.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\consul\\consul_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_services",
            "description": "\n    Returns a list of services registered in the catalog.\n    \n    Args:\n        dc: Specifies the datacenter to query\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dc": {
                        "type": "string",
                        "description": "Specifies the datacenter to query"
                    }
                },
                "required": [
                    "dc"
                ]
            },
            "file": "servers\\consul\\consul_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "register_service",
            "description": "\n    Registers a new service with the catalog.\n    \n    Args:\n        name: Service name\n        id: Service ID (if not provided, defaults to name)\n        address: Service address (defaults to node address)\n        port: Service port\n        tags: Comma-separated list of tags for the service\n        meta: JSON string with metadata key-value pairs\n        dc: Datacenter to register in\n        node: Node to register service on (required)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Service name"
                    },
                    "id": {
                        "type": "string",
                        "description": "Service ID (if not provided, defaults to name)"
                    },
                    "address": {
                        "type": "string",
                        "description": "Service address (defaults to node address)"
                    },
                    "port": {
                        "type": "string",
                        "description": "Service port"
                    },
                    "tags": {
                        "type": "string",
                        "description": "Comma-separated list of tags for the service"
                    },
                    "meta": {
                        "type": "string",
                        "description": "JSON string with metadata key-value pairs"
                    },
                    "dc": {
                        "type": "string",
                        "description": "Datacenter to register in"
                    },
                    "node": {
                        "type": "string",
                        "description": "Node to register service on (required)"
                    }
                },
                "required": [
                    "name",
                    "id",
                    "address",
                    "port",
                    "tags",
                    "meta",
                    "dc",
                    "node"
                ]
            },
            "file": "servers\\consul\\consul_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "deregister_service",
            "description": "\n    Deregisters a service from the catalog.\n    \n    Args:\n        service_id: ID of the service to deregister\n        node: Node the service is registered on (required)\n        dc: Datacenter the service is registered in\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "service_id": {
                        "type": "string",
                        "description": "ID of the service to deregister"
                    },
                    "node": {
                        "type": "string",
                        "description": "Node the service is registered on (required)"
                    },
                    "dc": {
                        "type": "string",
                        "description": "Datacenter the service is registered in"
                    }
                },
                "required": [
                    "service_id",
                    "node",
                    "dc"
                ]
            },
            "file": "servers\\consul\\consul_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "health_service",
            "description": "\n    Returns health information for a service.\n    \n    Args:\n        service: Service name\n        dc: Datacenter to query\n        passing: If true, only return passing services\n        near: Sorts results by round trip time from specified node\n        filter: Filters results based on a query expression\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "service": {
                        "type": "string",
                        "description": "Service name"
                    },
                    "dc": {
                        "type": "string",
                        "description": "Datacenter to query"
                    },
                    "passing": {
                        "type": "string",
                        "description": "If true, only return passing services"
                    },
                    "near": {
                        "type": "string",
                        "description": "Sorts results by round trip time from specified node"
                    },
                    "filter": {
                        "type": "string",
                        "description": "Filters results based on a query expression"
                    }
                },
                "required": [
                    "service",
                    "dc",
                    "passing",
                    "near",
                    "filter"
                ]
            },
            "file": "servers\\consul\\consul_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_acl_token",
            "description": "\n    Creates a new ACL token.\n    \n    Args:\n        description: Human readable description of the token\n        policies: Comma-separated list of policy names to associate with the token\n        roles: Comma-separated list of role names to associate with the token\n        service_identities: JSON string with service identity definitions\n        expires_after: Duration after which the token expires (e.g., \"24h\")\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Human readable description of the token"
                    },
                    "policies": {
                        "type": "string",
                        "description": "Comma-separated list of policy names to associate with the token"
                    },
                    "roles": {
                        "type": "string",
                        "description": "Comma-separated list of role names to associate with the token"
                    },
                    "service_identities": {
                        "type": "string",
                        "description": "JSON string with service identity definitions"
                    },
                    "expires_after": {
                        "type": "string",
                        "description": "Duration after which the token expires (e.g., \"24h\")"
                    }
                },
                "required": [
                    "description",
                    "policies",
                    "roles",
                    "service_identities",
                    "expires_after"
                ]
            },
            "file": "servers\\consul\\consul_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "execute_prepared_query",
            "description": "\n    Executes a prepared query.\n    \n    Args:\n        query_id: ID of the prepared query to execute\n        dc: Datacenter to query\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query_id": {
                        "type": "string",
                        "description": "ID of the prepared query to execute"
                    },
                    "dc": {
                        "type": "string",
                        "description": "Datacenter to query"
                    }
                },
                "required": [
                    "query_id",
                    "dc"
                ]
            },
            "file": "servers\\consul\\consul_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_intention",
            "description": "\n    Creates or updates a service intention.\n    \n    Args:\n        source_name: Source service name\n        destination_name: Destination service name\n        action: Can be \"allow\" or \"deny\"\n        description: Human readable description\n        meta: JSON string with metadata key-value pairs\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "source_name": {
                        "type": "string",
                        "description": "Source service name"
                    },
                    "destination_name": {
                        "type": "string",
                        "description": "Destination service name"
                    },
                    "action": {
                        "type": "string",
                        "description": "Can be \"allow\" or \"deny\""
                    },
                    "description": {
                        "type": "string",
                        "description": "Human readable description"
                    },
                    "meta": {
                        "type": "string",
                        "description": "JSON string with metadata key-value pairs"
                    }
                },
                "required": [
                    "source_name",
                    "destination_name",
                    "action",
                    "description",
                    "meta"
                ]
            },
            "file": "servers\\consul\\consul_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "kv_get",
            "description": "\n    Retrieves a key-value pair from the KV store.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\consul\\consul_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "kv_put",
            "description": "\n    Stores a key-value pair in the KV store.\n    \n    Args:\n        key: Key to store\n        value: Value to store\n        dc: Datacenter to store in\n        flags: Unsigned integer value to assign to the key\n        cas: Check-and-set value for optimistic locking\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Key to store"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value to store"
                    },
                    "dc": {
                        "type": "string",
                        "description": "Datacenter to store in"
                    },
                    "flags": {
                        "type": "string",
                        "description": "Unsigned integer value to assign to the key"
                    },
                    "cas": {
                        "type": "string",
                        "description": "Check-and-set value for optimistic locking"
                    }
                },
                "required": [
                    "key",
                    "value",
                    "dc",
                    "flags",
                    "cas"
                ]
            },
            "file": "servers\\consul\\consul_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "kv_delete",
            "description": "\n    Deletes a key-value pair from the KV store.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\consul\\consul_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "validate_alert_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\datadog\\datadog_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "validate_priority",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\datadog\\datadog_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "validate_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\datadog\\datadog_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "validate_layout_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\datadog\\datadog_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "submit_metric",
            "description": "Submit a metric to Datadog.\n    \n    Args:\n        metric_name: Name of the metric\n        value: Value of the metric\n        timestamp: Timestamp for the metric point (defaults to current time if not provided)\n        tags: List of tags for the metric\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "metric_name": {
                        "type": "string",
                        "description": "Name of the metric"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the metric"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Timestamp for the metric point (defaults to current time if not provided)"
                    },
                    "tags": {
                        "type": "string",
                        "description": "List of tags for the metric"
                    }
                },
                "required": [
                    "metric_name",
                    "value",
                    "timestamp",
                    "tags"
                ]
            },
            "file": "servers\\datadog\\datadog_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "query_metrics",
            "description": "Query metrics from Datadog.\n    \n    Args:\n        query: Metric query string\n        from_time: Start time in seconds since epoch\n        to_time: End time in seconds since epoch\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Metric query string"
                    },
                    "from_time": {
                        "type": "string",
                        "description": "Start time in seconds since epoch"
                    },
                    "to_time": {
                        "type": "string",
                        "description": "End time in seconds since epoch"
                    }
                },
                "required": [
                    "query",
                    "from_time",
                    "to_time"
                ]
            },
            "file": "servers\\datadog\\datadog_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_event",
            "description": "Create an event in Datadog.\n    \n    Args:\n        title: Title of the event\n        text: Text of the event\n        tags: List of tags for the event\n        alert_type: Alert type (info, warning, error, success)\n        priority: Priority (normal, low)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Title of the event"
                    },
                    "text": {
                        "type": "string",
                        "description": "Text of the event"
                    },
                    "tags": {
                        "type": "string",
                        "description": "List of tags for the event"
                    },
                    "alert_type": {
                        "type": "string",
                        "description": "Alert type (info, warning, error, success)"
                    },
                    "priority": {
                        "type": "string",
                        "description": "Priority (normal, low)"
                    }
                },
                "required": [
                    "title",
                    "text",
                    "tags",
                    "alert_type",
                    "priority"
                ]
            },
            "file": "servers\\datadog\\datadog_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_events",
            "description": "Get events from Datadog.\n    \n    Args:\n        query: Event query string\n        from_time: Start time in seconds since epoch\n        to_time: End time in seconds since epoch\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Event query string"
                    },
                    "from_time": {
                        "type": "string",
                        "description": "Start time in seconds since epoch"
                    },
                    "to_time": {
                        "type": "string",
                        "description": "End time in seconds since epoch"
                    }
                },
                "required": [
                    "query",
                    "from_time",
                    "to_time"
                ]
            },
            "file": "servers\\datadog\\datadog_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_monitor",
            "description": "Create a monitor in Datadog.\n    \n    Args:\n        name: Name of the monitor\n        query: Query for the monitor\n        type: Type of the monitor (metric alert, service check, event alert, query alert, composite)\n        message: Message for the monitor\n        tags: List of tags for the monitor\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the monitor"
                    },
                    "query": {
                        "type": "string",
                        "description": "Query for the monitor"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the monitor (metric alert, service check, event alert, query alert, composite)"
                    },
                    "message": {
                        "type": "string",
                        "description": "Message for the monitor"
                    },
                    "tags": {
                        "type": "string",
                        "description": "List of tags for the monitor"
                    }
                },
                "required": [
                    "name",
                    "query",
                    "type",
                    "message",
                    "tags"
                ]
            },
            "file": "servers\\datadog\\datadog_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_monitor",
            "description": "Get a monitor from Datadog.\n    \n    Args:\n        monitor_id: ID of the monitor\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monitor_id": {
                        "type": "string",
                        "description": "ID of the monitor"
                    }
                },
                "required": [
                    "monitor_id"
                ]
            },
            "file": "servers\\datadog\\datadog_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_monitor",
            "description": "Update a monitor in Datadog.\n    \n    Args:\n        monitor_id: ID of the monitor\n        name: New name for the monitor\n        query: New query for the monitor\n        message: New message for the monitor\n        tags: New list of tags for the monitor\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monitor_id": {
                        "type": "string",
                        "description": "ID of the monitor"
                    },
                    "name": {
                        "type": "string",
                        "description": "New name for the monitor"
                    },
                    "query": {
                        "type": "string",
                        "description": "New query for the monitor"
                    },
                    "message": {
                        "type": "string",
                        "description": "New message for the monitor"
                    },
                    "tags": {
                        "type": "string",
                        "description": "New list of tags for the monitor"
                    }
                },
                "required": [
                    "monitor_id",
                    "name",
                    "query",
                    "message",
                    "tags"
                ]
            },
            "file": "servers\\datadog\\datadog_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_monitor",
            "description": "Delete a monitor from Datadog.\n    \n    Args:\n        monitor_id: ID of the monitor\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monitor_id": {
                        "type": "string",
                        "description": "ID of the monitor"
                    }
                },
                "required": [
                    "monitor_id"
                ]
            },
            "file": "servers\\datadog\\datadog_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_dashboard",
            "description": "Create a dashboard in Datadog.\n    \n    Args:\n        title: Title of the dashboard\n        description: Description of the dashboard\n        widgets: List of widgets for the dashboard\n        layout_type: Layout type of the dashboard (ordered, free)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Title of the dashboard"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the dashboard"
                    },
                    "widgets": {
                        "type": "string",
                        "description": "List of widgets for the dashboard"
                    },
                    "layout_type": {
                        "type": "string",
                        "description": "Layout type of the dashboard (ordered, free)"
                    }
                },
                "required": [
                    "title",
                    "description",
                    "widgets",
                    "layout_type"
                ]
            },
            "file": "servers\\datadog\\datadog_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_dashboard",
            "description": "Get a dashboard from Datadog.\n    \n    Args:\n        dashboard_id: ID of the dashboard\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dashboard_id": {
                        "type": "string",
                        "description": "ID of the dashboard"
                    }
                },
                "required": [
                    "dashboard_id"
                ]
            },
            "file": "servers\\datadog\\datadog_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_dashboard",
            "description": "Delete a dashboard from Datadog.\n    \n    Args:\n        dashboard_id: ID of the dashboard\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dashboard_id": {
                        "type": "string",
                        "description": "ID of the dashboard"
                    }
                },
                "required": [
                    "dashboard_id"
                ]
            },
            "file": "servers\\datadog\\datadog_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_containers",
            "description": "List all containers or only running ones.\n    \n    Args:\n        show_all: If True, show all containers including stopped ones. Default: False.\n    \n    Returns:\n        String representation of containers list.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "show_all": {
                        "type": "string",
                        "description": "If True, show all containers including stopped ones. Default: False."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "show_all",
                    "Returns"
                ]
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_container",
            "description": "Create a new container without starting it.\n    \n    Args:\n        image: Docker image name to use.\n        name: Optional name for the container.\n        command: Optional command to run in the container.\n        ports: Dictionary mapping container ports to host ports (e.g., {\"8080/tcp\": \"80\"}).\n        environment: Dictionary of environment variables.\n        volumes: Dictionary mapping host volumes to container volumes.\n        detach: Run container in background. Default: True.\n    \n    Returns:\n        Container ID or error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "image": {
                        "type": "string",
                        "description": "Docker image name to use."
                    },
                    "name": {
                        "type": "string",
                        "description": "Optional name for the container."
                    },
                    "command": {
                        "type": "string",
                        "description": "Optional command to run in the container."
                    },
                    "ports": {
                        "type": "string",
                        "description": "Dictionary mapping container ports to host ports (e.g., {\"8080/tcp\": \"80\"})."
                    },
                    "environment": {
                        "type": "string",
                        "description": "Dictionary of environment variables."
                    },
                    "volumes": {
                        "type": "string",
                        "description": "Dictionary mapping host volumes to container volumes."
                    },
                    "detach": {
                        "type": "string",
                        "description": "Run container in background. Default: True."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "image",
                    "name",
                    "command",
                    "ports",
                    "environment",
                    "volumes",
                    "detach",
                    "Returns"
                ]
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "run_container",
            "description": "Create and start a container.\n    \n    Args:\n        image: Docker image name to use.\n        name: Optional name for the container.\n        command: Optional command to run in the container.\n        ports: Dictionary mapping container ports to host ports (e.g., {\"8080/tcp\": \"80\"}).\n        environment: Dictionary of environment variables.\n        volumes: Dictionary mapping host volumes to container volumes.\n        detach: Run container in background. Default: True.\n    \n    Returns:\n        Container ID or error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "image": {
                        "type": "string",
                        "description": "Docker image name to use."
                    },
                    "name": {
                        "type": "string",
                        "description": "Optional name for the container."
                    },
                    "command": {
                        "type": "string",
                        "description": "Optional command to run in the container."
                    },
                    "ports": {
                        "type": "string",
                        "description": "Dictionary mapping container ports to host ports (e.g., {\"8080/tcp\": \"80\"})."
                    },
                    "environment": {
                        "type": "string",
                        "description": "Dictionary of environment variables."
                    },
                    "volumes": {
                        "type": "string",
                        "description": "Dictionary mapping host volumes to container volumes."
                    },
                    "detach": {
                        "type": "string",
                        "description": "Run container in background. Default: True."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "image",
                    "name",
                    "command",
                    "ports",
                    "environment",
                    "volumes",
                    "detach",
                    "Returns"
                ]
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "recreate_container",
            "description": "Recreate a container with the same settings.\n    \n    Args:\n        container_id: ID or name of the container to recreate.\n        start: Whether to start the new container after creation. Default: True.\n    \n    Returns:\n        New container ID or error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "container_id": {
                        "type": "string",
                        "description": "ID or name of the container to recreate."
                    },
                    "start": {
                        "type": "string",
                        "description": "Whether to start the new container after creation. Default: True."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "container_id",
                    "start",
                    "Returns"
                ]
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "start_container",
            "description": "Start a stopped container.\n    \n    Args:\n        container_id: ID or name of the container to start.\n    \n    Returns:\n        Success message or error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "container_id": {
                        "type": "string",
                        "description": "ID or name of the container to start."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "container_id",
                    "Returns"
                ]
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "fetch_container_logs",
            "description": "Fetch logs from a container.\n    \n    Args:\n        container_id: ID or name of the container to fetch logs from.\n        tail: Number of lines to fetch from the end of the logs. Default: 100.\n    \n    Returns:\n        Container logs or error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "container_id": {
                        "type": "string",
                        "description": "ID or name of the container to fetch logs from."
                    },
                    "tail": {
                        "type": "string",
                        "description": "Number of lines to fetch from the end of the logs. Default: 100."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "container_id",
                    "tail",
                    "Returns"
                ]
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "stop_container",
            "description": "Stop a running container.\n    \n    Args:\n        container_id: ID or name of the container to stop.\n        timeout: Timeout in seconds to wait before killing the container. Default: 10.\n    \n    Returns:\n        Success message or error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "container_id": {
                        "type": "string",
                        "description": "ID or name of the container to stop."
                    },
                    "timeout": {
                        "type": "string",
                        "description": "Timeout in seconds to wait before killing the container. Default: 10."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "container_id",
                    "timeout",
                    "Returns"
                ]
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "remove_container",
            "description": "Remove a container.\n    \n    Args:\n        container_id: ID or name of the container to remove.\n        force: Force removal of running container. Default: False.\n    \n    Returns:\n        Success message or error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "container_id": {
                        "type": "string",
                        "description": "ID or name of the container to remove."
                    },
                    "force": {
                        "type": "string",
                        "description": "Force removal of running container. Default: False."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "container_id",
                    "force",
                    "Returns"
                ]
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_images",
            "description": "List all available Docker images.\n    \n    Returns:\n        String representation of images list.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "pull_image",
            "description": "Pull a Docker image from a registry.\n    \n    Args:\n        image_name: Name of the image to pull.\n        tag: Tag of the image to pull. Default: \"latest\".\n    \n    Returns:\n        Success message or error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "image_name": {
                        "type": "string",
                        "description": "Name of the image to pull."
                    },
                    "tag": {
                        "type": "string",
                        "description": "Tag of the image to pull. Default: \"latest\"."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "image_name",
                    "tag",
                    "Returns"
                ]
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "push_image",
            "description": "Push a Docker image to a registry.\n    \n    Args:\n        image_name: Name of the image to push.\n        tag: Tag of the image to push. Default: \"latest\".\n    \n    Returns:\n        Success message or error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "image_name": {
                        "type": "string",
                        "description": "Name of the image to push."
                    },
                    "tag": {
                        "type": "string",
                        "description": "Tag of the image to push. Default: \"latest\"."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "image_name",
                    "tag",
                    "Returns"
                ]
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "build_image",
            "description": "Build a Docker image from a Dockerfile.\n    \n    Args:\n        path: Path to the directory containing the Dockerfile.\n        tag: Tag to apply to the built image.\n        dockerfile: Name of the Dockerfile. Default: \"Dockerfile\".\n        rm: Remove intermediate containers. Default: True.\n        nocache: Do not use cache when building the image. Default: False.\n    \n    Returns:\n        Success message or error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "Path to the directory containing the Dockerfile."
                    },
                    "tag": {
                        "type": "string",
                        "description": "Tag to apply to the built image."
                    },
                    "dockerfile": {
                        "type": "string",
                        "description": "Name of the Dockerfile. Default: \"Dockerfile\"."
                    },
                    "rm": {
                        "type": "string",
                        "description": "Remove intermediate containers. Default: True."
                    },
                    "nocache": {
                        "type": "string",
                        "description": "Do not use cache when building the image. Default: False."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "path",
                    "tag",
                    "dockerfile",
                    "rm",
                    "nocache",
                    "Returns"
                ]
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "remove_image",
            "description": "Remove a Docker image.\n    \n    Args:\n        image_id: ID or name of the image to remove.\n        force: Force removal of the image. Default: False.\n    \n    Returns:\n        Success message or error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "image_id": {
                        "type": "string",
                        "description": "ID or name of the image to remove."
                    },
                    "force": {
                        "type": "string",
                        "description": "Force removal of the image. Default: False."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "image_id",
                    "force",
                    "Returns"
                ]
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_networks",
            "description": "List all Docker networks.\n    \n    Returns:\n        String representation of networks list.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_network",
            "description": "Create a Docker network.\n    \n    Args:\n        name: Name of the network to create.\n        driver: Network driver to use. Default: \"bridge\".\n        internal: Restrict external access to the network. Default: False.\n        labels: Map of labels to set on the network.\n    \n    Returns:\n        Success message or error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the network to create."
                    },
                    "driver": {
                        "type": "string",
                        "description": "Network driver to use. Default: \"bridge\"."
                    },
                    "internal": {
                        "type": "string",
                        "description": "Restrict external access to the network. Default: False."
                    },
                    "labels": {
                        "type": "string",
                        "description": "Map of labels to set on the network."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "driver",
                    "internal",
                    "labels",
                    "Returns"
                ]
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "remove_network",
            "description": "Remove a Docker network.\n    \n    Args:\n        network_id: ID or name of the network to remove.\n    \n    Returns:\n        Success message or error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "network_id": {
                        "type": "string",
                        "description": "ID or name of the network to remove."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "network_id",
                    "Returns"
                ]
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_volumes",
            "description": "List all Docker volumes.\n    \n    Returns:\n        String representation of volumes list.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_volume",
            "description": "Create a Docker volume.\n    \n    Args:\n        name: Name of the volume to create.\n        driver: Volume driver to use. Default: \"local\".\n        labels: Map of labels to set on the volume.\n    \n    Returns:\n        Success message or error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the volume to create."
                    },
                    "driver": {
                        "type": "string",
                        "description": "Volume driver to use. Default: \"local\"."
                    },
                    "labels": {
                        "type": "string",
                        "description": "Map of labels to set on the volume."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "driver",
                    "labels",
                    "Returns"
                ]
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "remove_volume",
            "description": "Remove a Docker volume.\n    \n    Args:\n        volume_name: Name of the volume to remove.\n        force: Force removal of the volume. Default: False.\n    \n    Returns:\n        Success message or error message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "volume_name": {
                        "type": "string",
                        "description": "Name of the volume to remove."
                    },
                    "force": {
                        "type": "string",
                        "description": "Force removal of the volume. Default: False."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "volume_name",
                    "force",
                    "Returns"
                ]
            },
            "file": "servers\\docker\\docker_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "validate_hits",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "cluster_health",
            "description": "Get Elasticsearch cluster health status.\n    \n    Args:\n        index: Optional specific index to check health for\n        timeout: Timeout for the health check (e.g., '30s')\n        level: Level of health information to report (\"cluster\", \"indices\", \"shards\")\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index": {
                        "type": "string",
                        "description": "Optional specific index to check health for"
                    },
                    "timeout": {
                        "type": "string",
                        "description": "Timeout for the health check (e.g., '30s')"
                    },
                    "level": {
                        "type": "string",
                        "description": "Level of health information to report (\"cluster\", \"indices\", \"shards\")"
                    }
                },
                "required": [
                    "index",
                    "timeout",
                    "level"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "cluster_stats",
            "description": "Get comprehensive statistics about the Elasticsearch cluster.\n    \n    Args:\n        node_id: Optional specific node ID to get stats for\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "node_id": {
                        "type": "string",
                        "description": "Optional specific node ID to get stats for"
                    }
                },
                "required": [
                    "node_id"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "cluster_settings",
            "description": "Get or update cluster-wide settings.\n    \n    Args:\n        action: Action to perform: 'get' or 'update'\n        settings: Settings to update (required for update action)\n        include_defaults: Whether to include default settings in the response\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Action to perform: 'get' or 'update'"
                    },
                    "settings": {
                        "type": "string",
                        "description": "Settings to update (required for update action)"
                    },
                    "include_defaults": {
                        "type": "string",
                        "description": "Whether to include default settings in the response"
                    }
                },
                "required": [
                    "action",
                    "settings",
                    "include_defaults"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "create_index",
            "description": "Create a new Elasticsearch index.\n    \n    Args:\n        index_name: Name of the index to create\n        settings: Optional index settings\n        mappings: Optional index mappings\n        aliases: Optional index aliases\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_name": {
                        "type": "string",
                        "description": "Name of the index to create"
                    },
                    "settings": {
                        "type": "string",
                        "description": "Optional index settings"
                    },
                    "mappings": {
                        "type": "string",
                        "description": "Optional index mappings"
                    },
                    "aliases": {
                        "type": "string",
                        "description": "Optional index aliases"
                    }
                },
                "required": [
                    "index_name",
                    "settings",
                    "mappings",
                    "aliases"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "get_index",
            "description": "Get information about an Elasticsearch index.\n    \n    Args:\n        index_name: Name of the index to get information for\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_name": {
                        "type": "string",
                        "description": "Name of the index to get information for"
                    }
                },
                "required": [
                    "index_name"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "delete_index",
            "description": "Delete an Elasticsearch index.\n    \n    Args:\n        index_name: Name of the index to delete\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_name": {
                        "type": "string",
                        "description": "Name of the index to delete"
                    }
                },
                "required": [
                    "index_name"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "get_mapping",
            "description": "Get the mapping for an index.\n    \n    Args:\n        index_name: Name of the index to get mapping for\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_name": {
                        "type": "string",
                        "description": "Name of the index to get mapping for"
                    }
                },
                "required": [
                    "index_name"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "update_mapping",
            "description": "Update the mapping for an index.\n    \n    Args:\n        index_name: Name of the index to update mapping for\n        properties: Mapping properties to update\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_name": {
                        "type": "string",
                        "description": "Name of the index to update mapping for"
                    },
                    "properties": {
                        "type": "string",
                        "description": "Mapping properties to update"
                    }
                },
                "required": [
                    "index_name",
                    "properties"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "list_indices",
            "description": "List all indices in the Elasticsearch cluster.\n    \n    Args:\n        pattern: Optional pattern to filter indices (e.g., 'log-*')\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pattern": {
                        "type": "string",
                        "description": "Optional pattern to filter indices (e.g., 'log-*')"
                    }
                },
                "required": [
                    "pattern"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "index_document",
            "description": "Create or update a document in an index.\n    \n    Args:\n        index_name: Name of the index\n        document: Document data\n        id: Optional document ID (if not provided, one will be generated)\n        refresh: Refresh policy ('true', 'false', 'wait_for')\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_name": {
                        "type": "string",
                        "description": "Name of the index"
                    },
                    "document": {
                        "type": "string",
                        "description": "Document data"
                    },
                    "id": {
                        "type": "string",
                        "description": "Optional document ID (if not provided, one will be generated)"
                    },
                    "refresh": {
                        "type": "string",
                        "description": "Refresh policy ('true', 'false', 'wait_for')"
                    }
                },
                "required": [
                    "index_name",
                    "document",
                    "id",
                    "refresh"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "get_document",
            "description": "Get a document by ID.\n    \n    Args:\n        index_name: Name of the index\n        id: Document ID\n        source_includes: Comma-separated list of fields to include in the source\n        source_excludes: Comma-separated list of fields to exclude from the source\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_name": {
                        "type": "string",
                        "description": "Name of the index"
                    },
                    "id": {
                        "type": "string",
                        "description": "Document ID"
                    },
                    "source_includes": {
                        "type": "string",
                        "description": "Comma-separated list of fields to include in the source"
                    },
                    "source_excludes": {
                        "type": "string",
                        "description": "Comma-separated list of fields to exclude from the source"
                    }
                },
                "required": [
                    "index_name",
                    "id",
                    "source_includes",
                    "source_excludes"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "delete_document",
            "description": "Delete a document by ID.\n    \n    Args:\n        index_name: Name of the index\n        id: Document ID to delete\n        refresh: Refresh policy ('true', 'false', 'wait_for')\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_name": {
                        "type": "string",
                        "description": "Name of the index"
                    },
                    "id": {
                        "type": "string",
                        "description": "Document ID to delete"
                    },
                    "refresh": {
                        "type": "string",
                        "description": "Refresh policy ('true', 'false', 'wait_for')"
                    }
                },
                "required": [
                    "index_name",
                    "id",
                    "refresh"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "bulk_operations",
            "description": "Perform multiple document operations in a single request.\n    \n    Args:\n        operations: Bulk operations in NDJSON format\n        index_name: Optional index name to restrict operations to\n        refresh: Refresh policy ('true', 'false', 'wait_for')\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "operations": {
                        "type": "string",
                        "description": "Bulk operations in NDJSON format"
                    },
                    "index_name": {
                        "type": "string",
                        "description": "Optional index name to restrict operations to"
                    },
                    "refresh": {
                        "type": "string",
                        "description": "Refresh policy ('true', 'false', 'wait_for')"
                    }
                },
                "required": [
                    "operations",
                    "index_name",
                    "refresh"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "search",
            "description": "Search for documents in an index.\n    \n    Args:\n        index_name: Name of the index to search in (or comma-separated list of indices)\n        query: Elasticsearch query DSL object\n        from_offset: Starting offset for results\n        size: Number of hits to return\n        sort: Sort criteria\n        aggs: Aggregations to perform\n        source: Control which fields to include in the response\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_name": {
                        "type": "string",
                        "description": "Name of the index to search in (or comma-separated list of indices)"
                    },
                    "query": {
                        "type": "string",
                        "description": "Elasticsearch query DSL object"
                    },
                    "from_offset": {
                        "type": "string",
                        "description": "Starting offset for results"
                    },
                    "size": {
                        "type": "string",
                        "description": "Number of hits to return"
                    },
                    "sort": {
                        "type": "string",
                        "description": "Sort criteria"
                    },
                    "aggs": {
                        "type": "string",
                        "description": "Aggregations to perform"
                    },
                    "source": {
                        "type": "string",
                        "description": "Control which fields to include in the response"
                    }
                },
                "required": [
                    "index_name",
                    "query",
                    "from_offset",
                    "size",
                    "sort",
                    "aggs",
                    "source"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "simple_search",
            "description": "Simplified search interface for common search cases.\n    \n    Args:\n        index_name: Name of the index to search in (or comma-separated list of indices)\n        keyword: Search keyword or phrase\n        field: Field to search in (omit for full-text search across all fields)\n        size: Number of hits to return (default: 10)\n        from_offset: Starting offset for results (default: 0)\n        exact_match: Whether to perform an exact match (term query) or fuzzy match (default: False)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_name": {
                        "type": "string",
                        "description": "Name of the index to search in (or comma-separated list of indices)"
                    },
                    "keyword": {
                        "type": "string",
                        "description": "Search keyword or phrase"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field to search in (omit for full-text search across all fields)"
                    },
                    "size": {
                        "type": "string",
                        "description": "Number of hits to return (default: 10)"
                    },
                    "from_offset": {
                        "type": "string",
                        "description": "Starting offset for results (default: 0)"
                    },
                    "exact_match": {
                        "type": "string",
                        "description": "Whether to perform an exact match (term query) or fuzzy match (default: False)"
                    }
                },
                "required": [
                    "index_name",
                    "keyword",
                    "field",
                    "size",
                    "from_offset",
                    "exact_match"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "count_documents",
            "description": "Count documents matching a query.\n    \n    Args:\n        index_name: Name of the index to count documents in\n        query: Elasticsearch query DSL object (defaults to match_all if not provided)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_name": {
                        "type": "string",
                        "description": "Name of the index to count documents in"
                    },
                    "query": {
                        "type": "string",
                        "description": "Elasticsearch query DSL object (defaults to match_all if not provided)"
                    }
                },
                "required": [
                    "index_name",
                    "query"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "multi_search",
            "description": "Perform multiple searches in a single request.\n    \n    Args:\n        searches: List of search requests, each can include an 'index' key to specify the index\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "searches": {
                        "type": "string",
                        "description": "List of search requests, each can include an 'index' key to specify the index"
                    }
                },
                "required": [
                    "searches"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "create_pipeline",
            "description": "Create or update an ingest pipeline.\n    \n    Args:\n        pipeline_id: ID of the pipeline\n        processors: List of processor configurations\n        description: Optional description of the pipeline\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pipeline_id": {
                        "type": "string",
                        "description": "ID of the pipeline"
                    },
                    "processors": {
                        "type": "string",
                        "description": "List of processor configurations"
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional description of the pipeline"
                    }
                },
                "required": [
                    "pipeline_id",
                    "processors",
                    "description"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "get_pipeline",
            "description": "Get an ingest pipeline.\n    \n    Args:\n        pipeline_id: ID of the pipeline to retrieve (omit to get all pipelines)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pipeline_id": {
                        "type": "string",
                        "description": "ID of the pipeline to retrieve (omit to get all pipelines)"
                    }
                },
                "required": [
                    "pipeline_id"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "delete_pipeline",
            "description": "Delete an ingest pipeline.\n    \n    Args:\n        pipeline_id: ID of the pipeline to delete\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pipeline_id": {
                        "type": "string",
                        "description": "ID of the pipeline to delete"
                    }
                },
                "required": [
                    "pipeline_id"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "simulate_pipeline",
            "description": "Simulate an ingest pipeline on a set of documents.\n    \n    Args:\n        documents: List of documents to process through the pipeline\n        pipeline_id: ID of an existing pipeline to simulate\n        pipeline: Pipeline definition to simulate (used if pipeline_id is not provided)\n        verbose: Whether to include detailed processor results\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "documents": {
                        "type": "string",
                        "description": "List of documents to process through the pipeline"
                    },
                    "pipeline_id": {
                        "type": "string",
                        "description": "ID of an existing pipeline to simulate"
                    },
                    "pipeline": {
                        "type": "string",
                        "description": "Pipeline definition to simulate (used if pipeline_id is not provided)"
                    },
                    "verbose": {
                        "type": "string",
                        "description": "Whether to include detailed processor results"
                    }
                },
                "required": [
                    "documents",
                    "pipeline_id",
                    "pipeline",
                    "verbose"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "node_info",
            "description": "Get information about nodes in the cluster.\n    \n    Args:\n        node_id: ID of the node to get info for (omit for all nodes)\n        metrics: Specific metrics to retrieve (e.g., 'os,process')\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "node_id": {
                        "type": "string",
                        "description": "ID of the node to get info for (omit for all nodes)"
                    },
                    "metrics": {
                        "type": "string",
                        "description": "Specific metrics to retrieve (e.g., 'os,process')"
                    }
                },
                "required": [
                    "node_id",
                    "metrics"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "node_stats",
            "description": "Get statistics about nodes in the cluster.\n    \n    Args:\n        node_id: ID of the node to get stats for (omit for all nodes)\n        metrics: Specific metrics to retrieve (e.g., 'jvm,os')\n        index_metrics: Index-specific metrics to retrieve\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "node_id": {
                        "type": "string",
                        "description": "ID of the node to get stats for (omit for all nodes)"
                    },
                    "metrics": {
                        "type": "string",
                        "description": "Specific metrics to retrieve (e.g., 'jvm,os')"
                    },
                    "index_metrics": {
                        "type": "string",
                        "description": "Index-specific metrics to retrieve"
                    }
                },
                "required": [
                    "node_id",
                    "metrics",
                    "index_metrics"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "cluster_info",
            "description": "Get basic information about the Elasticsearch cluster.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "cat_indices",
            "description": "List indices in a more readable format using the _cat API.\n    \n    Args:\n        format: Output format (default: json)\n        verbose: Include column headers\n        headers: Comma-separated list of headers to include\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "format": {
                        "type": "string",
                        "description": "Output format (default: json)"
                    },
                    "verbose": {
                        "type": "string",
                        "description": "Include column headers"
                    },
                    "headers": {
                        "type": "string",
                        "description": "Comma-separated list of headers to include"
                    }
                },
                "required": [
                    "format",
                    "verbose",
                    "headers"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "cat_nodes",
            "description": "List nodes in a more readable format using the _cat API.\n    \n    Args:\n        format: Output format (default: json)\n        verbose: Include column headers\n        headers: Comma-separated list of headers to include\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "format": {
                        "type": "string",
                        "description": "Output format (default: json)"
                    },
                    "verbose": {
                        "type": "string",
                        "description": "Include column headers"
                    },
                    "headers": {
                        "type": "string",
                        "description": "Comma-separated list of headers to include"
                    }
                },
                "required": [
                    "format",
                    "verbose",
                    "headers"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "cat_aliases",
            "description": "List aliases in a more readable format using the _cat API.\n    \n    Args:\n        format: Output format (default: json)\n        verbose: Include column headers\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "format": {
                        "type": "string",
                        "description": "Output format (default: json)"
                    },
                    "verbose": {
                        "type": "string",
                        "description": "Include column headers"
                    }
                },
                "required": [
                    "format",
                    "verbose"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "create_index_template",
            "description": "Create or update an index template.\n    \n    Args:\n        name: Name of the template\n        index_patterns: List of index patterns this template applies to\n        template: Template configuration including mappings and settings\n        version: Optional version number for the template\n        priority: Optional priority for the template\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the template"
                    },
                    "index_patterns": {
                        "type": "string",
                        "description": "List of index patterns this template applies to"
                    },
                    "template": {
                        "type": "string",
                        "description": "Template configuration including mappings and settings"
                    },
                    "version": {
                        "type": "string",
                        "description": "Optional version number for the template"
                    },
                    "priority": {
                        "type": "string",
                        "description": "Optional priority for the template"
                    }
                },
                "required": [
                    "name",
                    "index_patterns",
                    "template",
                    "version",
                    "priority"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "get_index_template",
            "description": "Get index template(s).\n    \n    Args:\n        name: Optional name of the template to retrieve. If not provided, all templates will be returned.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Optional name of the template to retrieve. If not provided, all templates will be returned."
                    }
                },
                "required": [
                    "name"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "delete_index_template",
            "description": "Delete an index template.\n    \n    Args:\n        name: Name of the template to delete\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the template to delete"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "file": "servers\\elasticsearch\\elasticsearch_mcp.py",
            "decorator": [
                "mcp.tool",
                "validate_params"
            ]
        },
        {
            "name": "list_gcs_buckets",
            "description": "List all GCS buckets in the Google Cloud project.\n    \n    Args:\n        project_id: Optional Google Cloud project ID\n    \n    Returns:\n        JSON string with bucket information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Optional Google Cloud project ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "Returns"
                ]
            },
            "file": "servers\\gcp\\gcp_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_gcs_objects",
            "description": "List objects in a GCS bucket.\n    \n    Args:\n        bucket_name: Name of the GCS bucket\n        prefix: Optional prefix to filter objects\n        max_items: Maximum number of items to return\n    \n    Returns:\n        JSON string with object information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "bucket_name": {
                        "type": "string",
                        "description": "Name of the GCS bucket"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "Optional prefix to filter objects"
                    },
                    "max_items": {
                        "type": "string",
                        "description": "Maximum number of items to return"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "bucket_name",
                    "prefix",
                    "max_items",
                    "Returns"
                ]
            },
            "file": "servers\\gcp\\gcp_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_gce_instances",
            "description": "List Compute Engine instances with their details.\n    \n    Args:\n        project_id: Optional Google Cloud project ID\n        zone: Optional compute zone (e.g., 'us-central1-a')\n    \n    Returns:\n        JSON string with GCE instance information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Optional Google Cloud project ID"
                    },
                    "zone": {
                        "type": "string",
                        "description": "Optional compute zone (e.g., 'us-central1-a')"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "zone",
                    "Returns"
                ]
            },
            "file": "servers\\gcp\\gcp_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_gce_images",
            "description": "List available Compute Engine images.\n    \n    Args:\n        project_id: Optional Google Cloud project ID (default: common GCP image projects)\n        family: Optional image family (e.g., 'debian-10', 'ubuntu-2004-lts')\n    \n    Returns:\n        JSON string with image information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Optional Google Cloud project ID (default: common GCP image projects)"
                    },
                    "family": {
                        "type": "string",
                        "description": "Optional image family (e.g., 'debian-10', 'ubuntu-2004-lts')"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "family",
                    "Returns"
                ]
            },
            "file": "servers\\gcp\\gcp_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "start_gce_instance",
            "description": "Start a Compute Engine instance.\n    \n    Args:\n        instance_name: Name of the GCE instance\n        zone: Compute zone where the instance is located\n        project_id: Optional Google Cloud project ID\n    \n    Returns:\n        JSON string with result information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "instance_name": {
                        "type": "string",
                        "description": "Name of the GCE instance"
                    },
                    "zone": {
                        "type": "string",
                        "description": "Compute zone where the instance is located"
                    },
                    "project_id": {
                        "type": "string",
                        "description": "Optional Google Cloud project ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "instance_name",
                    "zone",
                    "project_id",
                    "Returns"
                ]
            },
            "file": "servers\\gcp\\gcp_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "stop_gce_instance",
            "description": "Stop a Compute Engine instance.\n    \n    Args:\n        instance_name: Name of the GCE instance\n        zone: Compute zone where the instance is located\n        project_id: Optional Google Cloud project ID\n    \n    Returns:\n        JSON string with result information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "instance_name": {
                        "type": "string",
                        "description": "Name of the GCE instance"
                    },
                    "zone": {
                        "type": "string",
                        "description": "Compute zone where the instance is located"
                    },
                    "project_id": {
                        "type": "string",
                        "description": "Optional Google Cloud project ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "instance_name",
                    "zone",
                    "project_id",
                    "Returns"
                ]
            },
            "file": "servers\\gcp\\gcp_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_gce_instance",
            "description": "Create a new Compute Engine instance.\n    \n    Args:\n        instance_name: Name for the new instance\n        machine_type: Machine type (default: e2-micro)\n        image_project: Project containing the image\n        image_family: Image family to use\n        zone: Compute zone for the instance\n        project_id: Optional Google Cloud project ID\n        network: Network to use (default: default)\n        subnet: Optional subnet to use\n        external_ip: Whether to assign an external IP (default: True)\n    \n    Returns:\n        JSON string with instance information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "instance_name": {
                        "type": "string",
                        "description": "Name for the new instance"
                    },
                    "machine_type": {
                        "type": "string",
                        "description": "Machine type (default: e2-micro)"
                    },
                    "image_project": {
                        "type": "string",
                        "description": "Project containing the image"
                    },
                    "image_family": {
                        "type": "string",
                        "description": "Image family to use"
                    },
                    "zone": {
                        "type": "string",
                        "description": "Compute zone for the instance"
                    },
                    "project_id": {
                        "type": "string",
                        "description": "Optional Google Cloud project ID"
                    },
                    "network": {
                        "type": "string",
                        "description": "Network to use (default: default)"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "Optional subnet to use"
                    },
                    "external_ip": {
                        "type": "string",
                        "description": "Whether to assign an external IP (default: True)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "instance_name",
                    "machine_type",
                    "image_project",
                    "image_family",
                    "zone",
                    "project_id",
                    "network",
                    "subnet",
                    "external_ip",
                    "Returns"
                ]
            },
            "file": "servers\\gcp\\gcp_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_firewall_rules",
            "description": "List firewall rules in the project.\n    \n    Args:\n        project_id: Optional Google Cloud project ID\n    \n    Returns:\n        JSON string with firewall rule information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Optional Google Cloud project ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "Returns"
                ]
            },
            "file": "servers\\gcp\\gcp_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_cloud_functions",
            "description": "List all Cloud Functions in the project.\n    \n    Args:\n        project_id: Optional Google Cloud project ID\n        region: Region to list functions from (default: us-central1)\n    \n    Returns:\n        JSON string with Cloud Functions information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Optional Google Cloud project ID"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region to list functions from (default: us-central1)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "region",
                    "Returns"
                ]
            },
            "file": "servers\\gcp\\gcp_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_bigquery_datasets",
            "description": "List all BigQuery datasets in the project.\n    \n    Args:\n        project_id: Optional Google Cloud project ID\n    \n    Returns:\n        JSON string with dataset information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Optional Google Cloud project ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "Returns"
                ]
            },
            "file": "servers\\gcp\\gcp_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_bigquery_tables",
            "description": "List all tables in a BigQuery dataset.\n    \n    Args:\n        dataset_id: BigQuery dataset ID\n        project_id: Optional Google Cloud project ID\n    \n    Returns:\n        JSON string with table information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dataset_id": {
                        "type": "string",
                        "description": "BigQuery dataset ID"
                    },
                    "project_id": {
                        "type": "string",
                        "description": "Optional Google Cloud project ID"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "dataset_id",
                    "project_id",
                    "Returns"
                ]
            },
            "file": "servers\\gcp\\gcp_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_gke_clusters",
            "description": "List all GKE clusters in the project.\n    \n    Args:\n        project_id: Optional Google Cloud project ID\n        zone: Optional zone or region\n    \n    Returns:\n        JSON string with cluster information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Optional Google Cloud project ID"
                    },
                    "zone": {
                        "type": "string",
                        "description": "Optional zone or region"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "zone",
                    "Returns"
                ]
            },
            "file": "servers\\gcp\\gcp_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "run_gcp_code",
            "description": "Run Python code that interacts with GCP services.\n    \n    Args:\n        code: Python code to run (using Google Cloud libraries)\n        imports: Optional import statements to include\n    \n    Returns:\n        Output from the executed code\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Python code to run (using Google Cloud libraries)"
                    },
                    "imports": {
                        "type": "string",
                        "description": "Optional import statements to include"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "imports",
                    "Returns"
                ]
            },
            "file": "servers\\gcp\\gcp_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_gcp_regions",
            "description": "Return a list of GCP regions as a resource.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\gcp\\gcp_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "list_machine_types",
            "description": "Return a list of common GCE machine types.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\gcp\\gcp_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "search_repositories",
            "description": "Search for GitHub repositories based on a query.\n    \n    Args:\n        query: Search query using GitHub search syntax\n        page: Page number for pagination (default: 1)\n        perPage: Results per page (max 100, default: 30)\n    \n    Returns:\n        Formatted search results with repository details\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Search query using GitHub search syntax"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number for pagination (default: 1)"
                    },
                    "perPage": {
                        "type": "string",
                        "description": "Results per page (max 100, default: 30)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "query",
                    "page",
                    "perPage",
                    "Returns"
                ]
            },
            "file": "servers\\github\\github_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_repository",
            "description": "Create a new GitHub repository.\n    \n    Args:\n        name: Repository name\n        description: Repository description\n        private: Whether the repository should be private\n        autoInit: Initialize with README\n    \n    Returns:\n        Details of the created repository\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Repository name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Repository description"
                    },
                    "private": {
                        "type": "string",
                        "description": "Whether the repository should be private"
                    },
                    "autoInit": {
                        "type": "string",
                        "description": "Initialize with README"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "description",
                    "private",
                    "autoInit",
                    "Returns"
                ]
            },
            "file": "servers\\github\\github_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_file_contents",
            "description": "Get contents of a file or directory from a GitHub repository.\n    \n    Args:\n        owner: Repository owner (username or organization)\n        repo: Repository name\n        path: Path to file/directory\n        branch: Branch to get contents from (default: repo default branch)\n    \n    Returns:\n        File content or directory listing\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "owner": {
                        "type": "string",
                        "description": "Repository owner (username or organization)"
                    },
                    "repo": {
                        "type": "string",
                        "description": "Repository name"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path to file/directory"
                    },
                    "branch": {
                        "type": "string",
                        "description": "Branch to get contents from (default: repo default branch)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "owner",
                    "repo",
                    "path",
                    "branch",
                    "Returns"
                ]
            },
            "file": "servers\\github\\github_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "validate_visibility",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "create_or_update_file",
            "description": "Create or update a single file in a project.\n    \n    Args:\n        project_id: Project ID or URL-encoded path\n        file_path: Path where to create/update the file\n        content: Content of the file\n        commit_message: Commit message\n        branch: Branch to create/update the file in\n        previous_path: Path of the file to move/rename (optional)\n    \n    Returns:\n        Created/updated file details\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Project ID or URL-encoded path"
                    },
                    "file_path": {
                        "type": "string",
                        "description": "Path where to create/update the file"
                    },
                    "content": {
                        "type": "string",
                        "description": "Content of the file"
                    },
                    "commit_message": {
                        "type": "string",
                        "description": "Commit message"
                    },
                    "branch": {
                        "type": "string",
                        "description": "Branch to create/update the file in"
                    },
                    "previous_path": {
                        "type": "string",
                        "description": "Path of the file to move/rename (optional)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "file_path",
                    "content",
                    "commit_message",
                    "branch",
                    "previous_path",
                    "Returns"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "push_files",
            "description": "Push multiple files in a single commit.\n    \n    Args:\n        project_id: Project ID or URL-encoded path\n        branch: Branch to push to\n        files: List of files to push, each with 'file_path' and 'content'\n        commit_message: Commit message\n    \n    Returns:\n        Updated branch reference\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Project ID or URL-encoded path"
                    },
                    "branch": {
                        "type": "string",
                        "description": "Branch to push to"
                    },
                    "files": {
                        "type": "string",
                        "description": "List of files to push, each with 'file_path' and 'content'"
                    },
                    "commit_message": {
                        "type": "string",
                        "description": "Commit message"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "branch",
                    "files",
                    "commit_message",
                    "Returns"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "search_repositories",
            "description": "Search for GitLab projects.\n    \n    Args:\n        search: Search query\n        page: Page number for pagination (optional, default: 1)\n        per_page: Results per page (optional, default: 20)\n    \n    Returns:\n        List of matching projects\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "search": {
                        "type": "string",
                        "description": "Search query"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number for pagination (optional, default: 1)"
                    },
                    "per_page": {
                        "type": "string",
                        "description": "Results per page (optional, default: 20)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "search",
                    "page",
                    "per_page",
                    "Returns"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_repository",
            "description": "Create a new GitLab project.\n    \n    Args:\n        name: Project name\n        description: Project description (optional)\n        visibility: 'private', 'internal', or 'public' (optional, default: 'private')\n        initialize_with_readme: Initialize with README (optional, default: False)\n    \n    Returns:\n        Created project details\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Project name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Project description (optional)"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "'private', 'internal', or 'public' (optional, default: 'private')"
                    },
                    "initialize_with_readme": {
                        "type": "string",
                        "description": "Initialize with README (optional, default: False)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "description",
                    "visibility",
                    "initialize_with_readme",
                    "Returns"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_file_contents",
            "description": "Get contents of a file or directory.\n    \n    Args:\n        project_id: Project ID or URL-encoded path\n        file_path: Path to file/directory\n        ref: Branch/tag/commit to get contents from (optional)\n    \n    Returns:\n        File content or directory listing\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Project ID or URL-encoded path"
                    },
                    "file_path": {
                        "type": "string",
                        "description": "Path to file/directory"
                    },
                    "ref": {
                        "type": "string",
                        "description": "Branch/tag/commit to get contents from (optional)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "file_path",
                    "ref",
                    "Returns"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_issue",
            "description": "Create a new issue.\n    \n    Args:\n        project_id: Project ID or URL-encoded path\n        title: Issue title\n        description: Issue description (optional)\n        assignee_ids: User IDs to assign (optional)\n        labels: Labels to add (optional)\n        milestone_id: Milestone ID (optional)\n    \n    Returns:\n        Created issue details\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Project ID or URL-encoded path"
                    },
                    "title": {
                        "type": "string",
                        "description": "Issue title"
                    },
                    "description": {
                        "type": "string",
                        "description": "Issue description (optional)"
                    },
                    "assignee_ids": {
                        "type": "string",
                        "description": "User IDs to assign (optional)"
                    },
                    "labels": {
                        "type": "string",
                        "description": "Labels to add (optional)"
                    },
                    "milestone_id": {
                        "type": "string",
                        "description": "Milestone ID (optional)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "title",
                    "description",
                    "assignee_ids",
                    "labels",
                    "milestone_id",
                    "Returns"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_merge_request",
            "description": "Create a new merge request.\n    \n    Args:\n        project_id: Project ID or URL-encoded path\n        title: MR title\n        source_branch: Branch containing changes\n        target_branch: Branch to merge into\n        description: MR description (optional)\n        draft: Create as draft MR (optional, default: False)\n        allow_collaboration: Allow commits from upstream members (optional, default: False)\n    \n    Returns:\n        Created merge request details\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Project ID or URL-encoded path"
                    },
                    "title": {
                        "type": "string",
                        "description": "MR title"
                    },
                    "source_branch": {
                        "type": "string",
                        "description": "Branch containing changes"
                    },
                    "target_branch": {
                        "type": "string",
                        "description": "Branch to merge into"
                    },
                    "description": {
                        "type": "string",
                        "description": "MR description (optional)"
                    },
                    "draft": {
                        "type": "string",
                        "description": "Create as draft MR (optional, default: False)"
                    },
                    "allow_collaboration": {
                        "type": "string",
                        "description": "Allow commits from upstream members (optional, default: False)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "title",
                    "source_branch",
                    "target_branch",
                    "description",
                    "draft",
                    "allow_collaboration",
                    "Returns"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "fork_repository",
            "description": "Fork a project to the current user's namespace or a specified namespace.\n    \n    Args:\n        project_id: Project ID or URL-encoded path\n        namespace: Namespace to fork to (optional)\n    \n    Returns:\n        Forked project details\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Project ID or URL-encoded path"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to fork to (optional)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "namespace",
                    "Returns"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_branch",
            "description": "Create a new branch in a project.\n    \n    Args:\n        project_id: Project ID or URL-encoded path\n        branch: Name for new branch\n        ref: Source branch/commit for new branch (optional, default: 'main')\n    \n    Returns:\n        Created branch details\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Project ID or URL-encoded path"
                    },
                    "branch": {
                        "type": "string",
                        "description": "Name for new branch"
                    },
                    "ref": {
                        "type": "string",
                        "description": "Source branch/commit for new branch (optional, default: 'main')"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "branch",
                    "ref",
                    "Returns"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_branches",
            "description": "List branches in a project.\n    \n    Args:\n        project_id: Project ID or URL-encoded path\n        search: Filter branches by name (optional)\n    \n    Returns:\n        List of branches\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Project ID or URL-encoded path"
                    },
                    "search": {
                        "type": "string",
                        "description": "Filter branches by name (optional)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "search",
                    "Returns"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_issues",
            "description": "List issues in a project.\n    \n    Args:\n        project_id: Project ID or URL-encoded path\n        state: Filter issues by state ('opened', 'closed', or 'all') (optional, default: 'opened')\n        labels: Filter issues by labels (optional)\n        milestone: Filter issues by milestone (optional)\n        search: Search issues by title and description (optional)\n        page: Page number (optional, default: 1)\n        per_page: Number of items per page (optional, default: 20)\n    \n    Returns:\n        List of issues\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Project ID or URL-encoded path"
                    },
                    "state": {
                        "type": "string",
                        "description": "Filter issues by state ('opened', 'closed', or 'all') (optional, default: 'opened')"
                    },
                    "labels": {
                        "type": "string",
                        "description": "Filter issues by labels (optional)"
                    },
                    "milestone": {
                        "type": "string",
                        "description": "Filter issues by milestone (optional)"
                    },
                    "search": {
                        "type": "string",
                        "description": "Search issues by title and description (optional)"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number (optional, default: 1)"
                    },
                    "per_page": {
                        "type": "string",
                        "description": "Number of items per page (optional, default: 20)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "state",
                    "labels",
                    "milestone",
                    "search",
                    "page",
                    "per_page",
                    "Returns"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_project_details",
            "description": "Get details of a project.\n    \n    Args:\n        project_id: Project ID or URL-encoded path\n    \n    Returns:\n        Project details\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Project ID or URL-encoded path"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "Returns"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_commits",
            "description": "List commits in a project.\n    \n    Args:\n        project_id: Project ID or URL-encoded path\n        ref_name: Branch/tag name (optional)\n        path: Path to file (optional)\n        page: Page number (optional, default: 1)\n        per_page: Number of items per page (optional, default: 20)\n    \n    Returns:\n        List of commits\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Project ID or URL-encoded path"
                    },
                    "ref_name": {
                        "type": "string",
                        "description": "Branch/tag name (optional)"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path to file (optional)"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number (optional, default: 1)"
                    },
                    "per_page": {
                        "type": "string",
                        "description": "Number of items per page (optional, default: 20)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "ref_name",
                    "path",
                    "page",
                    "per_page",
                    "Returns"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_commit_details",
            "description": "Get details of a commit.\n    \n    Args:\n        project_id: Project ID or URL-encoded path\n        sha: Commit hash\n    \n    Returns:\n        Commit details\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Project ID or URL-encoded path"
                    },
                    "sha": {
                        "type": "string",
                        "description": "Commit hash"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "sha",
                    "Returns"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_merge_requests",
            "description": "List merge requests in a project.\n    \n    Args:\n        project_id: Project ID or URL-encoded path\n        state: Filter merge requests by state ('opened', 'closed', 'locked', 'merged', or 'all') (optional, default: 'opened')\n        target_branch: Filter by target branch (optional)\n        source_branch: Filter by source branch (optional)\n        page: Page number (optional, default: 1)\n        per_page: Number of items per page (optional, default: 20)\n    \n    Returns:\n        List of merge requests\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string",
                        "description": "Project ID or URL-encoded path"
                    },
                    "state": {
                        "type": "string",
                        "description": "Filter merge requests by state ('opened', 'closed', 'locked', 'merged', or 'all') (optional, default: 'opened')"
                    },
                    "target_branch": {
                        "type": "string",
                        "description": "Filter by target branch (optional)"
                    },
                    "source_branch": {
                        "type": "string",
                        "description": "Filter by source branch (optional)"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number (optional, default: 1)"
                    },
                    "per_page": {
                        "type": "string",
                        "description": "Number of items per page (optional, default: 20)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "project_id",
                    "state",
                    "target_branch",
                    "source_branch",
                    "page",
                    "per_page",
                    "Returns"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_user_info",
            "description": "Get information about a user or the current authenticated user.\n    \n    Args:\n        user_id: User ID or username (optional, defaults to current user)\n    \n    Returns:\n        User information\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "User ID or username (optional, defaults to current user)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "user_id",
                    "Returns"
                ]
            },
            "file": "servers\\gitlab\\gitlab_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "validate_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "validate_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "validate_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "validate_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "validate_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "validate_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "mimir_instant_query",
            "description": "\n    Execute an instant query against Grafana Mimir.\n    \n    Args:\n        query: Prometheus query string\n        time: Optional evaluation timestamp (RFC3339 or Unix timestamp)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Prometheus query string"
                    },
                    "time": {
                        "type": "string",
                        "description": "Optional evaluation timestamp (RFC3339 or Unix timestamp)"
                    }
                },
                "required": [
                    "query",
                    "time"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "mimir_range_query",
            "description": "\n    Execute a range query against Grafana Mimir.\n    \n    Args:\n        query: Prometheus query string\n        start: Start timestamp (RFC3339 or Unix timestamp)\n        end: End timestamp (RFC3339 or Unix timestamp)\n        step: Query resolution step width (duration format or float seconds)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Prometheus query string"
                    },
                    "start": {
                        "type": "string",
                        "description": "Start timestamp (RFC3339 or Unix timestamp)"
                    },
                    "end": {
                        "type": "string",
                        "description": "End timestamp (RFC3339 or Unix timestamp)"
                    },
                    "step": {
                        "type": "string",
                        "description": "Query resolution step width (duration format or float seconds)"
                    }
                },
                "required": [
                    "query",
                    "start",
                    "end",
                    "step"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "mimir_get_series",
            "description": "\n    Get series metadata from Grafana Mimir.\n    \n    Args:\n        match: Series selectors\n        start: Optional start timestamp\n        end: Optional end timestamp\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "match": {
                        "type": "string",
                        "description": "Series selectors"
                    },
                    "start": {
                        "type": "string",
                        "description": "Optional start timestamp"
                    },
                    "end": {
                        "type": "string",
                        "description": "Optional end timestamp"
                    }
                },
                "required": [
                    "match",
                    "start",
                    "end"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "loki_query",
            "description": "\n    Execute an instant query against Grafana Loki.\n    \n    Args:\n        query: LogQL query string\n        limit: Maximum number of entries to return\n        time: Optional query evaluation timestamp\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "LogQL query string"
                    },
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of entries to return"
                    },
                    "time": {
                        "type": "string",
                        "description": "Optional query evaluation timestamp"
                    }
                },
                "required": [
                    "query",
                    "limit",
                    "time"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "loki_query_range",
            "description": "\n    Execute a range query against Grafana Loki.\n    \n    Args:\n        query: LogQL query string\n        start: Start timestamp (RFC3339 or Unix timestamp)\n        end: End timestamp (RFC3339 or Unix timestamp)\n        limit: Maximum number of entries to return\n        step: Optional step parameter for aggregation\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "LogQL query string"
                    },
                    "start": {
                        "type": "string",
                        "description": "Start timestamp (RFC3339 or Unix timestamp)"
                    },
                    "end": {
                        "type": "string",
                        "description": "End timestamp (RFC3339 or Unix timestamp)"
                    },
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of entries to return"
                    },
                    "step": {
                        "type": "string",
                        "description": "Optional step parameter for aggregation"
                    }
                },
                "required": [
                    "query",
                    "start",
                    "end",
                    "limit",
                    "step"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "loki_get_labels",
            "description": "Retrieve available log labels from Grafana Loki.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "check_grafana_health",
            "description": "Check the health of the Grafana instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_dashboard",
            "description": "\n    Retrieve a dashboard by UID.\n    \n    Args:\n        dashboard_uid: Dashboard UID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dashboard_uid": {
                        "type": "string",
                        "description": "Dashboard UID"
                    }
                },
                "required": [
                    "dashboard_uid"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_dashboard",
            "description": "\n    Create or update a dashboard.\n    \n    Args:\n        dashboard_json: Dashboard JSON\n        overwrite: Whether to overwrite existing dashboard\n        message: Optional commit message\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dashboard_json": {
                        "type": "string",
                        "description": "Dashboard JSON"
                    },
                    "overwrite": {
                        "type": "string",
                        "description": "Whether to overwrite existing dashboard"
                    },
                    "message": {
                        "type": "string",
                        "description": "Optional commit message"
                    }
                },
                "required": [
                    "dashboard_json",
                    "overwrite",
                    "message"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_dashboard",
            "description": "\n    Delete a dashboard by UID.\n    \n    Args:\n        dashboard_uid: Dashboard UID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dashboard_uid": {
                        "type": "string",
                        "description": "Dashboard UID"
                    }
                },
                "required": [
                    "dashboard_uid"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_all_dashboards",
            "description": "\n    Retrieve all dashboards.\n    \n    Args:\n        type: Optional dashboard type filter\n        tag: Optional dashboard tag filter\n        limit: Optional maximum number of dashboards to return\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Optional dashboard type filter"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Optional dashboard tag filter"
                    },
                    "limit": {
                        "type": "string",
                        "description": "Optional maximum number of dashboards to return"
                    }
                },
                "required": [
                    "type",
                    "tag",
                    "limit"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_plugins",
            "description": "Retrieve all installed plugins.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_datasource",
            "description": "\n    Retrieve a data source by ID.\n    \n    Args:\n        datasource_id: Data source ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "datasource_id": {
                        "type": "string",
                        "description": "Data source ID"
                    }
                },
                "required": [
                    "datasource_id"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_datasource",
            "description": "\n    Create a data source.\n    \n    Args:\n        datasource_json: Data source JSON\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "datasource_json": {
                        "type": "string",
                        "description": "Data source JSON"
                    }
                },
                "required": [
                    "datasource_json"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_datasource",
            "description": "\n    Delete a data source by ID.\n    \n    Args:\n        datasource_id: Data source ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "datasource_id": {
                        "type": "string",
                        "description": "Data source ID"
                    }
                },
                "required": [
                    "datasource_id"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_alertmanager_config",
            "description": "Retrieve the current Alertmanager configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "set_alertmanager_config",
            "description": "\n    Update the Alertmanager configuration.\n    \n    Args:\n        config_json: Configuration JSON\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "config_json": {
                        "type": "string",
                        "description": "Configuration JSON"
                    }
                },
                "required": [
                    "config_json"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_alert_rules",
            "description": "\n    Retrieve alert rules.\n    \n    Args:\n        dashboard_uid: Optional dashboard UID filter\n        panel_id: Optional panel ID filter\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dashboard_uid": {
                        "type": "string",
                        "description": "Optional dashboard UID filter"
                    },
                    "panel_id": {
                        "type": "string",
                        "description": "Optional panel ID filter"
                    }
                },
                "required": [
                    "dashboard_uid",
                    "panel_id"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_alert_rule",
            "description": "\n    Create an alert rule.\n    \n    Args:\n        rule_json: Alert rule JSON\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "rule_json": {
                        "type": "string",
                        "description": "Alert rule JSON"
                    }
                },
                "required": [
                    "rule_json"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_alert_rule",
            "description": "\n    Delete an alert rule by UID.\n    \n    Args:\n        rule_uid: Alert rule UID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "rule_uid": {
                        "type": "string",
                        "description": "Alert rule UID"
                    }
                },
                "required": [
                    "rule_uid"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "query_data_source",
            "description": "\n    Query a data source.\n    \n    Args:\n        datasource_id: Data source ID\n        query_json: Query JSON\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "datasource_id": {
                        "type": "string",
                        "description": "Data source ID"
                    },
                    "query_json": {
                        "type": "string",
                        "description": "Query JSON"
                    }
                },
                "required": [
                    "datasource_id",
                    "query_json"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "mimir_remote_write",
            "description": "\n    Write metrics to Grafana Mimir using remote write.\n    \n    Args:\n        metrics_json: Metrics JSON in Prometheus format\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "metrics_json": {
                        "type": "string",
                        "description": "Metrics JSON in Prometheus format"
                    }
                },
                "required": [
                    "metrics_json"
                ]
            },
            "file": "servers\\grafana\\grafana_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_jenkins_version",
            "description": "Get the Jenkins server version and basic information.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_job_details",
            "description": "\n    Get detailed information about a specific Jenkins job.\n    \n    Args:\n        job_name: Name of the Jenkins job\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "job_name": {
                        "type": "string",
                        "description": "Name of the Jenkins job"
                    }
                },
                "required": [
                    "job_name"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_last_build_status",
            "description": "\n    Get the status of the last build for a specific job.\n    \n    Args:\n        job_name_input: Job name input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "job_name_input": {
                        "type": "string",
                        "description": "Job name input model"
                    }
                },
                "required": [
                    "job_name_input"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "trigger_build",
            "description": "\n    Trigger a build for a specific job with optional parameters.\n    \n    Args:\n        input_data: Build trigger input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_data": {
                        "type": "string",
                        "description": "Build trigger input model"
                    }
                },
                "required": [
                    "input_data"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_plugin_details",
            "description": "Get information about all installed Jenkins plugins.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "install_plugin",
            "description": "\n    Install a plugin in Jenkins.\n    \n    Args:\n        input_data: Plugin installation input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_data": {
                        "type": "string",
                        "description": "Plugin installation input model"
                    }
                },
                "required": [
                    "input_data"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_node_details",
            "description": "Get information about all Jenkins nodes (including the master).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_queue_details",
            "description": "List items in the Jenkins build queue.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_job",
            "description": "\n    Create a new Jenkins job.\n    \n    Args:\n        input_data: Job creation input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_data": {
                        "type": "string",
                        "description": "Job creation input model"
                    }
                },
                "required": [
                    "input_data"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "restart_jenkins",
            "description": "Restart the Jenkins server.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_build_status",
            "description": "\n    Get the status of a specific build.\n    \n    Args:\n        input_data: Build status input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_data": {
                        "type": "string",
                        "description": "Build status input model"
                    }
                },
                "required": [
                    "input_data"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_last_successful_build",
            "description": "\n    Get the status of the last successful build for a job.\n    \n    Args:\n        job_name_input: Job name input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "job_name_input": {
                        "type": "string",
                        "description": "Job name input model"
                    }
                },
                "required": [
                    "job_name_input"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_last_failed_build",
            "description": "\n    Get the status of the last failed build for a job.\n    \n    Args:\n        job_name_input: Job name input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "job_name_input": {
                        "type": "string",
                        "description": "Job name input model"
                    }
                },
                "required": [
                    "job_name_input"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "stop_build",
            "description": "\n    Stop a running build.\n    \n    Args:\n        input_data: Build status input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_data": {
                        "type": "string",
                        "description": "Build status input model"
                    }
                },
                "required": [
                    "input_data"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_pipeline_description",
            "description": "\n    Get pipeline job description.\n    \n    Args:\n        job_name_input: Job name input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "job_name_input": {
                        "type": "string",
                        "description": "Job name input model"
                    }
                },
                "required": [
                    "job_name_input"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_builds_list",
            "description": "\n    Get a list of builds for a job.\n    \n    Args:\n        input_data: Builds list input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_data": {
                        "type": "string",
                        "description": "Builds list input model"
                    }
                },
                "required": [
                    "input_data"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_running_builds",
            "description": "Get information about all currently running builds.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_build_description",
            "description": "\n    Update the description of a build.\n    \n    Args:\n        input_data: Update build description input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_data": {
                        "type": "string",
                        "description": "Update build description input model"
                    }
                },
                "required": [
                    "input_data"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_job",
            "description": "\n    Delete a Jenkins job.\n    \n    Args:\n        job_name_input: Job name input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "job_name_input": {
                        "type": "string",
                        "description": "Job name input model"
                    }
                },
                "required": [
                    "job_name_input"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "copy_job",
            "description": "\n    Copy a Jenkins job to create a new one.\n    \n    Args:\n        input_data: Copy job input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_data": {
                        "type": "string",
                        "description": "Copy job input model"
                    }
                },
                "required": [
                    "input_data"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_job_config",
            "description": "\n    Get the XML configuration of a job.\n    \n    Args:\n        job_name_input: Job name input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "job_name_input": {
                        "type": "string",
                        "description": "Job name input model"
                    }
                },
                "required": [
                    "job_name_input"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_job_config",
            "description": "\n    Update the configuration of a job.\n    \n    Args:\n        input_data: Update job config input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_data": {
                        "type": "string",
                        "description": "Update job config input model"
                    }
                },
                "required": [
                    "input_data"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "enable_job",
            "description": "\n    Enable a disabled Jenkins job.\n    \n    Args:\n        job_name_input: Job name input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "job_name_input": {
                        "type": "string",
                        "description": "Job name input model"
                    }
                },
                "required": [
                    "job_name_input"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "disable_job",
            "description": "\n    Disable a Jenkins job.\n    \n    Args:\n        job_name_input: Job name input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "job_name_input": {
                        "type": "string",
                        "description": "Job name input model"
                    }
                },
                "required": [
                    "job_name_input"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_build_console_output",
            "description": "\n    Get the console output of a specific build.\n    \n    Args:\n        input_data: Build status input model\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_data": {
                        "type": "string",
                        "description": "Build status input model"
                    }
                },
                "required": [
                    "input_data"
                ]
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_crumb",
            "description": "Get a CSRF protection crumb for use with POST requests.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\jenkins\\jenkins_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "choose_namespace",
            "description": "Set the default namespace for subsequent commands.\n    \n    Args:\n        namespace: Name of the namespace to use\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Name of the namespace to use"
                    }
                },
                "required": [
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_namespaces",
            "description": "List all namespaces in the cluster.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_pods",
            "description": "List all pods in a namespace.\n    \n    Args:\n        namespace: Namespace to list pods from (uses current namespace if not specified)\n        label_selector: Label selector to filter pods (e.g. \"app=nginx\")\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to list pods from (uses current namespace if not specified)"
                    },
                    "label_selector": {
                        "type": "string",
                        "description": "Label selector to filter pods (e.g. \"app=nginx\")"
                    }
                },
                "required": [
                    "namespace",
                    "label_selector"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_services",
            "description": "List all services in a namespace.\n    \n    Args:\n        namespace: Namespace to list services from (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to list services from (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_deployments",
            "description": "List all deployments in a namespace.\n    \n    Args:\n        namespace: Namespace to list deployments from (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to list deployments from (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_nodes",
            "description": "List all nodes in the cluster.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_pod",
            "description": "Create a pod from YAML manifest.\n    \n    Args:\n        manifest: YAML manifest defining the pod\n        namespace: Namespace to create the pod in (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "manifest": {
                        "type": "string",
                        "description": "YAML manifest defining the pod"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to create the pod in (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "manifest",
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_pod",
            "description": "Delete a pod.\n    \n    Args:\n        name: Name of the pod to delete\n        namespace: Namespace of the pod (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the pod to delete"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace of the pod (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "name",
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "describe_pod",
            "description": "Describe a pod, showing detailed information.\n    \n    Args:\n        name: Name of the pod to describe\n        namespace: Namespace of the pod (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the pod to describe"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace of the pod (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "name",
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_pod_logs",
            "description": "Get logs from a pod.\n    \n    Args:\n        name: Name of the pod, deployment, or job to get logs from\n        namespace: Namespace of the resource (uses current namespace if not specified)\n        container: Name of the container (if pod has multiple containers)\n        tail_lines: Number of lines to show from the end of the logs\n        previous: If true, get logs from previous instance of the container\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the pod, deployment, or job to get logs from"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace of the resource (uses current namespace if not specified)"
                    },
                    "container": {
                        "type": "string",
                        "description": "Name of the container (if pod has multiple containers)"
                    },
                    "tail_lines": {
                        "type": "string",
                        "description": "Number of lines to show from the end of the logs"
                    },
                    "previous": {
                        "type": "string",
                        "description": "If true, get logs from previous instance of the container"
                    }
                },
                "required": [
                    "name",
                    "namespace",
                    "container",
                    "tail_lines",
                    "previous"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "exec_kubectl",
            "description": "Execute a raw kubectl command.\n    \n    Args:\n        command: The kubectl command to execute (without 'kubectl' prefix)\n        namespace: Namespace to use (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "command": {
                        "type": "string",
                        "description": "The kubectl command to execute (without 'kubectl' prefix)"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to use (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "command",
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "install_helm_chart",
            "description": "Install a Helm chart.\n    \n    Args:\n        release_name: Name for the release\n        chart: Name of the chart to install\n        namespace: Namespace to install into (uses current namespace if not specified)\n        repo: Repository to use (e.g., \"stable\" or URL)\n        version: Specific version to install\n        values: YAML-formatted values to override defaults\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "release_name": {
                        "type": "string",
                        "description": "Name for the release"
                    },
                    "chart": {
                        "type": "string",
                        "description": "Name of the chart to install"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to install into (uses current namespace if not specified)"
                    },
                    "repo": {
                        "type": "string",
                        "description": "Repository to use (e.g., \"stable\" or URL)"
                    },
                    "version": {
                        "type": "string",
                        "description": "Specific version to install"
                    },
                    "values": {
                        "type": "string",
                        "description": "YAML-formatted values to override defaults"
                    }
                },
                "required": [
                    "release_name",
                    "chart",
                    "namespace",
                    "repo",
                    "version",
                    "values"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "uninstall_helm_release",
            "description": "Uninstall a Helm release.\n    \n    Args:\n        release_name: Name of the release to uninstall\n        namespace: Namespace of the release (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "release_name": {
                        "type": "string",
                        "description": "Name of the release to uninstall"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace of the release (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "release_name",
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_helm_releases",
            "description": "List Helm releases.\n    \n    Args:\n        namespace: Namespace to list releases from (uses current namespace if not specified)\n        all_namespaces: If true, list releases across all namespaces\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to list releases from (uses current namespace if not specified)"
                    },
                    "all_namespaces": {
                        "type": "string",
                        "description": "If true, list releases across all namespaces"
                    }
                },
                "required": [
                    "namespace",
                    "all_namespaces"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "upgrade_helm_release",
            "description": "Upgrade a Helm release.\n    \n    Args:\n        release_name: Name of the release to upgrade\n        chart: Chart name or path\n        namespace: Namespace of the release (uses current namespace if not specified)\n        repo: Repository to use\n        version: Version to upgrade to\n        values: YAML-formatted values to override\n        reset_values: If true, reset values to chart defaults\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "release_name": {
                        "type": "string",
                        "description": "Name of the release to upgrade"
                    },
                    "chart": {
                        "type": "string",
                        "description": "Chart name or path"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace of the release (uses current namespace if not specified)"
                    },
                    "repo": {
                        "type": "string",
                        "description": "Repository to use"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version to upgrade to"
                    },
                    "values": {
                        "type": "string",
                        "description": "YAML-formatted values to override"
                    },
                    "reset_values": {
                        "type": "string",
                        "description": "If true, reset values to chart defaults"
                    }
                },
                "required": [
                    "release_name",
                    "chart",
                    "namespace",
                    "repo",
                    "version",
                    "values",
                    "reset_values"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "port_forward",
            "description": "Forward a local port to a port on a Kubernetes resource.\n    \n    Args:\n        resource: Name of the Kubernetes resource\n        local_port: Local port to forward from\n        remote_port: Remote port to forward to\n        namespace: Namespace of the resource (uses current namespace if not specified)\n        resource_type: Type of resource (pod, service, deployment)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "resource": {
                        "type": "string",
                        "description": "Name of the Kubernetes resource"
                    },
                    "local_port": {
                        "type": "string",
                        "description": "Local port to forward from"
                    },
                    "remote_port": {
                        "type": "string",
                        "description": "Remote port to forward to"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace of the resource (uses current namespace if not specified)"
                    },
                    "resource_type": {
                        "type": "string",
                        "description": "Type of resource (pod, service, deployment)"
                    }
                },
                "required": [
                    "resource",
                    "local_port",
                    "remote_port",
                    "namespace",
                    "resource_type"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "stop_port_forward",
            "description": "Stop a port forwarding process.\n    \n    Args:\n        local_port: The local port to stop forwarding\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "local_port": {
                        "type": "string",
                        "description": "The local port to stop forwarding"
                    }
                },
                "required": [
                    "local_port"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_port_forwards",
            "description": "List all active port forwards.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_events",
            "description": "Get Kubernetes events from the cluster.\n    \n    Args:\n        namespace: Namespace to get events from (uses current namespace if not specified)\n        field_selector: Field selector to filter events (e.g. \"involvedObject.name=nginx\")\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to get events from (uses current namespace if not specified)"
                    },
                    "field_selector": {
                        "type": "string",
                        "description": "Field selector to filter events (e.g. \"involvedObject.name=nginx\")"
                    }
                },
                "required": [
                    "namespace",
                    "field_selector"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "kubectl_explain",
            "description": "Get explanation for Kubernetes resource kind.\n    \n    Args:\n        resource: Resource kind to explain (e.g., pod, service, deployment)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "resource": {
                        "type": "string",
                        "description": "Resource kind to explain (e.g., pod, service, deployment)"
                    }
                },
                "required": [
                    "resource"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "kubectl_api_resources",
            "description": "List available Kubernetes API resources.\n    \n    Args:\n        namespaced: If true, show only namespaced resources\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespaced": {
                        "type": "string",
                        "description": "If true, show only namespaced resources"
                    }
                },
                "required": [
                    "namespaced"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_statefulsets",
            "description": "List all StatefulSets in a namespace.\n    \n    Args:\n        namespace: Namespace to list StatefulSets from (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to list StatefulSets from (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_daemonsets",
            "description": "List all DaemonSets in a namespace.\n    \n    Args:\n        namespace: Namespace to list DaemonSets from (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to list DaemonSets from (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_cronjobs",
            "description": "List all CronJobs in a namespace.\n    \n    Args:\n        namespace: Namespace to list CronJobs from (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to list CronJobs from (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_deployment",
            "description": "Update a deployment with new replicas count or image.\n    \n    Args:\n        name: Name of the deployment to update\n        replicas: New number of replicas (optional)\n        image: New container image (optional)\n        namespace: Namespace of the deployment (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the deployment to update"
                    },
                    "replicas": {
                        "type": "string",
                        "description": "New number of replicas (optional)"
                    },
                    "image": {
                        "type": "string",
                        "description": "New container image (optional)"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace of the deployment (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "name",
                    "replicas",
                    "image",
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "rollback_deployment",
            "description": "Rollback a deployment to a previous revision.\n    \n    Args:\n        name: Name of the deployment to rollback\n        revision: Revision to rollback to (optional, defaults to previous revision)\n        namespace: Namespace of the deployment (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the deployment to rollback"
                    },
                    "revision": {
                        "type": "string",
                        "description": "Revision to rollback to (optional, defaults to previous revision)"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace of the deployment (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "name",
                    "revision",
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_persistent_volumes",
            "description": "List all PersistentVolumes in the cluster.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_persistent_volume_claims",
            "description": "List all PersistentVolumeClaims in a namespace.\n    \n    Args:\n        namespace: Namespace to list PVCs from (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to list PVCs from (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_persistent_volume_claim",
            "description": "Create a PersistentVolumeClaim.\n    \n    Args:\n        name: Name of the PVC\n        storage_class: StorageClass to use\n        size: Size of the volume (e.g., \"1Gi\")\n        access_modes: Access modes (default: [\"ReadWriteOnce\"])\n        namespace: Namespace to create the PVC in (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the PVC"
                    },
                    "storage_class": {
                        "type": "string",
                        "description": "StorageClass to use"
                    },
                    "size": {
                        "type": "string",
                        "description": "Size of the volume (e.g., \"1Gi\")"
                    },
                    "access_modes": {
                        "type": "string",
                        "description": "Access modes (default: [\"ReadWriteOnce\"])"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to create the PVC in (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "name",
                    "storage_class",
                    "size",
                    "access_modes",
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_configmaps",
            "description": "List all ConfigMaps in a namespace.\n    \n    Args:\n        namespace: Namespace to list ConfigMaps from (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to list ConfigMaps from (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_configmap",
            "description": "Create a ConfigMap.\n    \n    Args:\n        name: Name of the ConfigMap\n        data: Dictionary of key-value pairs to store in the ConfigMap\n        namespace: Namespace to create the ConfigMap in (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the ConfigMap"
                    },
                    "data": {
                        "type": "string",
                        "description": "Dictionary of key-value pairs to store in the ConfigMap"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to create the ConfigMap in (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "name",
                    "data",
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_secrets",
            "description": "List all Secrets in a namespace.\n    \n    Args:\n        namespace: Namespace to list Secrets from (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to list Secrets from (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_secret",
            "description": "Create a Secret.\n    \n    Args:\n        name: Name of the Secret\n        data: Dictionary of key-value pairs to store in the Secret\n        secret_type: Type of Secret (default: \"Opaque\")\n        namespace: Namespace to create the Secret in (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Secret"
                    },
                    "data": {
                        "type": "string",
                        "description": "Dictionary of key-value pairs to store in the Secret"
                    },
                    "secret_type": {
                        "type": "string",
                        "description": "Type of Secret (default: \"Opaque\")"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to create the Secret in (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "name",
                    "data",
                    "secret_type",
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_roles",
            "description": "List all Roles in a namespace.\n    \n    Args:\n        namespace: Namespace to list Roles from (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to list Roles from (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_role_bindings",
            "description": "List all RoleBindings in a namespace.\n    \n    Args:\n        namespace: Namespace to list RoleBindings from (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to list RoleBindings from (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_cluster_metrics",
            "description": "Get cluster resource utilization metrics.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_network_policies",
            "description": "List all NetworkPolicies in a namespace.\n    \n    Args:\n        namespace: Namespace to list NetworkPolicies from (uses current namespace if not specified)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Namespace to list NetworkPolicies from (uses current namespace if not specified)"
                    }
                },
                "required": [
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_custom_resource_definitions",
            "description": "List all CustomResourceDefinitions in the cluster.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_argo_cd_applications",
            "description": "List all ArgoCD Applications.\n    \n    Args:\n        namespace: Namespace where ArgoCD is installed (default: argocd)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Namespace where ArgoCD is installed (default: argocd)"
                    }
                },
                "required": [
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_flux_resources",
            "description": "List Flux resources like GitRepositories, Kustomizations, etc.\n    \n    Args:\n        namespace: Namespace where Flux is installed (default: flux-system)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "Namespace where Flux is installed (default: flux-system)"
                    }
                },
                "required": [
                    "namespace"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "open_web_dashboard",
            "description": "Open the Kubernetes Dashboard (if installed) or create a kubectl proxy for it.\n    \n    Args:\n        browser: If true, attempts to open the dashboard in the default browser\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "browser": {
                        "type": "string",
                        "description": "If true, attempts to open the dashboard in the default browser"
                    }
                },
                "required": [
                    "browser"
                ]
            },
            "file": "servers\\kubernetes\\kubernetes_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_applications",
            "description": "\n    List applications associated with your New Relic account.\n    \n    Args:\n        filter_name: Filter by application name\n        filter_host: Filter by application host\n        filter_language: Filter by application language\n        page: Pagination index\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filter_name": {
                        "type": "string",
                        "description": "Filter by application name"
                    },
                    "filter_host": {
                        "type": "string",
                        "description": "Filter by application host"
                    },
                    "filter_language": {
                        "type": "string",
                        "description": "Filter by application language"
                    },
                    "page": {
                        "type": "string",
                        "description": "Pagination index"
                    }
                },
                "required": [
                    "filter_name",
                    "filter_host",
                    "filter_language",
                    "page"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_application",
            "description": "\n    Get details for a specific application.\n    \n    Args:\n        app_id: Application ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Application ID"
                    }
                },
                "required": [
                    "app_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_application",
            "description": "\n    Update an application's settings.\n    \n    Args:\n        app_id: Application ID\n        name: New application name\n        app_apdex_threshold: New application Apdex threshold\n        end_user_apdex_threshold: New end user Apdex threshold\n        enable_real_user_monitoring: Enable or disable real user monitoring\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Application ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "New application name"
                    },
                    "app_apdex_threshold": {
                        "type": "string",
                        "description": "New application Apdex threshold"
                    },
                    "end_user_apdex_threshold": {
                        "type": "string",
                        "description": "New end user Apdex threshold"
                    },
                    "enable_real_user_monitoring": {
                        "type": "string",
                        "description": "Enable or disable real user monitoring"
                    }
                },
                "required": [
                    "app_id",
                    "name",
                    "app_apdex_threshold",
                    "end_user_apdex_threshold",
                    "enable_real_user_monitoring"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_application",
            "description": "\n    Delete an application.\n    \n    Args:\n        app_id: Application ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Application ID"
                    }
                },
                "required": [
                    "app_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_application_metrics",
            "description": "\n    Get available metrics for an application.\n    \n    Args:\n        app_id: Application ID\n        name_filter: Filter metrics by name\n        page: Pagination index\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Application ID"
                    },
                    "name_filter": {
                        "type": "string",
                        "description": "Filter metrics by name"
                    },
                    "page": {
                        "type": "string",
                        "description": "Pagination index"
                    }
                },
                "required": [
                    "app_id",
                    "name_filter",
                    "page"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_application_metric_data",
            "description": "\n    Get metric data for an application.\n    \n    Args:\n        app_id: Application ID\n        names: List of metric names to retrieve\n        values: List of specific metric values to retrieve\n        from_date: Start time in ISO 8601 format (e.g. 2023-03-01T00:00:00+00:00)\n        to_date: End time in ISO 8601 format\n        period: Period of timeslices in seconds\n        summarize: Whether to summarize the data\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Application ID"
                    },
                    "names": {
                        "type": "string",
                        "description": "List of metric names to retrieve"
                    },
                    "values": {
                        "type": "string",
                        "description": "List of specific metric values to retrieve"
                    },
                    "from_date": {
                        "type": "string",
                        "description": "Start time in ISO 8601 format (e.g. 2023-03-01T00:00:00+00:00)"
                    },
                    "to_date": {
                        "type": "string",
                        "description": "End time in ISO 8601 format"
                    },
                    "period": {
                        "type": "string",
                        "description": "Period of timeslices in seconds"
                    },
                    "summarize": {
                        "type": "string",
                        "description": "Whether to summarize the data"
                    }
                },
                "required": [
                    "app_id",
                    "names",
                    "values",
                    "from_date",
                    "to_date",
                    "period",
                    "summarize"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_deployments",
            "description": "\n    List deployments for an application.\n    \n    Args:\n        app_id: Application ID\n        page: Pagination index\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Application ID"
                    },
                    "page": {
                        "type": "string",
                        "description": "Pagination index"
                    }
                },
                "required": [
                    "app_id",
                    "page"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_deployment",
            "description": "\n    Create a deployment for an application.\n    \n    Args:\n        app_id: Application ID\n        revision: Deployment revision (e.g. git SHA)\n        changelog: Deployment changelog\n        description: Deployment description\n        user: User who performed the deployment\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Application ID"
                    },
                    "revision": {
                        "type": "string",
                        "description": "Deployment revision (e.g. git SHA)"
                    },
                    "changelog": {
                        "type": "string",
                        "description": "Deployment changelog"
                    },
                    "description": {
                        "type": "string",
                        "description": "Deployment description"
                    },
                    "user": {
                        "type": "string",
                        "description": "User who performed the deployment"
                    }
                },
                "required": [
                    "app_id",
                    "revision",
                    "changelog",
                    "description",
                    "user"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_deployment",
            "description": "\n    Delete a deployment.\n    \n    Args:\n        app_id: Application ID\n        deployment_id: Deployment ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Application ID"
                    },
                    "deployment_id": {
                        "type": "string",
                        "description": "Deployment ID"
                    }
                },
                "required": [
                    "app_id",
                    "deployment_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_application_hosts",
            "description": "\n    List hosts for an application.\n    \n    Args:\n        app_id: Application ID\n        filter_hostname: Filter by hostname\n        page: Pagination index\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Application ID"
                    },
                    "filter_hostname": {
                        "type": "string",
                        "description": "Filter by hostname"
                    },
                    "page": {
                        "type": "string",
                        "description": "Pagination index"
                    }
                },
                "required": [
                    "app_id",
                    "filter_hostname",
                    "page"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_application_host",
            "description": "\n    Get details for a specific application host.\n    \n    Args:\n        app_id: Application ID\n        host_id: Application host ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Application ID"
                    },
                    "host_id": {
                        "type": "string",
                        "description": "Application host ID"
                    }
                },
                "required": [
                    "app_id",
                    "host_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_application_instances",
            "description": "\n    List instances for an application.\n    \n    Args:\n        app_id: Application ID\n        filter_hostname: Filter by hostname\n        page: Pagination index\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Application ID"
                    },
                    "filter_hostname": {
                        "type": "string",
                        "description": "Filter by hostname"
                    },
                    "page": {
                        "type": "string",
                        "description": "Pagination index"
                    }
                },
                "required": [
                    "app_id",
                    "filter_hostname",
                    "page"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_application_instance",
            "description": "\n    Get details for a specific application instance.\n    \n    Args:\n        app_id: Application ID\n        instance_id: Application instance ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Application ID"
                    },
                    "instance_id": {
                        "type": "string",
                        "description": "Application instance ID"
                    }
                },
                "required": [
                    "app_id",
                    "instance_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_key_transactions",
            "description": "\n    List key transactions.\n    \n    Args:\n        filter_name: Filter by name\n        page: Pagination index\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filter_name": {
                        "type": "string",
                        "description": "Filter by name"
                    },
                    "page": {
                        "type": "string",
                        "description": "Pagination index"
                    }
                },
                "required": [
                    "filter_name",
                    "page"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_key_transaction",
            "description": "\n    Get details for a specific key transaction.\n    \n    Args:\n        transaction_id: Key transaction ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "transaction_id": {
                        "type": "string",
                        "description": "Key transaction ID"
                    }
                },
                "required": [
                    "transaction_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_mobile_applications",
            "description": "\n    List mobile applications.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_mobile_application",
            "description": "\n    Get details for a specific mobile application.\n    \n    Args:\n        app_id: Mobile application ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Mobile application ID"
                    }
                },
                "required": [
                    "app_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_alert_policies",
            "description": "\n    List alert policies.\n    \n    Args:\n        filter_name: Filter by name (exact match)\n        page: Pagination index\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filter_name": {
                        "type": "string",
                        "description": "Filter by name (exact match)"
                    },
                    "page": {
                        "type": "string",
                        "description": "Pagination index"
                    }
                },
                "required": [
                    "filter_name",
                    "page"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_alert_policy",
            "description": "\n    Create an alert policy.\n    \n    Args:\n        name: Policy name\n        incident_preference: Incident rollup preference (PER_POLICY, PER_CONDITION, or PER_CONDITION_AND_TARGET)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Policy name"
                    },
                    "incident_preference": {
                        "type": "string",
                        "description": "Incident rollup preference (PER_POLICY, PER_CONDITION, or PER_CONDITION_AND_TARGET)"
                    }
                },
                "required": [
                    "name",
                    "incident_preference"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_alert_policy",
            "description": "\n    Update an alert policy.\n    \n    Args:\n        policy_id: Policy ID\n        name: New policy name\n        incident_preference: New incident rollup preference\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "policy_id": {
                        "type": "string",
                        "description": "Policy ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "New policy name"
                    },
                    "incident_preference": {
                        "type": "string",
                        "description": "New incident rollup preference"
                    }
                },
                "required": [
                    "policy_id",
                    "name",
                    "incident_preference"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_alert_policy",
            "description": "\n    Delete an alert policy.\n    \n    Args:\n        policy_id: Policy ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "policy_id": {
                        "type": "string",
                        "description": "Policy ID"
                    }
                },
                "required": [
                    "policy_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_alert_conditions",
            "description": "\n    List alert conditions for a policy.\n    \n    Args:\n        policy_id: Policy ID\n        page: Pagination index\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "policy_id": {
                        "type": "string",
                        "description": "Policy ID"
                    },
                    "page": {
                        "type": "string",
                        "description": "Pagination index"
                    }
                },
                "required": [
                    "policy_id",
                    "page"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_alert_condition",
            "description": "\n    Create an alert condition for a policy.\n    \n    Args:\n        policy_id: Policy ID\n        name: Condition name\n        type: Condition type (apm_app_metric, apm_kt_metric, servers_metric, browser_metric, mobile_metric)\n        entities: List of entity IDs to monitor\n        metric: Metric to monitor\n        terms: Alert terms (list of dicts with duration, operator, priority, threshold, time_function)\n        condition_scope: Condition scope (instance or application)\n        violation_close_timer: Hours after which violations will close (1, 2, 4, 8, 12, 24)\n        user_defined: User-defined metrics configuration (dict with metric and value_function)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "policy_id": {
                        "type": "string",
                        "description": "Policy ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "Condition name"
                    },
                    "type": {
                        "type": "string",
                        "description": "Condition type (apm_app_metric, apm_kt_metric, servers_metric, browser_metric, mobile_metric)"
                    },
                    "entities": {
                        "type": "string",
                        "description": "List of entity IDs to monitor"
                    },
                    "metric": {
                        "type": "string",
                        "description": "Metric to monitor"
                    },
                    "terms": {
                        "type": "string",
                        "description": "Alert terms (list of dicts with duration, operator, priority, threshold, time_function)"
                    },
                    "condition_scope": {
                        "type": "string",
                        "description": "Condition scope (instance or application)"
                    },
                    "violation_close_timer": {
                        "type": "string",
                        "description": "Hours after which violations will close (1, 2, 4, 8, 12, 24)"
                    },
                    "user_defined": {
                        "type": "string",
                        "description": "User-defined metrics configuration (dict with metric and value_function)"
                    }
                },
                "required": [
                    "policy_id",
                    "name",
                    "type",
                    "entities",
                    "metric",
                    "terms",
                    "condition_scope",
                    "violation_close_timer",
                    "user_defined"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_alert_condition",
            "description": "\n    Update an alert condition.\n    \n    Args:\n        condition_id: Condition ID\n        name: New condition name\n        entities: New list of entity IDs to monitor\n        metric: New metric to monitor\n        terms: New alert terms\n        condition_scope: New condition scope\n        violation_close_timer: New violation close timer\n        user_defined: New user-defined metrics configuration\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "condition_id": {
                        "type": "string",
                        "description": "Condition ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "New condition name"
                    },
                    "entities": {
                        "type": "string",
                        "description": "New list of entity IDs to monitor"
                    },
                    "metric": {
                        "type": "string",
                        "description": "New metric to monitor"
                    },
                    "terms": {
                        "type": "string",
                        "description": "New alert terms"
                    },
                    "condition_scope": {
                        "type": "string",
                        "description": "New condition scope"
                    },
                    "violation_close_timer": {
                        "type": "string",
                        "description": "New violation close timer"
                    },
                    "user_defined": {
                        "type": "string",
                        "description": "New user-defined metrics configuration"
                    }
                },
                "required": [
                    "condition_id",
                    "name",
                    "entities",
                    "metric",
                    "terms",
                    "condition_scope",
                    "violation_close_timer",
                    "user_defined"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_alert_condition",
            "description": "\n    Delete an alert condition.\n    \n    Args:\n        condition_id: Condition ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "condition_id": {
                        "type": "string",
                        "description": "Condition ID"
                    }
                },
                "required": [
                    "condition_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_nrql_alert_conditions",
            "description": "\n    List NRQL alert conditions for a policy.\n    \n    Args:\n        policy_id: Policy ID\n        page: Pagination index\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "policy_id": {
                        "type": "string",
                        "description": "Policy ID"
                    },
                    "page": {
                        "type": "string",
                        "description": "Pagination index"
                    }
                },
                "required": [
                    "policy_id",
                    "page"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_nrql_alert_condition",
            "description": "\n    Create a NRQL alert condition for a policy.\n    \n    Args:\n        policy_id: Policy ID\n        name: Condition name\n        nrql: NRQL query (dict with query and since_value)\n        terms: Alert terms\n        value_function: How to use the NRQL data (single_value, sum, etc.)\n        enabled: Whether the condition is enabled\n        runbook_url: URL to the runbook\n        expected_groups: Number of expected groups\n        ignore_overlap: Whether to ignore overlapping time windows\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "policy_id": {
                        "type": "string",
                        "description": "Policy ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "Condition name"
                    },
                    "nrql": {
                        "type": "string",
                        "description": "NRQL query (dict with query and since_value)"
                    },
                    "terms": {
                        "type": "string",
                        "description": "Alert terms"
                    },
                    "value_function": {
                        "type": "string",
                        "description": "How to use the NRQL data (single_value, sum, etc.)"
                    },
                    "enabled": {
                        "type": "string",
                        "description": "Whether the condition is enabled"
                    },
                    "runbook_url": {
                        "type": "string",
                        "description": "URL to the runbook"
                    },
                    "expected_groups": {
                        "type": "string",
                        "description": "Number of expected groups"
                    },
                    "ignore_overlap": {
                        "type": "string",
                        "description": "Whether to ignore overlapping time windows"
                    }
                },
                "required": [
                    "policy_id",
                    "name",
                    "nrql",
                    "terms",
                    "value_function",
                    "enabled",
                    "runbook_url",
                    "expected_groups",
                    "ignore_overlap"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_nrql_alert_condition",
            "description": "\n    Update a NRQL alert condition.\n    \n    Args:\n        condition_id: Condition ID\n        name: New condition name\n        nrql: New NRQL query\n        terms: New alert terms\n        value_function: New value function\n        enabled: New enabled status\n        runbook_url: New runbook URL\n        expected_groups: New number of expected groups\n        ignore_overlap: New ignore overlap setting\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "condition_id": {
                        "type": "string",
                        "description": "Condition ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "New condition name"
                    },
                    "nrql": {
                        "type": "string",
                        "description": "New NRQL query"
                    },
                    "terms": {
                        "type": "string",
                        "description": "New alert terms"
                    },
                    "value_function": {
                        "type": "string",
                        "description": "New value function"
                    },
                    "enabled": {
                        "type": "string",
                        "description": "New enabled status"
                    },
                    "runbook_url": {
                        "type": "string",
                        "description": "New runbook URL"
                    },
                    "expected_groups": {
                        "type": "string",
                        "description": "New number of expected groups"
                    },
                    "ignore_overlap": {
                        "type": "string",
                        "description": "New ignore overlap setting"
                    }
                },
                "required": [
                    "condition_id",
                    "name",
                    "nrql",
                    "terms",
                    "value_function",
                    "enabled",
                    "runbook_url",
                    "expected_groups",
                    "ignore_overlap"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_nrql_alert_condition",
            "description": "\n    Delete a NRQL alert condition.\n    \n    Args:\n        condition_id: Condition ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "condition_id": {
                        "type": "string",
                        "description": "Condition ID"
                    }
                },
                "required": [
                    "condition_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_alerts_incidents",
            "description": "\n    List alert incidents.\n    \n    Args:\n        page: Pagination index\n        only_open: Filter to only open incidents\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "string",
                        "description": "Pagination index"
                    },
                    "only_open": {
                        "type": "string",
                        "description": "Filter to only open incidents"
                    }
                },
                "required": [
                    "page",
                    "only_open"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_alerts_violations",
            "description": "\n    List alert violations.\n    \n    Args:\n        page: Pagination index\n        start_date: Retrieve violations created after this time (ISO 8601)\n        end_date: Retrieve violations created before this time (ISO 8601)\n        only_open: Filter by open violations\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "string",
                        "description": "Pagination index"
                    },
                    "start_date": {
                        "type": "string",
                        "description": "Retrieve violations created after this time (ISO 8601)"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "Retrieve violations created before this time (ISO 8601)"
                    },
                    "only_open": {
                        "type": "string",
                        "description": "Filter by open violations"
                    }
                },
                "required": [
                    "page",
                    "start_date",
                    "end_date",
                    "only_open"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_applications_resource",
            "description": "Get a list of New Relic applications as a resource.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_alert_policies_resource",
            "description": "Get a list of New Relic alert policies as a resource.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_application_resource",
            "description": "\n    Get detailed information about a specific New Relic application.\n    \n    Args:\n        app_id: Application ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Application ID"
                    }
                },
                "required": [
                    "app_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_mobile_applications_resource",
            "description": "Get a list of New Relic mobile applications as a resource.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_mobile_application_resource",
            "description": "\n    Get detailed information about a specific New Relic mobile application.\n    \n    Args:\n        app_id: Mobile Application ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Mobile Application ID"
                    }
                },
                "required": [
                    "app_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_key_transactions_resource",
            "description": "Get a list of New Relic key transactions as a resource.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_key_transaction_resource",
            "description": "\n    Get detailed information about a specific New Relic key transaction.\n    \n    Args:\n        txn_id: Key Transaction ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "txn_id": {
                        "type": "string",
                        "description": "Key Transaction ID"
                    }
                },
                "required": [
                    "txn_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_alerts_incidents_resource",
            "description": "\n    Get a list of New Relic alert incidents as a resource.\n    \n    Args:\n        only_open: Whether to show only open incidents (default: True)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "only_open": {
                        "type": "string",
                        "description": "Whether to show only open incidents (default: True)"
                    }
                },
                "required": [
                    "only_open"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_alerts_violations_resource",
            "description": "\n    Get a list of New Relic alert violations as a resource.\n    \n    Args:\n        only_open: Whether to show only open violations (default: True)\n        start_date: ISO 8601 start date (default: 24 hours ago)\n        end_date: ISO 8601 end date (default: now)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "only_open": {
                        "type": "string",
                        "description": "Whether to show only open violations (default: True)"
                    },
                    "start_date": {
                        "type": "string",
                        "description": "ISO 8601 start date (default: 24 hours ago)"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "ISO 8601 end date (default: now)"
                    }
                },
                "required": [
                    "only_open",
                    "start_date",
                    "end_date"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_dashboard_resource",
            "description": "Get a simple New Relic dashboard with key metrics.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "list_browser_applications",
            "description": "\n    List browser applications.\n    \n    Args:\n        filter_name: Filter by name (exact match)\n        page: Pagination index\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filter_name": {
                        "type": "string",
                        "description": "Filter by name (exact match)"
                    },
                    "page": {
                        "type": "string",
                        "description": "Pagination index"
                    }
                },
                "required": [
                    "filter_name",
                    "page"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_browser_application",
            "description": "\n    Get details for a specific browser application.\n    \n    Args:\n        app_id: Browser application ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Browser application ID"
                    }
                },
                "required": [
                    "app_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_browser_application",
            "description": "\n    Create a browser application.\n    \n    Args:\n        name: Name of the browser application\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the browser application"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_browser_application",
            "description": "\n    Update a browser application.\n    \n    Args:\n        app_id: Browser application ID\n        name: New name for the browser application\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Browser application ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "New name for the browser application"
                    }
                },
                "required": [
                    "app_id",
                    "name"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_browser_application",
            "description": "\n    Delete a browser application.\n    \n    Args:\n        app_id: Browser application ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Browser application ID"
                    }
                },
                "required": [
                    "app_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_monitors",
            "description": "\n    List synthetic monitors.\n    \n    Args:\n        limit: Maximum number of monitors to return\n        offset: Pagination offset\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of monitors to return"
                    },
                    "offset": {
                        "type": "string",
                        "description": "Pagination offset"
                    }
                },
                "required": [
                    "limit",
                    "offset"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_monitor",
            "description": "\n    Get details for a specific synthetic monitor.\n    \n    Args:\n        monitor_id: Synthetic monitor ID (UUID format)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monitor_id": {
                        "type": "string",
                        "description": "Synthetic monitor ID (UUID format)"
                    }
                },
                "required": [
                    "monitor_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_simple_monitor",
            "description": "\n    Create a simple synthetic monitor.\n    \n    Args:\n        name: Monitor name\n        uri: URI to monitor\n        type: Monitor type (SIMPLE, BROWSER, SCRIPT_API, SCRIPT_BROWSER)\n        frequency: Check frequency in minutes (1, 5, 10, 15, 30, 60, 360, 720, or 1440)\n        locations: List of location IDs where the monitor will run\n        status: Monitor status (ENABLED or DISABLED)\n        sla_threshold: SLA threshold in seconds\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Monitor name"
                    },
                    "uri": {
                        "type": "string",
                        "description": "URI to monitor"
                    },
                    "type": {
                        "type": "string",
                        "description": "Monitor type (SIMPLE, BROWSER, SCRIPT_API, SCRIPT_BROWSER)"
                    },
                    "frequency": {
                        "type": "string",
                        "description": "Check frequency in minutes (1, 5, 10, 15, 30, 60, 360, 720, or 1440)"
                    },
                    "locations": {
                        "type": "string",
                        "description": "List of location IDs where the monitor will run"
                    },
                    "status": {
                        "type": "string",
                        "description": "Monitor status (ENABLED or DISABLED)"
                    },
                    "sla_threshold": {
                        "type": "string",
                        "description": "SLA threshold in seconds"
                    }
                },
                "required": [
                    "name",
                    "uri",
                    "type",
                    "frequency",
                    "locations",
                    "status",
                    "sla_threshold"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_monitor",
            "description": "\n    Update a synthetic monitor.\n    \n    Args:\n        monitor_id: Monitor ID (UUID format)\n        name: New monitor name\n        frequency: New check frequency in minutes\n        status: New monitor status (ENABLED or DISABLED)\n        sla_threshold: New SLA threshold in seconds\n        locations: New list of location IDs\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monitor_id": {
                        "type": "string",
                        "description": "Monitor ID (UUID format)"
                    },
                    "name": {
                        "type": "string",
                        "description": "New monitor name"
                    },
                    "frequency": {
                        "type": "string",
                        "description": "New check frequency in minutes"
                    },
                    "status": {
                        "type": "string",
                        "description": "New monitor status (ENABLED or DISABLED)"
                    },
                    "sla_threshold": {
                        "type": "string",
                        "description": "New SLA threshold in seconds"
                    },
                    "locations": {
                        "type": "string",
                        "description": "New list of location IDs"
                    }
                },
                "required": [
                    "monitor_id",
                    "name",
                    "frequency",
                    "status",
                    "sla_threshold",
                    "locations"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_monitor",
            "description": "\n    Delete a synthetic monitor.\n    \n    Args:\n        monitor_id: Monitor ID (UUID format)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monitor_id": {
                        "type": "string",
                        "description": "Monitor ID (UUID format)"
                    }
                },
                "required": [
                    "monitor_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_workloads",
            "description": "\n    List workloads using NerdGraph API.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_workload",
            "description": "\n    Get details for a specific workload using NerdGraph API.\n    \n    Args:\n        account_id: New Relic account ID\n        workload_id: Workload entity GUID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    },
                    "workload_id": {
                        "type": "string",
                        "description": "Workload entity GUID"
                    }
                },
                "required": [
                    "account_id",
                    "workload_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_workload",
            "description": "\n    Create a workload using NerdGraph API.\n    \n    Args:\n        account_id: New Relic account ID\n        name: Workload name\n        entity_search_query: NRQL-like query to select entities for the workload\n        entity_guids: Optional list of specific entity GUIDs to include\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "Workload name"
                    },
                    "entity_search_query": {
                        "type": "string",
                        "description": "NRQL-like query to select entities for the workload"
                    },
                    "entity_guids": {
                        "type": "string",
                        "description": "Optional list of specific entity GUIDs to include"
                    }
                },
                "required": [
                    "account_id",
                    "name",
                    "entity_search_query",
                    "entity_guids"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_workload",
            "description": "\n    Update a workload using NerdGraph API.\n    \n    Args:\n        account_id: New Relic account ID\n        workload_guid: Workload entity GUID\n        name: New workload name\n        entity_search_query: New entity search query\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    },
                    "workload_guid": {
                        "type": "string",
                        "description": "Workload entity GUID"
                    },
                    "name": {
                        "type": "string",
                        "description": "New workload name"
                    },
                    "entity_search_query": {
                        "type": "string",
                        "description": "New entity search query"
                    }
                },
                "required": [
                    "account_id",
                    "workload_guid",
                    "name",
                    "entity_search_query"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_workload",
            "description": "\n    Delete a workload using NerdGraph API.\n    \n    Args:\n        account_id: New Relic account ID\n        workload_guid: Workload entity GUID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    },
                    "workload_guid": {
                        "type": "string",
                        "description": "Workload entity GUID"
                    }
                },
                "required": [
                    "account_id",
                    "workload_guid"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_dashboards",
            "description": "\n    List dashboards using NerdGraph API.\n    \n    Args:\n        account_id: New Relic account ID\n        page: Page number for pagination\n        per_page: Number of items per page\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    },
                    "page": {
                        "type": "string",
                        "description": "Page number for pagination"
                    },
                    "per_page": {
                        "type": "string",
                        "description": "Number of items per page"
                    }
                },
                "required": [
                    "account_id",
                    "page",
                    "per_page"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_dashboard",
            "description": "\n    Get details for a specific dashboard using NerdGraph API.\n    \n    Args:\n        account_id: New Relic account ID\n        dashboard_id: Dashboard entity ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    },
                    "dashboard_id": {
                        "type": "string",
                        "description": "Dashboard entity ID"
                    }
                },
                "required": [
                    "account_id",
                    "dashboard_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_simple_dashboard",
            "description": "\n    Create a simple dashboard using NerdGraph API.\n    \n    Args:\n        account_id: New Relic account ID\n        title: Dashboard title\n        page_name: Page name\n        widgets: List of widget configurations (optional)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    },
                    "title": {
                        "type": "string",
                        "description": "Dashboard title"
                    },
                    "page_name": {
                        "type": "string",
                        "description": "Page name"
                    },
                    "widgets": {
                        "type": "string",
                        "description": "List of widget configurations (optional)"
                    }
                },
                "required": [
                    "account_id",
                    "title",
                    "page_name",
                    "widgets"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_dashboard",
            "description": "\n    Delete a dashboard using NerdGraph API.\n    \n    Args:\n        account_id: New Relic account ID\n        dashboard_guid: Dashboard entity GUID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    },
                    "dashboard_guid": {
                        "type": "string",
                        "description": "Dashboard entity GUID"
                    }
                },
                "required": [
                    "account_id",
                    "dashboard_guid"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "execute_nrql_query",
            "description": "\n    Execute a NRQL query using NerdGraph API.\n    \n    Args:\n        account_id: New Relic account ID\n        query: NRQL query string\n        timeout: Query timeout in seconds (optional)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    },
                    "query": {
                        "type": "string",
                        "description": "NRQL query string"
                    },
                    "timeout": {
                        "type": "string",
                        "description": "Query timeout in seconds (optional)"
                    }
                },
                "required": [
                    "account_id",
                    "query",
                    "timeout"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_metric_timeslice_data",
            "description": "\n    Get metric timeslice data across all applications.\n    \n    Args:\n        metric_names: List of metric names\n        start_time: ISO 8601 format start time\n        end_time: ISO 8601 format end time\n        period: Period in seconds (optional)\n        summarize: Whether to summarize the data\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "metric_names": {
                        "type": "string",
                        "description": "List of metric names"
                    },
                    "start_time": {
                        "type": "string",
                        "description": "ISO 8601 format start time"
                    },
                    "end_time": {
                        "type": "string",
                        "description": "ISO 8601 format end time"
                    },
                    "period": {
                        "type": "string",
                        "description": "Period in seconds (optional)"
                    },
                    "summarize": {
                        "type": "string",
                        "description": "Whether to summarize the data"
                    }
                },
                "required": [
                    "metric_names",
                    "start_time",
                    "end_time",
                    "period",
                    "summarize"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_synthetic_monitors_resource",
            "description": "Get a list of New Relic synthetic monitors as a resource.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_dashboards_resource",
            "description": "\n    Get a list of New Relic dashboards as a resource.\n    \n    Args:\n        account_id: New Relic account ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    }
                },
                "required": [
                    "account_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "synthetic_monitoring_analysis",
            "description": "\n    Prompt for analyzing synthetic monitor performance.\n    \n    Args:\n        monitor_id: Monitor ID to analyze\n        time_period: Time period in hours to analyze (default: 24)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monitor_id": {
                        "type": "string",
                        "description": "Monitor ID to analyze"
                    },
                    "time_period": {
                        "type": "string",
                        "description": "Time period in hours to analyze (default: 24)"
                    }
                },
                "required": [
                    "monitor_id",
                    "time_period"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "list_infrastructure_hosts",
            "description": "\n    List infrastructure hosts.\n    \n    Args:\n        filter_hostname: Filter by hostname\n        filter_os: Filter by operating system\n        page: Pagination index\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filter_hostname": {
                        "type": "string",
                        "description": "Filter by hostname"
                    },
                    "filter_os": {
                        "type": "string",
                        "description": "Filter by operating system"
                    },
                    "page": {
                        "type": "string",
                        "description": "Pagination index"
                    }
                },
                "required": [
                    "filter_hostname",
                    "filter_os",
                    "page"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_infrastructure_host",
            "description": "\n    Get details for a specific infrastructure host.\n    \n    Args:\n        host_id: Host ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "host_id": {
                        "type": "string",
                        "description": "Host ID"
                    }
                },
                "required": [
                    "host_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_infrastructure_alerts",
            "description": "\n    List infrastructure alerts.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "query_logs",
            "description": "\n    Query logs using NerdGraph.\n    \n    Args:\n        account_id: New Relic account ID\n        query: NRQL query for logs\n        from_time: Start time in ISO 8601 format\n        to_time: End time in ISO 8601 format\n        limit: Maximum number of log entries to return\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    },
                    "query": {
                        "type": "string",
                        "description": "NRQL query for logs"
                    },
                    "from_time": {
                        "type": "string",
                        "description": "Start time in ISO 8601 format"
                    },
                    "to_time": {
                        "type": "string",
                        "description": "End time in ISO 8601 format"
                    },
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of log entries to return"
                    }
                },
                "required": [
                    "account_id",
                    "query",
                    "from_time",
                    "to_time",
                    "limit"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_browser_applications_resource",
            "description": "Get a list of New Relic browser applications as a resource.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "list_service_levels",
            "description": "\n    List service level indicators (SLIs) using NerdGraph API.\n    \n    Args:\n        account_id: New Relic account ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    }
                },
                "required": [
                    "account_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_service_level_indicator",
            "description": "\n    Create a service level indicator (SLI) using NerdGraph API.\n    \n    Args:\n        account_id: New Relic account ID\n        name: SLI name\n        entity_guid: Entity GUID\n        description: SLI description\n        valid_events_query: NRQL query for valid events\n        bad_events_query: NRQL query for bad events\n        total_events_query: NRQL query for total events\n        target_percentage: Target percentage (0-100)\n        time_window_value: Time window value\n        time_window_unit: Time window unit (MINUTE, HOUR, DAY, WEEK, MONTH)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "SLI name"
                    },
                    "entity_guid": {
                        "type": "string",
                        "description": "Entity GUID"
                    },
                    "description": {
                        "type": "string",
                        "description": "SLI description"
                    },
                    "valid_events_query": {
                        "type": "string",
                        "description": "NRQL query for valid events"
                    },
                    "bad_events_query": {
                        "type": "string",
                        "description": "NRQL query for bad events"
                    },
                    "total_events_query": {
                        "type": "string",
                        "description": "NRQL query for total events"
                    },
                    "target_percentage": {
                        "type": "string",
                        "description": "Target percentage (0-100)"
                    },
                    "time_window_value": {
                        "type": "string",
                        "description": "Time window value"
                    },
                    "time_window_unit": {
                        "type": "string",
                        "description": "Time window unit (MINUTE, HOUR, DAY, WEEK, MONTH)"
                    }
                },
                "required": [
                    "account_id",
                    "name",
                    "entity_guid",
                    "description",
                    "valid_events_query",
                    "bad_events_query",
                    "total_events_query",
                    "target_percentage",
                    "time_window_value",
                    "time_window_unit"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_service_levels_resource",
            "description": "\n    Get service level indicators (SLIs) as a resource.\n    \n    Args:\n        account_id: New Relic account ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    }
                },
                "required": [
                    "account_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "list_errors",
            "description": "\n    List error events from Error Tracking using NerdGraph API.\n    \n    Args:\n        account_id: New Relic account ID\n        query: Search query string\n        cursor: Pagination cursor\n        limit: Maximum number of errors to return\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    },
                    "query": {
                        "type": "string",
                        "description": "Search query string"
                    },
                    "cursor": {
                        "type": "string",
                        "description": "Pagination cursor"
                    },
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of errors to return"
                    }
                },
                "required": [
                    "account_id",
                    "query",
                    "cursor",
                    "limit"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_error_details",
            "description": "\n    Get details for a specific error.\n    \n    Args:\n        account_id: New Relic account ID\n        error_id: Error ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    },
                    "error_id": {
                        "type": "string",
                        "description": "Error ID"
                    }
                },
                "required": [
                    "account_id",
                    "error_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_accounts",
            "description": "\n    List all New Relic accounts the API key has access to.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_account_users",
            "description": "\n    Get users associated with a New Relic account.\n    \n    Args:\n        account_id: New Relic account ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "string",
                        "description": "New Relic account ID"
                    }
                },
                "required": [
                    "account_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "deployment_recommendations",
            "description": "\n    Prompt for generating deployment recommendations.\n    \n    Args:\n        app_id: Application ID\n        deployment_id: Deployment ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Application ID"
                    },
                    "deployment_id": {
                        "type": "string",
                        "description": "Deployment ID"
                    }
                },
                "required": [
                    "app_id",
                    "deployment_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "analyze_application_performance",
            "description": "\n    Prompt for analyzing the performance of a specific application.\n    \n    Args:\n        app_id: Application ID to analyze\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Application ID to analyze"
                    }
                },
                "required": [
                    "app_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "investigate_alert_incident",
            "description": "\n    Prompt for investigating an alert incident.\n    \n    Args:\n        incident_id: Incident ID to investigate\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "incident_id": {
                        "type": "string",
                        "description": "Incident ID to investigate"
                    }
                },
                "required": [
                    "incident_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "compare_environments",
            "description": "\n    Prompt for comparing performance between production and staging environments.\n    \n    Args:\n        prod_app_id: Production application ID\n        staging_app_id: Staging application ID\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "prod_app_id": {
                        "type": "string",
                        "description": "Production application ID"
                    },
                    "staging_app_id": {
                        "type": "string",
                        "description": "Staging application ID"
                    }
                },
                "required": [
                    "prod_app_id",
                    "staging_app_id"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "deployment_analysis",
            "description": "\n    Prompt for analyzing the impact of recent deployments.\n    \n    Args:\n        app_id: Application ID\n        days: Number of days of deployment history to analyze\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "description": "Application ID"
                    },
                    "days": {
                        "type": "string",
                        "description": "Number of days of deployment history to analyze"
                    }
                },
                "required": [
                    "app_id",
                    "days"
                ]
            },
            "file": "servers\\newrelic\\newrelic_mcp.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "validate_repository_type",
            "description": "Validate repository type-specific fields",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "model_validator"
            ]
        },
        {
            "name": "get_all_repositories",
            "description": "\n    Retrieves a list of all repositories in Nexus.\n    \n    Returns:\n        A JSON string containing repository details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_repository",
            "description": "\n    Creates a new repository in Nexus.\n    \n    Args:\n        repository_type: The type of repository (hosted, proxy, or group)\n        repository_format: Format of the repository (maven2, npm, docker, etc.)\n        repository_name: Name for the new repository\n        blob_store_name: Name of the blob store to use\n        online: Whether the repository should be online (default: True)\n        write_policy: Write policy for hosted repositories (ALLOW, ALLOW_ONCE, DENY) - default: ALLOW\n        \n    Returns:\n        A JSON string with the result of the operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repository_type": {
                        "type": "string",
                        "description": "The type of repository (hosted, proxy, or group)"
                    },
                    "repository_format": {
                        "type": "string",
                        "description": "Format of the repository (maven2, npm, docker, etc.)"
                    },
                    "repository_name": {
                        "type": "string",
                        "description": "Name for the new repository"
                    },
                    "blob_store_name": {
                        "type": "string",
                        "description": "Name of the blob store to use"
                    },
                    "online": {
                        "type": "string",
                        "description": "Whether the repository should be online (default: True)"
                    },
                    "write_policy": {
                        "type": "string",
                        "description": "Write policy for hosted repositories (ALLOW, ALLOW_ONCE, DENY) - default: ALLOW"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "repository_type",
                    "repository_format",
                    "repository_name",
                    "blob_store_name",
                    "online",
                    "write_policy",
                    "Returns"
                ]
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_repository",
            "description": "\n    Updates an existing repository with new configuration.\n    \n    Args:\n        repository_name: Name of the repository to update\n        repository_type: Type of the repository (hosted, proxy, or group)\n        repository_format: Format of the repository (maven2, npm, docker, etc.)\n        repository_data: JSON string containing the updated repository configuration\n        \n    Returns:\n        A JSON string with the result of the operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repository_name": {
                        "type": "string",
                        "description": "Name of the repository to update"
                    },
                    "repository_type": {
                        "type": "string",
                        "description": "Type of the repository (hosted, proxy, or group)"
                    },
                    "repository_format": {
                        "type": "string",
                        "description": "Format of the repository (maven2, npm, docker, etc.)"
                    },
                    "repository_data": {
                        "type": "string",
                        "description": "JSON string containing the updated repository configuration"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "repository_name",
                    "repository_type",
                    "repository_format",
                    "repository_data",
                    "Returns"
                ]
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_repository",
            "description": "\n    Deletes a repository.\n    \n    Args:\n        repository_name: Name of the repository to delete\n        \n    Returns:\n        A JSON string with the result of the operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repository_name": {
                        "type": "string",
                        "description": "Name of the repository to delete"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "repository_name",
                    "Returns"
                ]
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_all_users",
            "description": "\n    Retrieves a list of all users.\n    \n    Returns:\n        A JSON string containing user details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_user",
            "description": "\n    Creates a new user in Nexus.\n    \n    Args:\n        user_id: Unique identifier for the user\n        first_name: User's first name\n        last_name: User's last name\n        email: User's email address\n        password: User's password\n        status: User status (active or disabled) - default: active\n        roles: List of role IDs to assign to the user\n        \n    Returns:\n        A JSON string with the result of the operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "Unique identifier for the user"
                    },
                    "first_name": {
                        "type": "string",
                        "description": "User's first name"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "User's last name"
                    },
                    "email": {
                        "type": "string",
                        "description": "User's email address"
                    },
                    "password": {
                        "type": "string",
                        "description": "User's password"
                    },
                    "status": {
                        "type": "string",
                        "description": "User status (active or disabled) - default: active"
                    },
                    "roles": {
                        "type": "string",
                        "description": "List of role IDs to assign to the user"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "user_id",
                    "first_name",
                    "last_name",
                    "email",
                    "password",
                    "status",
                    "roles",
                    "Returns"
                ]
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_user",
            "description": "\n    Updates an existing user in Nexus.\n    \n    Args:\n        user_id: ID of the user to update\n        first_name: User's first name\n        last_name: User's last name\n        email: User's email address\n        status: User status (active or disabled) - default: active\n        roles: List of role IDs to assign to the user\n        \n    Returns:\n        A JSON string with the result of the operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "ID of the user to update"
                    },
                    "first_name": {
                        "type": "string",
                        "description": "User's first name"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "User's last name"
                    },
                    "email": {
                        "type": "string",
                        "description": "User's email address"
                    },
                    "status": {
                        "type": "string",
                        "description": "User status (active or disabled) - default: active"
                    },
                    "roles": {
                        "type": "string",
                        "description": "List of role IDs to assign to the user"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "user_id",
                    "first_name",
                    "last_name",
                    "email",
                    "status",
                    "roles",
                    "Returns"
                ]
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_user",
            "description": "\n    Deletes a user from Nexus.\n    \n    Args:\n        user_id: ID of the user to delete\n        \n    Returns:\n        A JSON string with the result of the operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "ID of the user to delete"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "user_id",
                    "Returns"
                ]
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_roles",
            "description": "\n    Lists all roles defined in Nexus.\n    \n    Returns:\n        A JSON string containing role details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_role",
            "description": "\n    Creates a new role in Nexus.\n    \n    Args:\n        role_id: Unique identifier for the role\n        name: Display name for the role\n        description: Description of the role\n        privileges: List of privilege IDs to assign to the role\n        roles: List of nested role IDs\n        \n    Returns:\n        A JSON string with the result of the operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "role_id": {
                        "type": "string",
                        "description": "Unique identifier for the role"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name for the role"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the role"
                    },
                    "privileges": {
                        "type": "string",
                        "description": "List of privilege IDs to assign to the role"
                    },
                    "roles": {
                        "type": "string",
                        "description": "List of nested role IDs"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "role_id",
                    "name",
                    "description",
                    "privileges",
                    "roles",
                    "Returns"
                ]
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_privileges",
            "description": "\n    Lists all privileges defined in Nexus.\n    \n    Returns:\n        A JSON string containing privilege details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "search_components",
            "description": "\n    Searches for components or assets in Nexus repositories.\n    \n    Args:\n        repository: Optional repository name to search in\n        keyword: Optional keyword to search for\n        format: Optional format to filter by (maven2, npm, etc.)\n        \n    Returns:\n        A JSON string containing search results.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repository": {
                        "type": "string",
                        "description": "Optional repository name to search in"
                    },
                    "keyword": {
                        "type": "string",
                        "description": "Optional keyword to search for"
                    },
                    "format": {
                        "type": "string",
                        "description": "Optional format to filter by (maven2, npm, etc.)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "repository",
                    "keyword",
                    "format",
                    "Returns"
                ]
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "upload_component",
            "description": "\n    Uploads a new component to a Nexus repository.\n    \n    Args:\n        repository: Name of the repository to upload to\n        component_format: Format of the component (maven2, npm, etc.)\n        component_data: JSON string containing the component details\n        \n    Returns:\n        A JSON string with the result of the operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository to upload to"
                    },
                    "component_format": {
                        "type": "string",
                        "description": "Format of the component (maven2, npm, etc.)"
                    },
                    "component_data": {
                        "type": "string",
                        "description": "JSON string containing the component details"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "repository",
                    "component_format",
                    "component_data",
                    "Returns"
                ]
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_ldap_servers",
            "description": "\n    Lists all LDAP servers configured in Nexus.\n    \n    Returns:\n        A JSON string containing LDAP server details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_ldap_server",
            "description": "\n    Creates a new LDAP server configuration in Nexus.\n    \n    Args:\n        name: Unique name for the LDAP server\n        protocol: Protocol to use (ldap or ldaps)\n        host: LDAP server hostname\n        port: LDAP server port\n        search_base: LDAP search base\n        authentication_scheme: Authentication scheme (simple, etc.)\n        connection_timeout_seconds: Connection timeout in seconds\n        retry_delay_seconds: Retry delay in seconds\n        max_incidents: Maximum number of connection incidents\n        \n    Returns:\n        A JSON string with the result of the operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Unique name for the LDAP server"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol to use (ldap or ldaps)"
                    },
                    "host": {
                        "type": "string",
                        "description": "LDAP server hostname"
                    },
                    "port": {
                        "type": "string",
                        "description": "LDAP server port"
                    },
                    "search_base": {
                        "type": "string",
                        "description": "LDAP search base"
                    },
                    "authentication_scheme": {
                        "type": "string",
                        "description": "Authentication scheme (simple, etc.)"
                    },
                    "connection_timeout_seconds": {
                        "type": "string",
                        "description": "Connection timeout in seconds"
                    },
                    "retry_delay_seconds": {
                        "type": "string",
                        "description": "Retry delay in seconds"
                    },
                    "max_incidents": {
                        "type": "string",
                        "description": "Maximum number of connection incidents"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "protocol",
                    "host",
                    "port",
                    "search_base",
                    "authentication_scheme",
                    "connection_timeout_seconds",
                    "retry_delay_seconds",
                    "max_incidents",
                    "Returns"
                ]
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_content_selectors",
            "description": "\n    Lists all content selectors configured in Nexus.\n    \n    Returns:\n        A JSON string containing content selector details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_content_selector",
            "description": "\n    Creates a new content selector in Nexus.\n    \n    Args:\n        name: Unique name for the content selector\n        description: Description of the content selector\n        expression: CSEL expression for the content selector\n        \n    Returns:\n        A JSON string with the result of the operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Unique name for the content selector"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the content selector"
                    },
                    "expression": {
                        "type": "string",
                        "description": "CSEL expression for the content selector"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "description",
                    "expression",
                    "Returns"
                ]
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_webhooks",
            "description": "\n    Lists all webhooks configured in Nexus.\n    \n    Returns:\n        A JSON string containing webhook details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_webhook",
            "description": "\n    Creates a new webhook in Nexus.\n    \n    Args:\n        name: Unique name for the webhook\n        url: URL to send webhook notifications to\n        webhook_type: Type of webhook event to listen for\n        secret: Optional secret for webhook authentication\n        webhook_config: Optional JSON string containing additional webhook configuration\n        \n    Returns:\n        A JSON string with the result of the operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Unique name for the webhook"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL to send webhook notifications to"
                    },
                    "webhook_type": {
                        "type": "string",
                        "description": "Type of webhook event to listen for"
                    },
                    "secret": {
                        "type": "string",
                        "description": "Optional secret for webhook authentication"
                    },
                    "webhook_config": {
                        "type": "string",
                        "description": "Optional JSON string containing additional webhook configuration"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "url",
                    "webhook_type",
                    "secret",
                    "webhook_config",
                    "Returns"
                ]
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_firewall_config",
            "description": "\n    Retrieves the Repository Firewall configuration from Nexus.\n    \n    Returns:\n        A JSON string containing firewall configuration details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_firewall_config",
            "description": "\n    Updates the Repository Firewall configuration in Nexus.\n    \n    Args:\n        enabled: Whether the firewall is enabled\n        url: URL of the IQ server\n        authentication_type: Type of authentication (USER or TOKEN)\n        username: Username for authentication (when using USER type)\n        password: Password for authentication\n        \n    Returns:\n        A JSON string with the result of the operation.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "string",
                        "description": "Whether the firewall is enabled"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the IQ server"
                    },
                    "authentication_type": {
                        "type": "string",
                        "description": "Type of authentication (USER or TOKEN)"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username for authentication (when using USER type)"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for authentication"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "enabled",
                    "url",
                    "authentication_type",
                    "username",
                    "password",
                    "Returns"
                ]
            },
            "file": "servers\\nexus\\nexus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "validate_aggregation",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "validate_duration",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "validate_state",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "validate_state",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "validate_duration",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "get_targets",
            "description": "Get all Prometheus targets (scrape endpoints) and their status.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_alerts",
            "description": "Get all current Prometheus alerts.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_rules",
            "description": "Get all Prometheus rules (recording rules and alerting rules).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "get_metrics",
            "description": "Get metrics matching the specified pattern using the label_values API.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "query_metrics",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "find_metrics",
            "description": "\n    Find metrics matching a specified pattern.\n    \n    Args:\n        pattern: Pattern to match against metric names (use .* as wildcard)\n        limit: Maximum number of results to return\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pattern": {
                        "type": "string",
                        "description": "Pattern to match against metric names (use .* as wildcard)"
                    },
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of results to return"
                    }
                },
                "required": [
                    "pattern",
                    "limit"
                ]
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "analyze_metric",
            "description": "\n    Analyze a specific metric over time, including basic statistics.\n    \n    Args:\n        metric: The name of the metric to analyze\n        duration: Time duration to analyze (e.g., 1h, 1d, 7d)\n        aggregation: Optional aggregation function (sum, avg, min, max)\n        labels: Optional label filters in the format 'label1=value1,label2=value2'\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "metric": {
                        "type": "string",
                        "description": "The name of the metric to analyze"
                    },
                    "duration": {
                        "type": "string",
                        "description": "Time duration to analyze (e.g., 1h, 1d, 7d)"
                    },
                    "aggregation": {
                        "type": "string",
                        "description": "Optional aggregation function (sum, avg, min, max)"
                    },
                    "labels": {
                        "type": "string",
                        "description": "Optional label filters in the format 'label1=value1,label2=value2'"
                    }
                },
                "required": [
                    "metric",
                    "duration",
                    "aggregation",
                    "labels"
                ]
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_targets_health",
            "description": "\n    Get health status of all Prometheus targets.\n    \n    Args:\n        state: Optional filter by target state ('up' or 'down')\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "state": {
                        "type": "string",
                        "description": "Optional filter by target state ('up' or 'down')"
                    }
                },
                "required": [
                    "state"
                ]
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_alert_summary",
            "description": "\n    Get a summary of all current Prometheus alerts.\n    \n    Args:\n        state: Optional filter by alert state ('firing', 'pending', or 'inactive')\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "state": {
                        "type": "string",
                        "description": "Optional filter by alert state ('firing', 'pending', or 'inactive')"
                    }
                },
                "required": [
                    "state"
                ]
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "analyze_system_health",
            "description": "Prompt to analyze overall system health based on Prometheus metrics.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "performance_analysis",
            "description": "\n    Prompt to analyze performance of a specific service over time.\n    \n    Args:\n        service: The name of the service to analyze\n        duration: Time duration to analyze (e.g., 1h, 1d, 7d)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "service": {
                        "type": "string",
                        "description": "The name of the service to analyze"
                    },
                    "duration": {
                        "type": "string",
                        "description": "Time duration to analyze (e.g., 1h, 1d, 7d)"
                    }
                },
                "required": [
                    "service",
                    "duration"
                ]
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "capacity_planning",
            "description": "\n    Prompt to help with capacity planning based on current metrics.\n    \n    Args:\n        service: The name of the service to analyze\n        growth_rate: Expected growth rate in percentage\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "service": {
                        "type": "string",
                        "description": "The name of the service to analyze"
                    },
                    "growth_rate": {
                        "type": "string",
                        "description": "Expected growth rate in percentage"
                    }
                },
                "required": [
                    "service",
                    "growth_rate"
                ]
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "alert_investigation",
            "description": "\n    Prompt to investigate a specific alert and recommend actions.\n    \n    Args:\n        alert_name: The name of the alert to investigate\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "alert_name": {
                        "type": "string",
                        "description": "The name of the alert to investigate"
                    }
                },
                "required": [
                    "alert_name"
                ]
            },
            "file": "servers\\prometheus\\prometheus_mcp.py",
            "decorator": [
                "mcp.prompt"
            ]
        },
        {
            "name": "check_status",
            "description": "\n    Check the status of Puppet Enterprise services.\n    \n    Returns:\n        JSON string with status information for Puppet Enterprise services.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\puppet\\puppet_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_certificate_statuses",
            "description": "\n    Get all certificate statuses from the Puppet CA.\n    \n    Returns:\n        JSON string with certificate status information.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\puppet\\puppet_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_certificate",
            "description": "\n    Get a specific certificate by name.\n    \n    Args:\n        certname: Name of the certificate to retrieve\n    \n    Returns:\n        JSON string with certificate content.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "certname": {
                        "type": "string",
                        "description": "Name of the certificate to retrieve"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "certname",
                    "Returns"
                ]
            },
            "file": "servers\\puppet\\puppet_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_node_groups",
            "description": "\n    Get all node classification groups.\n    \n    Returns:\n        JSON string with node group information.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\puppet\\puppet_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_node_group",
            "description": "\n    Get a specific node group by ID.\n    \n    Args:\n        group_id: ID of the group to retrieve\n    \n    Returns:\n        JSON string with node group details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "group_id": {
                        "type": "string",
                        "description": "ID of the group to retrieve"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "group_id",
                    "Returns"
                ]
            },
            "file": "servers\\puppet\\puppet_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "create_node_group",
            "description": "\n    Create a new node classification group.\n    \n    Args:\n        name: Name of the group\n        description: Description of the group\n        parent_id: ID of the parent group\n        environment: Puppet environment to use (default: production)\n        rule_json: JSON string of rule for node matching (default: match all nodes)\n        classes_json: JSON string of classes to apply to nodes in this group\n    \n    Returns:\n        JSON string with the created group information.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the group"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the group"
                    },
                    "parent_id": {
                        "type": "string",
                        "description": "ID of the parent group"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Puppet environment to use (default: production)"
                    },
                    "rule_json": {
                        "type": "string",
                        "description": "JSON string of rule for node matching (default: match all nodes)"
                    },
                    "classes_json": {
                        "type": "string",
                        "description": "JSON string of classes to apply to nodes in this group"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "description",
                    "parent_id",
                    "environment",
                    "rule_json",
                    "classes_json",
                    "Returns"
                ]
            },
            "file": "servers\\puppet\\puppet_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "update_node_group",
            "description": "\n    Update an existing node group.\n    \n    Args:\n        group_id: ID of the group to update\n        data_json: JSON string of the complete group data to update\n    \n    Returns:\n        JSON string with the update result.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "group_id": {
                        "type": "string",
                        "description": "ID of the group to update"
                    },
                    "data_json": {
                        "type": "string",
                        "description": "JSON string of the complete group data to update"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "group_id",
                    "data_json",
                    "Returns"
                ]
            },
            "file": "servers\\puppet\\puppet_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "delete_node_group",
            "description": "\n    Delete a node group.\n    \n    Args:\n        group_id: ID of the group to delete\n    \n    Returns:\n        JSON string with the deletion result.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "group_id": {
                        "type": "string",
                        "description": "ID of the group to delete"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "group_id",
                    "Returns"
                ]
            },
            "file": "servers\\puppet\\puppet_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "pin_nodes_to_group",
            "description": "\n    Pin specific nodes to a node group.\n    \n    Args:\n        group_id: ID of the group to pin nodes to\n        node_names_json: JSON string array of node names to pin\n    \n    Returns:\n        JSON string with the pinning result.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "group_id": {
                        "type": "string",
                        "description": "ID of the group to pin nodes to"
                    },
                    "node_names_json": {
                        "type": "string",
                        "description": "JSON string array of node names to pin"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "group_id",
                    "node_names_json",
                    "Returns"
                ]
            },
            "file": "servers\\puppet\\puppet_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "unpin_nodes_from_group",
            "description": "\n    Unpin nodes from a group.\n    \n    Args:\n        group_id: ID of the group to unpin nodes from\n        node_names_json: JSON string array of node names to unpin\n    \n    Returns:\n        JSON string with the unpinning result.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "group_id": {
                        "type": "string",
                        "description": "ID of the group to unpin nodes from"
                    },
                    "node_names_json": {
                        "type": "string",
                        "description": "JSON string array of node names to unpin"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "group_id",
                    "node_names_json",
                    "Returns"
                ]
            },
            "file": "servers\\puppet\\puppet_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_roles",
            "description": "\n    List all roles configured in RBAC.\n    \n    Returns:\n        JSON string with role information.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\puppet\\puppet_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_users",
            "description": "\n    List all users configured in RBAC.\n    \n    Returns:\n        JSON string with user information.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\puppet\\puppet_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "list_tasks",
            "description": "\n    List all available Puppet tasks from the orchestrator.\n    \n    Returns:\n        JSON string with task information.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "servers\\puppet\\puppet_mcp.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "cleanup_resources",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_aws.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_create_s3_bucket",
            "description": "Create an S3 bucket for subsequent tests",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_aws.py",
            "decorator": [
                "skip_resource_creation"
            ]
        },
        {
            "name": "test_list_s3_objects",
            "description": "Test listing objects in an S3 bucket",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_aws.py",
            "decorator": [
                "skip_resource_creation"
            ]
        },
        {
            "name": "test_create_ec2_instance",
            "description": "Test creating an EC2 instance",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_aws.py",
            "decorator": [
                "skip_resource_creation"
            ]
        },
        {
            "name": "test_stop_ec2_instance",
            "description": "Test stopping an EC2 instance",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_aws.py",
            "decorator": [
                "skip_resource_creation"
            ]
        },
        {
            "name": "test_start_ec2_instance",
            "description": "Test starting an EC2 instance",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_aws.py",
            "decorator": [
                "skip_resource_creation"
            ]
        },
        {
            "name": "setup_and_teardown",
            "description": "Setup test environment before tests and clean up after.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_azure.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "ctx",
            "description": "Create a custom test context.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_environment",
            "description": "Set up test environment and clean up after tests.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_01_user_operations",
            "description": "Test user-related operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_02_workspace_operations",
            "description": "Test workspace-related operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_03_create_and_get_project",
            "description": "Test creating and getting a project.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_04_list_projects",
            "description": "Test listing projects.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_05_update_project",
            "description": "Test updating a project.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_06_create_and_get_repository",
            "description": "Test creating and getting a repository.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_07_list_repositories",
            "description": "Test listing repositories.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_08_update_repository",
            "description": "Test updating a repository.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_09_branch_operations",
            "description": "Test branch operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_10_tag_operations",
            "description": "Test tag operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_11_commit_operations",
            "description": "Test commit operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_12_pull_request_operations",
            "description": "Test pull request operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_13_deploy_key_operations",
            "description": "Test deploy key operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_14_webhook_operations",
            "description": "Test webhook operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_15_branch_restriction_operations",
            "description": "Test branch restriction operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_16_repository_cleanup",
            "description": "Test repository deletion.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_17_snippet_operations",
            "description": "Test snippet operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_18_project_deletion",
            "description": "\n    Test project deletion.\n    This should be the last test to ensure we don't delete resources needed by other tests.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "string"
                    },
                    "test_environment": {
                        "type": "string"
                    }
                },
                "required": [
                    "ctx",
                    "test_environment"
                ]
            },
            "file": "testing\\test_bitbucket_cloud.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "event_loop",
            "description": "Provide an event loop for asyncio tests.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_consul.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "setup_test_resources",
            "description": "Set up resources needed for testing and ensure cleanup afterward.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_docker.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "cleanup_resources",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_gcp.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_create_gcs_bucket",
            "description": "Create a GCS bucket for subsequent tests",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_gcp.py",
            "decorator": [
                "skip_resource_creation"
            ]
        },
        {
            "name": "test_list_gcs_objects",
            "description": "Test listing objects in a GCS bucket",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_gcp.py",
            "decorator": [
                "skip_resource_creation"
            ]
        },
        {
            "name": "test_create_gce_instance",
            "description": "Test creating a GCE instance",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_gcp.py",
            "decorator": [
                "skip_resource_creation"
            ]
        },
        {
            "name": "test_stop_gce_instance",
            "description": "Test stopping a GCE instance",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_gcp.py",
            "decorator": [
                "skip_resource_creation"
            ]
        },
        {
            "name": "test_start_gce_instance",
            "description": "Test starting a GCE instance",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_gcp.py",
            "decorator": [
                "skip_resource_creation"
            ]
        },
        {
            "name": "event_loop",
            "description": "Create an event loop for the test session",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_github.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "cleanup_after_tests",
            "description": "Run tests and clean up afterward",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_github.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_repo",
            "description": "Create a test repository and return its name",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_github.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_get_repository",
            "description": "Test getting repository information",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_github.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_repositories",
            "description": "Test searching for repositories",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_github.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_repository",
            "description": "Test repository creation",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_github.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_file_contents",
            "description": "Test getting file contents",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_repo"
                ]
            },
            "file": "testing\\test_github.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_or_update_file",
            "description": "Test creating and updating a file",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_repo"
                ]
            },
            "file": "testing\\test_github.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_issue",
            "description": "Test creating an issue",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_repo"
                ]
            },
            "file": "testing\\test_github.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_issues",
            "description": "Test listing issues",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_repo"
                ]
            },
            "file": "testing\\test_github.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_branch",
            "description": "Test creating a branch",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_repo"
                ]
            },
            "file": "testing\\test_github.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_pull_request",
            "description": "Test creating a pull request",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_repo"
                ]
            },
            "file": "testing\\test_github.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_fork_repository",
            "description": "Test forking a repository",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_github.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_code",
            "description": "Test searching for code",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_github.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_end_to_end_workflow",
            "description": "Test a complete workflow from repo creation to PR merge",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_github.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_project",
            "description": "Create a test project and return its ID.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_branch",
            "description": "Create a test branch and return its name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_project": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_project"
                ]
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "test_get_project_details",
            "description": "Test getting project details.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_project": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_project"
                ]
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_or_update_file",
            "description": "Test creating a file.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_project": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_project"
                ]
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_file_contents",
            "description": "Test getting file contents.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_project": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_project"
                ]
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_file",
            "description": "Test updating a file.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_project": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_project"
                ]
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_push_files",
            "description": "Test pushing multiple files.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_project": {
                        "type": "string"
                    },
                    "test_branch": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_project",
                    "test_branch"
                ]
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_repositories",
            "description": "Test searching for repositories.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_issue",
            "description": "Test creating an issue.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_project": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_project"
                ]
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_issues",
            "description": "Test listing issues.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_project": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_project"
                ]
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_branch",
            "description": "Test creating a branch.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_project": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_project"
                ]
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_branches",
            "description": "Test listing branches.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_project": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_project"
                ]
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_merge_request",
            "description": "Test creating a merge request.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_project": {
                        "type": "string"
                    },
                    "test_branch": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_project",
                    "test_branch"
                ]
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_merge_requests",
            "description": "Test listing merge requests.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_project": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_project"
                ]
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_commits",
            "description": "Test listing commits.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_project": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_project"
                ]
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_user_info",
            "description": "Test getting current user info.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_fork_repository",
            "description": "Test forking a repository.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_project": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_project"
                ]
            },
            "file": "testing\\test_gitlab.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        }
    ]
}