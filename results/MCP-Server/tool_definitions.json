{
    "tools": [
        {
            "name": "server_lifespan",
            "description": "Manage server startup and shutdown lifecycle.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "mcp_server_low.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "list_tools",
            "description": "Lists all available tools.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "mcp_server_low.py",
            "decorator": [
                "server.list_tools"
            ]
        },
        {
            "name": "handle_tool_call",
            "description": "Handle all tool calls using the tool registry pattern.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "mcp_server_low.py",
            "decorator": [
                "server.call_tool"
            ]
        },
        {
            "name": "setUpClass",
            "description": "Load config file before any tests run.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "tests\\test_mcp_low.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "test_open_in_browser",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_low.py",
            "decorator": [
                "unittest.skip"
            ]
        },
        {
            "name": "test_http_get_request_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get_client"
                ]
            },
            "file": "tests\\test_mcp_low.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_http_get_request_with_headers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get_client"
                ]
            },
            "file": "tests\\test_mcp_low.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_http_get_request_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get_client"
                ]
            },
            "file": "tests\\test_mcp_low.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "db_connection_context",
            "description": "Context manager for database operations using connection pool.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "utils\\db.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "http_client_context",
            "description": "Context manager for HTTP client operations.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "utils\\web.py",
            "decorator": [
                "asynccontextmanager"
            ]
        }
    ]
}