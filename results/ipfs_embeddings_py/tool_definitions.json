{
    "tools": [
        {
            "name": "log_request",
            "description": "Log incoming requests",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "log_response",
            "description": "Log API responses",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "log_error",
            "description": "Log errors with context",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "log_background_task",
            "description": "Log background task status",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "validate_text_input",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "validate_model_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "validate_dataset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "health_check",
            "description": "Health check endpoint",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "root",
            "description": "Root endpoint with API info",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "add_endpoint",
            "description": "Add a new endpoint configuration for embeddings processing (admin only).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "create_embeddings_post",
            "description": "Create embeddings for a dataset (requires write permission)",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "load_index_post",
            "description": "Load index in background with proper error handling",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "search_item_post",
            "description": "Search embeddings in a collection with caching support (requires read permission).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "shard_embeddings_post",
            "description": "Shard embeddings into smaller chunks for distributed processing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "index_sparse_embeddings_post",
            "description": "Index sparse embeddings for efficient retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "index_cluster_post",
            "description": "Index cluster embeddings for efficient search and retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "storacha_clusters_post",
            "description": "Upload and manage clusters using Storacha distributed storage.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_cache_stats",
            "description": "Get cache statistics and performance metrics.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "clear_cache",
            "description": "Clear expired cache entries.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "login",
            "description": "Authenticate user and return JWT token.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "get_current_user_info",
            "description": "Get current user information.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_prometheus_metrics",
            "description": "Get Prometheus-formatted metrics.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_json_metrics",
            "description": "Get metrics in JSON format.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "get_detailed_health",
            "description": "Get detailed health status with metrics.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "search_faiss",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ammar\\query_server.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "mock_install_ipfs",
            "description": "\n    Fixture to mock ipfs_kit_py.install_ipfs and prevent IPFS installation during tests.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "config\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_storacha_clusters",
            "description": "\n    Fixture to mock storacha_clusters and prevent IPFS installation during tests.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "config\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "__get_pydantic_json_schema__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "\n        Get the class name, used as a unique ID in serialization.\n\n        This provides a key that makes serialization robust against actual class\n        name changes.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "custom_model_dump",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "model_serializer"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "__call__",
            "description": "Transform nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "Get Object type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod",
                "abstractmethod"
            ]
        },
        {
            "name": "get_content",
            "description": "Get object content.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_metadata_str",
            "description": "Metadata string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "set_content",
            "description": "Set the content of the node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "hash",
            "description": "Get hash of node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "node_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "node_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "node_id.setter"
            ]
        },
        {
            "name": "source_node",
            "description": "Source object node.\n\n        Extracted from the relationships field.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prev_node",
            "description": "Prev node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "next_node",
            "description": "Next node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parent_node",
            "description": "Parent node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "child_nodes",
            "description": "Child nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ref_doc_id",
            "description": "Deprecated: Get ref doc id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "extra_info",
            "description": "TODO: DEPRECATED: Extra info.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "Get Object type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "node_info",
            "description": "Deprecated: Get node info.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "hash",
            "description": "Get hash of node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_text_node",
            "description": "Create index node from text node.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "node_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "id_",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "text",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "embedding",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "Get Document type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "doc_id",
            "description": "Get document ID.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_langchain_format",
            "description": "Convert struct from LangChain document format.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_haystack_format",
            "description": "Convert struct from Haystack document format.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_embedchain_format",
            "description": "Convert struct from EmbedChain document format.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_semantic_kernel_format",
            "description": "Convert struct from Semantic Kernel document format.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "example",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_cloud_document",
            "description": "Convert from LlamaCloud document type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "embedding_strs",
            "description": "Use custom embedding strs if specified, otherwise use query str.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "embedding_image",
            "description": "Use image path for image retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "test_dependencencies",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\test_ipfs_embeddings.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_hardware",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\test_ipfs_embeddings.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "from_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\api.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\api.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "schema",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\api.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "dataclass_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\api.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "dataclass_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\api.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "override",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "_": {
                        "type": "string"
                    }
                },
                "required": [
                    "_"
                ]
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\cfg.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "from_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\dataclasses_json.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\dataclasses_json.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "schema",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\dataclasses_json.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "dataclass_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\dataclasses_json.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "dataclass_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\dataclasses_json.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "dump",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\mm.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "dump",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\mm.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "dumps",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\mm.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "dumps",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\mm.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "load",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\mm.py",
            "decorator": [
                "typing.overload#type:ignore"
            ]
        },
        {
            "name": "load",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\mm.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "loads",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\mm.py",
            "decorator": [
                "typing.overload#type:ignore"
            ]
        },
        {
            "name": "make_instance",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "kvs": {
                        "type": "string"
                    }
                },
                "required": [
                    "kvs"
                ]
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\mm.py",
            "decorator": [
                "post_load"
            ]
        },
        {
            "name": "handle_from_dict",
            "description": "\n        Return the parameters to initialize the class with.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\undefined.py",
            "decorator": [
                "staticmethod",
                "abc.abstractmethod"
            ]
        },
        {
            "name": "handle_to_dict",
            "description": "\n        Return the parameters that will be written to the output dict\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "obj": {
                        "type": "string"
                    }
                },
                "required": [
                    "obj"
                ]
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\undefined.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "handle_dump",
            "description": "\n        Return the parameters that will be added to the schema dump.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "obj": {
                        "type": "string"
                    }
                },
                "required": [
                    "obj"
                ]
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\undefined.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "create_init",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "obj": {
                        "type": "string"
                    }
                },
                "required": [
                    "obj"
                ]
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\undefined.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_separate_defined_undefined_kvs",
            "description": "\n        Returns a 2 dictionaries: defined and undefined parameters\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\undefined.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "handle_from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\undefined.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "handle_from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\undefined.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "create_init",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "obj": {
                        "type": "string"
                    }
                },
                "required": [
                    "obj"
                ]
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\undefined.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_ignore_init",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\undefined.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "handle_from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\undefined.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\undefined.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "handle_to_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "obj": {
                        "type": "string"
                    }
                },
                "required": [
                    "obj"
                ]
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\undefined.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "handle_dump",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "obj": {
                        "type": "string"
                    }
                },
                "required": [
                    "obj"
                ]
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\undefined.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "create_init",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "obj": {
                        "type": "string"
                    }
                },
                "required": [
                    "obj"
                ]
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\undefined.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_catch_all_init",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\undefined.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "_get_catch_all_field",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\dataclasses_json\\undefined.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\huggingface\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "cls_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\huggingface\\pooling.py",
            "decorator": [
                "classmethod",
                "overload"
            ]
        },
        {
            "name": "cls_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\huggingface\\pooling.py",
            "decorator": [
                "classmethod",
                "overload"
            ]
        },
        {
            "name": "cls_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\huggingface\\pooling.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "mean_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\huggingface\\pooling.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "last_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\huggingface\\pooling.py",
            "decorator": [
                "classmethod",
                "overload"
            ]
        },
        {
            "name": "last_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\huggingface\\pooling.py",
            "decorator": [
                "classmethod",
                "overload"
            ]
        },
        {
            "name": "last_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\huggingface\\pooling.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_tools",
            "description": "Create an OpenAIAgent from a list of tools.\n\n        Similar to `from_defaults` in other classes, this method will\n        infer defaults for a variety of parameters, including the LLM,\n        if they are not specified.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_new",
            "description": "From new assistant.\n\n        Args:\n            name: name of assistant\n            instructions: instructions for assistant\n            tools: list of tools\n            openai_tools: list of openai tools\n            thread_id: thread id\n            model: model\n            run_retrieve_sleep_time: run retrieve sleep time\n            files: files\n            instructions_prefix: instructions prefix\n            callback_manager: callback manager\n            verbose: verbose\n            file_ids: list of file ids\n            api_key: OpenAI API key\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\openai_assistant_agent.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_existing",
            "description": "From existing assistant id.\n\n        Args:\n            assistant_id: id of assistant\n            tools: list of BaseTools Assistant can use\n            thread_id: thread id\n            run_retrieve_sleep_time: run retrieve sleep time\n            instructions_prefix: instructions prefix\n            callback_manager: callback manager\n            api_key: OpenAI API key\n            verbose: verbose\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\openai_assistant_agent.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "assistant",
            "description": "Get assistant.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\openai_assistant_agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\openai_assistant_agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "thread_id",
            "description": "Get thread id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\openai_assistant_agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "files_dict",
            "description": "Get files dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\openai_assistant_agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat_history",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\openai_assistant_agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "latest_message",
            "description": "Get latest message.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\openai_assistant_agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\openai_assistant_agent.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\openai_assistant_agent.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\openai_assistant_agent.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\openai_assistant_agent.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "from_tools",
            "description": "Create an OpenAIAgent from a list of tools.\n\n        Similar to `from_defaults` in other classes, this method will\n        infer defaults for a variety of parameters, including the LLM,\n        if they are not specified.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\step.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "run_step",
            "description": "Run step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "arun_step",
            "description": "Run step (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_step",
            "description": "Run step (stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_step",
            "description": "Run step (async stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\agent\\openai\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "query_pipeline_from_ingestion_pipeline",
            "description": "\n        If query_pipeline is not provided, create one from ingestion_pipeline.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\cli\\rag\\base.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "chat_engine_from_query_pipeline",
            "description": "\n        If chat_engine is not provided, create one from query_pipeline.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\cli\\rag\\base.py",
            "decorator": [
                "field_validator"
            ]
        },
        {
            "name": "add_parser_args",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\cli\\rag\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "run_jobs",
            "description": "Run jobs.\n\n    Args:\n        jobs (List[Coroutine]):\n            List of jobs to run.\n        show_progress (bool):\n            Whether to show progress bar.\n\n    Returns:\n        List[Any]:\n            List of results.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "jobs": {
                        "type": "string"
                    },
                    "show_progress": {
                        "type": "boolean"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "jobs",
                    "show_progress",
                    "Returns"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\async_utils.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "worker",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\async_utils.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "_text_to_image_retrieve",
            "description": "Retrieve image nodes or documents given query text.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\image_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_image_to_image_retrieve",
            "description": "Retrieve image nodes or documents given image.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\image_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_atext_to_image_retrieve",
            "description": "Async retrieve image nodes or documents given query text.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\image_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_aimage_to_image_retrieve",
            "description": "Async retrieve image nodes or documents given image.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\image_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "__get_pydantic_json_schema__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "\n        Get the class name, used as a unique ID in serialization.\n\n        This provides a key that makes serialization robust against actual class\n        name changes.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "custom_model_dump",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "model_serializer"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "__call__",
            "description": "Transform nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "Get Object type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod",
                "abstractmethod"
            ]
        },
        {
            "name": "get_content",
            "description": "Get object content.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_metadata_str",
            "description": "Metadata string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "set_content",
            "description": "Set the content of the node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "hash",
            "description": "Get hash of node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "node_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "node_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "node_id.setter"
            ]
        },
        {
            "name": "source_node",
            "description": "Source object node.\n\n        Extracted from the relationships field.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prev_node",
            "description": "Prev node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "next_node",
            "description": "Next node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parent_node",
            "description": "Parent node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "child_nodes",
            "description": "Child nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ref_doc_id",
            "description": "Deprecated: Get ref doc id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "extra_info",
            "description": "TODO: DEPRECATED: Extra info.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "Get Object type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "node_info",
            "description": "Deprecated: Get node info.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "hash",
            "description": "Get hash of node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_text_node",
            "description": "Create index node from text node.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "node_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "id_",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "text",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "embedding",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "Get Document type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "doc_id",
            "description": "Get document ID.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_langchain_format",
            "description": "Convert struct from LangChain document format.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_haystack_format",
            "description": "Convert struct from Haystack document format.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_embedchain_format",
            "description": "Convert struct from EmbedChain document format.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_semantic_kernel_format",
            "description": "Convert struct from Semantic Kernel document format.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "example",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_cloud_document",
            "description": "Convert from LlamaCloud document type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "embedding_strs",
            "description": "Use custom embedding strs if specified, otherwise use query str.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "embedding_image",
            "description": "Use image path for image retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create a ServiceContext from defaults.\n\n        NOTE: Deprecated, use llama_index.settings.Settings instead or pass in\n        modules to local functions/methods/interfaces.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\service_context.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "llm",
            "description": "Get the LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "llm",
            "description": "Set the LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "llm.setter"
            ]
        },
        {
            "name": "pydantic_program_mode",
            "description": "Get the pydantic program mode.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "pydantic_program_mode",
            "description": "Set the pydantic program mode.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "pydantic_program_mode.setter"
            ]
        },
        {
            "name": "embed_model",
            "description": "Get the embedding model.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "embed_model",
            "description": "Set the embedding model.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "embed_model.setter"
            ]
        },
        {
            "name": "global_handler",
            "description": "Get the global handler.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "global_handler",
            "description": "Set the global handler.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "global_handler.setter"
            ]
        },
        {
            "name": "callback_manager",
            "description": "Get the callback manager.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "callback_manager",
            "description": "Set the callback manager.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "callback_manager.setter"
            ]
        },
        {
            "name": "tokenizer",
            "description": "Get the tokenizer.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "tokenizer",
            "description": "Set the tokenizer.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "tokenizer.setter"
            ]
        },
        {
            "name": "node_parser",
            "description": "Get the node parser.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "node_parser",
            "description": "Set the node parser.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "node_parser.setter"
            ]
        },
        {
            "name": "chunk_size",
            "description": "Get the chunk size.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chunk_size",
            "description": "Set the chunk size.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "chunk_size.setter"
            ]
        },
        {
            "name": "chunk_overlap",
            "description": "Get the chunk overlap.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chunk_overlap",
            "description": "Set the chunk overlap.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "chunk_overlap.setter"
            ]
        },
        {
            "name": "text_splitter",
            "description": "Get the text splitter.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "text_splitter",
            "description": "Set the text splitter.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "text_splitter.setter"
            ]
        },
        {
            "name": "prompt_helper",
            "description": "Get the prompt helper.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt_helper",
            "description": "Set the prompt helper.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "prompt_helper.setter"
            ]
        },
        {
            "name": "num_output",
            "description": "Get the number of outputs.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "num_output",
            "description": "Set the number of outputs.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "num_output.setter"
            ]
        },
        {
            "name": "context_window",
            "description": "Get the context window.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "context_window",
            "description": "Set the context window.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "context_window.setter"
            ]
        },
        {
            "name": "transformations",
            "description": "Get the transformations.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "transformations",
            "description": "Set the transformations.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\settings.py",
            "decorator": [
                "transformations.setter"
            ]
        },
        {
            "name": "parse",
            "description": "Parse, validate, and correct errors programmatically.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "__get_pydantic_core_schema__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\types.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "__get_pydantic_json_schema__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\types.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "output_cls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\types.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stopwords",
            "description": "Get stopwords.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "temp_set_attrs",
            "description": "Temporary setter.\n\n    Utility class for setting a temporary value for an attribute on a class.\n    Taken from: https://tinyurl.com/2p89xymh\n\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\utils.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "_wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\utils.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "agent_input_component",
            "description": "Get agent input component.\n\n        NOTE: This is deprecated and will be removed in the future.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\pipeline_worker.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "agent_components",
            "description": "Get agent output component.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\pipeline_worker.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "run_step",
            "description": "Run step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\pipeline_worker.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "arun_step",
            "description": "Run step (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\pipeline_worker.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_step",
            "description": "Run step (stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\pipeline_worker.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_step",
            "description": "Run step (async stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\pipeline_worker.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "from_tools",
            "description": "Convenience constructor method from set of BaseTools (Optional).",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_initialize_state",
            "description": "Initialize state.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\simple.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_run_step",
            "description": "Run step.\n\n        Returns:\n            Tuple of (agent_response, is_done)\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\simple.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "run_step",
            "description": "Run step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\simple.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "arun_step",
            "description": "Run step (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\simple.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_step",
            "description": "Run step (stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\simple.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_step",
            "description": "Run step (async stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\simple.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "_finalize_task",
            "description": "Finalize task, after all the steps are completed.\n\n        State is all the step states.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\simple.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "run_step",
            "description": "Run step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\simple_function.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "arun_step",
            "description": "Run step (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\simple_function.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_step",
            "description": "Run step (stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\simple_function.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_step",
            "description": "Run step (async stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\custom\\simple_function.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "from_tools",
            "description": "Create a FunctionCallingAgent from a list of tools.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\function_calling\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_tools",
            "description": "Create an FunctionCallingAgentWorker from a list of tools.\n\n        Similar to `from_defaults` in other classes, this method will\n        infer defaults for a variety of parameters, including the LLM,\n        if they are not specified.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\function_calling\\step.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "run_step",
            "description": "Run step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\function_calling\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "arun_step",
            "description": "Run step (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\function_calling\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_step",
            "description": "Run step (stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\function_calling\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_step",
            "description": "Run step (async stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\function_calling\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "from_tools",
            "description": "Convenience constructor method from set of BaseTools (Optional).\n\n        NOTE: kwargs should have been exhausted by this point. In other words\n        the various upstream components such as BaseSynthesizer (response synthesizer)\n        or BaseRetriever should have picked up off their respective kwargs in their\n        constructions.\n\n        Returns:\n            ReActAgent\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\legacy\\react\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "chat_history",
            "description": "Chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\legacy\\react\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_tools",
            "description": "Convenience constructor method from set of BaseTools (Optional).\n\n        NOTE: kwargs should have been exhausted by this point. In other words\n        the various upstream components such as BaseSynthesizer (response synthesizer)\n        or BaseRetriever should have picked up off their respective kwargs in their\n        constructions.\n\n        If `handle_reasoning_failure_fn` is provided, when LLM fails to follow the response templates specified in\n        the System Prompt, this function will be called. This function should provide to the Agent, so that the Agent\n        can have a second chance to fix its mistakes.\n        To handle the exception yourself, you can provide a function that raises the `Exception`.\n\n        Note: If you modified any response template in the System Prompt, you should override the method\n        `_extract_reasoning_step` in `ReActAgentWorker`.\n\n        Returns:\n            ReActAgent\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\react\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "format",
            "description": "Format chat history into list of ChatMessage.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\react\\formatter.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create ReActChatFormatter from defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\react\\formatter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_context",
            "description": "Create ReActChatFormatter from context.\n\n        NOTE: deprecated\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\react\\formatter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_tools",
            "description": "Convenience constructor method from set of BaseTools (Optional).\n\n        NOTE: kwargs should have been exhausted by this point. In other words\n        the various upstream components such as BaseSynthesizer (response synthesizer)\n        or BaseRetriever should have picked up off their respective kwargs in their\n        constructions.\n\n        Returns:\n            ReActAgentWorker\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\react\\step.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_content",
            "description": "Get content.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\react\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "is_done",
            "description": "Is the reasoning step the last one.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\react\\types.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "is_done",
            "description": "Is the reasoning step the last one.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\react\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_done",
            "description": "Is the reasoning step the last one.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\react\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_done",
            "description": "Is the reasoning step the last one.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\react\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_tools",
            "description": "Convenience constructor method from set of BaseTools (Optional).\n\n        NOTE: kwargs should have been exhausted by this point. In other words\n        the various upstream components such as BaseSynthesizer (response synthesizer)\n        or BaseRetriever should have picked up off their respective kwargs in their\n        constructions.\n\n        Returns:\n            ReActAgent\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\react_multimodal\\step.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "run_step",
            "description": "Run step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\react_multimodal\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "arun_step",
            "description": "Run step (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\react_multimodal\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_step",
            "description": "Run step (stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\react_multimodal\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_step",
            "description": "Run step (async stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\react_multimodal\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "create_task",
            "description": "Create task.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_task",
            "description": "Delete task.\n\n        NOTE: this will not delete any previous executions from memory.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "list_tasks",
            "description": "List tasks.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_completed_tasks",
            "description": "Get completed tasks.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_task_output",
            "description": "Get task output.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_task",
            "description": "Get task.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_upcoming_steps",
            "description": "Get upcoming steps.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_completed_steps",
            "description": "Get completed steps.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "run_step",
            "description": "Run step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "arun_step",
            "description": "Run step (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream_step",
            "description": "Run step (stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "astream_step",
            "description": "Run step (async stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "finalize_response",
            "description": "Finalize response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "undo_step",
            "description": "Undo previous step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_llm",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "chat_history",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_run_step",
            "description": "Execute step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "_arun_step",
            "description": "Execute step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "run_step",
            "description": "Run step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "arun_step",
            "description": "Run step (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "stream_step",
            "description": "Run step (stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "astream_step",
            "description": "Run step (async stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "finalize_response",
            "description": "Finalize response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "_chat",
            "description": "Chat with step executor.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "_achat",
            "description": "Chat with step executor.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "dispatcher.span",
                "trace_method"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "dispatcher.span",
                "trace_method"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "dispatcher.span",
                "trace_method"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "dispatcher.span",
                "trace_method"
            ]
        },
        {
            "name": "create_plan",
            "description": "Create plan. Returns the plan_id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_next_tasks",
            "description": "Get next task ids for a given plan.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "mark_task_complete",
            "description": "Mark task complete for a given plan.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "refine_plan",
            "description": "Refine plan.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "run_task",
            "description": "Run task.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_chat",
            "description": "Chat with step executor.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "_achat",
            "description": "Chat with step executor.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "task_id",
            "description": "Task id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\parallel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat_history",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\parallel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\parallel.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\parallel.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\parallel.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\agent\\runner\\parallel.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "generate_retrieval_spec",
            "description": "Generate retrieval spec synchronously.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_auto_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "agenerate_retrieval_spec",
            "description": "Generate retrieval spec asynchronously.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_auto_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_build_retriever_from_spec",
            "description": "Build retriever from spec and provide query bundle.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_auto_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "text_retrieve",
            "description": "Retrieve text nodes given text query.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_multi_modal_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "text_to_image_retrieve",
            "description": "Retrieve image nodes given text query.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_multi_modal_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "image_to_image_retrieve",
            "description": "Retrieve image nodes given image query.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_multi_modal_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "atext_retrieve",
            "description": "Async Retrieve text nodes given text query.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_multi_modal_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "atext_to_image_retrieve",
            "description": "Async Retrieve image nodes given text query.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_multi_modal_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aimage_to_image_retrieve",
            "description": "Async Retrieve image nodes given image query.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_multi_modal_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_query_engine.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "aquery",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_query_engine.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "_query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_query_engine.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_aquery",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_query_engine.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_query_engine.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_query_engine.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "retrieve",
            "description": "Retrieve nodes given query.\n\n        Args:\n            str_or_query_bundle (QueryType): Either a query string or\n                a QueryBundle object.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "str_or_query_bundle": {
                        "type": "string",
                        "description": "Either a query string or"
                    }
                },
                "required": [
                    "str_or_query_bundle"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_retriever.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "aretrieve",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_retriever.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "_retrieve",
            "description": "Retrieve nodes given query.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_retriever.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_retriever.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ind",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_selector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "reason",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_selector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "inds",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_selector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "reasons",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_selector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_select",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_selector.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_aselect",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\base_selector.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\agent\\types.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "_aquery",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\agent\\types.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "initialize_step",
            "description": "Initialize step from task.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\agent\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "run_step",
            "description": "Run step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\agent\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "arun_step",
            "description": "Run step (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\agent\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream_step",
            "description": "Run step (stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\agent\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "astream_step",
            "description": "Run step (async stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\agent\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "finalize_task",
            "description": "Finalize task, after all the steps are completed.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\agent\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "check_callback_manager",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "_get_query_embedding",
            "description": "\n        Embed the input query synchronously.\n\n        Subclasses should implement this method. Reference get_query_embedding's\n        docstring for more information.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_aget_query_embedding",
            "description": "\n        Embed the input query asynchronously.\n\n        Subclasses should implement this method. Reference get_query_embedding's\n        docstring for more information.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_query_embedding",
            "description": "\n        Embed the input query.\n\n        When embedding a query, depending on the model, a special instruction\n        can be prepended to the raw query string. For example, \"Represent the\n        question for retrieving supporting documents: \". If you're curious,\n        other examples of predefined instructions can be found in\n        embeddings/huggingface_utils.py.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "aget_query_embedding",
            "description": "Get query embedding.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "_get_text_embedding",
            "description": "\n        Embed the input text synchronously.\n\n        Subclasses should implement this method. Reference get_text_embedding's\n        docstring for more information.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_text_embedding",
            "description": "\n        Embed the input text.\n\n        When embedding text, depending on the model, a special instruction\n        can be prepended to the raw text string. For example, \"Represent the\n        document for retrieval: \". If you're curious, other examples of\n        predefined instructions can be found in embeddings/huggingface_utils.py.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "aget_text_embedding",
            "description": "Async get text embedding.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "get_text_embedding_batch",
            "description": "Get a list of text embeddings, with batching.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "aget_text_embedding_batch",
            "description": "Asynchronously get a list of text embeddings, with batching.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base_sparse.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "custom_model_dump",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base_sparse.py",
            "decorator": [
                "model_serializer"
            ]
        },
        {
            "name": "_get_query_embedding",
            "description": "Embed the input query synchronously.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base_sparse.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_aget_query_embedding",
            "description": "Embed the input query asynchronously.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base_sparse.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_query_embedding",
            "description": "Embed the input query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base_sparse.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "aget_query_embedding",
            "description": "Get query embedding.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base_sparse.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "_get_text_embedding",
            "description": "Embed the input text synchronously.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base_sparse.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_aget_text_embedding",
            "description": "Embed the input text asynchronously.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base_sparse.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_text_embedding",
            "description": "Embed the input text.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base_sparse.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "aget_text_embedding",
            "description": "Async get text embedding.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base_sparse.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "get_text_embedding_batch",
            "description": "Get a list of text embeddings, with batching.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base_sparse.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "aget_text_embedding_batch",
            "description": "Asynchronously get a list of text embeddings, with batching.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\embeddings\\base_sparse.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "check_callback_manager",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\llms\\base.py",
            "decorator": [
                "model_validator"
            ]
        },
        {
            "name": "metadata",
            "description": "LLM metadata.\n\n        Returns:\n            LLMMetadata: LLM metadata containing various information about the LLM.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\llms\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "chat",
            "description": "Chat endpoint for LLM.\n\n        Args:\n            messages (Sequence[ChatMessage]):\n                Sequence of chat messages.\n            kwargs (Any):\n                Additional keyword arguments to pass to the LLM.\n\n        Returns:\n            ChatResponse: Chat response from the LLM.\n\n        Examples:\n            ```python\n            from llama_index.core.llms import ChatMessage\n\n            response = llm.chat([ChatMessage(role=\"user\", content=\"Hello\")])\n            print(response.content)\n            ```\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "messages": {
                        "type": "string"
                    },
                    "kwargs": {
                        "type": "string"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "ChatResponse": {
                        "type": "string",
                        "description": "Chat response from the LLM."
                    },
                    "Examples": {
                        "type": "string"
                    }
                },
                "required": [
                    "messages",
                    "kwargs",
                    "Returns",
                    "ChatResponse",
                    "Examples"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "complete",
            "description": "Completion endpoint for LLM.\n\n        If the LLM is a chat model, the prompt is transformed into a single `user` message.\n\n        Args:\n            prompt (str):\n                Prompt to send to the LLM.\n            formatted (bool, optional):\n                Whether the prompt is already formatted for the LLM, by default False.\n            kwargs (Any):\n                Additional keyword arguments to pass to the LLM.\n\n        Returns:\n            CompletionResponse: Completion response from the LLM.\n\n        Examples:\n            ```python\n            response = llm.complete(\"your prompt\")\n            print(response.text)\n            ```\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "prompt": {
                        "type": "string"
                    },
                    "formatted": {
                        "type": "boolean"
                    },
                    "kwargs": {
                        "type": "string"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "CompletionResponse": {
                        "type": "string",
                        "description": "Completion response from the LLM."
                    },
                    "Examples": {
                        "type": "string"
                    }
                },
                "required": [
                    "prompt",
                    "kwargs",
                    "Returns",
                    "CompletionResponse",
                    "Examples"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream_chat",
            "description": "Streaming chat endpoint for LLM.\n\n        Args:\n            messages (Sequence[ChatMessage]):\n                Sequence of chat messages.\n            kwargs (Any):\n                Additional keyword arguments to pass to the LLM.\n\n        Yields:\n            ChatResponse:\n                A generator of ChatResponse objects, each containing a new token of the response.\n\n        Examples:\n            ```python\n            from llama_index.core.llms import ChatMessage\n\n            gen = llm.stream_chat([ChatMessage(role=\"user\", content=\"Hello\")])\n            for response in gen:\n                print(response.delta, end=\"\", flush=True)\n            ```\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "messages": {
                        "type": "string"
                    },
                    "kwargs": {
                        "type": "string"
                    },
                    "Yields": {
                        "type": "string"
                    },
                    "ChatResponse": {
                        "type": "string"
                    },
                    "Examples": {
                        "type": "string"
                    }
                },
                "required": [
                    "messages",
                    "kwargs",
                    "Yields",
                    "ChatResponse",
                    "Examples"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream_complete",
            "description": "Streaming completion endpoint for LLM.\n\n        If the LLM is a chat model, the prompt is transformed into a single `user` message.\n\n        Args:\n            prompt (str):\n                Prompt to send to the LLM.\n            formatted (bool, optional):\n                Whether the prompt is already formatted for the LLM, by default False.\n            kwargs (Any):\n                Additional keyword arguments to pass to the LLM.\n\n        Yields:\n            CompletionResponse:\n                A generator of CompletionResponse objects, each containing a new token of the response.\n\n        Examples:\n            ```python\n            gen = llm.stream_complete(\"your prompt\")\n            for response in gen:\n                print(response.text, end=\"\", flush=True)\n            ```\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "prompt": {
                        "type": "string"
                    },
                    "formatted": {
                        "type": "boolean"
                    },
                    "kwargs": {
                        "type": "string"
                    },
                    "Yields": {
                        "type": "string"
                    },
                    "CompletionResponse": {
                        "type": "string"
                    },
                    "Examples": {
                        "type": "string"
                    }
                },
                "required": [
                    "prompt",
                    "kwargs",
                    "Yields",
                    "CompletionResponse",
                    "Examples"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "achat",
            "description": "Async chat endpoint for LLM.\n\n        Args:\n            messages (Sequence[ChatMessage]):\n                Sequence of chat messages.\n            kwargs (Any):\n                Additional keyword arguments to pass to the LLM.\n\n        Returns:\n            ChatResponse: Chat response from the LLM.\n\n        Examples:\n            ```python\n            from llama_index.core.llms import ChatMessage\n\n            response = await llm.achat([ChatMessage(role=\"user\", content=\"Hello\")])\n            print(response.content)\n            ```\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "messages": {
                        "type": "string"
                    },
                    "kwargs": {
                        "type": "string"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "ChatResponse": {
                        "type": "string",
                        "description": "Chat response from the LLM."
                    },
                    "Examples": {
                        "type": "string"
                    }
                },
                "required": [
                    "messages",
                    "kwargs",
                    "Returns",
                    "ChatResponse",
                    "Examples"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "acomplete",
            "description": "Async completion endpoint for LLM.\n\n        If the LLM is a chat model, the prompt is transformed into a single `user` message.\n\n        Args:\n            prompt (str):\n                Prompt to send to the LLM.\n            formatted (bool, optional):\n                Whether the prompt is already formatted for the LLM, by default False.\n            kwargs (Any):\n                Additional keyword arguments to pass to the LLM.\n\n        Returns:\n            CompletionResponse: Completion response from the LLM.\n\n        Examples:\n            ```python\n            response = await llm.acomplete(\"your prompt\")\n            print(response.text)\n            ```\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "prompt": {
                        "type": "string"
                    },
                    "formatted": {
                        "type": "boolean"
                    },
                    "kwargs": {
                        "type": "string"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "CompletionResponse": {
                        "type": "string",
                        "description": "Completion response from the LLM."
                    },
                    "Examples": {
                        "type": "string"
                    }
                },
                "required": [
                    "prompt",
                    "kwargs",
                    "Returns",
                    "CompletionResponse",
                    "Examples"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "astream_chat",
            "description": "Async streaming chat endpoint for LLM.\n\n        Args:\n            messages (Sequence[ChatMessage]):\n                Sequence of chat messages.\n            kwargs (Any):\n                Additional keyword arguments to pass to the LLM.\n\n        Yields:\n            ChatResponse:\n                An async generator of ChatResponse objects, each containing a new token of the response.\n\n        Examples:\n            ```python\n            from llama_index.core.llms import ChatMessage\n\n            gen = await llm.astream_chat([ChatMessage(role=\"user\", content=\"Hello\")])\n            async for response in gen:\n                print(response.delta, end=\"\", flush=True)\n            ```\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "messages": {
                        "type": "string"
                    },
                    "kwargs": {
                        "type": "string"
                    },
                    "Yields": {
                        "type": "string"
                    },
                    "ChatResponse": {
                        "type": "string"
                    },
                    "Examples": {
                        "type": "string"
                    }
                },
                "required": [
                    "messages",
                    "kwargs",
                    "Yields",
                    "ChatResponse",
                    "Examples"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "astream_complete",
            "description": "Async streaming completion endpoint for LLM.\n\n        If the LLM is a chat model, the prompt is transformed into a single `user` message.\n\n        Args:\n            prompt (str):\n                Prompt to send to the LLM.\n            formatted (bool, optional):\n                Whether the prompt is already formatted for the LLM, by default False.\n            kwargs (Any):\n                Additional keyword arguments to pass to the LLM.\n\n        Yields:\n            CompletionResponse:\n                An async generator of CompletionResponse objects, each containing a new token of the response.\n\n        Examples:\n            ```python\n            gen = await llm.astream_complete(\"your prompt\")\n            async for response in gen:\n                print(response.text, end=\"\", flush=True)\n            ```\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "prompt": {
                        "type": "string"
                    },
                    "formatted": {
                        "type": "boolean"
                    },
                    "kwargs": {
                        "type": "string"
                    },
                    "Yields": {
                        "type": "string"
                    },
                    "CompletionResponse": {
                        "type": "string"
                    },
                    "Examples": {
                        "type": "string"
                    }
                },
                "required": [
                    "prompt",
                    "kwargs",
                    "Yields",
                    "CompletionResponse",
                    "Examples"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_str",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\llms\\types.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "serialize_additional_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\llms\\types.py",
            "decorator": [
                "field_serializer"
            ]
        },
        {
            "name": "from_keys",
            "description": "Create InputKeys from tuple.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\query_pipeline\\query.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_keys",
            "description": "Create OutputKeys from tuple.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\query_pipeline\\query.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_as_query_component",
            "description": "Get query component.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\query_pipeline\\query.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "set_callback_manager",
            "description": "Set callback manager.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\query_pipeline\\query.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "free_req_input_keys",
            "description": "Get free input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\query_pipeline\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_validate_component_inputs",
            "description": "Validate component inputs during run_component.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\query_pipeline\\query.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_run_component",
            "description": "Run component.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\query_pipeline\\query.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_arun_component",
            "description": "Run component (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\query_pipeline\\query.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\query_pipeline\\query.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\query_pipeline\\query.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "sub_query_components",
            "description": "Get sub query components.\n\n        Certain query components may have sub query components, e.g. a\n        query pipeline will have sub query components, and so will\n        an IfElseComponent.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\query_pipeline\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_input_keys",
            "description": "Input keys dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\query_pipeline\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_optional_input_keys",
            "description": "Optional input keys dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\query_pipeline\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_output_keys",
            "description": "Output keys dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\query_pipeline\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\query_pipeline\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\base\\query_pipeline\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "event",
            "description": "Context manager for lanching and shutdown of events.\n\n        Handles sending on_evnt_start and on_event_end to handlers for specified event.\n\n        Usage:\n            with callback_manager.event(CBEventType.QUERY, payload={key, val}) as event:\n                ...\n                event.on_end(payload={key, val})  # optional\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\base.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "as_trace",
            "description": "Context manager tracer for lanching and shutdown of traces.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\base.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "trace_map",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__get_pydantic_core_schema__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "__get_pydantic_json_schema__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "on_event_start",
            "description": "Run when an event starts and return id of event.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\base_handler.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "on_event_end",
            "description": "Run when an event ends.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\base_handler.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "start_trace",
            "description": "Run when an overall trace is launched.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\base_handler.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "end_trace",
            "description": "Run when an overall trace is exited.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\base_handler.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "event_pairs_by_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\llama_debug.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "events_pairs_by_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\llama_debug.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "sequential_events",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\llama_debug.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "total_llm_token_count",
            "description": "Get the current total LLM token count.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\token_counting.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt_llm_token_count",
            "description": "Get the current total LLM prompt token count.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\token_counting.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "completion_llm_token_count",
            "description": "Get the current total LLM completion token count.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\token_counting.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "total_embedding_token_count",
            "description": "Get the current total Embedding token count.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\token_counting.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\utils.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "async_wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\callbacks\\utils.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Initialize a CondensePlusContextChatEngine from default parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\condense_plus_context.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\condense_plus_context.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\condense_plus_context.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\condense_plus_context.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\condense_plus_context.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "chat_history",
            "description": "Get chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\condense_plus_context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Initialize a CondenseQuestionChatEngine from default parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\condense_question.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\condense_question.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\condense_question.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\condense_question.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\condense_question.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "chat_history",
            "description": "Get chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\condense_question.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Initialize a ContextChatEngine from default parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\context.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\context.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\context.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\context.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\context.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "chat_history",
            "description": "Get chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Initialize a SimpleChatEngine from default parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\simple.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\simple.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\simple.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\simple.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "chat_history",
            "description": "Get chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\simple.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "response_gen",
            "description": "Used for fake streaming, i.e. with tool outputs.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "write_response_to_history",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\types.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "awrite_response_to_history",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\types.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "response_gen",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "reset",
            "description": "Reset conversation state.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "chat",
            "description": "Main chat interface.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream_chat",
            "description": "Stream chat interface.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "achat",
            "description": "Async version of main chat interface.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "astream_chat",
            "description": "Async version of main chat interface.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "chat_history",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\chat_engine\\types.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "Get index struct type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod",
                "abstractmethod"
            ]
        },
        {
            "name": "node_id_to_index",
            "description": "Map from node id to index.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\data_structs.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "size",
            "description": "Get the size of the graph.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\data_structs.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "node_ids",
            "description": "Get all node ids.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\data_structs.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "keywords",
            "description": "Get all keywords in the table.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\data_structs.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "size",
            "description": "Get the size of the table.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\data_structs.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "node_ids",
            "description": "Get all node ids.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\data_structs.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "summary_ids",
            "description": "Get summary ids.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\document_summary.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\document_summary.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\table.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\data_structs\\table.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\embeddings\\mock_embed_model.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_get_image_embedding",
            "description": "\n        Embed the input image synchronously.\n\n        Subclasses should implement this method. Reference get_image_embedding's\n        docstring for more information.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\embeddings\\multi_modal_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_aget_image_embedding",
            "description": "\n        Embed the input image asynchronously.\n\n        Subclasses should implement this method. Reference get_image_embedding's\n        docstring for more information.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\embeddings\\multi_modal_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "cls_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\embeddings\\pooling.py",
            "decorator": [
                "classmethod",
                "overload"
            ]
        },
        {
            "name": "cls_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\embeddings\\pooling.py",
            "decorator": [
                "classmethod",
                "overload"
            ]
        },
        {
            "name": "cls_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\embeddings\\pooling.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "mean_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\embeddings\\pooling.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "aevaluate",
            "description": "Run evaluation with query string, retrieved contexts,\n        and generated response string.\n\n        Subclasses can override this method to provide custom evaluation logic and\n        take in additional arguments.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\evaluation\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "eval_response_worker",
            "description": "Get aevaluate_response tasks with semaphore.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\evaluation\\batch_runner.py",
            "decorator": [
                "retry"
            ]
        },
        {
            "name": "eval_worker",
            "description": "Get aevaluate tasks with semaphore.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\evaluation\\batch_runner.py",
            "decorator": [
                "retry"
            ]
        },
        {
            "name": "response_worker",
            "description": "Get aquery tasks with semaphore.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\evaluation\\batch_runner.py",
            "decorator": [
                "retry"
            ]
        },
        {
            "name": "from_qr_pairs",
            "description": "Create from qr pairs.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\evaluation\\dataset_generation.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "qr_pairs",
            "description": "Get pairs.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\evaluation\\dataset_generation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "questions",
            "description": "Get questions.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\evaluation\\dataset_generation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_json",
            "description": "Load json.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\evaluation\\dataset_generation.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_documents",
            "description": "Generate dataset from documents.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\evaluation\\dataset_generation.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_str",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\evaluation\\retrieval\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metric_vals_dict",
            "description": "Dictionary of metric values.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\evaluation\\retrieval\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_metric_names",
            "description": "Create evaluator from metric names.\n\n        Args:\n            metric_names (List[str]): List of metric names\n            **kwargs: Additional arguments for the evaluator\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\evaluation\\retrieval\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_aget_retrieved_ids_and_texts",
            "description": "Get retrieved ids and texts.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\evaluation\\retrieval\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "compute",
            "description": "Compute metric.\n\n        Args:\n            query (Optional[str]): Query string\n            expected_ids (Optional[List[str]]): Expected ids\n            retrieved_ids (Optional[List[str]]): Retrieved ids\n            **kwargs: Additional keyword arguments\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Query string"
                    },
                    "expected_ids": {
                        "type": "string",
                        "description": "Expected ids"
                    },
                    "retrieved_ids": {
                        "type": "string",
                        "description": "Retrieved ids"
                    }
                }
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\evaluation\\retrieval\\metrics_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\extractors\\interface.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\extractors\\interface.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "aextract",
            "description": "Extracts metadata for a sequence of nodes, returning a list of\n        metadata dictionaries corresponding to each node.\n\n        Args:\n            nodes (Sequence[Document]): nodes to extract metadata from\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "nodes": {
                        "type": "string",
                        "description": "nodes to extract metadata from"
                    }
                },
                "required": [
                    "nodes"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\extractors\\interface.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\extractors\\metadata_extractors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\extractors\\metadata_extractors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\extractors\\metadata_extractors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\extractors\\metadata_extractors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\extractors\\metadata_extractors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "Load from persist dir.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Get client.\n        Not applicable for this store.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\simple.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Create a SimpleGraphStore from a persist directory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Load from persist path.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\simple_labelled.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "Load from persist dir.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\simple_labelled.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Load from dict.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\simple_labelled.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\simple_labelled.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__str__",
            "description": "Return the string representation of the node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "id",
            "description": "Get the node id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\types.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "id",
            "description": "Get the node id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "id",
            "description": "Get the node id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "id",
            "description": "Get the relation id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get",
            "description": "Get nodes with matching values.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_triplets",
            "description": "Get triplets with matching values.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_rel_map",
            "description": "Get depth-aware rel map.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "upsert_nodes",
            "description": "Upsert nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "upsert_relations",
            "description": "Upsert relations.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete",
            "description": "Delete matching data.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "structured_query",
            "description": "Query the graph store with statement and parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "vector_query",
            "description": "Query the graph store with a vector store query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\graph_stores\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_documents",
            "description": "Create index from documents.\n\n        Args:\n            documents (Optional[Sequence[BaseDocument]]): List of documents to\n                build the index from.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "documents": {
                        "type": "string",
                        "description": "List of documents to"
                    }
                }
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "index_struct",
            "description": "Get the index struct.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "index_id",
            "description": "Get the index struct.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "docstore",
            "description": "Get the docstore corresponding to the index.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "storage_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "summary",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "summary",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\base.py",
            "decorator": [
                "summary.setter"
            ]
        },
        {
            "name": "_build_index_from_nodes",
            "description": "Build the index from nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_insert",
            "description": "Index-specific logic for inserting nodes to the index struct.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_delete_node",
            "description": "Delete a node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "as_retriever",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_llm_metadata",
            "description": "Create from llm predictor.\n\n        This will autofill values like context_window and num_output.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\prompt_helper.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\prompt_helper.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_insert_datapoint",
            "description": "Insert datapoint into index.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\common\\struct_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_get_col_types_map",
            "description": "Get col types map for schema.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\common\\struct_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_get_schema_text",
            "description": "Get schema text for extracting relevant info from unstructured text.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\common\\struct_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "docstore",
            "description": "Return docstore.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\common_tree\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "root_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\composability\\graph.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "all_indices",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\composability\\graph.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "root_index",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\composability\\graph.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "index_struct",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\composability\\graph.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_indices",
            "description": "Create composable graph using this index class as the root.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\composability\\graph.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "vector_store",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\document_summary\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\document_summary\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\empty\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_extract_keywords",
            "description": "Extract keywords from text.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\keyword_table\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\keyword_table\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_get_keywords",
            "description": "Extract keywords.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\keyword_table\\retrievers.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "graph_store",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\knowledge_graph\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_parse_triplet_response",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\knowledge_graph\\base.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\knowledge_graph\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "query_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\knowledge_graph\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\list\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_insert",
            "description": "Insert a set of documents (each a node).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\managed\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_ref_doc",
            "description": "Delete a document and it's nodes by using ref_doc_id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\managed\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "update_ref_doc",
            "description": "Update a document and it's corresponding nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\managed\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "as_retriever",
            "description": "Return a Retriever for this managed index.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\managed\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\managed\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_documents",
            "description": "Build an index from a sequence of documents.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\managed\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "image_vector_store",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\multi_modal\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "image_embed_model",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\multi_modal\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_image_vector_store_empty",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\multi_modal\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_text_vector_store_empty",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\multi_modal\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_vector_store",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\multi_modal\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "similarity_top_k",
            "description": "Return similarity top k.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\multi_modal\\retriever.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "similarity_top_k",
            "description": "Set similarity top k.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\multi_modal\\retriever.py",
            "decorator": [
                "similarity_top_k.setter"
            ]
        },
        {
            "name": "image_similarity_top_k",
            "description": "Return image similarity top k.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\multi_modal\\retriever.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "image_similarity_top_k",
            "description": "Set image similarity top k.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\multi_modal\\retriever.py",
            "decorator": [
                "image_similarity_top_k.setter"
            ]
        },
        {
            "name": "from_existing",
            "description": "Create an index from an existing property graph store (and optional vector store).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\property_graph\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "property_graph_store",
            "description": "Get the labelled property graph store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\property_graph\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "vector_store",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\property_graph\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\property_graph\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "retrieve_from_graph",
            "description": "Retrieve nodes from the labelled property graph.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\property_graph\\sub_retrievers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aretrieve_from_graph",
            "description": "Retrieve nodes from the labelled property graph.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\property_graph\\sub_retrievers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "graph_store",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\property_graph\\sub_retrievers\\custom.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "init",
            "description": "Initialize the retriever.\n\n        Has access to all keyword arguments passed to the retriever, as well as:\n        - `self.graph_store`: The graph store to retrieve data from.\n        - `self.include_text``: Whether to include text in the retrieved nodes.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\property_graph\\sub_retrievers\\custom.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "custom_retrieve",
            "description": "Retrieve data from the graph store based on the query string.\n\n        Args:\n            query_str (str): The query string to retrieve data for.\n\n        Returns:\n            The retrieved data. The return type can be one of:\n            - str: A single string.\n            - List[str]: A list of strings.\n            - TextNode: A single TextNode.\n            - List[TextNode]: A list of TextNodes.\n            - NodeWithScore: A single NodeWithScore.\n            - List[NodeWithScore]: A list of NodeWithScores.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query_str": {
                        "type": "string",
                        "description": "The query string to retrieve data for."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "query_str",
                    "Returns"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\property_graph\\sub_retrievers\\custom.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Return the name of the class.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\property_graph\\transformations\\dynamic_llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\property_graph\\transformations\\implicit.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\property_graph\\transformations\\schema_llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\property_graph\\transformations\\simple_llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_run",
            "description": "Run query transform.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\query\\query_transform\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\query\\query_transform\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\query\\query_transform\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_construct_feedback",
            "description": "Construct feedback from response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\query\\query_transform\\feedback_transform.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\struct_store\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_documents",
            "description": "Build context from documents.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\struct_store\\container_builder.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "ref_doc_id_column",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\struct_store\\sql.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "sql_retriever",
            "description": "Get SQL retriever.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\struct_store\\sql_query.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "sql_retriever",
            "description": "Get SQL retriever.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\struct_store\\sql_query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "sql_retriever",
            "description": "Get SQL retriever.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\struct_store\\sql_query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "sql_retriever",
            "description": "Get SQL retriever.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\struct_store\\sql_query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parse_response_to_sql",
            "description": "Parse response to SQL.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\struct_store\\sql_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\tree\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_vector_store",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\vector_store\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "vector_store",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\vector_store\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\vector_store\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "similarity_top_k",
            "description": "Return similarity top k.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\vector_store\\retrievers\\retriever.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "similarity_top_k",
            "description": "Set similarity top k.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\vector_store\\retrievers\\retriever.py",
            "decorator": [
                "similarity_top_k.setter"
            ]
        },
        {
            "name": "_retrieve",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\vector_store\\retrievers\\retriever.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "_aretrieve",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\indices\\vector_store\\retrievers\\retriever.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Create a IngestionCache from a persist directory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\ingestion\\cache.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_component",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\ingestion\\data_sinks.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_component",
            "description": "\n        Build a ConfiguredDataSink from a component.\n        This should be the preferred way to build a ConfiguredDataSink\n        as it will ensure that the component is supported as indicated by having a\n        corresponding enum value in DataSources.\n        This has the added bonus that you don't need to specify the generic type\n        like ConfiguredDataSink[Document]. The return value of\n        this ConfiguredDataSink.from_component(document) will be\n        ConfiguredDataSink[Document] if document is\n        a Document object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\ingestion\\data_sinks.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "configurable_data_sink_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\ingestion\\data_sinks.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "file_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\ingestion\\data_sources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\ingestion\\data_sources.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_component",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\ingestion\\data_sources.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_component",
            "description": "\n        Build a ConfiguredDataSource from a component.\n\n        This should be the preferred way to build a ConfiguredDataSource\n        as it will ensure that the component is supported as indicated by having a\n        corresponding enum value in DataSources.\n\n        This has the added bonus that you don't need to specify the generic type\n        like ConfiguredDataSource[Document]. The return value of\n        this ConfiguredDataSource.from_component(document) will be\n        ConfiguredDataSource[Document] if document is\n        a Document object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\ingestion\\data_sources.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "configurable_data_source_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\ingestion\\data_sources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_node_batcher",
            "description": "Yield successive n-sized chunks from lst.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\ingestion\\pipeline.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "run",
            "description": "\n        Run a series of transformations on a set of nodes.\n\n        If a vector store is provided, nodes with embeddings will be added to the vector store.\n\n        If a vector store + docstore are provided, the docstore will be used to de-duplicate documents.\n\n        Args:\n            show_progress (bool, optional): Shows execution progress bar(s). Defaults to False.\n            documents (Optional[List[Document]], optional): Set of documents to be transformed. Defaults to None.\n            nodes (Optional[Sequence[BaseNode]], optional): Set of nodes to be transformed. Defaults to None.\n            cache_collection (Optional[str], optional): Cache for transformations. Defaults to None.\n            in_place (bool, optional): Whether transformations creates a new list for transformed nodes or modifies the\n                array passed to `run_transformations`. Defaults to True.\n            num_workers (Optional[int], optional): The number of parallel processes to use.\n                If set to None, then sequential compute is used. Defaults to None.\n\n        Returns:\n            Sequence[BaseNode]: The set of transformed Nodes/Documents\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "show_progress": {
                        "type": "boolean",
                        "description": "Shows execution progress bar(s). Defaults to False."
                    },
                    "documents": {
                        "type": "string",
                        "description": "Set of documents to be transformed. Defaults to None."
                    },
                    "nodes": {
                        "type": "string",
                        "description": "Set of nodes to be transformed. Defaults to None."
                    },
                    "cache_collection": {
                        "type": "string",
                        "description": "Cache for transformations. Defaults to None."
                    },
                    "in_place": {
                        "type": "boolean",
                        "description": "Whether transformations creates a new list for transformed nodes or modifies the"
                    },
                    "num_workers": {
                        "type": "string",
                        "description": "The number of parallel processes to use."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "Returns"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\ingestion\\pipeline.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "arun",
            "description": "\n        Run a series of transformations on a set of nodes.\n\n        If a vector store is provided, nodes with embeddings will be added to the vector store.\n\n        If a vector store + docstore are provided, the docstore will be used to de-duplicate documents.\n\n        Args:\n            show_progress (bool, optional): Shows execution progress bar(s). Defaults to False.\n            documents (Optional[List[Document]], optional): Set of documents to be transformed. Defaults to None.\n            nodes (Optional[Sequence[BaseNode]], optional): Set of nodes to be transformed. Defaults to None.\n            cache_collection (Optional[str], optional): Cache for transformations. Defaults to None.\n            in_place (bool, optional): Whether transformations creates a new list for transformed nodes or modifies the\n                array passed to `run_transformations`. Defaults to True.\n            num_workers (Optional[int], optional): The number of parallel processes to use.\n                If set to None, then sequential compute is used. Defaults to None.\n\n        Returns:\n            Sequence[BaseNode]: The set of transformed Nodes/Documents\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "show_progress": {
                        "type": "boolean",
                        "description": "Shows execution progress bar(s). Defaults to False."
                    },
                    "documents": {
                        "type": "string",
                        "description": "Set of documents to be transformed. Defaults to None."
                    },
                    "nodes": {
                        "type": "string",
                        "description": "Set of nodes to be transformed. Defaults to None."
                    },
                    "cache_collection": {
                        "type": "string",
                        "description": "Cache for transformations. Defaults to None."
                    },
                    "in_place": {
                        "type": "boolean",
                        "description": "Whether transformations creates a new list for transformed nodes or modifies the"
                    },
                    "num_workers": {
                        "type": "string",
                        "description": "The number of parallel processes to use."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "Returns"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\ingestion\\pipeline.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "from_component",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\ingestion\\transformations.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_component",
            "description": "\n        Build a ConfiguredTransformation from a component.\n\n        This should be the preferred way to build a ConfiguredTransformation\n        as it will ensure that the component is supported as indicated by having a\n        corresponding enum value in ConfigurableTransformations.\n\n        This has the added bonus that you don't need to specify the generic type\n        like ConfiguredTransformation[SentenceSplitter]. The return value of\n        this ConfiguredTransformation.from_component(simple_node_parser) will be\n        ConfiguredTransformation[SentenceSplitter] if simple_node_parser is\n        a SentenceSplitter.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\ingestion\\transformations.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "configurable_transformation_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\ingestion\\transformations.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "init",
            "description": "Initialize the instrumentation handler.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\base_handler.py",
            "decorator": [
                "classmethod",
                "abstractmethod"
            ]
        },
        {
            "name": "instrument_tags",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\dispatcher.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "parent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\dispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "root",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\dispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_dispatch_event",
            "description": "Keep for backwards compatibility.\n\n        In llama-index-core v0.10.41, we removed this method and made changes to\n        integrations or packs that relied on this method. Adding back this method\n        in case any integrations or apps have not been upgraded. That is, they\n        still rely on this method.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\dispatcher.py",
            "decorator": [
                "deprecated"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\dispatcher.py",
            "decorator": [
                "wrapt.decorator"
            ]
        },
        {
            "name": "async_wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\dispatcher.py",
            "decorator": [
                "wrapt.decorator"
            ]
        },
        {
            "name": "log_name",
            "description": "Name to be used in logging.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\dispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\agent.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\agent.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\agent.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "validate_response",
            "description": "Validate response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\agent.py",
            "decorator": [
                "model_validator",
                "classmethod"
            ]
        },
        {
            "name": "validate_response_type",
            "description": "Validate response type.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\agent.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\agent.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\agent.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Return class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\chat_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\chat_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\chat_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\chat_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\embedding.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\embedding.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\embedding.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\embedding.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\exception.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\query.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\query.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\rerank.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\rerank.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\retrieval.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\retrieval.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\span.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\synthesis.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\synthesis.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\synthesis.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\events\\synthesis.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\event_handlers\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "handle",
            "description": "Logic for handling event.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\event_handlers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\event_handlers\\null.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "lock",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\span_handlers\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "new_span",
            "description": "Create a span.\n\n        Subclasses of BaseSpanHandler should create the respective span type T\n        and return it. Only NullSpanHandler should return a None here.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\span_handlers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "prepare_to_exit_span",
            "description": "Logic for preparing to exit a span.\n\n        Subclasses of BaseSpanHandler should return back the specific span T\n        that is to be exited. If None is returned, then the span won't actually\n        be exited.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\span_handlers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "prepare_to_drop_span",
            "description": "Logic for preparing to drop a span.\n\n        Subclasses of BaseSpanHandler should return back the specific span T\n        that is to be dropped. If None is returned, then the span won't actually\n        be dropped.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\span_handlers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\instrumentation\\span_handlers\\null.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "memory_variables",
            "description": "Return memory variables.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\langchain_helpers\\memory_wrapper.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "memory_variables",
            "description": "Return memory variables.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\langchain_helpers\\memory_wrapper.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_tool_config",
            "description": "Create a tool from a tool config.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\langchain_helpers\\agents\\tools.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "to_pandas",
            "description": "Create pandas dataframe.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_json",
            "description": "Load json.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "to_pandas",
            "description": "Create pandas dataframe.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_json",
            "description": "Load json.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_construct_prediction_dataset",
            "description": "Construct the specific prediction dataset.\n\n        Args:\n            predictions (List[BaseLlamaExamplePrediction]): the list of predictions.\n\n        Returns:\n            BaseLlamaPredictionDataset: A dataset of predictions.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "predictions": {
                        "type": "string",
                        "description": "the list of predictions."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "BaseLlamaPredictionDataset": {
                        "type": "string",
                        "description": "A dataset of predictions."
                    }
                },
                "required": [
                    "predictions",
                    "Returns",
                    "BaseLlamaPredictionDataset"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_predict_example",
            "description": "Predict on a single example.\n\n        NOTE: Subclasses need to implement this.\n\n        Args:\n            predictor (PredictorType): The predictor to make the prediciton with.\n            example (BaseLlamaDataExample): The example to predict on.\n\n        Returns:\n            BaseLlamaExamplePrediction: The prediction.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "predictor": {
                        "type": "string",
                        "description": "The predictor to make the prediciton with."
                    },
                    "example": {
                        "type": "string",
                        "description": "The example to predict on."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "BaseLlamaExamplePrediction": {
                        "type": "string",
                        "description": "The prediction."
                    }
                },
                "required": [
                    "predictor",
                    "example",
                    "Returns",
                    "BaseLlamaExamplePrediction"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_apredict_example",
            "description": "Async predict on a single example.\n\n        NOTE: Subclasses need to implement this.\n\n        Args:\n            predictor (PredictorType): The predictor to make the prediciton with.\n            example (BaseLlamaDataExample): The example to predict on.\n\n        Returns:\n            BaseLlamaExamplePrediction: The prediction.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "predictor": {
                        "type": "string",
                        "description": "The predictor to make the prediciton with."
                    },
                    "example": {
                        "type": "string",
                        "description": "The example to predict on."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "BaseLlamaExamplePrediction": {
                        "type": "string",
                        "description": "The prediction."
                    }
                },
                "required": [
                    "predictor",
                    "example",
                    "Returns",
                    "BaseLlamaExamplePrediction"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Data example class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\evaluator_evaluation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Data example class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\evaluator_evaluation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\evaluator_evaluation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\evaluator_evaluation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Data example class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\evaluator_evaluation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\evaluator_evaluation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Data example class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\evaluator_evaluation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\evaluator_evaluation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_documents",
            "description": "Generate dataset from documents.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\generator.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Data example class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\rag.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Data example class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\rag.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\rag.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\rag.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Data example class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\simple.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\simple.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Data example class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\simple.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Data example class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\simple.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "query_docid_pairs",
            "description": "Get query, relevant doc ids.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\legacy\\embedding.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_json",
            "description": "Load json.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_dataset\\legacy\\embedding.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_modules",
            "description": "Get modules.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_pack\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "run",
            "description": "Run.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llama_pack\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "wrapper_logic",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\callbacks.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "wrapper_logic",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\callbacks.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\custom.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\custom.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\custom.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\custom.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\custom.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\custom.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\custom.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_prepare_chat_with_tools",
            "description": "Prepare the arguments needed to let the LLM chat with tools.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\function_calling.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "ignore_non_dict_arguments",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "set_messages_to_prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "set_completion_to_prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "check_prompts",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "model_validator"
            ]
        },
        {
            "name": "structured_predict",
            "description": "r\"\"\"Structured predict.\n\n        Args:\n            output_cls (BaseModel):\n                Output class to use for structured prediction.\n            prompt (PromptTemplate):\n                Prompt template to use for structured prediction.\n            prompt_args (Any):\n                Additional arguments to format the prompt with.\n\n        Returns:\n            BaseModel: The structured prediction output.\n\n        Examples:\n            ```python\n            from pydantic import BaseModel\n\n            class Test(BaseModel):\n                \\\"\\\"\\\"My test class.\\\"\\\"\\\"\n                name: str\n\n            from llama_index.core.prompts import PromptTemplate\n\n            prompt = PromptTemplate(\"Please predict a Test with a random name related to {topic}.\")\n            output = llm.structured_predict(Test, prompt, topic=\"cats\")\n            print(output.name)\n            ```\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "output_cls": {
                        "type": "string"
                    },
                    "prompt": {
                        "type": "string"
                    },
                    "prompt_args": {
                        "type": "string"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "BaseModel": {
                        "type": "string",
                        "description": "The structured prediction output."
                    },
                    "Examples": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "str"
                    }
                },
                "required": [
                    "output_cls",
                    "prompt",
                    "prompt_args",
                    "Returns",
                    "BaseModel",
                    "Examples",
                    "name"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "astructured_predict",
            "description": "r\"\"\"Async Structured predict.\n\n        Args:\n            output_cls (BaseModel):\n                Output class to use for structured prediction.\n            prompt (PromptTemplate):\n                Prompt template to use for structured prediction.\n            prompt_args (Any):\n                Additional arguments to format the prompt with.\n\n        Returns:\n            BaseModel: The structured prediction output.\n\n        Examples:\n            ```python\n            from pydantic import BaseModel\n\n            class Test(BaseModel):\n                \\\"\\\"\\\"My test class.\\\"\\\"\\\"\n                name: str\n\n            from llama_index.core.prompts import PromptTemplate\n\n            prompt = PromptTemplate(\"Please predict a Test with a random name related to {topic}.\")\n            output = await llm.astructured_predict(Test, prompt, topic=\"cats\")\n            print(output.name)\n            ```\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "output_cls": {
                        "type": "string"
                    },
                    "prompt": {
                        "type": "string"
                    },
                    "prompt_args": {
                        "type": "string"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "BaseModel": {
                        "type": "string",
                        "description": "The structured prediction output."
                    },
                    "Examples": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "str"
                    }
                },
                "required": [
                    "output_cls",
                    "prompt",
                    "prompt_args",
                    "Returns",
                    "BaseModel",
                    "Examples",
                    "name"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "stream_structured_predict",
            "description": "r\"\"\"Stream Structured predict.\n\n        Args:\n            output_cls (BaseModel):\n                Output class to use for structured prediction.\n            prompt (PromptTemplate):\n                Prompt template to use for structured prediction.\n            prompt_args (Any):\n                Additional arguments to format the prompt with.\n\n        Returns:\n            Generator: A generator returning partial copies of the model or list of models.\n\n        Examples:\n            ```python\n            from pydantic import BaseModel\n\n            class Test(BaseModel):\n                \\\"\\\"\\\"My test class.\\\"\\\"\\\"\n                name: str\n\n            from llama_index.core.prompts import PromptTemplate\n\n            prompt = PromptTemplate(\"Please predict a Test with a random name related to {topic}.\")\n            stream_output = llm.stream_structured_predict(Test, prompt, topic=\"cats\")\n            for partial_output in stream_output:\n                # stream partial outputs until completion\n                print(partial_output.name)\n            ```\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "output_cls": {
                        "type": "string"
                    },
                    "prompt": {
                        "type": "string"
                    },
                    "prompt_args": {
                        "type": "string"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "Generator": {
                        "type": "string",
                        "description": "A generator returning partial copies of the model or list of models."
                    },
                    "Examples": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "str"
                    }
                },
                "required": [
                    "output_cls",
                    "prompt",
                    "prompt_args",
                    "Returns",
                    "Generator",
                    "Examples",
                    "name"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "astream_structured_predict",
            "description": "r\"\"\"Async Stream Structured predict.\n\n        Args:\n            output_cls (BaseModel):\n                Output class to use for structured prediction.\n            prompt (PromptTemplate):\n                Prompt template to use for structured prediction.\n            prompt_args (Any):\n                Additional arguments to format the prompt with.\n\n        Returns:\n            Generator: A generator returning partial copies of the model or list of models.\n\n        Examples:\n            ```python\n            from pydantic import BaseModel\n\n            class Test(BaseModel):\n                \\\"\\\"\\\"My test class.\\\"\\\"\\\"\n                name: str\n\n            from llama_index.core.prompts import PromptTemplate\n\n            prompt = PromptTemplate(\"Please predict a Test with a random name related to {topic}.\")\n            stream_output = await llm.astream_structured_predict(Test, prompt, topic=\"cats\")\n            async for partial_output in stream_output:\n                # stream partial outputs until completion\n                print(partial_output.name)\n            ```\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "output_cls": {
                        "type": "string"
                    },
                    "prompt": {
                        "type": "string"
                    },
                    "prompt_args": {
                        "type": "string"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "Generator": {
                        "type": "string",
                        "description": "A generator returning partial copies of the model or list of models."
                    },
                    "Examples": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "str"
                    }
                },
                "required": [
                    "output_cls",
                    "prompt",
                    "prompt_args",
                    "Returns",
                    "Generator",
                    "Examples",
                    "name"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "predict",
            "description": "Predict for a given prompt.\n\n        Args:\n            prompt (BasePromptTemplate):\n                The prompt to use for prediction.\n            prompt_args (Any):\n                Additional arguments to format the prompt with.\n\n        Returns:\n            str: The prediction output.\n\n        Examples:\n            ```python\n            from llama_index.core.prompts import PromptTemplate\n\n            prompt = PromptTemplate(\"Please write a random name related to {topic}.\")\n            output = llm.predict(prompt, topic=\"cats\")\n            print(output)\n            ```\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "prompt": {
                        "type": "string"
                    },
                    "prompt_args": {
                        "type": "string"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "str": {
                        "type": "string",
                        "description": "The prediction output."
                    },
                    "Examples": {
                        "type": "string"
                    }
                },
                "required": [
                    "prompt",
                    "prompt_args",
                    "Returns",
                    "str",
                    "Examples"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "stream",
            "description": "Stream predict for a given prompt.\n\n        Args:\n            prompt (BasePromptTemplate):\n                The prompt to use for prediction.\n            prompt_args (Any):\n                Additional arguments to format the prompt with.\n\n        Yields:\n            str: Each streamed token.\n\n        Examples:\n            ```python\n            from llama_index.core.prompts import PromptTemplate\n\n            prompt = PromptTemplate(\"Please write a random name related to {topic}.\")\n            gen = llm.stream_predict(prompt, topic=\"cats\")\n            for token in gen:\n                print(token, end=\"\", flush=True)\n            ```\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "prompt": {
                        "type": "string"
                    },
                    "prompt_args": {
                        "type": "string"
                    },
                    "Yields": {
                        "type": "string"
                    },
                    "str": {
                        "type": "string",
                        "description": "Each streamed token."
                    },
                    "Examples": {
                        "type": "string"
                    }
                },
                "required": [
                    "prompt",
                    "prompt_args",
                    "Yields",
                    "str",
                    "Examples"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "apredict",
            "description": "Async Predict for a given prompt.\n\n        Args:\n            prompt (BasePromptTemplate):\n                The prompt to use for prediction.\n            prompt_args (Any):\n                Additional arguments to format the prompt with.\n\n        Returns:\n            str: The prediction output.\n\n        Examples:\n            ```python\n            from llama_index.core.prompts import PromptTemplate\n\n            prompt = PromptTemplate(\"Please write a random name related to {topic}.\")\n            output = await llm.apredict(prompt, topic=\"cats\")\n            print(output)\n            ```\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "prompt": {
                        "type": "string"
                    },
                    "prompt_args": {
                        "type": "string"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "str": {
                        "type": "string",
                        "description": "The prediction output."
                    },
                    "Examples": {
                        "type": "string"
                    }
                },
                "required": [
                    "prompt",
                    "prompt_args",
                    "Returns",
                    "str",
                    "Examples"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "astream",
            "description": "Async stream predict for a given prompt.\n\n        Args:\n        prompt (BasePromptTemplate):\n            The prompt to use for prediction.\n        prompt_args (Any):\n            Additional arguments to format the prompt with.\n\n        Yields:\n            str: An async generator that yields strings of tokens.\n\n        Examples:\n            ```python\n            from llama_index.core.prompts import PromptTemplate\n\n            prompt = PromptTemplate(\"Please write a random name related to {topic}.\")\n            gen = await llm.astream_predict(prompt, topic=\"cats\")\n            async for token in gen:\n                print(token, end=\"\", flush=True)\n            ```\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "prompt": {
                        "type": "string"
                    },
                    "prompt_args": {
                        "type": "string"
                    },
                    "Yields": {
                        "type": "string"
                    },
                    "str": {
                        "type": "string",
                        "description": "An async generator that yields strings of tokens."
                    },
                    "Examples": {
                        "type": "string"
                    }
                },
                "required": [
                    "prompt",
                    "prompt_args",
                    "Yields",
                    "str",
                    "Examples"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "predict_and_call",
            "description": "Predict and call the tool.\n\n        By default uses a ReAct agent to do tool calling (through text prompting),\n        but function calling LLMs will implement this differently.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "apredict_and_call",
            "description": "Predict and call the tool.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\llm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\mock.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\mock.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\mock.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\mock.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\mock.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\structured_llm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\structured_llm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "Chat endpoint for LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\structured_llm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\structured_llm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\structured_llm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "Stream completion endpoint for LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\structured_llm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\structured_llm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "Async stream chat endpoint for LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\structured_llm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\structured_llm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "Async stream completion endpoint for LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\structured_llm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\structured_llm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\llms\\structured_llm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\chat_memory_buffer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "validate_memory",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\chat_memory_buffer.py",
            "decorator": [
                "model_validator",
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create a chat memory buffer from an LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\chat_memory_buffer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_string",
            "description": "Create a chat memory buffer from a string.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\chat_memory_buffer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\chat_memory_buffer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "serialize_courses_in_order",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\chat_summary_memory_buffer.py",
            "decorator": [
                "field_serializer"
            ]
        },
        {
            "name": "validate_memory",
            "description": "Validate the memory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\chat_summary_memory_buffer.py",
            "decorator": [
                "model_validator",
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create a chat memory buffer from an LLM\n        and an initial list of chat history messages.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\chat_summary_memory_buffer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\chat_summary_memory_buffer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_string",
            "description": "Create a chat memory buffer from a string.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\chat_summary_memory_buffer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\chat_summary_memory_buffer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\simple_composable_memory.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create a simple composable memory from an LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\simple_composable_memory.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\types.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create a chat memory from defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\types.py",
            "decorator": [
                "classmethod",
                "abstractmethod"
            ]
        },
        {
            "name": "get",
            "description": "Get chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_all",
            "description": "Get all chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "put",
            "description": "Put chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "set",
            "description": "Set chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "reset",
            "description": "Reset chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "serialize_courses_in_order",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\types.py",
            "decorator": [
                "field_serializer"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\types.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create a chat memory from defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\types.py",
            "decorator": [
                "classmethod",
                "abstractmethod"
            ]
        },
        {
            "name": "validate_vector_index",
            "description": "Validate vector index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\vector_memory.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\vector_memory.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create vector memory.\n\n        Args:\n            vector_store (Optional[BasePydanticVectorStore]): vector store (note: delete_nodes must\n                be implemented. At time of writing (May 2024), Chroma, Qdrant and\n                SimpleVectorStore all support delete_nodes.\n            embed_model (Optional[EmbedType]): embedding model\n            index_kwargs (Optional[Dict]): kwargs for initializing the index\n            retriever_kwargs (Optional[Dict]): kwargs for initializing the retriever\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\memory\\vector_memory.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "Multi-Modal LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\multi_modal_llms\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "complete",
            "description": "Completion endpoint for Multi-Modal LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\multi_modal_llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream_complete",
            "description": "Streaming completion endpoint for Multi-Modal LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\multi_modal_llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "chat",
            "description": "Chat endpoint for Multi-Modal LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\multi_modal_llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream_chat",
            "description": "Stream chat endpoint for Multi-Modal LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\multi_modal_llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "acomplete",
            "description": "Async completion endpoint for Multi-Modal LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\multi_modal_llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "astream_complete",
            "description": "Async streaming completion endpoint for Multi-Modal LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\multi_modal_llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "achat",
            "description": "Async chat endpoint for Multi-Modal LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\multi_modal_llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "astream_chat",
            "description": "Async streaming chat endpoint for Multi-Modal LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\multi_modal_llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\multi_modal_llms\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\multi_modal_llms\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_parse_nodes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\interface.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "split_text",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\interface.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "split_text_metadata_aware",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\interface.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\file\\html.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\file\\html.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\file\\json.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\file\\json.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\file\\markdown.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\file\\markdown.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\file\\simple_file.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\file\\simple_file.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\relational\\base_element.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\relational\\base_element.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_nodes_from_node",
            "description": "Get nodes from node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\relational\\base_element.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "extract_elements",
            "description": "Extract elements from text.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\relational\\base_element.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\relational\\hierarchical.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\relational\\hierarchical.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\relational\\llama_parse_json_element.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\relational\\markdown_element.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\relational\\unstructured_element.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create a CodeSplitter with default values.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\text\\code.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\text\\code.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\text\\semantic_double_merging_splitter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\text\\semantic_double_merging_splitter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\text\\semantic_splitter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\text\\semantic_splitter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\text\\sentence_window.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\text\\sentence_window.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Initialize with default parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\text\\token.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\node_parser\\text\\token.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "retriever",
            "description": "Retriever.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "object_node_mapping",
            "description": "Object node mapping.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "node_postprocessors",
            "description": "Node postprocessors.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "index",
            "description": "Index.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "object_node_mapping",
            "description": "Object node mapping.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_objects",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_objects_and_index",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_objects",
            "description": "Initialize node mapping from a list of objects.\n\n        Only needs to be specified if the node mapping\n        needs to be initialized with a list of objects.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base_node_mapping.py",
            "decorator": [
                "classmethod",
                "abstractmethod"
            ]
        },
        {
            "name": "obj_node_mapping",
            "description": "The mapping data structure between node and object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base_node_mapping.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "_add_object",
            "description": "Add object.\n\n        Only needs to be specified if the node mapping\n        needs to be initialized with a list of objects.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base_node_mapping.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "to_node",
            "description": "To node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base_node_mapping.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_from_node",
            "description": "From node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base_node_mapping.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "persist",
            "description": "Persist objs.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base_node_mapping.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "Load from serialization.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_objects",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "obj_node_mapping",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base_node_mapping.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "obj_node_mapping",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base_node_mapping.py",
            "decorator": [
                "obj_node_mapping.setter"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\base_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_objects",
            "description": "Initialize node mapping.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\fn_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "obj_node_mapping",
            "description": "The mapping data structure between node and object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\fn_node_mapping.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\fn_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_objects",
            "description": "Initialize node mapping.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\table_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "obj_node_mapping",
            "description": "The mapping data structure between node and object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\table_node_mapping.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\table_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "obj_node_mapping",
            "description": "The mapping data structure between node and object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\tool_node_mapping.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\tool_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_objects",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\tool_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\tool_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "obj_node_mapping",
            "description": "The mapping data structure between node and object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\tool_node_mapping.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_objects",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\objects\\tool_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\output_parsers\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\output_parsers\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_cls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\output_parsers\\pydantic.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "format_string",
            "description": "Format string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\output_parsers\\pydantic.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_docs",
            "description": "Initialize with Documents using the default list of indices.\n\n        Args:\n            documents: A List of Documents to experiment with.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\playground\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "indices",
            "description": "Get Playground's indices.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\playground\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "indices",
            "description": "Set Playground's indices.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\playground\\base.py",
            "decorator": [
                "indices.setter"
            ]
        },
        {
            "name": "retriever_modes",
            "description": "Get Playground's indices.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\playground\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "retriever_modes",
            "description": "Set Playground's indices.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\playground\\base.py",
            "decorator": [
                "retriever_modes.setter"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\llm_rerank.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\metadata_replacement.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\node.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\node.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_validate_mode",
            "description": "Validate mode.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\node.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\node.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\node.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\node.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\node_recency.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\node_recency.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\node_recency.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\optimizer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\pii.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\pii.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\rankGPT_rerank.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\sbert_rerank.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\types.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_postprocess_nodes",
            "description": "Postprocess nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\postprocessor\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\program\\function_program.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "output_cls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\program\\function_program.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\program\\function_program.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\program\\function_program.py",
            "decorator": [
                "prompt.setter"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\program\\llm_program.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "output_cls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\program\\llm_program.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\program\\llm_program.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\program\\llm_program.py",
            "decorator": [
                "prompt.setter"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Initialize program from defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\program\\llm_prompt_program.py",
            "decorator": [
                "classmethod",
                "abstractmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\program\\multi_modal_llm_program.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "output_cls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\program\\multi_modal_llm_program.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\program\\multi_modal_llm_program.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\program\\multi_modal_llm_program.py",
            "decorator": [
                "prompt.setter"
            ]
        },
        {
            "name": "partial_format",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\prompts\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "format",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\prompts\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "format_messages",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\prompts\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_template",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\prompts\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_messages",
            "description": "From messages.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\prompts\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\prompts\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\prompts\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_get_prompts",
            "description": "Get prompts.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\prompts\\mixin.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_get_prompt_modules",
            "description": "Get prompt sub-modules.\n\n        Return a dictionary of sub-modules within the current module\n        that also implement PromptMixin (so that their prompts can also be get/set).\n\n        Can be blank if no sub-modules.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\prompts\\mixin.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_update_prompts",
            "description": "Update prompts.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\prompts\\mixin.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_args",
            "description": "Initialize a CitationQueryEngine object.\".\n\n        Args:\n            index: (BastGPTIndex): index to use for querying\n            llm: (Optional[LLM]): LLM object to use for response generation.\n            citation_chunk_size (int):\n                Size of citation chunks, default=512. Useful for controlling\n                granularity of sources.\n            citation_chunk_overlap (int): Overlap of citation nodes, default=20.\n            text_splitter (Optional[TextSplitter]):\n                A text splitter for creating citation source nodes. Default is\n                a SentenceSplitter.\n            citation_qa_template (BasePromptTemplate): Template for initial citation QA\n            citation_refine_template (BasePromptTemplate):\n                Template for citation refinement.\n            retriever (BaseRetriever): A retriever object.\n            node_postprocessors (Optional[List[BaseNodePostprocessor]]): A list of\n                node postprocessors.\n            verbose (bool): Whether to print out debug info.\n            response_mode (ResponseMode): A ResponseMode object.\n            use_async (bool): Whether to use async.\n            streaming (bool): Whether to use streaming.\n            optimizer (Optional[BaseTokenUsageOptimizer]): A BaseTokenUsageOptimizer\n                object.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_engine\\citation_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "retriever",
            "description": "Get the retriever object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_engine\\citation_query_engine.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "custom_query",
            "description": "Run a custom query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_engine\\custom.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_engine\\graph_query_engine.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "retriever",
            "description": "Get the retriever object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_engine\\multi_modal.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_args",
            "description": "Initialize a RetrieverQueryEngine object.\".\n\n        Args:\n            retriever (BaseRetriever): A retriever object.\n            node_postprocessors (Optional[List[BaseNodePostprocessor]]): A list of\n                node postprocessors.\n            callback_manager (Optional[CallbackManager]): A callback manager.\n            verbose (bool): Whether to print out debug info.\n            response_mode (ResponseMode): A ResponseMode object.\n            text_qa_template (Optional[BasePromptTemplate]): A BasePromptTemplate\n                object.\n            refine_template (Optional[BasePromptTemplate]): A BasePromptTemplate object.\n            simple_template (Optional[BasePromptTemplate]): A BasePromptTemplate object.\n\n            use_async (bool): Whether to use async.\n            streaming (bool): Whether to use streaming.\n            optimizer (Optional[BaseTokenUsageOptimizer]): A BaseTokenUsageOptimizer\n                object.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_engine\\retriever_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_query",
            "description": "Answer a query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_engine\\retriever_query_engine.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "_aquery",
            "description": "Answer a query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_engine\\retriever_query_engine.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "retriever",
            "description": "Get the retriever object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_engine\\retriever_query_engine.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_engine\\router_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_sql_and_vector_query_engines",
            "description": "From SQL and vector query engines.\n\n        Args:\n            sql_query_engine (BaseSQLTableQueryEngine): SQL query engine.\n            vector_query_engine (VectorIndexAutoRetriever): Vector retriever.\n            selector (Optional[Union[LLMSingleSelector, PydanticSingleSelector]]):\n                Selector to use.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_engine\\sql_vector_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_engine\\sub_question_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "insert",
            "description": "Insert answers into response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_engine\\flare\\answer_inserter.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stateful_components",
            "description": "Get stateful component.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "run",
            "description": "Run the pipeline.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\query.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "arun",
            "description": "Run the pipeline.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\query.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "_run",
            "description": "Run the pipeline.\n\n        Assume that there is a single root module and a single output module.\n\n        For multi-input and multi-outputs, please see `run_multi`.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\query.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "_arun",
            "description": "Run the pipeline.\n\n        Assume that there is a single root module and a single output module.\n\n        For multi-input and multi-outputs, please see `run_multi`.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\query.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "_run_multi",
            "description": "Run the pipeline for multiple roots.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\query.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "_arun_multi",
            "description": "Run the pipeline for multiple roots.\n\n        kwargs is in the form of module_dict -> input_dict\n        input_dict is in the form of input_key -> input\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\query.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "sub_query_components",
            "description": "Sub query components.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "clean_dag",
            "description": "Clean dag.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_input_keys",
            "description": "Input keys dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_optional_input_keys",
            "description": "Optional input keys dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_output_keys",
            "description": "Output keys dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\argpacks.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\argpacks.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\argpacks.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\argpacks.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\function.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\function.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\input.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\input.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\loop.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\loop.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\router.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\router.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\router.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\router.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "sub_query_components",
            "description": "Get sub query components.\n\n        Certain query components may have sub query components, e.g. a\n        query pipeline will have sub query components, and so will\n        an IfElseComponent.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\router.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\tool_runner.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\query_pipeline\\components\\tool_runner.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\question_gen\\llm_generators.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "generate",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\question_gen\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "agenerate",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\question_gen\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "list_resources",
            "description": "\n        List of identifiers for the specific type of resources available in the reader.\n\n        Returns:\n            List[str]: List of identifiers for the specific type of resources available in the reader.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\readers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_resource_info",
            "description": "\n        Get a dictionary of information about a specific resource.\n\n        Args:\n            resource (str): The resource identifier.\n\n        Returns:\n            Dict: A dictionary of information about the resource.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "resource": {
                        "type": "string",
                        "description": "The resource identifier."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "Dict": {
                        "type": "string",
                        "description": "A dictionary of information about the resource."
                    }
                },
                "required": [
                    "resource",
                    "Returns",
                    "Dict"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\readers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "load_resource",
            "description": "\n        Load data from a specific resource.\n\n        Args:\n            resource (str): The resource identifier.\n\n        Returns:\n            List[Document]: A list of documents loaded from the resource.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "resource": {
                        "type": "string",
                        "description": "The resource identifier."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "resource",
                    "Returns"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\readers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get the name identifier of the class.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\readers\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "download_loader",
            "description": "Download a single loader from the Loader Hub.\n\n    Args:\n        loader_class: The name of the loader class you want to download,\n            such as `SimpleWebPageReader`.\n        refresh_cache: If true, the local cache will be skipped and the\n            loader will be fetched directly from the remote repo.\n        use_gpt_index_import: If true, the loader files will use\n            llama_index as the base dependency. By default (False),\n            the loader files use llama_index as the base dependency.\n            NOTE: this is a temporary workaround while we fully migrate all usages\n            to llama_index.\n        custom_path: Custom dirpath to download loader into.\n\n    Returns:\n        A Loader.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "loader_class": {
                        "type": "string",
                        "description": "The name of the loader class you want to download,"
                    },
                    "refresh_cache": {
                        "type": "string",
                        "description": "If true, the local cache will be skipped and the"
                    },
                    "use_gpt_index_import": {
                        "type": "string",
                        "description": "If true, the loader files will use"
                    },
                    "NOTE": {
                        "type": "string",
                        "description": "this is a temporary workaround while we fully migrate all usages"
                    },
                    "custom_path": {
                        "type": "string",
                        "description": "Custom dirpath to download loader into."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "loader_class",
                    "refresh_cache",
                    "use_gpt_index_import",
                    "NOTE",
                    "custom_path",
                    "Returns"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\readers\\download.py",
            "decorator": [
                "deprecated"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\readers\\string_iterable.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "read_file_content",
            "description": "\n        Read the bytes content of a file.\n\n        Args:\n            input_file (Path): Path to the file.\n\n        Returns:\n            bytes: File content.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_file": {
                        "type": "string",
                        "description": "Path to the file."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "bytes": {
                        "type": "string",
                        "description": "File content."
                    }
                },
                "required": [
                    "input_file",
                    "Returns",
                    "bytes"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\readers\\file\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "load_file",
            "description": "\n        Static method for loading file.\n\n        NOTE: necessarily as a static method for parallel processing.\n\n        Args:\n            input_file (Path): _description_\n            file_metadata (Callable[[str], Dict]): _description_\n            file_extractor (Dict[str, BaseReader]): _description_\n            filename_as_id (bool, optional): _description_. Defaults to False.\n            encoding (str, optional): _description_. Defaults to \"utf-8\".\n            errors (str, optional): _description_. Defaults to \"ignore\".\n            fs (Optional[fsspec.AbstractFileSystem], optional): _description_. Defaults to None.\n\n        input_file (Path): File path to read\n        file_metadata ([Callable[str, Dict]]): A function that takes\n            in a filename and returns a Dict of metadata for the Document.\n        file_extractor (Dict[str, BaseReader]): A mapping of file\n            extension to a BaseReader class that specifies how to convert that file\n            to text.\n        filename_as_id (bool): Whether to use the filename as the document id.\n        encoding (str): Encoding of the files.\n            Default is utf-8.\n        errors (str): how encoding and decoding errors are to be handled,\n              see https://docs.python.org/3/library/functions.html#open\n        raise_on_error (bool): Whether to raise an error if a file cannot be read.\n        fs (Optional[fsspec.AbstractFileSystem]): File system to use. Defaults\n            to using the local file system. Can be changed to use any remote file system\n\n        Returns:\n            List[Document]: loaded documents\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_file": {
                        "type": "string",
                        "description": "File path to read"
                    },
                    "file_metadata": {
                        "type": "string",
                        "description": "A function that takes"
                    },
                    "file_extractor": {
                        "type": "string",
                        "description": "A mapping of file"
                    },
                    "filename_as_id": {
                        "type": "boolean",
                        "description": "Whether to use the filename as the document id."
                    },
                    "encoding": {
                        "type": "string",
                        "description": "Encoding of the files."
                    },
                    "errors": {
                        "type": "string",
                        "description": "how encoding and decoding errors are to be handled,"
                    },
                    "fs": {
                        "type": "string",
                        "description": "File system to use. Defaults"
                    },
                    "raise_on_error": {
                        "type": "boolean",
                        "description": "Whether to raise an error if a file cannot be read."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "input_file",
                    "file_metadata",
                    "file_extractor",
                    "filename_as_id",
                    "encoding",
                    "errors",
                    "raise_on_error",
                    "Returns"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\readers\\file\\base.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "aload_file",
            "description": "Load file asynchronously.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\readers\\file\\base.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "callback_manager",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\response_synthesizers\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "callback_manager",
            "description": "Set callback manager.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\response_synthesizers\\base.py",
            "decorator": [
                "callback_manager.setter"
            ]
        },
        {
            "name": "get_response",
            "description": "Get response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\response_synthesizers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aget_response",
            "description": "Get response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\response_synthesizers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "synthesize",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\response_synthesizers\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "asynthesize",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\response_synthesizers\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\response_synthesizers\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\response_synthesizers\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "aget_response",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\response_synthesizers\\compact_and_refine.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "get_response",
            "description": "Get compact response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\response_synthesizers\\compact_and_refine.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "output_cls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\response_synthesizers\\refine.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_response",
            "description": "Give response over chunks.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\response_synthesizers\\refine.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "aget_response",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\response_synthesizers\\refine.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\retrievers\\router_retriever.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\selectors\\embedding_selectors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\selectors\\llm_selectors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\selectors\\llm_selectors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\selectors\\pydantic_selectors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\selectors\\pydantic_selectors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "llm",
            "description": "Get LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\service_context_elements\\llm_predictor.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "callback_manager",
            "description": "Get callback manager.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\service_context_elements\\llm_predictor.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "Get LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\service_context_elements\\llm_predictor.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "predict",
            "description": "Predict the answer to a query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\service_context_elements\\llm_predictor.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream",
            "description": "Stream the answer to a query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\service_context_elements\\llm_predictor.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "apredict",
            "description": "Async predict the answer to a query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\service_context_elements\\llm_predictor.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "astream",
            "description": "Async predict the answer to a query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\service_context_elements\\llm_predictor.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\sparse_embeddings\\mock_sparse_embedding.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create a StorageContext from defaults.\n\n        Args:\n            docstore (Optional[BaseDocumentStore]): document store\n            index_store (Optional[BaseIndexStore]): index store\n            vector_store (Optional[BasePydanticVectorStore]): vector store\n            graph_store (Optional[GraphStore]): graph store\n            image_store (Optional[BasePydanticVectorStore]): image store\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\storage_context.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create a StorageContext from dict.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\storage_context.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "vector_store",
            "description": "Backwrds compatibility for vector_store property.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\storage_context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\chat_store\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "set_messages",
            "description": "Set messages for a key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\chat_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_messages",
            "description": "Get messages for a key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\chat_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "add_message",
            "description": "Add a message for a key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\chat_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_messages",
            "description": "Delete messages for a key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\chat_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_message",
            "description": "Delete specific message for a key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\chat_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_last_message",
            "description": "Delete last message for a key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\chat_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_keys",
            "description": "Get all keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\chat_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\chat_store\\simple_chat_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Create a SimpleChatStore from a persist path.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\chat_store\\simple_chat_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "docs",
            "description": "Get all documents.\n\n        Returns:\n            Dict[str, BaseDocument]: documents\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\keyval_docstore.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "Create a SimpleDocumentStore from a persist directory.\n\n        Args:\n            persist_dir (str): directory to persist the store\n            namespace (Optional[str]): namespace for the docstore\n            fs (Optional[fsspec.AbstractFileSystem]): filesystem to use\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\simple_docstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Create a SimpleDocumentStore from a persist path.\n\n        Args:\n            persist_path (str): Path to persist the store\n            namespace (Optional[str]): namespace for the docstore\n            fs (Optional[fsspec.AbstractFileSystem]): filesystem to use\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\simple_docstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\simple_docstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "docs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "add_documents",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "async_add_documents",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_document",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aget_document",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_document",
            "description": "Delete a document from the store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "adelete_document",
            "description": "Delete a document from the store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "document_exists",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "adocument_exists",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "set_document_hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aset_document_hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "set_document_hashes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aset_document_hashes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_document_hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aget_document_hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_all_document_hashes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aget_all_document_hashes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_all_ref_doc_info",
            "description": "Get a mapping of ref_doc_id -> RefDocInfo for all ingested documents.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aget_all_ref_doc_info",
            "description": "Get a mapping of ref_doc_id -> RefDocInfo for all ingested documents.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_ref_doc_info",
            "description": "Get the RefDocInfo for a given ref_doc_id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aget_ref_doc_info",
            "description": "Get the RefDocInfo for a given ref_doc_id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_ref_doc",
            "description": "Delete a ref_doc and all it's associated nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "adelete_ref_doc",
            "description": "Delete a ref_doc and all it's associated nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "Create a SimpleIndexStore from a persist directory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\index_store\\simple_index_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Create a SimpleIndexStore from a persist path.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\index_store\\simple_index_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\index_store\\simple_index_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "index_structs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\index_store\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "add_index_struct",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\index_store\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_index_struct",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\index_store\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_index_struct",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\index_store\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Load a SimpleKVStore from a persist path and filesystem.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\kvstore\\simple_kvstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Load a SimpleKVStore from dict.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\kvstore\\simple_kvstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "put",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aput",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aget",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aget_all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "adelete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "persist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Create a BaseInMemoryKVStore from a persist directory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\storage\\kvstore\\types.py",
            "decorator": [
                "classmethod",
                "abstractmethod"
            ]
        },
        {
            "name": "download_tool",
            "description": "Download a single tool from Llama Hub.\n\n    Args:\n        tool_class: The name of the tool class you want to download,\n            such as `GmailToolSpec`.\n        refresh_cache: If true, the local cache will be skipped and the\n            loader will be fetched directly from the remote repo.\n        custom_path: Custom dirpath to download loader into.\n\n    Returns:\n        A Loader.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool_class": {
                        "type": "string",
                        "description": "The name of the tool class you want to download,"
                    },
                    "refresh_cache": {
                        "type": "string",
                        "description": "If true, the local cache will be skipped and the"
                    },
                    "custom_path": {
                        "type": "string",
                        "description": "Custom dirpath to download loader into."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool_class",
                    "refresh_cache",
                    "custom_path",
                    "Returns"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\download.py",
            "decorator": [
                "deprecated"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\eval_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\function_tool.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "Metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\function_tool.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "fn",
            "description": "Function.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\function_tool.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "async_fn",
            "description": "Async function.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\function_tool.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\ondemand_loader_tool.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "From defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\ondemand_loader_tool.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_tool",
            "description": "From defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\ondemand_loader_tool.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "query_engine",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\query_engine.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\query_engine.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Initialize from defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\query_plan.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "Metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\query_plan.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\query_plan.py",
            "decorator": [
                "metadata.setter"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\retriever_tool.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "retriever",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\retriever_tool.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\retriever_tool.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "fn_schema_str",
            "description": "Get fn schema as string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "to_openai_function",
            "description": "Deprecated and replaced by `to_openai_tool`.\n        The name and arguments of a function that should be called, as generated by the\n        model.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\types.py",
            "decorator": [
                "deprecated"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\types.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "call",
            "description": "\n        This is the method that should be implemented by the tool developer.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "acall",
            "description": "\n        This is the async version of the call method.\n        Should also be implemented by the tool developer as an\n        async-compatible implementation.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\tool_spec\\load_and_search\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "From defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\tools\\tool_spec\\load_and_search\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "engine",
            "description": "Return SQL Alchemy engine.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\utilities\\sql_wrapper.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata_obj",
            "description": "Return SQL Alchemy metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\utilities\\sql_wrapper.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_uri",
            "description": "Construct a SQLAlchemy engine from URI.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\utilities\\sql_wrapper.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "dialect",
            "description": "Return string representation of dialect to use.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\utilities\\sql_wrapper.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "Load from persist dir.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\vector_stores\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_namespaced_persist_dir",
            "description": "Load from namespaced persist dir.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\vector_stores\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\vector_stores\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\vector_stores\\simple.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_data",
            "description": "Backwards compatibility.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\vector_stores\\simple.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Create a SimpleKVStore from a persist directory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\vector_stores\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\vector_stores\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create MetadataFilter from dictionary.\n\n        Args:\n            filter_dict: Dict with key, value and operator.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\vector_stores\\types.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create MetadataFilters from json.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\vector_stores\\types.py",
            "decorator": [
                "classmethod",
                "deprecated"
            ]
        },
        {
            "name": "from_dicts",
            "description": "Create MetadataFilters from dicts.\n\n        This takes in a list of individual MetadataFilter objects, along\n        with the condition.\n\n        Args:\n            filter_dicts: List of dicts, each dict is a MetadataFilter.\n            condition: FilterCondition to combine different filters.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\vector_stores\\types.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\vector_stores\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\vector_stores\\types.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "add",
            "description": "Add nodes to vector store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\vector_stores\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete",
            "description": "\n        Delete nodes using with ref_doc_id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\vector_stores\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "query",
            "description": "Query vector store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\vector_stores\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\workflow\\context.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "data",
            "description": "This property is provided for backward compatibility.\n\n        Use `get` and `set` instead.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\workflow\\context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "lock",
            "description": "Returns a mutex to lock the Context.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\workflow\\context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "session",
            "description": "This property is provided for backward compatibility.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\workflow\\context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "streaming_queue",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\workflow\\context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "serialize",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\workflow\\context_serializers.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "deserialize",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\workflow\\context_serializers.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "draw_all_possible_flows",
            "description": "Draws all possible flows of the workflow.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\workflow\\drawing.py",
            "decorator": [
                "deprecated"
            ]
        },
        {
            "name": "draw_most_recent_execution",
            "description": "Draws the most recent execution of the workflow.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\workflow\\drawing.py",
            "decorator": [
                "deprecated"
            ]
        },
        {
            "name": "add_step",
            "description": "Adds a free function as step for this workflow instance.\n\n        It raises an exception if a step with the same name was already added to the workflow.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\workflow\\workflow.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "run",
            "description": "Runs the workflow until completion.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\workflow\\workflow.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "_done",
            "description": "Tears down the whole workflow and stop execution.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\core\\workflow\\workflow.py",
            "decorator": [
                "step"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\embeddings\\huggingface\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "cls_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\embeddings\\huggingface\\pooling.py",
            "decorator": [
                "classmethod",
                "overload"
            ]
        },
        {
            "name": "cls_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\embeddings\\huggingface\\pooling.py",
            "decorator": [
                "classmethod",
                "overload"
            ]
        },
        {
            "name": "cls_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\embeddings\\huggingface\\pooling.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "mean_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\embeddings\\huggingface\\pooling.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "last_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\embeddings\\huggingface\\pooling.py",
            "decorator": [
                "classmethod",
                "overload"
            ]
        },
        {
            "name": "last_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\embeddings\\huggingface\\pooling.py",
            "decorator": [
                "classmethod",
                "overload"
            ]
        },
        {
            "name": "last_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\embeddings\\huggingface\\pooling.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_embedding",
            "description": "Get embedding.\n\n    NOTE: Copied from OpenAI's embedding utils:\n    https://github.com/openai/openai-python/blob/main/openai/embeddings_utils.py\n\n    Copied here to avoid importing unnecessary dependencies\n    like matplotlib, plotly, scipy, sklearn.\n\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\embeddings\\openai\\base.py",
            "decorator": [
                "embedding_retry_decorator"
            ]
        },
        {
            "name": "aget_embedding",
            "description": "Asynchronously get embedding.\n\n    NOTE: Copied from OpenAI's embedding utils:\n    https://github.com/openai/openai-python/blob/main/openai/embeddings_utils.py\n\n    Copied here to avoid importing unnecessary dependencies\n    like matplotlib, plotly, scipy, sklearn.\n\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\embeddings\\openai\\base.py",
            "decorator": [
                "embedding_retry_decorator"
            ]
        },
        {
            "name": "get_embeddings",
            "description": "Get embeddings.\n\n    NOTE: Copied from OpenAI's embedding utils:\n    https://github.com/openai/openai-python/blob/main/openai/embeddings_utils.py\n\n    Copied here to avoid importing unnecessary dependencies\n    like matplotlib, plotly, scipy, sklearn.\n\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\embeddings\\openai\\base.py",
            "decorator": [
                "embedding_retry_decorator"
            ]
        },
        {
            "name": "aget_embeddings",
            "description": "Asynchronously get embeddings.\n\n    NOTE: Copied from OpenAI's embedding utils:\n    https://github.com/openai/openai-python/blob/main/openai/embeddings_utils.py\n\n    Copied here to avoid importing unnecessary dependencies\n    like matplotlib, plotly, scipy, sklearn.\n\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\embeddings\\openai\\base.py",
            "decorator": [
                "embedding_retry_decorator"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\embeddings\\openai\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_documents",
            "description": "Build a LlamaCloud managed index from a sequence of documents.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\indices\\managed\\llama_cloud\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their metadata. The nodes list is empty.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\indices\\managed\\llama_cloud\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "schema_extra",
            "description": "Add class name to schema.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "\n        Get the class name, used as a unique ID in serialization.\n\n        This provides a key that makes serialization robust against actual class\n        name changes.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "__call__",
            "description": "Transform nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "Get Object type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod",
                "abstractmethod"
            ]
        },
        {
            "name": "get_content",
            "description": "Get object content.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_metadata_str",
            "description": "Metadata string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "set_content",
            "description": "Set the content of the node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "hash",
            "description": "Get hash of node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "node_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "node_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "node_id.setter"
            ]
        },
        {
            "name": "source_node",
            "description": "Source object node.\n\n        Extracted from the relationships field.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prev_node",
            "description": "Prev node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "next_node",
            "description": "Next node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parent_node",
            "description": "Parent node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "child_nodes",
            "description": "Child nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ref_doc_id",
            "description": "Deprecated: Get ref doc id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "extra_info",
            "description": "TODO: DEPRECATED: Extra info.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "Get Object type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "node_info",
            "description": "Deprecated: Get node info.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_text_node",
            "description": "Create index node from text node.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "node_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "id_",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "text",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "embedding",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "Get Document type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "doc_id",
            "description": "Get document ID.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_langchain_format",
            "description": "Convert struct from LangChain document format.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_haystack_format",
            "description": "Convert struct from Haystack document format.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_embedchain_format",
            "description": "Convert struct from EmbedChain document format.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_semantic_kernel_format",
            "description": "Convert struct from Semantic Kernel document format.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "example",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "embedding_strs",
            "description": "Use custom embedding strs if specified, otherwise use query str.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "embedding_image",
            "description": "Use image path for image retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create a ServiceContext from defaults.\n        If an argument is specified, then use the argument value provided for that\n        parameter. If an argument is not specified, then use the default value.\n\n        You can change the base defaults by setting llama_index.legacy.global_service_context\n        to a ServiceContext object with your desired settings.\n\n        Args:\n            llm_predictor (Optional[BaseLLMPredictor]): LLMPredictor\n            prompt_helper (Optional[PromptHelper]): PromptHelper\n            embed_model (Optional[BaseEmbedding]): BaseEmbedding\n                or \"local\" (use local model)\n            node_parser (Optional[NodeParser]): NodeParser\n            llama_logger (Optional[LlamaLogger]): LlamaLogger (deprecated)\n            chunk_size (Optional[int]): chunk_size\n            callback_manager (Optional[CallbackManager]): CallbackManager\n            system_prompt (Optional[str]): System-wide prompt to be prepended\n                to all input prompts, used to guide system \"decision making\"\n            query_wrapper_prompt (Optional[BasePromptTemplate]): A format to wrap\n                passed-in input queries.\n\n        Deprecated Args:\n            chunk_size_limit (Optional[int]): renamed to chunk_size\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\service_context.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_service_context",
            "description": "Instantiate a new service context using a previous as the defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\service_context.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "llm",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\service_context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "node_parser",
            "description": "Get the node parser.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\service_context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\service_context.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "parse",
            "description": "Parse, validate, and correct errors programmatically.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "output_cls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\types.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stopwords",
            "description": "Get stopwords.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "temp_set_attrs",
            "description": "Temporary setter.\n\n    Utility class for setting a temporary value for an attribute on a class.\n    Taken from: https://tinyurl.com/2p89xymh\n\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\utils.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "_wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\utils.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "from_new",
            "description": "From new assistant.\n\n        Args:\n            name: name of assistant\n            instructions: instructions for assistant\n            tools: list of tools\n            openai_tools: list of openai tools\n            thread_id: thread id\n            model: model\n            run_retrieve_sleep_time: run retrieve sleep time\n            files: files\n            instructions_prefix: instructions prefix\n            callback_manager: callback manager\n            verbose: verbose\n            file_ids: list of file ids\n            api_key: OpenAI API key\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai_assistant_agent.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_existing",
            "description": "From existing assistant id.\n\n        Args:\n            assistant_id: id of assistant\n            tools: list of BaseTools Assistant can use\n            thread_id: thread id\n            run_retrieve_sleep_time: run retrieve sleep time\n            instructions_prefix: instructions prefix\n            callback_manager: callback manager\n            api_key: OpenAI API key\n            verbose: verbose\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai_assistant_agent.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "assistant",
            "description": "Get assistant.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai_assistant_agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai_assistant_agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "thread_id",
            "description": "Get thread id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai_assistant_agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "files_dict",
            "description": "Get files dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai_assistant_agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat_history",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai_assistant_agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "latest_message",
            "description": "Get latest message.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai_assistant_agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai_assistant_agent.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai_assistant_agent.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai_assistant_agent.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai_assistant_agent.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "_query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\types.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "_aquery",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\types.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "initialize_step",
            "description": "Initialize step from task.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "run_step",
            "description": "Run step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "arun_step",
            "description": "Run step (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream_step",
            "description": "Run step (stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "astream_step",
            "description": "Run step (async stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "finalize_task",
            "description": "Finalize task, after all the steps are completed.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "agent_input_component",
            "description": "Get agent input component.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\custom\\pipeline_worker.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "agent_components",
            "description": "Get agent output component.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\custom\\pipeline_worker.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "run_step",
            "description": "Run step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\custom\\pipeline_worker.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "arun_step",
            "description": "Run step (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\custom\\pipeline_worker.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_step",
            "description": "Run step (stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\custom\\pipeline_worker.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_step",
            "description": "Run step (async stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\custom\\pipeline_worker.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "from_tools",
            "description": "Convenience constructor method from set of of BaseTools (Optional).",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\custom\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_initialize_state",
            "description": "Initialize state.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\custom\\simple.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_run_step",
            "description": "Run step.\n\n        Returns:\n            Tuple of (agent_response, is_done)\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\custom\\simple.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "run_step",
            "description": "Run step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\custom\\simple.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "arun_step",
            "description": "Run step (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\custom\\simple.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_step",
            "description": "Run step (stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\custom\\simple.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_step",
            "description": "Run step (async stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\custom\\simple.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "_finalize_task",
            "description": "Finalize task, after all the steps are completed.\n\n        State is all the step states.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\custom\\simple.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_tools_and_retriever",
            "description": "Create a ContextRetrieverOpenAIAgent from a retriever.\n\n        Args:\n            retriever (BaseRetriever): A retriever.\n            qa_prompt (Optional[PromptTemplate]): A QA prompt.\n            context_separator (str): A context separator.\n            llm (Optional[OpenAI]): An OpenAI LLM.\n            chat_history (Optional[ChatMessageHistory]): A chat history.\n            verbose (bool): Whether to print debug statements.\n            max_function_calls (int): Maximum number of function calls.\n            callback_manager (Optional[CallbackManager]): A callback manager.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\legacy\\context_retriever_agent.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "chat_history",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\legacy\\openai_agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "all_messages",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\legacy\\openai_agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "latest_function_call",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\legacy\\openai_agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "latest_tool_calls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\legacy\\openai_agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_tools",
            "description": "Get tools.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\legacy\\openai_agent.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\legacy\\openai_agent.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\legacy\\openai_agent.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\legacy\\openai_agent.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\legacy\\openai_agent.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "from_tools",
            "description": "Create an OpenAIAgent from a list of tools.\n\n        Similar to `from_defaults` in other classes, this method will\n        infer defaults for a variety of parameters, including the LLM,\n        if they are not specified.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\legacy\\openai_agent.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_retriever",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\legacy\\retriever_openai_agent.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_tools",
            "description": "Convenience constructor method from set of of BaseTools (Optional).\n\n        NOTE: kwargs should have been exhausted by this point. In other words\n        the various upstream components such as BaseSynthesizer (response synthesizer)\n        or BaseRetriever should have picked up off their respective kwargs in their\n        constructions.\n\n        Returns:\n            ReActAgent\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\legacy\\react\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "chat_history",
            "description": "Chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\legacy\\react\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_tools",
            "description": "Create an OpenAIAgent from a list of tools.\n\n        Similar to `from_defaults` in other classes, this method will\n        infer defaults for a variety of parameters, including the LLM,\n        if they are not specified.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_tools",
            "description": "Create an OpenAIAgent from a list of tools.\n\n        Similar to `from_defaults` in other classes, this method will\n        infer defaults for a variety of parameters, including the LLM,\n        if they are not specified.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai\\step.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "run_step",
            "description": "Run step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "arun_step",
            "description": "Run step (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_step",
            "description": "Run step (stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_step",
            "description": "Run step (async stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\openai\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "from_tools",
            "description": "Convenience constructor method from set of of BaseTools (Optional).\n\n        NOTE: kwargs should have been exhausted by this point. In other words\n        the various upstream components such as BaseSynthesizer (response synthesizer)\n        or BaseRetriever should have picked up off their respective kwargs in their\n        constructions.\n\n        Returns:\n            ReActAgent\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\react\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "format",
            "description": "Format chat history into list of ChatMessage.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\react\\formatter.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create ReActChatFormatter from defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\react\\formatter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_context",
            "description": "Create ReActChatFormatter from context.\n\n        NOTE: deprecated\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\react\\formatter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_tools",
            "description": "Convenience constructor method from set of of BaseTools (Optional).\n\n        NOTE: kwargs should have been exhausted by this point. In other words\n        the various upstream components such as BaseSynthesizer (response synthesizer)\n        or BaseRetriever should have picked up off their respective kwargs in their\n        constructions.\n\n        Returns:\n            ReActAgent\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\react\\step.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_content",
            "description": "Get content.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\react\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "is_done",
            "description": "Is the reasoning step the last one.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\react\\types.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "is_done",
            "description": "Is the reasoning step the last one.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\react\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_done",
            "description": "Is the reasoning step the last one.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\react\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_done",
            "description": "Is the reasoning step the last one.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\react\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_tools",
            "description": "Convenience constructor method from set of of BaseTools (Optional).\n\n        NOTE: kwargs should have been exhausted by this point. In other words\n        the various upstream components such as BaseSynthesizer (response synthesizer)\n        or BaseRetriever should have picked up off their respective kwargs in their\n        constructions.\n\n        Returns:\n            ReActAgent\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\react_multimodal\\step.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "run_step",
            "description": "Run step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\react_multimodal\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "arun_step",
            "description": "Run step (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\react_multimodal\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_step",
            "description": "Run step (stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\react_multimodal\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_step",
            "description": "Run step (async stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\react_multimodal\\step.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "create_task",
            "description": "Create task.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_task",
            "description": "Delete task.\n\n        NOTE: this will not delete any previous executions from memory.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "list_tasks",
            "description": "List tasks.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_task",
            "description": "Get task.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_upcoming_steps",
            "description": "Get upcoming steps.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_completed_steps",
            "description": "Get completed steps.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "run_step",
            "description": "Run step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "arun_step",
            "description": "Run step (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream_step",
            "description": "Run step (stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "astream_step",
            "description": "Run step (async stream).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "finalize_response",
            "description": "Finalize response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "undo_step",
            "description": "Undo previous step.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_llm",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "chat_history",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\base.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "task_id",
            "description": "Task id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\parallel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat_history",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\parallel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\parallel.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\parallel.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\parallel.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\agent\\runner\\parallel.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "experiment",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\aim.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "event",
            "description": "Context manager for lanching and shutdown of events.\n\n        Handles sending on_evnt_start and on_event_end to handlers for specified event.\n\n        Usage:\n            with callback_manager.event(CBEventType.QUERY, payload={key, val}) as event:\n                ...\n                event.on_end(payload={key, val})  # optional\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\base.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "as_trace",
            "description": "Context manager tracer for lanching and shutdown of traces.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\base.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "trace_map",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_event_start",
            "description": "Run when an event starts and return id of event.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\base_handler.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "on_event_end",
            "description": "Run when an event ends.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\base_handler.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "start_trace",
            "description": "Run when an overall trace is launched.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\base_handler.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "end_trace",
            "description": "Run when an overall trace is exited.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\base_handler.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_finetuning_events",
            "description": "Get finetuning events.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\finetuning_handler.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "save_finetuning_events",
            "description": "Save the finetuning events to a file.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\finetuning_handler.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "event_pairs_by_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\llama_debug.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "events_pairs_by_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\llama_debug.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "sequential_events",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\llama_debug.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "total_llm_token_count",
            "description": "Get the current total LLM token count.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\token_counting.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt_llm_token_count",
            "description": "Get the current total LLM prompt token count.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\token_counting.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "completion_llm_token_count",
            "description": "Get the current total LLM completion token count.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\token_counting.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "total_embedding_token_count",
            "description": "Get the current total Embedding token count.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\token_counting.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\utils.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "async_wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\callbacks\\utils.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Initialize a CondensePlusContextChatEngine from default parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\condense_plus_context.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\condense_plus_context.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\condense_plus_context.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\condense_plus_context.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\condense_plus_context.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "chat_history",
            "description": "Get chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\condense_plus_context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Initialize a CondenseQuestionChatEngine from default parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\condense_question.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\condense_question.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\condense_question.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\condense_question.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\condense_question.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "chat_history",
            "description": "Get chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\condense_question.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Initialize a ContextChatEngine from default parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\context.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\context.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\context.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\context.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\context.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "chat_history",
            "description": "Get chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Initialize a SimpleChatEngine from default parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\simple.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\simple.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\simple.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\simple.py",
            "decorator": [
                "trace_method"
            ]
        },
        {
            "name": "chat_history",
            "description": "Get chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\simple.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "response_gen",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "reset",
            "description": "Reset conversation state.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "chat",
            "description": "Main chat interface.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream_chat",
            "description": "Stream chat interface.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "achat",
            "description": "Async version of main chat interface.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "astream_chat",
            "description": "Async version of main chat interface.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "chat_history",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\chat_engine\\types.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "query_pipeline_from_ingestion_pipeline",
            "description": "\n        If query_pipeline is not provided, create one from ingestion_pipeline.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\command_line\\rag.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "chat_engine_from_query_pipeline",
            "description": "\n        If chat_engine is not provided, create one from query_pipeline.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\command_line\\rag.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "add_parser_args",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\command_line\\rag.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "generate_retrieval_spec",
            "description": "Generate retrieval spec synchronously.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_auto_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "agenerate_retrieval_spec",
            "description": "Generate retrieval spec asynchronously.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_auto_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_build_retriever_from_spec",
            "description": "Build retriever from spec and provide query bundle.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_auto_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "text_retrieve",
            "description": "Retrieve text nodes given text query.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_multi_modal_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "text_to_image_retrieve",
            "description": "Retrieve image nodes given text query.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_multi_modal_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "image_to_image_retrieve",
            "description": "Retrieve image nodes given image query.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_multi_modal_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "atext_retrieve",
            "description": "Async Retrieve text nodes given text query.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_multi_modal_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "atext_to_image_retrieve",
            "description": "Async Retrieve image nodes given text query.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_multi_modal_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aimage_to_image_retrieve",
            "description": "Async Retrieve image nodes given image query.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_multi_modal_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_query_engine.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_aquery",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_query_engine.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_query_engine.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_query_engine.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_retrieve",
            "description": "Retrieve nodes given query.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_retriever.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_retriever.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ind",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_selector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "reason",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_selector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "inds",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_selector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "reasons",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_selector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_select",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_selector.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_aselect",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\base_selector.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_text_to_image_retrieve",
            "description": "Retrieve image nodes or documents given query text.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\image_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_image_to_image_retrieve",
            "description": "Retrieve image nodes or documents given image.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\image_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_atext_to_image_retrieve",
            "description": "Async retrieve image nodes or documents given query text.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\image_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_aimage_to_image_retrieve",
            "description": "Async retrieve image nodes or documents given image.\n\n        Implemented by the user.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\image_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_validate_callback_manager",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\embeddings\\base.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "_get_query_embedding",
            "description": "\n        Embed the input query synchronously.\n\n        Subclasses should implement this method. Reference get_query_embedding's\n        docstring for more information.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\embeddings\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_aget_query_embedding",
            "description": "\n        Embed the input query asynchronously.\n\n        Subclasses should implement this method. Reference get_query_embedding's\n        docstring for more information.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\embeddings\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_get_text_embedding",
            "description": "\n        Embed the input text synchronously.\n\n        Subclasses should implement this method. Reference get_text_embedding's\n        docstring for more information.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\embeddings\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\components.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\components.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\components.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\components.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\components.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\components.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\components.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\components.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_keys",
            "description": "Create InputKeys from tuple.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\query_component.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_keys",
            "description": "Create InputKeys from tuple.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\query_component.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_as_query_component",
            "description": "Get query component.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\query_component.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "set_callback_manager",
            "description": "Set callback manager.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\query_component.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "free_req_input_keys",
            "description": "Get free input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\query_component.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_validate_component_inputs",
            "description": "Validate component inputs during run_component.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\query_component.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_run_component",
            "description": "Run component.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\query_component.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_arun_component",
            "description": "Run component (async).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\query_component.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\query_component.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\query_component.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "sub_query_components",
            "description": "Get sub query components.\n\n        Certain query components may have sub query components, e.g. a\n        query pipeline will have sub query components, and so will\n        an IfElseComponent.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\query_component.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_input_keys",
            "description": "Input keys dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\query_component.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_optional_input_keys",
            "description": "Optional input keys dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\query_component.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_output_keys",
            "description": "Output keys dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\query_component.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\query_component.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\core\\query_pipeline\\query_component.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "Get index struct type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod",
                "abstractmethod"
            ]
        },
        {
            "name": "node_id_to_index",
            "description": "Map from node id to index.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\data_structs.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "size",
            "description": "Get the size of the graph.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\data_structs.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "node_ids",
            "description": "Get all node ids.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\data_structs.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "keywords",
            "description": "Get all keywords in the table.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\data_structs.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "size",
            "description": "Get the size of the table.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\data_structs.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "node_ids",
            "description": "Get all node ids.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\data_structs.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\data_structs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "summary_ids",
            "description": "Get summary ids.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\document_summary.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\document_summary.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\table.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_type",
            "description": "Get type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\data_structs\\table.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\adapter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_config_dict",
            "description": "Get config dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\adapter_utils.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "forward",
            "description": "Forward pass.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\adapter_utils.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "load",
            "description": "Load model.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\adapter_utils.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_embedding",
            "description": "\n    Get embedding.\n\n    NOTE: Copied from OpenAI's embedding utils:\n    https://github.com/openai/openai-python/blob/main/openai/embeddings_utils.py\n\n    Copied here to avoid importing unnecessary dependencies\n    like matplotlib, plotly, scipy, sklearn.\n\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\anyscale.py",
            "decorator": [
                "embedding_retry_decorator"
            ]
        },
        {
            "name": "aget_embedding",
            "description": "\n    Asynchronously get embedding.\n\n    NOTE: Copied from OpenAI's embedding utils:\n    https://github.com/openai/openai-python/blob/main/openai/embeddings_utils.py\n\n    Copied here to avoid importing unnecessary dependencies\n    like matplotlib, plotly, scipy, sklearn.\n\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\anyscale.py",
            "decorator": [
                "embedding_retry_decorator"
            ]
        },
        {
            "name": "get_embeddings",
            "description": "\n    Get embeddings.\n\n    NOTE: Copied from OpenAI's embedding utils:\n    https://github.com/openai/openai-python/blob/main/openai/embeddings_utils.py\n\n    Copied here to avoid importing unnecessary dependencies\n    like matplotlib, plotly, scipy, sklearn.\n\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\anyscale.py",
            "decorator": [
                "embedding_retry_decorator"
            ]
        },
        {
            "name": "aget_embeddings",
            "description": "\n    Asynchronously get embeddings.\n\n    NOTE: Copied from OpenAI's embedding utils:\n    https://github.com/openai/openai-python/blob/main/openai/embeddings_utils.py\n\n    Copied here to avoid importing unnecessary dependencies\n    like matplotlib, plotly, scipy, sklearn.\n\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\anyscale.py",
            "decorator": [
                "embedding_retry_decorator"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\anyscale.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "validate_env",
            "description": "Validate necessary credentials are set.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\azure_openai.py",
            "decorator": [
                "root_validator"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\azure_openai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "list_supported_models",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\bedrock.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\bedrock.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "set_credentials",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\bedrock.py",
            "decorator": [
                "deprecated"
            ]
        },
        {
            "name": "from_credentials",
            "description": "\n        Instantiate using AWS credentials.\n\n        Args:\n            model_name (str) : Name of the model\n            aws_access_key_id (str): AWS access key ID\n            aws_secret_access_key (str): AWS secret access key\n            aws_session_token (str): AWS session token\n            aws_region (str): AWS region where the service is located\n            aws_profile (str): AWS profile, when None, default profile is chosen automatically\n\n        Example:\n                .. code-block:: python\n\n                    from llama_index.embeddings import BedrockEmbedding\n\n                    # Define the model name\n                    model_name = \"your_model_name\"\n\n                    embeddings = BedrockEmbedding.from_credentials(\n                        model_name,\n                        aws_access_key_id,\n                        aws_secret_access_key,\n                        aws_session_token,\n                        aws_region,\n                        aws_profile,\n                    )\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\bedrock.py",
            "decorator": [
                "classmethod",
                "deprecated"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\clarifai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\clip.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\cohereai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\elasticsearch.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_es_connection",
            "description": "\n        Instantiate embeddings from an existing Elasticsearch connection.\n\n        This method provides a way to create an instance of the ElasticsearchEmbedding\n        class using an existing Elasticsearch connection. The connection object is used\n        to create an MlClient, which is then used to initialize the\n        ElasticsearchEmbedding instance.\n\n        Args:\n        model_id (str): The model_id of the model deployed in the Elasticsearch cluster.\n        es_connection (elasticsearch.Elasticsearch): An existing Elasticsearch\n            connection object.\n        input_field (str, optional): The name of the key for the input text field\n            in the document. Defaults to 'text_field'.\n\n        Returns:\n        ElasticsearchEmbedding: An instance of the ElasticsearchEmbedding class.\n\n        Example:\n            .. code-block:: python\n\n                from elasticsearch import Elasticsearch\n\n                from llama_index.legacy.embeddings import ElasticsearchEmbedding\n\n                # Define the model ID and input field name (if different from default)\n                model_id = \"your_model_id\"\n                # Optional, only if different from 'text_field'\n                input_field = \"your_input_field\"\n\n                # Create Elasticsearch connection\n                es_connection = Elasticsearch(hosts=[\"localhost:9200\"], basic_auth=(\"user\", \"password\"))\n\n                # Instantiate ElasticsearchEmbedding using the existing connection\n                embeddings = ElasticsearchEmbedding.from_es_connection(\n                    model_id,\n                    es_connection,\n                    input_field=input_field,\n                )\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\elasticsearch.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_credentials",
            "description": "Instantiate embeddings from Elasticsearch credentials.\n\n        Args:\n            model_id (str): The model_id of the model deployed in the Elasticsearch\n                cluster.\n            input_field (str): The name of the key for the input text field in the\n                document. Defaults to 'text_field'.\n            es_url: (str): The Elasticsearch url to connect to.\n            es_username: (str): Elasticsearch username.\n            es_password: (str): Elasticsearch password.\n\n        Example:\n            .. code-block:: python\n\n                from llama_index.legacy.embeddings import ElasticsearchEmbedding\n\n                # Define the model ID and input field name (if different from default)\n                model_id = \"your_model_id\"\n                # Optional, only if different from 'text_field'\n                input_field = \"your_input_field\"\n\n                embeddings = ElasticsearchEmbedding.from_credentials(\n                    model_id,\n                    input_field=input_field,\n                    es_url=\"foo\",\n                    es_username=\"bar\",\n                    es_password=\"baz\",\n                )\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\elasticsearch.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\fastembed.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\gemini.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\google.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\google_palm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\gradient.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\huggingface.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\huggingface.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\huggingface_optimum.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "create_and_save_optimum_model",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\huggingface_optimum.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\instructor.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\jinaai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\langchain.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\llm_rails.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\mistralai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_get_image_embedding",
            "description": "\n        Embed the input image synchronously.\n\n        Subclasses should implement this method. Reference get_image_embedding's\n        docstring for more information.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\multi_modal_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_aget_image_embedding",
            "description": "\n        Embed the input image asynchronously.\n\n        Subclasses should implement this method. Reference get_image_embedding's\n        docstring for more information.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\multi_modal_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\nomic.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\ollama_embedding.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_embedding",
            "description": "Get embedding.\n\n    NOTE: Copied from OpenAI's embedding utils:\n    https://github.com/openai/openai-python/blob/main/openai/embeddings_utils.py\n\n    Copied here to avoid importing unnecessary dependencies\n    like matplotlib, plotly, scipy, sklearn.\n\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\openai.py",
            "decorator": [
                "embedding_retry_decorator"
            ]
        },
        {
            "name": "aget_embedding",
            "description": "Asynchronously get embedding.\n\n    NOTE: Copied from OpenAI's embedding utils:\n    https://github.com/openai/openai-python/blob/main/openai/embeddings_utils.py\n\n    Copied here to avoid importing unnecessary dependencies\n    like matplotlib, plotly, scipy, sklearn.\n\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\openai.py",
            "decorator": [
                "embedding_retry_decorator"
            ]
        },
        {
            "name": "get_embeddings",
            "description": "Get embeddings.\n\n    NOTE: Copied from OpenAI's embedding utils:\n    https://github.com/openai/openai-python/blob/main/openai/embeddings_utils.py\n\n    Copied here to avoid importing unnecessary dependencies\n    like matplotlib, plotly, scipy, sklearn.\n\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\openai.py",
            "decorator": [
                "embedding_retry_decorator"
            ]
        },
        {
            "name": "aget_embeddings",
            "description": "Asynchronously get embeddings.\n\n    NOTE: Copied from OpenAI's embedding utils:\n    https://github.com/openai/openai-python/blob/main/openai/embeddings_utils.py\n\n    Copied here to avoid importing unnecessary dependencies\n    like matplotlib, plotly, scipy, sklearn.\n\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\openai.py",
            "decorator": [
                "embedding_retry_decorator"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\openai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "cls_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\pooling.py",
            "decorator": [
                "classmethod",
                "overload"
            ]
        },
        {
            "name": "cls_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\pooling.py",
            "decorator": [
                "classmethod",
                "overload"
            ]
        },
        {
            "name": "cls_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\pooling.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "mean_pooling",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\pooling.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\sagemaker_embedding_endpoint.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "__subclasshook__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\sagemaker_embedding_endpoint_utils.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "serialize_input",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\sagemaker_embedding_endpoint_utils.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "deserialize_output",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\sagemaker_embedding_endpoint_utils.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\text_embeddings_inference.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\embeddings\\voyageai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "aevaluate",
            "description": "Run evaluation with query string, retrieved contexts,\n        and generated response string.\n\n        Subclasses can override this method to provide custom evaluation logic and\n        take in additional arguments.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\evaluation\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_qr_pairs",
            "description": "Create from qr pairs.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\evaluation\\dataset_generation.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "qr_pairs",
            "description": "Get pairs.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\evaluation\\dataset_generation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "questions",
            "description": "Get questions.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\evaluation\\dataset_generation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_json",
            "description": "Load json.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\evaluation\\dataset_generation.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_documents",
            "description": "Generate dataset from documents.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\evaluation\\dataset_generation.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_str",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\evaluation\\retrieval\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metric_vals_dict",
            "description": "Dictionary of metric values.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\evaluation\\retrieval\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_metric_names",
            "description": "Create evaluator from metric names.\n\n        Args:\n            metric_names (List[str]): List of metric names\n            **kwargs: Additional arguments for the evaluator\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\evaluation\\retrieval\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_aget_retrieved_ids_and_texts",
            "description": "Get retrieved ids and texts.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\evaluation\\retrieval\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "compute",
            "description": "Compute metric.\n\n        Args:\n            query (Optional[str]): Query string\n            expected_ids (Optional[List[str]]): Expected ids\n            retrieved_ids (Optional[List[str]]): Retrieved ids\n            **kwargs: Additional keyword arguments\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Query string"
                    },
                    "expected_ids": {
                        "type": "string",
                        "description": "Expected ids"
                    },
                    "retrieved_ids": {
                        "type": "string",
                        "description": "Retrieved ids"
                    }
                }
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\evaluation\\retrieval\\metrics_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\extractors\\interface.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\extractors\\interface.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "aextract",
            "description": "Extracts metadata for a sequence of nodes, returning a list of\n        metadata dictionaries corresponding to each node.\n\n        Args:\n            nodes (Sequence[Document]): nodes to extract metadata from\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "nodes": {
                        "type": "string",
                        "description": "nodes to extract metadata from"
                    }
                },
                "required": [
                    "nodes"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\extractors\\interface.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\extractors\\marvin_metadata_extractor.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\extractors\\metadata_extractors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\extractors\\metadata_extractors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\extractors\\metadata_extractors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\extractors\\metadata_extractors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\extractors\\metadata_extractors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\extractors\\metadata_extractors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "finetune",
            "description": "Goes off and does stuff.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\finetuning\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_finetuned_model",
            "description": "Gets finetuned model.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\finetuning\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "finetune",
            "description": "Goes off and does stuff.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\finetuning\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_finetuned_model",
            "description": "Gets finetuned model.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\finetuning\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "finetune",
            "description": "Goes off and does stuff.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\finetuning\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_finetuned_model",
            "description": "Gets fine-tuned Cross-Encoder model as re-ranker.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\finetuning\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "finetune",
            "description": "Goes off and does stuff.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\finetuning\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_finetuned_model",
            "description": "Gets finetuned model.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\finetuning\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_model_path",
            "description": "Load from model path.\n\n        Args:\n            dataset (EmbeddingQAFinetuneDataset): Dataset to finetune on.\n            embed_model (BaseEmbedding): Embedding model to finetune.\n            model_path (str): Path to model.\n            model_cls (Optional[Type[Any]]): Adapter model class. Defaults to None.\n            **kwargs (Any): Additional kwargs (see __init__)\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\finetuning\\embeddings\\adapter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "query_docid_pairs",
            "description": "Get query, relevant doc ids.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\finetuning\\embeddings\\common.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_json",
            "description": "Load json.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\finetuning\\embeddings\\common.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_finetuning_handler",
            "description": "Initialize from finetuning handler.\n\n        Used to finetune an OpenAI model into another\n        OpenAI model (e.g. gpt-3.5-turbo on top of GPT-4).\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\finetuning\\openai\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\graph_stores\\falkordb.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "execute",
            "description": "Execute query.\n\n        Args:\n            query: Query.\n            param_map: Parameter map.\n\n        Returns:\n            Query result.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Query."
                    },
                    "param_map": {
                        "type": "string",
                        "description": "Parameter map."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "query",
                    "param_map",
                    "Returns"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\graph_stores\\nebulagraph.py",
            "decorator": [
                "retry"
            ]
        },
        {
            "name": "from_dict",
            "description": "Initialize graph store from configuration dictionary.\n\n        Args:\n            config_dict: Configuration dictionary.\n\n        Returns:\n            Graph store.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\graph_stores\\nebulagraph.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Return NebulaGraph session pool.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\graph_stores\\nebulagraph.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "config_dict",
            "description": "Return configuration dictionary.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\graph_stores\\nebulagraph.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\graph_stores\\neo4j.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "Load from persist dir.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\graph_stores\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Get client.\n        Not applicable for this store.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\graph_stores\\simple.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Create a SimpleGraphStore from a persist directory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\graph_stores\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\graph_stores\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\graph_stores\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_documents",
            "description": "Create index from documents.\n\n        Args:\n            documents (Optional[Sequence[BaseDocument]]): List of documents to\n                build the index from.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "documents": {
                        "type": "string",
                        "description": "List of documents to"
                    }
                }
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "index_struct",
            "description": "Get the index struct.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "index_id",
            "description": "Get the index struct.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "docstore",
            "description": "Get the docstore corresponding to the index.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "service_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "storage_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "summary",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "summary",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\base.py",
            "decorator": [
                "summary.setter"
            ]
        },
        {
            "name": "_build_index_from_nodes",
            "description": "Build the index from nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_insert",
            "description": "Index-specific logic for inserting nodes to the index struct.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_delete_node",
            "description": "Delete a node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "as_retriever",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_llm_metadata",
            "description": "Create from llm predictor.\n\n        This will autofill values like context_window and num_output.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\prompt_helper.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\prompt_helper.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_insert_datapoint",
            "description": "Insert datapoint into index.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\common\\struct_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_get_col_types_map",
            "description": "Get col types map for schema.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\common\\struct_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_get_schema_text",
            "description": "Get schema text for extracting relevant info from unstructured text.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\common\\struct_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "docstore",
            "description": "Return docstore.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\common_tree\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "root_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\composability\\graph.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "all_indices",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\composability\\graph.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "root_index",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\composability\\graph.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "index_struct",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\composability\\graph.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "service_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\composability\\graph.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_indices",
            "description": "Create composable graph using this index class as the root.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\composability\\graph.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "vector_store",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\document_summary\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\document_summary\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\empty\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_extract_keywords",
            "description": "Extract keywords from text.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\keyword_table\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\keyword_table\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_get_keywords",
            "description": "Extract keywords.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\keyword_table\\retrievers.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "graph_store",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\knowledge_graph\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_parse_triplet_response",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\knowledge_graph\\base.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\knowledge_graph\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "query_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\knowledge_graph\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\list\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_insert",
            "description": "Insert a set of documents (each a node).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_ref_doc",
            "description": "Delete a document and it's nodes by using ref_doc_id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "update_ref_doc",
            "description": "Update a document and it's corresponding nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "as_retriever",
            "description": "Return a Retriever for this managed index.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_documents",
            "description": "Build an index from a sequence of documents.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\colbert_index\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "load_from_disk",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\colbert_index\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_corpus",
            "description": "Creates a GoogleIndex from an existing corpus.\n\n        Args:\n            corpus_id: ID of an existing corpus on Google's server.\n\n        Returns:\n            An instance of GoogleIndex pointing to the specified corpus.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "corpus_id": {
                        "type": "string",
                        "description": "ID of an existing corpus on Google's server."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "corpus_id",
                    "Returns"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\google\\generativeai\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "create_corpus",
            "description": "Creates a GoogleIndex from a new corpus.\n\n        Args:\n            corpus_id: ID of the new corpus to be created. If not provided,\n                Google server will provide one.\n            display_name: Title of the new corpus. If not provided, Google\n                server will provide one.\n\n        Returns:\n            An instance of GoogleIndex pointing to the specified corpus.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "corpus_id": {
                        "type": "string",
                        "description": "ID of the new corpus to be created. If not provided,"
                    },
                    "display_name": {
                        "type": "string",
                        "description": "Title of the new corpus. If not provided, Google"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "corpus_id",
                    "display_name",
                    "Returns"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\google\\generativeai\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_documents",
            "description": "Build an index from a sequence of documents.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\google\\generativeai\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "corpus_id",
            "description": "Returns the corpus ID being used by this GoogleIndex.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\google\\generativeai\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_type",
            "description": "Get index struct type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\vectara\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_documents",
            "description": "Build a Vectara index from a sequence of documents.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\vectara\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_args",
            "description": "\n        Initialize a VectaraQueryEngine object.\".\n\n        Args:\n            retriever (VectaraRetriever): A Vectara retriever object.\n            summary_response_lang: response language for summary (ISO 639-2 code)\n            summary_num_results: number of results to use for summary generation.\n            summary_prompt_name: name of the prompt to use for summary generation.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\vectara\\query.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "retriever",
            "description": "Get the retriever object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\vectara\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "similarity_top_k",
            "description": "Return similarity top k.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\vectara\\retriever.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "similarity_top_k",
            "description": "Set similarity top k.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\vectara\\retriever.py",
            "decorator": [
                "similarity_top_k.setter"
            ]
        },
        {
            "name": "get_type",
            "description": "Get index struct type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\zilliz\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_document_url",
            "description": "Zilliz Cloud Pipeline loads document from a signed url and then builds auto index for it.\n\n        Args:\n            url: a gcs or s3 signed url.\n            project_id (str): Zilliz Cloud's project ID.\n            cluster_id (str): Zilliz Cloud's cluster ID.\n            token (str): Zilliz Cloud's token.\n            cloud_region (str='gcp-us-west1'): The region of Zilliz Cloud's cluster. Defaults to 'gcp-us-west1'.\n            pipeline_ids (dict=None): A dictionary of pipeline ids for INGESTION, SEARCH, DELETION. Defaults to None.\n            collection_name (str='zcp_llamalection'): A collection name, defaults to 'zcp_llamalection'. If no pipeline_ids is given, get or create pipelines with collection_name.\n            metadata (Dict=None): A dictionary of metadata. Defaults to None. The key must be string and the value must be a string, float, integer, or boolean.\n            show_progress (bool): Whether to show tqdm progress bars. Defaults to False.\n\n        Returns:\n            An initialized ZillizCloudPipelineIndex\n\n        Example:\n            >>> from llama_index.legacy.indices import ZillizCloudPipelineIndex\n            >>> index = ZillizCloudPipelineIndex.from_document_url(\n            >>>     url='https://oss_bucket.test_doc.ext',\n            >>>     project_id='YOUR_ZILLIZ_CLOUD_PROJECT_ID',\n            >>>     cluster_id='YOUR_ZILLIZ_CLOUD_CLUSTER_ID',\n            >>>     token='YOUR_ZILLIZ_CLOUD_API_KEY',\n            >>>     collection_name='your_collection_name'\n            >>> )\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\zilliz\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_documents",
            "description": "Build a Zilliz Cloud Pipeline index from a sequence of documents.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\managed\\zilliz\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "image_vector_store",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\multi_modal\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "image_embed_model",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\multi_modal\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_image_vector_store_empty",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\multi_modal\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_text_vector_store_empty",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\multi_modal\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_vector_store",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\multi_modal\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "similarity_top_k",
            "description": "Return similarity top k.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\multi_modal\\retriever.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "similarity_top_k",
            "description": "Set similarity top k.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\multi_modal\\retriever.py",
            "decorator": [
                "similarity_top_k.setter"
            ]
        },
        {
            "name": "image_similarity_top_k",
            "description": "Return image similarity top k.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\multi_modal\\retriever.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "image_similarity_top_k",
            "description": "Set image similarity top k.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\multi_modal\\retriever.py",
            "decorator": [
                "image_similarity_top_k.setter"
            ]
        },
        {
            "name": "_run",
            "description": "Run query transform.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\query\\query_transform\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\query\\query_transform\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\query\\query_transform\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_construct_feedback",
            "description": "Construct feedback from response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\query\\query_transform\\feedback_transform.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\struct_store\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_documents",
            "description": "Build context from documents.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\struct_store\\container_builder.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "ref_doc_id_column",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\struct_store\\sql.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "service_context",
            "description": "Get service context.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\struct_store\\sql_query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "sql_retriever",
            "description": "Get SQL retriever.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\struct_store\\sql_query.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "service_context",
            "description": "Get service context.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\struct_store\\sql_query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "sql_retriever",
            "description": "Get SQL retriever.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\struct_store\\sql_query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "sql_retriever",
            "description": "Get SQL retriever.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\struct_store\\sql_query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "sql_retriever",
            "description": "Get SQL retriever.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\struct_store\\sql_query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parse_response_to_sql",
            "description": "Parse response to SQL.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\struct_store\\sql_retriever.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\tree\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_vector_store",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\vector_store\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "vector_store",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\vector_store\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ref_doc_info",
            "description": "Retrieve a dict mapping of ingested documents and their nodes+metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\vector_store\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "similarity_top_k",
            "description": "Return similarity top k.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\vector_store\\retrievers\\retriever.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "similarity_top_k",
            "description": "Set similarity top k.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\indices\\vector_store\\retrievers\\retriever.py",
            "decorator": [
                "similarity_top_k.setter"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Create a IngestionCache from a persist directory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\ingestion\\cache.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_service_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\ingestion\\pipeline.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_node_batcher",
            "description": "Yield successive n-sized chunks from lst.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\ingestion\\pipeline.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "memory_variables",
            "description": "Return memory variables.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\langchain_helpers\\memory_wrapper.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "memory_variables",
            "description": "Return memory variables.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\langchain_helpers\\memory_wrapper.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_tool_config",
            "description": "Create a tool from a tool config.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\langchain_helpers\\agents\\tools.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "to_pandas",
            "description": "Create pandas dataframe.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_json",
            "description": "Load json.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "to_pandas",
            "description": "Create pandas dataframe.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_json",
            "description": "Load json.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_construct_prediction_dataset",
            "description": "Construct the specific prediction dataset.\n\n        Args:\n            predictions (List[BaseLlamaExamplePrediction]): the list of predictions.\n\n        Returns:\n            BaseLlamaPredictionDataset: A dataset of predictions.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "predictions": {
                        "type": "string",
                        "description": "the list of predictions."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "BaseLlamaPredictionDataset": {
                        "type": "string",
                        "description": "A dataset of predictions."
                    }
                },
                "required": [
                    "predictions",
                    "Returns",
                    "BaseLlamaPredictionDataset"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_predict_example",
            "description": "Predict on a single example.\n\n        NOTE: Subclasses need to implement this.\n\n        Args:\n            predictor (PredictorType): The predictor to make the prediciton with.\n            example (BaseLlamaDataExample): The example to predict on.\n\n        Returns:\n            BaseLlamaExamplePrediction: The prediction.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "predictor": {
                        "type": "string",
                        "description": "The predictor to make the prediciton with."
                    },
                    "example": {
                        "type": "string",
                        "description": "The example to predict on."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "BaseLlamaExamplePrediction": {
                        "type": "string",
                        "description": "The prediction."
                    }
                },
                "required": [
                    "predictor",
                    "example",
                    "Returns",
                    "BaseLlamaExamplePrediction"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_apredict_example",
            "description": "Async predict on a single example.\n\n        NOTE: Subclasses need to implement this.\n\n        Args:\n            predictor (PredictorType): The predictor to make the prediciton with.\n            example (BaseLlamaDataExample): The example to predict on.\n\n        Returns:\n            BaseLlamaExamplePrediction: The prediction.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "predictor": {
                        "type": "string",
                        "description": "The predictor to make the prediciton with."
                    },
                    "example": {
                        "type": "string",
                        "description": "The example to predict on."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "BaseLlamaExamplePrediction": {
                        "type": "string",
                        "description": "The prediction."
                    }
                },
                "required": [
                    "predictor",
                    "example",
                    "Returns",
                    "BaseLlamaExamplePrediction"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Data example class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\evaluator_evaluation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Data example class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\evaluator_evaluation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\evaluator_evaluation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\evaluator_evaluation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Data example class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\evaluator_evaluation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\evaluator_evaluation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Data example class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\evaluator_evaluation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\evaluator_evaluation.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_documents",
            "description": "Generate dataset from documents.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\generator.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Data example class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\rag.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Data example class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\rag.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\rag.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Class name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_dataset\\rag.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_modules",
            "description": "Get modules.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_pack\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "run",
            "description": "Run.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llama_pack\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get Class Name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\ai21.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\ai21.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_model_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\ai21.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\ai21.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\ai21.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\ai21.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\ai21.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\anthropic.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\anthropic.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_model_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\anthropic.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\anthropic.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\anthropic.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\anthropic.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\anthropic.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\anthropic.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\anthropic.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\anthropic.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\anthropic.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\anyscale.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\anyscale.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_is_chat_model",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\anyscale.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "validate_env",
            "description": "Validate necessary credentials are set.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\azure_openai.py",
            "decorator": [
                "root_validator"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\azure_openai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "wrapper_logic",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\base.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "wrapper_logic",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\base.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "_validate_callback_manager",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\base.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "metadata",
            "description": "LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "chat",
            "description": "Chat endpoint for LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "complete",
            "description": "Completion endpoint for LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream_chat",
            "description": "Streaming chat endpoint for LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream_complete",
            "description": "Streaming completion endpoint for LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "achat",
            "description": "Async chat endpoint for LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "acomplete",
            "description": "Async completion endpoint for LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "astream_chat",
            "description": "Async streaming chat endpoint for LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "astream_complete",
            "description": "Async streaming completion endpoint for LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\bedrock.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\bedrock.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_model_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\bedrock.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\bedrock.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\bedrock.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\bedrock.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "max_tokens_key",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\bedrock_utils.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "get_text_from_response",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\bedrock_utils.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_completion_with_retry",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\bedrock_utils.py",
            "decorator": [
                "retry_decorator"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\clarifai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\clarifai.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\clarifai.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\clarifai.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\clarifai.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\clarifai.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\cohere.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\cohere.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_model_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\cohere.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\cohere.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\cohere.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\cohere.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\cohere.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\cohere.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\cohere.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\cohere.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\cohere.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "_completion_with_retry",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\cohere_utils.py",
            "decorator": [
                "retry_decorator"
            ]
        },
        {
            "name": "_completion_with_retry",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\cohere_utils.py",
            "decorator": [
                "retry_decorator"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\custom.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\custom.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\custom.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\custom.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\custom.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\custom.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\custom.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\dashscope.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\dashscope.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\dashscope.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\dashscope.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\dashscope.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\dashscope.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\everlyai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\everlyai.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_is_chat_model",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\everlyai.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\gemini.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\gemini.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\gemini.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\gemini.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\gradient.py",
            "decorator": [
                "llm_completion_callback",
                "override"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\gradient.py",
            "decorator": [
                "llm_completion_callback",
                "override"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\gradient.py",
            "decorator": [
                "override"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\gradient.py",
            "decorator": [
                "property",
                "override"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\huggingface.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\huggingface.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "complete",
            "description": "Completion endpoint.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\huggingface.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "Streaming completion endpoint.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\huggingface.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\huggingface.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\huggingface.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\huggingface.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\konko.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\konko.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\konko.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\konko.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "_credential_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\konko.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_model_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\konko.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\konko.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\konko.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\konko.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\konko.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\konko.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\konko.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "_completion_with_retry",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\konko_utils.py",
            "decorator": [
                "retry_decorator"
            ]
        },
        {
            "name": "_completion_with_retry",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\konko_utils.py",
            "decorator": [
                "retry_decorator"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\langchain.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "llm",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\langchain.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\langchain.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\langchain.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\langchain.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\langchain.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\langchain.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\langchain.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\langchain.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\langchain.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\langchain.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\litellm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\litellm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\litellm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\litellm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\litellm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\litellm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "_is_chat_model",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\litellm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_model_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\litellm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\litellm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\litellm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\litellm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\litellm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "_completion_with_retry",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\litellm_utils.py",
            "decorator": [
                "retry_decorator"
            ]
        },
        {
            "name": "_completion_with_retry",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\litellm_utils.py",
            "decorator": [
                "retry_decorator"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llama_api.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_model_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llama_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llama_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llama_api.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llama_api.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llama_api.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llama_api.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llama_cpp.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llama_cpp.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llama_cpp.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llama_cpp.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llama_cpp.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llama_cpp.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "set_messages_to_prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llm.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "set_completion_to_prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llm.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\llm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\localai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\localai.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_is_chat_model",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\localai.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\mistral.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\mistral.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_model_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\mistral.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\mistral.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\mistral.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\mistral.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\mistral.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\mistral.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\mistral.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\mistral.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\mistral.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\mock.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\mock.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\mock.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\mock.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\monsterapi.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "Get LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\monsterapi.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\monsterapi.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\monsterapi.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\monsterapi.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\neutrino.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_tensorrt.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_tensorrt.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_tensorrt.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_tensorrt.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_tensorrt.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "_get_model_default_parameters",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_triton.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_invocation_params",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_triton.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_identifying_params",
            "description": "Get all the identifying parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_triton.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "Gather and return metadata about the user Triton configured LLM model.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_triton.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_triton.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "_inference_server_client",
            "description": "Return the preferred InferenceServerClient class.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_triton_utils.py",
            "decorator": [
                "property",
                "abc.abstractmethod"
            ]
        },
        {
            "name": "_infer_input",
            "description": "Return the preferred InferInput.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_triton_utils.py",
            "decorator": [
                "property",
                "abc.abstractmethod"
            ]
        },
        {
            "name": "_infer_output",
            "description": "Return the preferred InferRequestedOutput.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_triton_utils.py",
            "decorator": [
                "property",
                "abc.abstractmethod"
            ]
        },
        {
            "name": "_inference_server_client",
            "description": "Return the preferred InferenceServerClient class.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_triton_utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_infer_input",
            "description": "Return the preferred InferInput.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_triton_utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_infer_output",
            "description": "Return the preferred InferRequestedOutput.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_triton_utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_process_result",
            "description": "Post-process the result from the server.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\nvidia_triton_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\ollama.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\ollama.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_model_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\ollama.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\ollama.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\ollama.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\ollama.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\ollama.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_tokenizer",
            "description": "\n        Get a tokenizer for this model, or None if a tokenizing method is unknown.\n\n        OpenAI can do this using the tiktoken package, subclasses may not have\n        this convenience.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openai.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openai.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openai.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openai.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openai.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openai.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openai.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openai.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openai.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openai.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openai_like.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_tokenizer",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openai_like.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openai_like.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "to_openai_function",
            "description": "Deprecated in favor of `to_openai_tool`.\n\n    Convert pydantic class to OpenAI function.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openai_utils.py",
            "decorator": [
                "deprecated"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "_loop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_server_metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_server_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openllm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\openrouter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\palm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "Get LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\palm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "complete",
            "description": "Predict the answer to a query.\n\n        Args:\n            prompt (str): Prompt to use for prediction.\n\n        Returns:\n            Tuple[str, str]: Tuple of the predicted answer and the formatted prompt.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "prompt": {
                        "type": "string",
                        "description": "Prompt to use for prediction."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "prompt",
                    "Returns"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\palm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "Stream the answer to a query.\n\n        NOTE: this is a beta feature. Will try to build or use\n        better abstractions about response handling.\n\n        Args:\n            prompt (str): Prompt to use for prediction.\n\n        Returns:\n            str: The predicted answer.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "prompt": {
                        "type": "string",
                        "description": "Prompt to use for prediction."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "str": {
                        "type": "string",
                        "description": "The predicted answer."
                    }
                },
                "required": [
                    "prompt",
                    "Returns",
                    "str"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\palm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\perplexity.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\perplexity.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\perplexity.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\perplexity.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\perplexity.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\perplexity.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\perplexity.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\perplexity.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\perplexity.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\perplexity.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "metadata",
            "description": "LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\portkey.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "complete",
            "description": "Completion endpoint for LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\portkey.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\portkey.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "Completion endpoint for LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\portkey.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\portkey.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "_is_chat_model",
            "description": "Check if a given model is a chat-based language model.\n\n        Returns:\n            bool: True if the provided model is a chat-based language model,\n            False otherwise.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\portkey.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "initialize_client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\predibase.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\predibase.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "Get LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\predibase.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\predibase.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\predibase.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\replicate.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\replicate.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_model_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\replicate.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\replicate.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\replicate.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\replicate.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\replicate.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\rungpt.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\rungpt.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\rungpt.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\rungpt.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\rungpt.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\rungpt.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\rungpt.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\rungpt.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\rungpt.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\rungpt.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\sagemaker_llm_endpoint.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\sagemaker_llm_endpoint.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\sagemaker_llm_endpoint.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\sagemaker_llm_endpoint.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\sagemaker_llm_endpoint.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\sagemaker_llm_endpoint.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\sagemaker_llm_endpoint.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\sagemaker_llm_endpoint.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\sagemaker_llm_endpoint.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\sagemaker_llm_endpoint.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__subclasshook__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\sagemaker_llm_endpoint_utils.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "serialize_input",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\sagemaker_llm_endpoint_utils.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "deserialize_output",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\sagemaker_llm_endpoint_utils.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "deserialize_streaming_output",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\sagemaker_llm_endpoint_utils.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "remove_prefix",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\sagemaker_llm_endpoint_utils.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\together.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vertex.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vertex.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_model_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vertex.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vertex.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vertex.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vertex.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vertex.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vertex.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vertex.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vertex.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vertex.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "_completion_with_retry",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vertex_utils.py",
            "decorator": [
                "retry_decorator"
            ]
        },
        {
            "name": "_completion_with_retry",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vertex_utils.py",
            "decorator": [
                "retry_decorator"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_model_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\vllm.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\xinference.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\xinference.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_model_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\xinference.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\xinference.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\xinference.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\xinference.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llms\\xinference.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "llm",
            "description": "Get LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "callback_manager",
            "description": "Get callback manager.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "Get LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "predict",
            "description": "Predict the answer to a query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream",
            "description": "Stream the answer to a query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "apredict",
            "description": "Async predict the answer to a query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "astream",
            "description": "Async predict the answer to a query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "llm",
            "description": "Get LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "callback_manager",
            "description": "Get callback manager.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "Get LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\mock.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\mock.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "callback_manager",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\mock.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "llm",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\mock.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\structured.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\vellum\\predictor.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "Get LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\vellum\\predictor.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "callback_manager",
            "description": "Get callback manager.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\vellum\\predictor.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "llm",
            "description": "Get the LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\vellum\\predictor.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "deployment_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\vellum\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "sandbox_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\llm_predictor\\vellum\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\memory\\chat_memory_buffer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "validate_memory",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\memory\\chat_memory_buffer.py",
            "decorator": [
                "root_validator"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create a chat memory buffer from an LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\memory\\chat_memory_buffer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_string",
            "description": "Create a chat memory buffer from a string.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\memory\\chat_memory_buffer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\memory\\chat_memory_buffer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\memory\\types.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create a chat memory from defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\memory\\types.py",
            "decorator": [
                "classmethod",
                "abstractmethod"
            ]
        },
        {
            "name": "get",
            "description": "Get chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\memory\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_all",
            "description": "Get all chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\memory\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "put",
            "description": "Put chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\memory\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "set",
            "description": "Set chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\memory\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "reset",
            "description": "Reset chat history.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\memory\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\azure_openai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "Multi Modal LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\azure_openai.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "Multi-Modal LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "complete",
            "description": "Completion endpoint for Multi-Modal LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream_complete",
            "description": "Streaming completion endpoint for Multi-Modal LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "chat",
            "description": "Chat endpoint for Multi-Modal LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream_chat",
            "description": "Stream chat endpoint for Multi-Modal LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "acomplete",
            "description": "Async completion endpoint for Multi-Modal LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "astream_complete",
            "description": "Async streaming completion endpoint for Multi-Modal LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "achat",
            "description": "Async chat endpoint for Multi-Modal LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "astream_chat",
            "description": "Async streaming chat endpoint for Multi-Modal LLM.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\dashscope.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\dashscope.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\gemini.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\gemini.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\ollama.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\ollama.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_model_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\ollama.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\openai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "Multi Modal LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\openai.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\replicate_multi_modal.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "Multi Modal LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\replicate_multi_modal.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_model_kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\multi_modal_llms\\replicate_multi_modal.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_parse_nodes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\interface.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "split_text",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\interface.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "split_text_metadata_aware",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\interface.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\file\\html.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\file\\html.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\file\\json.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\file\\json.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\file\\markdown.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\file\\markdown.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\file\\simple_file.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\file\\simple_file.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\relational\\base_element.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\relational\\base_element.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_nodes_from_node",
            "description": "Get nodes from node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\relational\\base_element.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "extract_elements",
            "description": "Extract elements from text.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\relational\\base_element.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\relational\\hierarchical.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\relational\\hierarchical.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\relational\\markdown_element.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\relational\\unstructured_element.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create a CodeSplitter with default values.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\text\\code.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\text\\code.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\text\\semantic_splitter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\text\\semantic_splitter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\text\\sentence_window.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\text\\sentence_window.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Initialize with default parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\text\\token.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\node_parser\\text\\token.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "retriever",
            "description": "Retriever.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_objects",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_objects",
            "description": "Initialize node mapping from a list of objects.\n\n        Only needs to be specified if the node mapping\n        needs to be initialized with a list of objects.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\base_node_mapping.py",
            "decorator": [
                "classmethod",
                "abstractmethod"
            ]
        },
        {
            "name": "obj_node_mapping",
            "description": "The mapping data structure between node and object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\base_node_mapping.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "_add_object",
            "description": "Add object.\n\n        Only needs to be specified if the node mapping\n        needs to be initialized with a list of objects.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\base_node_mapping.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "to_node",
            "description": "To node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\base_node_mapping.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_from_node",
            "description": "From node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\base_node_mapping.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "persist",
            "description": "Persist objs.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\base_node_mapping.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "Load from serialization.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\base_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_objects",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\base_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "obj_node_mapping",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\base_node_mapping.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "obj_node_mapping",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\base_node_mapping.py",
            "decorator": [
                "obj_node_mapping.setter"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\base_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_objects",
            "description": "Initialize node mapping.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\table_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "obj_node_mapping",
            "description": "The mapping data structure between node and object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\table_node_mapping.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\table_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "obj_node_mapping",
            "description": "The mapping data structure between node and object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\tool_node_mapping.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\tool_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_objects",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\tool_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\tool_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "obj_node_mapping",
            "description": "The mapping data structure between node and object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\tool_node_mapping.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_objects",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\objects\\tool_node_mapping.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\output_parsers\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\output_parsers\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_rail",
            "description": "From rail.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\output_parsers\\guardrails.py",
            "decorator": [
                "classmethod",
                "deprecated"
            ]
        },
        {
            "name": "from_rail_string",
            "description": "From rail string.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\output_parsers\\guardrails.py",
            "decorator": [
                "classmethod",
                "deprecated"
            ]
        },
        {
            "name": "output_cls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\output_parsers\\pydantic.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "format_string",
            "description": "Format string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\output_parsers\\pydantic.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "best_run_result",
            "description": "Get best run result.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\param_tuner\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "tune",
            "description": "Tune parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\param_tuner\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_docs",
            "description": "Initialize with Documents using the default list of indices.\n\n        Args:\n            documents: A List of Documents to experiment with.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\playground\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "indices",
            "description": "Get Playground's indices.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\playground\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "indices",
            "description": "Set Playground's indices.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\playground\\base.py",
            "decorator": [
                "indices.setter"
            ]
        },
        {
            "name": "retriever_modes",
            "description": "Get Playground's indices.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\playground\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "retriever_modes",
            "description": "Set Playground's indices.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\playground\\base.py",
            "decorator": [
                "retriever_modes.setter"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\cohere_rerank.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\flag_embedding_reranker.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\llm_rerank.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\longllmlingua.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\metadata_replacement.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\node.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\node.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_validate_mode",
            "description": "Validate mode.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\node.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\node.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\node.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\node.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\node_recency.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\node_recency.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\node_recency.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\optimizer.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\pii.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\pii.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\rankGPT_rerank.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\sbert_rerank.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\types.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_postprocess_nodes",
            "description": "Postprocess nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\postprocessor\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "From defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\guidance_program.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "output_cls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\guidance_program.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\llm_program.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "output_cls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\llm_program.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\llm_program.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\llm_program.py",
            "decorator": [
                "prompt.setter"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Initialize program from defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\llm_prompt_program.py",
            "decorator": [
                "classmethod",
                "abstractmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "From defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\lmformatenforcer_program.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "output_cls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\lmformatenforcer_program.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\multi_modal_llm_program.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "output_cls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\multi_modal_llm_program.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\multi_modal_llm_program.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\multi_modal_llm_program.py",
            "decorator": [
                "prompt.setter"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\openai_program.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "output_cls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\openai_program.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\openai_program.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\openai_program.py",
            "decorator": [
                "prompt.setter"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Full DF output parser.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\predefined\\df.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "output_cls",
            "description": "Output class.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\predefined\\df.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Rows DF output parser.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\predefined\\df.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "output_cls",
            "description": "Output class.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\predefined\\df.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Evaporate program.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\predefined\\evaporate\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "extractor",
            "description": "Extractor.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\predefined\\evaporate\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "fit",
            "description": "Given the input Nodes and fields, synthesize the python code.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\predefined\\evaporate\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "output_cls",
            "description": "Output class.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\predefined\\evaporate\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\predefined\\evaporate\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "output_cls",
            "description": "Output class.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\predefined\\evaporate\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "time_limit",
            "description": "Time limit context manager.\n\n    NOTE: copied from https://github.com/HazyResearch/evaporate.\n\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\program\\predefined\\evaporate\\extractor.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "partial_format",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\prompts\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "format",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\prompts\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "format_messages",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\prompts\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_template",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\prompts\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\prompts\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\prompts\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "activate_lm_format_enforcer",
            "description": "Activate the LM Format Enforcer for the given LLM.\n\n    with activate_lm_format_enforcer(llm, lm_format_enforcer_fn):\n        llm.complete(...)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\prompts\\lmformatenforcer_utils.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "_get_prompts",
            "description": "Get prompts.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\prompts\\mixin.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_get_prompt_modules",
            "description": "Get prompt sub-modules.\n\n        Return a dictionary of sub-modules within the current module\n        that also implement PromptMixin (so that their prompts can also be get/set).\n\n        Can be blank if no sub-modules.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\prompts\\mixin.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_update_prompts",
            "description": "Update prompts.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\prompts\\mixin.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_args",
            "description": "Initialize a CitationQueryEngine object.\".\n\n        Args:\n            index: (BastGPTIndex): index to use for querying\n            citation_chunk_size (int):\n                Size of citation chunks, default=512. Useful for controlling\n                granularity of sources.\n            citation_chunk_overlap (int): Overlap of citation nodes, default=20.\n            text_splitter (Optional[TextSplitter]):\n                A text splitter for creating citation source nodes. Default is\n                a SentenceSplitter.\n            citation_qa_template (BasePromptTemplate): Template for initial citation QA\n            citation_refine_template (BasePromptTemplate):\n                Template for citation refinement.\n            retriever (BaseRetriever): A retriever object.\n            service_context (Optional[ServiceContext]): A ServiceContext object.\n            node_postprocessors (Optional[List[BaseNodePostprocessor]]): A list of\n                node postprocessors.\n            verbose (bool): Whether to print out debug info.\n            response_mode (ResponseMode): A ResponseMode object.\n            use_async (bool): Whether to use async.\n            streaming (bool): Whether to use streaming.\n            optimizer (Optional[BaseTokenUsageOptimizer]): A BaseTokenUsageOptimizer\n                object.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_engine\\citation_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "retriever",
            "description": "Get the retriever object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_engine\\citation_query_engine.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "custom_query",
            "description": "Run a custom query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_engine\\custom.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "retriever",
            "description": "Get the retriever object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_engine\\multi_modal.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_args",
            "description": "Initialize a RetrieverQueryEngine object.\".\n\n        Args:\n            retriever (BaseRetriever): A retriever object.\n            service_context (Optional[ServiceContext]): A ServiceContext object.\n            node_postprocessors (Optional[List[BaseNodePostprocessor]]): A list of\n                node postprocessors.\n            verbose (bool): Whether to print out debug info.\n            response_mode (ResponseMode): A ResponseMode object.\n            text_qa_template (Optional[BasePromptTemplate]): A BasePromptTemplate\n                object.\n            refine_template (Optional[BasePromptTemplate]): A BasePromptTemplate object.\n            simple_template (Optional[BasePromptTemplate]): A BasePromptTemplate object.\n\n            use_async (bool): Whether to use async.\n            streaming (bool): Whether to use streaming.\n            optimizer (Optional[BaseTokenUsageOptimizer]): A BaseTokenUsageOptimizer\n                object.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_engine\\retriever_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "retriever",
            "description": "Get the retriever object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_engine\\retriever_query_engine.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_engine\\router_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_sql_and_vector_query_engines",
            "description": "From SQL and vector query engines.\n\n        Args:\n            sql_query_engine (BaseSQLTableQueryEngine): SQL query engine.\n            vector_query_engine (VectorIndexAutoRetriever): Vector retriever.\n            selector (Optional[Union[LLMSingleSelector, PydanticSingleSelector]]):\n                Selector to use.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_engine\\sql_vector_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_engine\\sub_question_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "insert",
            "description": "Insert answers into response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_engine\\flare\\answer_inserter.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_index",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_engine\\pandas\\pandas_query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "sub_query_components",
            "description": "Sub query components.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "clean_dag",
            "description": "Clean dag.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_input_keys",
            "description": "Input keys dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_optional_input_keys",
            "description": "Optional input keys dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_output_keys",
            "description": "Output keys dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\components\\agent.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\components\\router.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\components\\router.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\components\\router.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\components\\router.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "sub_query_components",
            "description": "Get sub query components.\n\n        Certain query components may have sub query components, e.g. a\n        query pipeline will have sub query components, and so will\n        an IfElseComponent.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\components\\router.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\components\\tool_runner.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\query_pipeline\\components\\tool_runner.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\question_gen\\guidance_generator.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\question_gen\\llm_generators.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\question_gen\\openai_generator.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "generate",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\question_gen\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "agenerate",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\question_gen\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get the name identifier of the class.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\discord_reader.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\elasticsearch.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\notion.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\slack.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\string_iterable.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\twitter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\web.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\web.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\web.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\web.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\wikipedia.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\youtube_transcript.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "load_file",
            "description": "Static method for loading file.\n\n        NOTE: necessarily as a static method for parallel processing.\n\n        Args:\n            input_file (Path): _description_\n            file_metadata (Callable[[str], Dict]): _description_\n            file_extractor (Dict[str, BaseReader]): _description_\n            filename_as_id (bool, optional): _description_. Defaults to False.\n            encoding (str, optional): _description_. Defaults to \"utf-8\".\n            errors (str, optional): _description_. Defaults to \"ignore\".\n\n        input_file (Path): File path to read\n        file_metadata ([Callable[str, Dict]]): A function that takes\n            in a filename and returns a Dict of metadata for the Document.\n        file_extractor (Dict[str, BaseReader]): A mapping of file\n            extension to a BaseReader class that specifies how to convert that file\n            to text.\n        filename_as_id (bool): Whether to use the filename as the document id.\n        encoding (str): Encoding of the files.\n            Default is utf-8.\n        errors (str): how encoding and decoding errors are to be handled,\n              see https://docs.python.org/3/library/functions.html#open\n\n        Returns:\n            List[Document]: loaded documents\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "input_file": {
                        "type": "string",
                        "description": "File path to read"
                    },
                    "file_metadata": {
                        "type": "string",
                        "description": "A function that takes"
                    },
                    "file_extractor": {
                        "type": "string",
                        "description": "A mapping of file"
                    },
                    "filename_as_id": {
                        "type": "boolean",
                        "description": "Whether to use the filename as the document id."
                    },
                    "encoding": {
                        "type": "string",
                        "description": "Encoding of the files."
                    },
                    "errors": {
                        "type": "string",
                        "description": "how encoding and decoding errors are to be handled,"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "input_file",
                    "file_metadata",
                    "file_extractor",
                    "filename_as_id",
                    "encoding",
                    "errors",
                    "Returns"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\file\\base.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "load_data_from_commit",
            "description": "Load data from a commit.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\github_readers\\github_repository_reader.py",
            "decorator": [
                "timeit"
            ]
        },
        {
            "name": "load_data_from_branch",
            "description": "Load data from a branch.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\github_readers\\github_repository_reader.py",
            "decorator": [
                "timeit"
            ]
        },
        {
            "name": "_fill_buffer",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\github_readers\\utils.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\google_readers\\gdocs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\readers\\google_readers\\gsheets.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "service_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\response_synthesizers\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "callback_manager",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\response_synthesizers\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "callback_manager",
            "description": "Set callback manager.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\response_synthesizers\\base.py",
            "decorator": [
                "callback_manager.setter"
            ]
        },
        {
            "name": "get_response",
            "description": "Get response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\response_synthesizers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aget_response",
            "description": "Get response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\response_synthesizers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "input_keys",
            "description": "Input keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\response_synthesizers\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_keys",
            "description": "Output keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\response_synthesizers\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_cls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\response_synthesizers\\refine.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create a new Google AQA.\n\n        Example:\n          responder = GoogleTextSynthesizer.create(\n              temperature=0.7,\n              answer_style=AnswerStyle.ABSTRACTIVE,\n              safety_setting=[\n                  SafetySetting(\n                      category=HARM_CATEGORY_SEXUALLY_EXPLICIT,\n                      threshold=HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,\n                  ),\n              ]\n          )\n\n        Args:\n          temperature: 0.0 to 1.0.\n          answer_style: See `google.ai.generativelanguage.GenerateAnswerRequest.AnswerStyle`\n            The default is ABSTRACTIVE (1).\n          safety_setting: See `google.ai.generativelanguage.SafetySetting`.\n\n        Returns:\n          an instance of GoogleTextSynthesizer.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\response_synthesizers\\google\\generativeai\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\retrievers\\bm25_retriever.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\retrievers\\router_retriever.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\selectors\\embedding_selectors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\selectors\\llm_selectors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\selectors\\llm_selectors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\selectors\\pydantic_selectors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\selectors\\pydantic_selectors.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create a StorageContext from defaults.\n\n        Args:\n            docstore (Optional[BaseDocumentStore]): document store\n            index_store (Optional[BaseIndexStore]): index store\n            vector_store (Optional[VectorStore]): vector store\n            graph_store (Optional[GraphStore]): graph store\n            image_store (Optional[VectorStore]): image store\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\storage_context.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create a StorageContext from dict.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\storage_context.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "vector_store",
            "description": "Backwrds compatibility for vector_store property.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\storage_context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\chat_store\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "set_messages",
            "description": "Set messages for a key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\chat_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_messages",
            "description": "Get messages for a key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\chat_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "add_message",
            "description": "Add a message for a key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\chat_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_messages",
            "description": "Delete messages for a key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\chat_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_message",
            "description": "Delete specific message for a key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\chat_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_last_message",
            "description": "Delete last message for a key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\chat_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_keys",
            "description": "Get all keys.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\chat_store\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\chat_store\\redis_chat_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\chat_store\\simple_chat_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Create a SimpleChatStore from a persist path.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\chat_store\\simple_chat_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_table_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\dynamodb_docstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_database",
            "description": "\n        Args:\n            project (str): The project which the client acts on behalf of.\n            database (str): The database name that the client targets.\n            namespace (str): namespace for the docstore.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\firestore_docstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "docs",
            "description": "Get all documents.\n\n        Returns:\n            Dict[str, BaseDocument]: documents\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\keyval_docstore.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_uri",
            "description": "Load a MongoDocumentStore from a MongoDB URI.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\mongo_docstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_host_and_port",
            "description": "Load a MongoDocumentStore from a MongoDB host and port.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\mongo_docstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_uri",
            "description": "Load a PostgresDocumentStore from a Postgres URI.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\postgres_docstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_params",
            "description": "Load a PostgresDocumentStore from a Postgres host and port.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\postgres_docstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_redis_client",
            "description": "Load a RedisDocumentStore from a Redis Client.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\redis_docstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_host_and_port",
            "description": "Load a RedisDocumentStore from a Redis host and port.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\redis_docstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "Create a SimpleDocumentStore from a persist directory.\n\n        Args:\n            persist_dir (str): directory to persist the store\n            namespace (Optional[str]): namespace for the docstore\n            fs (Optional[fsspec.AbstractFileSystem]): filesystem to use\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\simple_docstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Create a SimpleDocumentStore from a persist path.\n\n        Args:\n            persist_path (str): Path to persist the store\n            namespace (Optional[str]): namespace for the docstore\n            fs (Optional[fsspec.AbstractFileSystem]): filesystem to use\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\simple_docstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\simple_docstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "docs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "add_documents",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "async_add_documents",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_document",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aget_document",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_document",
            "description": "Delete a document from the store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "adelete_document",
            "description": "Delete a document from the store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "document_exists",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "adocument_exists",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "set_document_hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aset_document_hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "set_document_hashes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aset_document_hashes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_document_hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aget_document_hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_all_document_hashes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aget_all_document_hashes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_all_ref_doc_info",
            "description": "Get a mapping of ref_doc_id -> RefDocInfo for all ingested documents.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aget_all_ref_doc_info",
            "description": "Get a mapping of ref_doc_id -> RefDocInfo for all ingested documents.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_ref_doc_info",
            "description": "Get the RefDocInfo for a given ref_doc_id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aget_ref_doc_info",
            "description": "Get the RefDocInfo for a given ref_doc_id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_ref_doc",
            "description": "Delete a ref_doc and all it's associated nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "adelete_ref_doc",
            "description": "Delete a ref_doc and all it's associated nodes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\docstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_table_name",
            "description": "Load DynamoDBIndexStore from a DynamoDB table name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\index_store\\dynamodb_index_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_database",
            "description": "\n        Args:\n            project (str): The project which the client acts on behalf of.\n            database (str): The database name that the client targets.\n            namespace (str): namespace for the docstore.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\index_store\\firestore_indexstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_uri",
            "description": "Load a MongoIndexStore from a MongoDB URI.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\index_store\\mongo_index_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_host_and_port",
            "description": "Load a MongoIndexStore from a MongoDB host and port.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\index_store\\mongo_index_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_uri",
            "description": "Load a PostgresIndexStore from a PostgresURI.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\index_store\\postgres_index_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_params",
            "description": "Load a PostgresIndexStore from a Postgres host and port.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\index_store\\postgres_index_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_redis_client",
            "description": "Load a RedisIndexStore from a Redis Client.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\index_store\\redis_index_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_host_and_port",
            "description": "Load a RedisIndexStore from a Redis host and port.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\index_store\\redis_index_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "Create a SimpleIndexStore from a persist directory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\index_store\\simple_index_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Create a SimpleIndexStore from a persist path.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\index_store\\simple_index_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\index_store\\simple_index_store.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "index_structs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\index_store\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "add_index_struct",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\index_store\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_index_struct",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\index_store\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_index_struct",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\index_store\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_table_name",
            "description": "Load a DynamoDBKVStore from a DynamoDB table name.\n\n        Args:\n            table_name (str): DynamoDB table name\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\dynamodb_kvstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_uri",
            "description": "Load a MongoDBKVStore from a MongoDB URI.\n\n        Args:\n            uri (str): MongoDB URI\n            db_name (Optional[str]): MongoDB database name\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\mongodb_kvstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_host_and_port",
            "description": "Load a MongoDBKVStore from a MongoDB host and port.\n\n        Args:\n            host (str): MongoDB host\n            port (int): MongoDB port\n            db_name (Optional[str]): MongoDB database name\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\mongodb_kvstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_params",
            "description": "Return connection string from database parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\postgres_kvstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_uri",
            "description": "Return connection string from database parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\postgres_kvstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_host_and_port",
            "description": "Load a RedisKVStore from a Redis host and port.\n\n        Args:\n            host (str): Redis host\n            port (int): Redis port\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\redis_kvstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_redis_client",
            "description": "Load a RedisKVStore from a Redis Client.\n\n        Args:\n            redis_client (Redis): Redis client\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\redis_kvstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_s3_location",
            "description": "Load a S3DBKVStore from a S3 URI.\n\n        Args:\n            bucket_name (str): S3 bucket name\n            path (Optional[str]): path to folder in S3 bucket where KV data is stored\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\s3_kvstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Load a SimpleKVStore from a persist path and filesystem.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\simple_kvstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Load a SimpleKVStore from dict.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\simple_kvstore.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "put",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aput",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aget",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "aget_all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "adelete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "persist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Create a BaseInMemoryKVStore from a persist directory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\storage\\kvstore\\types.py",
            "decorator": [
                "classmethod",
                "abstractmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\token_counter\\mock_embed_model.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\function_tool.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "Metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\function_tool.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "fn",
            "description": "Function.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\function_tool.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "async_fn",
            "description": "Async function.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\function_tool.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\ondemand_loader_tool.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "From defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\ondemand_loader_tool.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_tool",
            "description": "From defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\ondemand_loader_tool.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\query_engine.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "query_engine",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\query_engine.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\query_engine.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Initialize from defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\query_plan.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "Metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\query_plan.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\retriever_tool.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "retriever",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\retriever_tool.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\retriever_tool.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "fn_schema_str",
            "description": "Get fn schema as string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "to_openai_function",
            "description": "Deprecated and replaced by `to_openai_tool`.\n        The name and arguments of a function that should be called, as generated by the\n        model.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\types.py",
            "decorator": [
                "deprecated"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\types.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "call",
            "description": "\n        This is the method that should be implemented by the tool developer.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "acall",
            "description": "\n        This is the async version of the call method.\n        Should also be implemented by the tool developer as an\n        async-compatible implementation.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\tool_spec\\load_and_search\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_defaults",
            "description": "From defaults.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tools\\tool_spec\\load_and_search\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "generate_audio",
            "description": "Generate audio from text.\n\n        NOTE: return type is Any, but it should be any object that can be fed\n        as `data` into IPython.display.Audio(). This includes numpy array, list,\n        unicode, str or bytes\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\tts\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "engine",
            "description": "Return SQL Alchemy engine.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\utilities\\sql_wrapper.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata_obj",
            "description": "Return SQL Alchemy metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\utilities\\sql_wrapper.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_uri",
            "description": "Construct a SQLAlchemy engine from URI.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\utilities\\sql_wrapper.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "dialect",
            "description": "Return string representation of dialect to use.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\utilities\\sql_wrapper.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Return the underlying Astra vector table object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\astra.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_query_filters_to_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\astra.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "client",
            "description": "Get AwaDB client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\awadb.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\azureaisearch.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_select_fields",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\azureaisearch.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Return MongoDB client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\azurecosmosmongo.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "\n        Get the Bagel cluster.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\bagel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Return the underlying cassIO vector table object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\cassandra.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_query_filters_to_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\cassandra.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\chatgpt_plugin.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_collection",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\chroma.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_params",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\chroma.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\chroma.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Return client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\chroma.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Get client.\n\n        Returns:\n            Any: DeepLake vectorstore dataset.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\deeplake.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_table_name",
            "description": "Load from DynamoDB table name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\dynamodb.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\dynamodb.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Get async elasticsearch client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\elasticsearch.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_user_agent",
            "description": "Get user agent for elasticsearch client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\elasticsearch.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\faiss.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\faiss.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Return the faiss index.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\faiss.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\jaguar.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\jaguar.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\lancedb.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\lantern.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_params",
            "description": "Return connection string from database parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\lantern.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\lantern.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Return Metal client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\metal.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\milvus.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Return MongoDB client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\mongodb.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\myscale.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\opensearch.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\pgvecto_rs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\pgvecto_rs.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_initialize_pinecone_client",
            "description": "\n        Initialize Pinecone client based on version.\n\n        If client version <3.0.0, use pods-based initialization; else, use serverless initialization.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\pinecone.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_params",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\pinecone.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\pinecone.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Return Pinecone client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\pinecone.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\postgres.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_params",
            "description": "Return connection string from database parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\postgres.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\postgres.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\qdrant.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Return the Qdrant client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\qdrant.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Return the redis client instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\redis.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\rocksetdb.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "with_new_collection",
            "description": "Creates a new collection and returns its RocksetVectorStore.\n\n        Args:\n            dimensions (Optional[int]): The length of the vectors to enforce\n                in the collection's ingest transformation. By default, the\n                collection will do no vector enforcement.\n            collection (str): The name of the collection to be created\n            client (Optional[Any]): Rockset client object\n            workspace (str): The workspace containing the collection to be\n                created (default: \"commons\")\n            text_key (str): The key to the text of nodes\n                (default: llama_index.vector_stores.utils.DEFAULT_TEXT_KEY)\n            embedding_col (str): The DB column containing embeddings\n                (default: llama_index.vector_stores.utils.DEFAULT_EMBEDDING_KEY))\n            metadata_col (str): The DB column containing node metadata\n                (default: \"metadata\")\n            api_server (Optional[str]): The Rockset API server to use\n            api_key (Optional[str]): The Rockset API key to use\n            distance_func (RocksetVectorStore.DistanceFunc): The metric to measure\n                vector relationship\n                (default: RocksetVectorStore.DistanceFunc.COSINE_SIM)\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dimensions": {
                        "type": "string",
                        "description": "The length of the vectors to enforce"
                    },
                    "collection": {
                        "type": "string",
                        "description": "The name of the collection to be created"
                    },
                    "client": {
                        "type": "string",
                        "description": "Rockset client object"
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The workspace containing the collection to be"
                    },
                    "text_key": {
                        "type": "string",
                        "description": "The key to the text of nodes"
                    },
                    "embedding_col": {
                        "type": "string",
                        "description": "The DB column containing embeddings"
                    },
                    "metadata_col": {
                        "type": "string",
                        "description": "The DB column containing node metadata"
                    },
                    "api_server": {
                        "type": "string",
                        "description": "The Rockset API server to use"
                    },
                    "api_key": {
                        "type": "string",
                        "description": "The Rockset API key to use"
                    },
                    "distance_func": {
                        "type": "string",
                        "description": "The metric to measure"
                    }
                },
                "required": [
                    "collection",
                    "workspace",
                    "text_key",
                    "embedding_col",
                    "metadata_col",
                    "distance_func"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\rocksetdb.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "Load from persist dir.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_namespaced_persist_dir",
            "description": "Load from namespaced persist dir.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\simple.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "Create a SimpleKVStore from a persist directory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\simple.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Return SingleStoreDB client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\singlestoredb.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\singlestoredb.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\supabase.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Return the Tair client instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\tair.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_params",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\timescalevector.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_dir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\txtai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_persist_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\txtai.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Return the txtai index.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\txtai.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create MetadataFilter from dictionary.\n\n        Args:\n            filter_dict: Dict with key, value and operator.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\types.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create MetadataFilters from json.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\types.py",
            "decorator": [
                "classmethod",
                "deprecated"
            ]
        },
        {
            "name": "from_dicts",
            "description": "Create MetadataFilters from dicts.\n\n        This takes in a list of individual MetadataFilter objects, along\n        with the condition.\n\n        Args:\n            filter_dicts: List of dicts, each dict is a MetadataFilter.\n            condition: FilterCondition to combine different filters.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\types.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\types.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "add",
            "description": "Add nodes to vector store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete",
            "description": "\n        Delete nodes using with ref_doc_id.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "query",
            "description": "Query vector store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\types.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "client",
            "description": "Return Typesense client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\typesense.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "collection",
            "description": "Return Typesense collection.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\typesense.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_to_typesense_filter",
            "description": "Convert from standard dataclass to typesense filter dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\typesense.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\upstash.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Return the Upstash client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\upstash.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_params",
            "description": "Create WeaviateVectorStore from config.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\weaviate.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\weaviate.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\weaviate.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\zep.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_init_index",
            "description": "Initializes the index.\n\n        This method should be overridden by the subclasses.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\docarray\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_find_docs_to_be_removed",
            "description": "Finds the documents to be removed from the vector store.\n\n        Args:\n            doc_id (str): Document ID that should be removed.\n\n        Returns:\n            List[str]: List of document IDs to be removed.\n\n        This is an abstract method and needs to be implemented in any concrete subclass.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "doc_id": {
                        "type": "string",
                        "description": "Document ID that should be removed."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "doc_id",
                    "Returns"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\docarray\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "client",
            "description": "Get client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\docarray\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_get_schema",
            "description": "Fetches the schema for DocArray indices.\n\n        Args:\n            **embeddings_params: Variable length argument list for the embedding.\n\n        Returns:\n            DocArraySchema: Schema for a DocArray index.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "Returns": {
                        "type": "string"
                    },
                    "DocArraySchema": {
                        "type": "string",
                        "description": "Schema for a DocArray index."
                    }
                },
                "required": [
                    "Returns",
                    "DocArraySchema"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\docarray\\base.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "from_corpus",
            "description": "Create an instance that points to an existing corpus.\n\n        Args:\n            corpus_id: ID of an existing corpus on Google's server.\n\n        Returns:\n            An instance of the vector store that points to the specified corpus.\n\n        Raises:\n            NoSuchCorpusException if no such corpus is found.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\google\\generativeai\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "create_corpus",
            "description": "Create an instance that points to a newly created corpus.\n\n        Examples:\n            store = GoogleVectorStore.create_corpus()\n            print(f\"Created corpus with ID: {store.corpus_id})\n\n            store = GoogleVectorStore.create_corpus(\n                display_name=\"My first corpus\"\n            )\n\n            store = GoogleVectorStore.create_corpus(\n                corpus_id=\"my-corpus-1\",\n                display_name=\"My first corpus\"\n            )\n\n        Args:\n            corpus_id: ID of the new corpus to be created. If not provided,\n                Google server will provide one for you.\n            display_name: Title of the corpus. If not provided, Google server\n                will provide one for you.\n\n        Returns:\n            An instance of the vector store that points to the specified corpus.\n\n        Raises:\n            An exception if the corpus already exists or the user hits the\n            quota limit.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\google\\generativeai\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\google\\generativeai\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\google\\generativeai\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_str",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\google\\generativeai\\genai_extension.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "corpus_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\google\\generativeai\\genai_extension.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_corpus",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\google\\generativeai\\genai_extension.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "corpus_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\google\\generativeai\\genai_extension.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "document_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\google\\generativeai\\genai_extension.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_document",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\google\\generativeai\\genai_extension.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "expired",
            "description": "Returns `False`, test credentials never expire.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\google\\generativeai\\genai_extension.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "valid",
            "description": "Returns `True`, test credentials are always valid.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\legacy\\vector_stores\\google\\generativeai\\genai_extension.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_tokenizer",
            "description": "\n        Get a tokenizer for this model, or None if a tokenizing method is unknown.\n\n        OpenAI can do this using the tiktoken package, subclasses may not have\n        this convenience.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "llm_retry_decorator"
            ]
        },
        {
            "name": "_stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "llm_retry_decorator"
            ]
        },
        {
            "name": "_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "llm_retry_decorator"
            ]
        },
        {
            "name": "_stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "llm_retry_decorator"
            ]
        },
        {
            "name": "achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "_achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "llm_retry_decorator"
            ]
        },
        {
            "name": "_astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "llm_retry_decorator"
            ]
        },
        {
            "name": "_acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "llm_retry_decorator"
            ]
        },
        {
            "name": "_astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "llm_retry_decorator"
            ]
        },
        {
            "name": "structured_predict",
            "description": "Structured predict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "astructured_predict",
            "description": "Structured predict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "stream_structured_predict",
            "description": "Stream structured predict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "stream_structured_predict",
            "description": "Stream structured predict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\base.py",
            "decorator": [
                "dispatcher.span"
            ]
        },
        {
            "name": "to_openai_function",
            "description": "Deprecated in favor of `to_openai_tool`.\n\n    Convert pydantic class to OpenAI function.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\llms\\openai\\utils.py",
            "decorator": [
                "deprecated"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\multi_modal_llms\\openai\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "metadata",
            "description": "Multi Modal LLM metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\multi_modal_llms\\openai\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\multi_modal_llms\\openai\\base.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\multi_modal_llms\\openai\\base.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "_stream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\multi_modal_llms\\openai\\base.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "_stream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\multi_modal_llms\\openai\\base.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "_acomplete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\multi_modal_llms\\openai\\base.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "_astream_complete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\multi_modal_llms\\openai\\base.py",
            "decorator": [
                "llm_completion_callback"
            ]
        },
        {
            "name": "_achat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\multi_modal_llms\\openai\\base.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "_astream_chat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\multi_modal_llms\\openai\\base.py",
            "decorator": [
                "llm_chat_callback"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\program\\openai\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "output_cls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\program\\openai\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\program\\openai\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prompt",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\program\\openai\\base.py",
            "decorator": [
                "prompt.setter"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\question_gen\\openai\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "load_data",
            "description": "Parse file.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\llama_index\\readers\\file\\docs\\base.py",
            "decorator": [
                "retry"
            ]
        },
        {
            "name": "from_api",
            "description": "Set the server url and api key.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\llama_index\\readers\\file\\unstructured\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "serialize",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "attr": {
                        "type": "string"
                    },
                    "obj": {
                        "type": "string"
                    }
                },
                "required": [
                    "attr",
                    "obj"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "deserialize",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_serialize",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "attr": {
                        "type": "string"
                    },
                    "obj": {
                        "type": "string"
                    }
                },
                "required": [
                    "value",
                    "attr",
                    "obj"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_deserialize",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "attr": {
                        "type": "string"
                    },
                    "data": {
                        "type": "string"
                    }
                },
                "required": [
                    "value",
                    "attr",
                    "data"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "dump",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "obj": {
                        "type": "string"
                    }
                },
                "required": [
                    "obj"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "dumps",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "obj": {
                        "type": "string"
                    }
                },
                "required": [
                    "obj"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "load",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string"
                    }
                },
                "required": [
                    "data"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "loads",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "json_data": {
                        "type": "string"
                    }
                },
                "required": [
                    "json_data"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "messages_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\marshmallow\\exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_validate_all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\marshmallow\\fields.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "context",
            "description": "The context dictionary for the parent :class:`Schema`.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\marshmallow\\fields.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\marshmallow\\fields.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\fields.py",
            "decorator": [
                "default.setter"
            ]
        },
        {
            "name": "missing",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\marshmallow\\fields.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "missing",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\fields.py",
            "decorator": [
                "missing.setter"
            ]
        },
        {
            "name": "schema",
            "description": "The nested Schema object.\n\n        .. versionchanged:: 1.0.0\n            Renamed from `serializer` to `schema`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\marshmallow\\fields.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_field_data_key",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\marshmallow\\fields.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_make_object_from_format",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "data_format": {
                        "type": "string"
                    }
                },
                "required": [
                    "value",
                    "data_format"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\fields.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_make_object_from_format",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "data_format": {
                        "type": "string"
                    }
                },
                "required": [
                    "value",
                    "data_format"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\fields.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_make_object_from_format",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "data_format": {
                        "type": "string"
                    }
                },
                "required": [
                    "value",
                    "data_format"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\fields.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_declared_fields",
            "description": "Returns a dictionary of field_name => `Field` pairs declared on the class.\n        This is exposed mainly so that plugins can add additional fields, e.g. fields\n        computed from class Meta options.\n\n        :param klass: The class object.\n        :param cls_fields: The fields declared on the class, including those added\n            by the ``include`` class Meta option.\n        :param inherited_fields: Inherited fields.\n        :param dict_cls: dict-like class to use for dict output Default to ``dict``.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mcs": {
                        "type": "string"
                    }
                },
                "required": [
                    "mcs"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "dict_class",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\marshmallow\\schema.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_dict",
            "description": "Generate a `Schema` class given a dictionary of fields.\n\n        .. code-block:: python\n\n            from marshmallow import Schema, fields\n\n            PersonSchema = Schema.from_dict({\"name\": fields.Str()})\n            print(PersonSchema().load({\"name\": \"David\"}))  # => {'name': 'David'}\n\n        Generated schemas are not added to the class registry and therefore cannot\n        be referred to by name in `Nested` fields.\n\n        :param dict fields: Dictionary mapping field names to field instances.\n        :param str name: Optional name for the class, which will appear in\n            the ``repr`` for the class.\n\n        .. versionadded:: 3.0.0\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\schema.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_call_and_store",
            "description": "Call ``getter_func`` with ``data`` as its argument, and store any `ValidationErrors`.\n\n        :param callable getter_func: Function for getting the serialized/deserialized\n            value from ``data``.\n        :param data: The data passed to ``getter_func``.\n        :param str field_name: Field name.\n        :param int index: Index of the item being validated, if validating a collection,\n            otherwise `None`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "getter_func": {
                        "type": "string"
                    },
                    "data": {
                        "type": "string"
                    },
                    "field_name": {
                        "type": "string"
                    },
                    "error_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "getter_func",
                    "data",
                    "field_name",
                    "error_store"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\schema.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_has_processors",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tag": {
                        "type": "string"
                    }
                },
                "required": [
                    "tag"
                ]
            },
            "file": "ipfs_embeddings_py\\marshmallow\\schema.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\marshmallow\\validate.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\marshmallow\\validate.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\marshmallow\\validate.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "_parse_nodes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\node_parser\\interface.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "split_text",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\node_parser\\interface.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "split_text_metadata_aware",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\node_parser\\interface.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\file\\html.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\file\\html.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\file\\json.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\file\\json.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\file\\markdown.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\file\\markdown.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\file\\simple_file.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "Get class name.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\file\\simple_file.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\relational\\base_element.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\relational\\base_element.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_nodes_from_node",
            "description": "Get nodes from node.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\node_parser\\relational\\base_element.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "extract_elements",
            "description": "Extract elements from text.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "ipfs_embeddings_py\\node_parser\\relational\\base_element.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\relational\\hierarchical.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\relational\\hierarchical.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\relational\\llama_parse_json_element.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\relational\\markdown_element.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\relational\\unstructured_element.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Create a CodeSplitter with default values.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\text\\code.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\text\\code.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\text\\semantic_double_merging_splitter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\text\\semantic_double_merging_splitter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\text\\semantic_splitter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\text\\semantic_splitter.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\text\\sentence_window.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\text\\sentence_window.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_defaults",
            "description": "Initialize with default parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\text\\token.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "class_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "ipfs_embeddings_py\\node_parser\\text\\token.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "embed_documents",
            "description": "Generate embeddings for a list of documents.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\embedding_service.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "embed_query",
            "description": "Generate embedding for a single query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\embedding_service.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_dimension",
            "description": "Get the embedding dimension.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\embedding_service.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "initialize",
            "description": "Initialize the embedding provider.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\embedding_service.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "cleanup",
            "description": "Cleanup resources.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\embedding_service.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "connect",
            "description": "Establish connection to the vector database.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "disconnect",
            "description": "Close connection to the vector database.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "ping",
            "description": "Test connection to the vector database.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "is_connected",
            "description": "Check if connected to the database.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "create_index",
            "description": "\n        Create a new vector index.\n        \n        Args:\n            index_name: Name of the index\n            dimension: Vector dimension\n            distance_metric: Distance metric (cosine, euclidean, etc.)\n            index_config: Additional index configuration\n            \n        Returns:\n            True if index created successfully\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_name": {
                        "type": "string",
                        "description": "Name of the index"
                    },
                    "dimension": {
                        "type": "string",
                        "description": "Vector dimension"
                    },
                    "distance_metric": {
                        "type": "string",
                        "description": "Distance metric (cosine, euclidean, etc.)"
                    },
                    "index_config": {
                        "type": "string",
                        "description": "Additional index configuration"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "index_name",
                    "dimension",
                    "distance_metric",
                    "index_config",
                    "Returns"
                ]
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_index",
            "description": "\n        Delete a vector index.\n        \n        Args:\n            index_name: Name of the index to delete\n            \n        Returns:\n            True if index deleted successfully\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_name": {
                        "type": "string",
                        "description": "Name of the index to delete"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "index_name",
                    "Returns"
                ]
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "index_exists",
            "description": "\n        Check if an index exists.\n        \n        Args:\n            index_name: Name of the index\n            \n        Returns:\n            True if index exists\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_name": {
                        "type": "string",
                        "description": "Name of the index"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "index_name",
                    "Returns"
                ]
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "list_indexes",
            "description": "\n        List all available indexes.\n        \n        Returns:\n            List of index names\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "add_vectors",
            "description": "\n        Add vectors to the index.\n        \n        Args:\n            documents: List of documents to add\n            index_name: Target index name (uses default if None)\n            \n        Returns:\n            True if vectors added successfully\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "documents": {
                        "type": "string",
                        "description": "List of documents to add"
                    },
                    "index_name": {
                        "type": "string",
                        "description": "Target index name (uses default if None)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "documents",
                    "index_name",
                    "Returns"
                ]
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "update_vectors",
            "description": "\n        Update existing vectors in the index.\n        \n        Args:\n            documents: List of documents to update\n            index_name: Target index name (uses default if None)\n            \n        Returns:\n            True if vectors updated successfully\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "documents": {
                        "type": "string",
                        "description": "List of documents to update"
                    },
                    "index_name": {
                        "type": "string",
                        "description": "Target index name (uses default if None)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "documents",
                    "index_name",
                    "Returns"
                ]
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_vectors",
            "description": "\n        Delete vectors from the index.\n        \n        Args:\n            vector_ids: List of vector IDs to delete\n            index_name: Target index name (uses default if None)\n            \n        Returns:\n            True if vectors deleted successfully\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "vector_ids": {
                        "type": "string",
                        "description": "List of vector IDs to delete"
                    },
                    "index_name": {
                        "type": "string",
                        "description": "Target index name (uses default if None)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "vector_ids",
                    "index_name",
                    "Returns"
                ]
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_vector",
            "description": "\n        Retrieve a specific vector by ID.\n        \n        Args:\n            vector_id: ID of the vector to retrieve\n            index_name: Target index name (uses default if None)\n            \n        Returns:\n            Vector document or None if not found\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "vector_id": {
                        "type": "string",
                        "description": "ID of the vector to retrieve"
                    },
                    "index_name": {
                        "type": "string",
                        "description": "Target index name (uses default if None)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "vector_id",
                    "index_name",
                    "Returns"
                ]
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "search",
            "description": "\n        Perform vector similarity search.\n        \n        Args:\n            query: Search query parameters\n            index_name: Target index name (uses default if None)\n            \n        Returns:\n            List of search results\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Search query parameters"
                    },
                    "index_name": {
                        "type": "string",
                        "description": "Target index name (uses default if None)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "query",
                    "index_name",
                    "Returns"
                ]
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "hybrid_search",
            "description": "\n        Perform hybrid vector + text search.\n        \n        Args:\n            vector_query: Query vector\n            text_query: Text query\n            vector_weight: Weight for vector similarity\n            text_weight: Weight for text similarity\n            limit: Maximum number of results\n            index_name: Target index name (uses default if None)\n            \n        Returns:\n            List of search results\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "vector_query": {
                        "type": "string",
                        "description": "Query vector"
                    },
                    "text_query": {
                        "type": "string",
                        "description": "Text query"
                    },
                    "vector_weight": {
                        "type": "string",
                        "description": "Weight for vector similarity"
                    },
                    "text_weight": {
                        "type": "string",
                        "description": "Weight for text similarity"
                    },
                    "limit": {
                        "type": "string",
                        "description": "Maximum number of results"
                    },
                    "index_name": {
                        "type": "string",
                        "description": "Target index name (uses default if None)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "vector_query",
                    "text_query",
                    "vector_weight",
                    "text_weight",
                    "limit",
                    "index_name",
                    "Returns"
                ]
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "batch_search",
            "description": "\n        Perform batch vector searches.\n        \n        Args:\n            queries: List of search queries\n            index_name: Target index name (uses default if None)\n            \n        Returns:\n            List of result lists (one per query)\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "queries": {
                        "type": "string",
                        "description": "List of search queries"
                    },
                    "index_name": {
                        "type": "string",
                        "description": "Target index name (uses default if None)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "queries",
                    "index_name",
                    "Returns"
                ]
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_index_stats",
            "description": "\n        Get index statistics.\n        \n        Args:\n            index_name: Target index name (uses default if None)\n            \n        Returns:\n            Index statistics\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_name": {
                        "type": "string",
                        "description": "Target index name (uses default if None)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "index_name",
                    "Returns"
                ]
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_health_status",
            "description": "\n        Get health status of the vector store.\n        \n        Returns:\n            Health status information\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\vector_store_base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "is_connected",
            "description": "Check if connected to Elasticsearch.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\providers\\elasticsearch_store.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "database_type",
            "description": "Get database type identifier.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\providers\\elasticsearch_store.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_connected",
            "description": "Check if connected to PostgreSQL.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\providers\\pgvector_store.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "database_type",
            "description": "Get database type identifier.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\providers\\pgvector_store.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_connected",
            "description": "Check if connected to Qdrant.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\providers\\qdrant_store.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "database_type",
            "description": "Get database type identifier.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "services\\providers\\qdrant_store.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "add_endpoint",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\archive\\main_old.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "create_embeddings_post",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\archive\\main_old.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "load_index_post",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\archive\\main_old.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "search_item_post",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\archive\\main_old.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "shard_embeddings_post",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\archive\\main_old.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "index_sparse_embeddings_post",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\archive\\main_old.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "index_cluster_post",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\archive\\main_old.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "storacha_clusters_post",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\archive\\main_old.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "from_env_file",
            "description": "Load configuration from environment file.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\mcp_server\\config.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "startup_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\fastapi_integration.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "shutdown_event",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\fastapi_integration.py",
            "decorator": [
                "app.on_event"
            ]
        },
        {
            "name": "list_tools_endpoint",
            "description": "\n        Lists all available tools exposed by the MCP server.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\fastapi_integration.py",
            "decorator": [
                "app.get"
            ]
        },
        {
            "name": "call_tool_endpoint",
            "description": "\n        Calls a specific tool with provided arguments.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\fastapi_integration.py",
            "decorator": [
                "app.post"
            ]
        },
        {
            "name": "execute",
            "description": "Execute the tool with given parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tool_registry.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "parameters_schema",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tools\\analysis_tools.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parameters_schema",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tools\\analysis_tools.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parameters_schema",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tools\\analysis_tools.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "create",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server\\tools\\vector_store_tools_old.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "setup_testing_environment",
            "description": "Set up the testing environment for integration tests.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "temp_directory",
            "description": "Create temporary directory for test files.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_vectors",
            "description": "Generate sample vectors for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_texts",
            "description": "Generate sample texts corresponding to vectors.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_metadata",
            "description": "Generate sample metadata for vectors.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_problematic_imports",
            "description": "Mock problematic imports that cause torchvision/transformers issues.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "timeout_context",
            "description": "Context manager for timeout protection",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "seconds": {
                        "type": "string"
                    }
                },
                "required": [
                    "seconds"
                ]
            },
            "file": "test\\hanging_diagnostic.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "mock_sklearn",
            "description": "Mock scikit-learn components.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_clustering_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "cluster_config",
            "description": "Create test cluster configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_clustering_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_vectors",
            "description": "Create sample vectors for clustering.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_clustering_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_vector_service",
            "description": "Mock vector service for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_clustering_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_clusterer",
            "description": "Mock vector clusterer.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sklearn": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sklearn"
                ]
            },
            "file": "test\\test_clustering_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "smart_sharding",
            "description": "Create smart sharding service.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_service": {
                        "type": "string"
                    },
                    "mock_clusterer": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_service",
                    "mock_clusterer"
                ]
            },
            "file": "test\\test_clustering_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_create_clustered_shards",
            "description": "Test creating clustered shards.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "smart_sharding": {
                        "type": "string"
                    },
                    "mock_vector_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "smart_sharding",
                    "mock_vector_service"
                ]
            },
            "file": "test\\test_clustering_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_clustered_shards",
            "description": "Test searching with cluster-aware routing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "smart_sharding": {
                        "type": "string"
                    },
                    "mock_vector_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "smart_sharding",
                    "mock_vector_service"
                ]
            },
            "file": "test\\test_clustering_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_with_limited_clusters",
            "description": "Test searching with limited number of clusters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "smart_sharding": {
                        "type": "string"
                    },
                    "mock_vector_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "smart_sharding",
                    "mock_vector_service"
                ]
            },
            "file": "test\\test_clustering_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_without_clustering_info",
            "description": "Test searching when no clustering information is available.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "smart_sharding": {
                        "type": "string"
                    },
                    "mock_vector_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "smart_sharding",
                    "mock_vector_service"
                ]
            },
            "file": "test\\test_clustering_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_error_handling_in_clustered_search",
            "description": "Test error handling during clustered search.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "smart_sharding": {
                        "type": "string"
                    },
                    "mock_vector_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "smart_sharding",
                    "mock_vector_service"
                ]
            },
            "file": "test\\test_clustering_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_end_to_end_clustering_workflow",
            "description": "Test complete clustering workflow.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sklearn": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sklearn"
                ]
            },
            "file": "test\\test_clustering_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_adaptive_cluster_search",
            "description": "Test adaptive cluster selection for search.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sklearn": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sklearn"
                ]
            },
            "file": "test\\test_clustering_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_concurrent_shard_operations",
            "description": "Test concurrent operations on multiple shards.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_sklearn": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_sklearn"
                ]
            },
            "file": "test\\test_clustering_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "sample_vectors",
            "description": "Generate sample vectors for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_complete_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_texts",
            "description": "Generate sample texts corresponding to vectors.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_complete_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_metadata",
            "description": "Generate sample metadata for vectors.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_complete_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "temp_directory",
            "description": "Create temporary directory for test files.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_complete_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_external_dependencies",
            "description": "Mock all external dependencies for isolated testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_complete_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_vector_service_complete_workflow",
            "description": "Test complete vector service workflow: add, search, save, load.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sample_vectors": {
                        "type": "string"
                    },
                    "sample_texts": {
                        "type": "string"
                    },
                    "sample_metadata": {
                        "type": "string"
                    },
                    "temp_directory": {
                        "type": "string"
                    }
                },
                "required": [
                    "sample_vectors",
                    "sample_texts",
                    "sample_metadata",
                    "temp_directory"
                ]
            },
            "file": "test\\test_complete_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_different_index_types",
            "description": "Test different FAISS index types.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sample_vectors": {
                        "type": "string"
                    }
                },
                "required": [
                    "sample_vectors"
                ]
            },
            "file": "test\\test_complete_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_ipfs_vector_service_workflow",
            "description": "Test complete IPFS vector service workflow.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sample_vectors": {
                        "type": "string"
                    },
                    "sample_texts": {
                        "type": "string"
                    },
                    "sample_metadata": {
                        "type": "string"
                    }
                },
                "required": [
                    "sample_vectors",
                    "sample_texts",
                    "sample_metadata"
                ]
            },
            "file": "test\\test_complete_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_distributed_vector_index_sharding",
            "description": "Test vector sharding in distributed index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sample_vectors": {
                        "type": "string"
                    }
                },
                "required": [
                    "sample_vectors"
                ]
            },
            "file": "test\\test_complete_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_smart_sharding_complete_workflow",
            "description": "Test complete smart sharding workflow with clustering.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sample_vectors": {
                        "type": "string"
                    },
                    "sample_texts": {
                        "type": "string"
                    },
                    "sample_metadata": {
                        "type": "string"
                    }
                },
                "required": [
                    "sample_vectors",
                    "sample_texts",
                    "sample_metadata"
                ]
            },
            "file": "test\\test_complete_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_different_clustering_algorithms",
            "description": "Test different clustering algorithms.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sample_vectors": {
                        "type": "string"
                    }
                },
                "required": [
                    "sample_vectors"
                ]
            },
            "file": "test\\test_complete_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_end_to_end_rag_workflow",
            "description": "Test complete end-to-end RAG workflow.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sample_vectors": {
                        "type": "string"
                    },
                    "sample_texts": {
                        "type": "string"
                    },
                    "sample_metadata": {
                        "type": "string"
                    }
                },
                "required": [
                    "sample_vectors",
                    "sample_texts",
                    "sample_metadata"
                ]
            },
            "file": "test\\test_complete_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_large_dataset_handling",
            "description": "Test handling of larger datasets.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_complete_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_concurrent_operations",
            "description": "Test concurrent vector operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sample_vectors": {
                        "type": "string"
                    }
                },
                "required": [
                    "sample_vectors"
                ]
            },
            "file": "test\\test_complete_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_ipfs_client",
            "description": "Mock IPFS HTTP client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_ipfshttpclient",
            "description": "Mock ipfshttpclient module.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_ipfs_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_ipfs_client"
                ]
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "ipfs_config",
            "description": "IPFS configuration for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "ipfs_storage",
            "description": "Create IPFS storage instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ipfs_config": {
                        "type": "string"
                    },
                    "mock_ipfshttpclient": {
                        "type": "string"
                    }
                },
                "required": [
                    "ipfs_config",
                    "mock_ipfshttpclient"
                ]
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_store_vector_shard",
            "description": "Test storing vector shard in IPFS.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ipfs_storage": {
                        "type": "string"
                    },
                    "mock_ipfs_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "ipfs_storage",
                    "mock_ipfs_client"
                ]
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_retrieve_vector_shard",
            "description": "Test retrieving vector shard from IPFS.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ipfs_storage": {
                        "type": "string"
                    },
                    "mock_ipfs_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "ipfs_storage",
                    "mock_ipfs_client"
                ]
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_store_index_manifest",
            "description": "Test storing index manifest.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ipfs_storage": {
                        "type": "string"
                    },
                    "mock_ipfs_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "ipfs_storage",
                    "mock_ipfs_client"
                ]
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_retrieve_index_manifest",
            "description": "Test retrieving index manifest.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ipfs_storage": {
                        "type": "string"
                    },
                    "mock_ipfs_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "ipfs_storage",
                    "mock_ipfs_client"
                ]
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_vector_service",
            "description": "Mock vector service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_ipfs_storage",
            "description": "Mock IPFS storage.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "distributed_index",
            "description": "Create distributed vector index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_service": {
                        "type": "string"
                    },
                    "mock_ipfs_storage": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_service",
                    "mock_ipfs_storage"
                ]
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_add_vectors_distributed",
            "description": "Test adding vectors to distributed index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "distributed_index": {
                        "type": "string"
                    },
                    "mock_ipfs_storage": {
                        "type": "string"
                    }
                },
                "required": [
                    "distributed_index",
                    "mock_ipfs_storage"
                ]
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_distributed",
            "description": "Test searching across distributed shards.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "distributed_index": {
                        "type": "string"
                    },
                    "mock_vector_service": {
                        "type": "string"
                    },
                    "mock_ipfs_storage": {
                        "type": "string"
                    }
                },
                "required": [
                    "distributed_index",
                    "mock_vector_service",
                    "mock_ipfs_storage"
                ]
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_load_from_manifest",
            "description": "Test loading distributed index from manifest.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "distributed_index": {
                        "type": "string"
                    },
                    "mock_ipfs_storage": {
                        "type": "string"
                    }
                },
                "required": [
                    "distributed_index",
                    "mock_ipfs_storage"
                ]
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_shard_creation",
            "description": "Test automatic shard creation based on shard_size.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "distributed_index": {
                        "type": "string"
                    }
                },
                "required": [
                    "distributed_index"
                ]
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_error_handling_in_search",
            "description": "Test error handling during distributed search.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "distributed_index": {
                        "type": "string"
                    },
                    "mock_ipfs_storage": {
                        "type": "string"
                    }
                },
                "required": [
                    "distributed_index",
                    "mock_ipfs_storage"
                ]
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_round_trip_vector_storage",
            "description": "Test complete round-trip of vector storage and retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_ipfshttpclient": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_ipfshttpclient"
                ]
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_manifest_consistency",
            "description": "Test manifest consistency across operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_ipfshttpclient": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_ipfshttpclient"
                ]
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_large_shard_storage",
            "description": "Test storing large vector shards.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_ipfshttpclient": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_ipfshttpclient"
                ]
            },
            "file": "test\\test_ipfs_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_all_tools_listed",
            "description": "Test all expected tools are available",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mcp_server": {
                        "type": "string"
                    }
                },
                "required": [
                    "mcp_server"
                ]
            },
            "file": "test\\test_mcp_tools_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_tools_have_valid_schemas",
            "description": "Test all tools have valid input schemas",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mcp_server": {
                        "type": "string"
                    }
                },
                "required": [
                    "mcp_server"
                ]
            },
            "file": "test\\test_mcp_tools_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_mcp_protocol_methods",
            "description": "Test MCP protocol method handling",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mcp_server": {
                        "type": "string"
                    }
                },
                "required": [
                    "mcp_server"
                ]
            },
            "file": "test\\test_mcp_tools_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_tool_execution_basic",
            "description": "Test basic tool execution (non-destructive tools only)",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mcp_server": {
                        "type": "string"
                    }
                },
                "required": [
                    "mcp_server"
                ]
            },
            "file": "test\\test_mcp_tools_comprehensive.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "temp_dir",
            "description": "Create a temporary directory for test files.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "vector_config",
            "description": "Create test vector configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_vectors",
            "description": "Create test vectors.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "vector_config",
            "description": "Create test vector configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_vectors",
            "description": "Create test vectors.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_metadata",
            "description": "Create test metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_add_vectors_with_metadata",
            "description": "Test adding vectors with metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "vector_config": {
                        "type": "string"
                    },
                    "test_vectors": {
                        "type": "string"
                    },
                    "test_metadata": {
                        "type": "string"
                    }
                },
                "required": [
                    "vector_config",
                    "test_vectors",
                    "test_metadata"
                ]
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_vectors_with_metadata",
            "description": "Test searching vectors with metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "vector_config": {
                        "type": "string"
                    },
                    "test_vectors": {
                        "type": "string"
                    },
                    "test_metadata": {
                        "type": "string"
                    }
                },
                "required": [
                    "vector_config",
                    "test_vectors",
                    "test_metadata"
                ]
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_vector_by_id",
            "description": "Test retrieving vector by ID.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "vector_config": {
                        "type": "string"
                    },
                    "test_vectors": {
                        "type": "string"
                    },
                    "test_metadata": {
                        "type": "string"
                    }
                },
                "required": [
                    "vector_config",
                    "test_vectors",
                    "test_metadata"
                ]
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_index_stats",
            "description": "Test getting index statistics.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "vector_config": {
                        "type": "string"
                    },
                    "test_vectors": {
                        "type": "string"
                    },
                    "test_metadata": {
                        "type": "string"
                    }
                },
                "required": [
                    "vector_config",
                    "test_vectors",
                    "test_metadata"
                ]
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_save_and_load_service",
            "description": "Test saving and loading complete service state.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "vector_config": {
                        "type": "string"
                    },
                    "test_vectors": {
                        "type": "string"
                    },
                    "test_metadata": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "vector_config",
                    "test_vectors",
                    "test_metadata",
                    "temp_dir"
                ]
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_clear_index",
            "description": "Test clearing index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "vector_config": {
                        "type": "string"
                    },
                    "test_vectors": {
                        "type": "string"
                    },
                    "test_metadata": {
                        "type": "string"
                    }
                },
                "required": [
                    "vector_config",
                    "test_vectors",
                    "test_metadata"
                ]
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_error_handling_mismatched_vectors_metadata",
            "description": "Test error handling for mismatched vectors and metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "vector_config": {
                        "type": "string"
                    }
                },
                "required": [
                    "vector_config"
                ]
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_error_handling_invalid_dimension",
            "description": "Test error handling for invalid vector dimensions.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "vector_config": {
                        "type": "string"
                    }
                },
                "required": [
                    "vector_config"
                ]
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "vector_config",
            "description": "Create test vector configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_async_search",
            "description": "Test asynchronous vector search.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "vector_config": {
                        "type": "string"
                    }
                },
                "required": [
                    "vector_config"
                ]
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_large_dataset_handling",
            "description": "Test handling of larger datasets.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_different_index_types",
            "description": "Test different FAISS index types.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_vector_service.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_services",
            "description": "Create mock services for all tools",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\integration\\test_mcp_tool_workflows.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_complete_embedding_pipeline",
            "description": "Test complete embedding pipeline: create -> store -> search",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_services": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_services"
                ]
            },
            "file": "test\\integration\\test_mcp_tool_workflows.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_batch_processing_workflow",
            "description": "Test batch processing workflow with large datasets",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_services": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_services"
                ]
            },
            "file": "test\\integration\\test_mcp_tool_workflows.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sparse_embedding_workflow",
            "description": "Test sparse embedding generation and search workflow",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_services": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_services"
                ]
            },
            "file": "test\\integration\\test_mcp_tool_workflows.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_distributed_storage_workflow",
            "description": "Test distributed storage workflow with IPFS clustering",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_services": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_services"
                ]
            },
            "file": "test\\integration\\test_mcp_tool_workflows.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_session_managed_workflow",
            "description": "Test workflow with session management",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_services": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_services"
                ]
            },
            "file": "test\\integration\\test_mcp_tool_workflows.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_services",
            "description": "Create mock services for tool chaining tests",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\integration\\test_mcp_tool_workflows.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_embedding_analysis_chain",
            "description": "Test chaining embedding generation -> quality analysis -> clustering",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_services": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_services"
                ]
            },
            "file": "test\\integration\\test_mcp_tool_workflows.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_refinement_chain",
            "description": "Test chaining search -> similarity search -> collection management",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_services": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_services"
                ]
            },
            "file": "test\\integration\\test_mcp_tool_workflows.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_services",
            "description": "Create mock services with potential failure points",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\integration\\test_mcp_tool_workflows.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_workflow_with_service_failure",
            "description": "Test workflow handling when intermediate service fails",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_services": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_services"
                ]
            },
            "file": "test\\integration\\test_mcp_tool_workflows.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_workflow_with_partial_failures",
            "description": "Test workflow handling with partial failures and retries",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_services": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_services"
                ]
            },
            "file": "test\\integration\\test_mcp_tool_workflows.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_services",
            "description": "Create mock services with performance metrics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\integration\\test_mcp_tool_workflows.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_concurrent_tool_execution",
            "description": "Test concurrent execution of multiple tools",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_services": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_services"
                ]
            },
            "file": "test\\integration\\test_mcp_tool_workflows.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "setUpClass",
            "description": "Set up temporary directories and resources.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "test\\integration\\test_vector_integration.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "tearDownClass",
            "description": "Clean up temporary resources.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "test\\integration\\test_vector_integration.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "test_faiss_store_basic",
            "description": "Test basic FAISS store functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\integration\\test_vector_integration.py",
            "decorator": [
                "unittest.skipUnless"
            ]
        },
        {
            "name": "test_ipfs_store_basic",
            "description": "Test basic IPFS store functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\integration\\test_vector_integration.py",
            "decorator": [
                "unittest.skipUnless"
            ]
        },
        {
            "name": "test_duckdb_store_basic",
            "description": "Test basic DuckDB store functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\integration\\test_vector_integration.py",
            "decorator": [
                "unittest.skipUnless"
            ]
        },
        {
            "name": "mock_ipfs_client",
            "description": "Mock IPFS HTTP client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\ipfs\\test_ipfs_fixed.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "ipfs_config",
            "description": "IPFS configuration for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\ipfs\\test_ipfs_fixed.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "ipfs_storage",
            "description": "Create IPFS storage instance with mocked client.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ipfs_config": {
                        "type": "string"
                    },
                    "mock_ipfs_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "ipfs_config",
                    "mock_ipfs_client"
                ]
            },
            "file": "test\\ipfs\\test_ipfs_fixed.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "distributed_vectors",
            "description": "Create test vectors for distributed index testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\ipfs\\test_ipfs_fixed.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_store_vector_shard",
            "description": "Test storing vector shard in IPFS.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ipfs_storage": {
                        "type": "string"
                    },
                    "mock_ipfs_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "ipfs_storage",
                    "mock_ipfs_client"
                ]
            },
            "file": "test\\ipfs\\test_ipfs_fixed.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_retrieve_vector_shard",
            "description": "Test retrieving vector shard from IPFS.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ipfs_storage": {
                        "type": "string"
                    },
                    "mock_ipfs_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "ipfs_storage",
                    "mock_ipfs_client"
                ]
            },
            "file": "test\\ipfs\\test_ipfs_fixed.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_store_index_manifest",
            "description": "Test storing index manifest in IPFS.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ipfs_storage": {
                        "type": "string"
                    },
                    "mock_ipfs_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "ipfs_storage",
                    "mock_ipfs_client"
                ]
            },
            "file": "test\\ipfs\\test_ipfs_fixed.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_retrieve_index_manifest",
            "description": "Test retrieving index manifest from IPFS.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ipfs_storage": {
                        "type": "string"
                    },
                    "mock_ipfs_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "ipfs_storage",
                    "mock_ipfs_client"
                ]
            },
            "file": "test\\ipfs\\test_ipfs_fixed.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_distributed_vector_index",
            "description": "Test distributed vector index with IPFS storage.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ipfs_storage": {
                        "type": "string"
                    },
                    "distributed_vectors": {
                        "type": "string"
                    }
                },
                "required": [
                    "ipfs_storage",
                    "distributed_vectors"
                ]
            },
            "file": "test\\ipfs\\test_ipfs_fixed.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_distributed",
            "description": "Test searching in distributed index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ipfs_storage": {
                        "type": "string"
                    },
                    "mock_ipfs_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "ipfs_storage",
                    "mock_ipfs_client"
                ]
            },
            "file": "test\\ipfs\\test_ipfs_fixed.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_ipfs_connection_failure",
            "description": "Test handling of IPFS connection failures.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\ipfs\\test_ipfs_fixed.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_missing_ipfs_client",
            "description": "Test handling of missing IPFS client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\ipfs\\test_ipfs_fixed.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_manifest_consistency",
            "description": "Test consistency between stored and retrieved manifests.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ipfs_storage": {
                        "type": "string"
                    }
                },
                "required": [
                    "ipfs_storage"
                ]
            },
            "file": "test\\ipfs\\test_ipfs_fixed.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "patched_add_vectors_distributed",
            "description": "Patched version of add_vectors_distributed for tests",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "vectors": {
                        "type": "string"
                    }
                },
                "required": [
                    "vectors"
                ]
            },
            "file": "test\\ipfs\\test_patches.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "patched_search_distributed",
            "description": "Patched version of search_distributed for tests",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query_vector": {
                        "type": "string"
                    }
                },
                "required": [
                    "query_vector"
                ]
            },
            "file": "test\\ipfs\\test_patches.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "patched_load_from_manifest",
            "description": "Patched version of load_from_manifest for tests",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "manifest_hash": {
                        "type": "string"
                    }
                },
                "required": [
                    "manifest_hash"
                ]
            },
            "file": "test\\ipfs\\test_patches.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "auth_headers",
            "description": "Get authentication headers for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\performance\\test_benchmarks.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_search_endpoint_success",
            "description": "Test successful search request",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_search": {
                        "type": "string"
                    },
                    "sample_search_request": {
                        "type": "string"
                    },
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_search",
                    "sample_search_request",
                    "client"
                ]
            },
            "file": "test\\unit\\test_main_api.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "mock_ipfs_service",
            "description": "Mock IPFS vector service for testing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tool",
            "description": "Create tool instance for testing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_ipfs_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_ipfs_service"
                ]
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_create_cluster_success",
            "description": "Test successful cluster creation",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_ipfs_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_ipfs_service"
                ]
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_add_vectors_to_cluster",
            "description": "Test adding vectors to cluster",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_ipfs_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_ipfs_service"
                ]
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_cluster_status",
            "description": "Test getting cluster status",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_ipfs_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_ipfs_service"
                ]
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_invalid_operation",
            "description": "Test invalid operation handling",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_service_error_handling",
            "description": "Test service error handling",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_ipfs_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_ipfs_service"
                ]
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_distributed_service",
            "description": "Mock distributed vector service for testing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tool",
            "description": "Create tool instance for testing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_distributed_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_distributed_service"
                ]
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_distribute_vectors_success",
            "description": "Test successful vector distribution",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_distributed_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_distributed_service"
                ]
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_retrieve_vectors_success",
            "description": "Test successful vector retrieval",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_distributed_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_distributed_service"
                ]
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_distribute_large_dataset",
            "description": "Test distributing large dataset",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_distributed_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_distributed_service"
                ]
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_ipfs_service",
            "description": "Mock IPFS vector service for testing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tool",
            "description": "Create tool instance for testing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_ipfs_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_ipfs_service"
                ]
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_store_metadata_success",
            "description": "Test successful metadata storage",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_ipfs_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_ipfs_service"
                ]
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_retrieve_metadata_success",
            "description": "Test successful metadata retrieval",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_ipfs_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_ipfs_service"
                ]
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_metadata_success",
            "description": "Test successful metadata update",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_ipfs_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_ipfs_service"
                ]
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_metadata_validation_error",
            "description": "Test metadata validation error",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_invalid_hash_format",
            "description": "Test invalid hash format handling",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_full_cluster_workflow",
            "description": "Test complete cluster creation and vector storage workflow",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_mcp_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_embedding_service",
            "description": "Mock embedding service for testing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tool",
            "description": "Create tool instance for testing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_create_session_success",
            "description": "Test successful session creation",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_session_minimal_params",
            "description": "Test session creation with minimal parameters",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_session_mock_fallback",
            "description": "Test session creation with mock fallback (no service)",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_session_validation_error",
            "description": "Test session creation with validation error",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_session_service_error",
            "description": "Test session creation service error handling",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_embedding_service",
            "description": "Mock embedding service for testing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tool",
            "description": "Create tool instance for testing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_monitor_single_session",
            "description": "Test monitoring a single session",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_monitor_all_sessions",
            "description": "Test monitoring all sessions",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_monitor_high_usage_sessions",
            "description": "Test monitoring high usage sessions",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_monitor_sessions_mock_fallback",
            "description": "Test session monitoring with mock fallback (no service)",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_monitor_sessions_validation_error",
            "description": "Test session monitoring with validation error",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_monitor_sessions_service_error",
            "description": "Test session monitoring service error handling",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_embedding_service",
            "description": "Mock embedding service for testing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tool",
            "description": "Create tool instance for testing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_terminate_session",
            "description": "Test session termination",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_extend_session",
            "description": "Test session extension",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cleanup_expired_sessions",
            "description": "Test cleanup of expired sessions",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cleanup_inactive_sessions",
            "description": "Test cleanup of inactive sessions",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cleanup_sessions_mock_fallback",
            "description": "Test session cleanup with mock fallback (no service)",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cleanup_validation_error",
            "description": "Test session cleanup with validation error",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cleanup_missing_session_id",
            "description": "Test session cleanup with missing session ID for terminate action",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cleanup_service_error",
            "description": "Test session cleanup service error handling",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_session_lifecycle_workflow",
            "description": "Test complete session lifecycle: create -> monitor -> cleanup",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_bulk_session_operations",
            "description": "Test bulk session monitoring and cleanup operations",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_mcp_session_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_embedding_service",
            "description": "Mock embedding service for testing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_mcp_sparse_embedding_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tool",
            "description": "Create tool instance for testing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_sparse_embedding_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_generate_sparse_embedding_success",
            "description": "Test successful sparse embedding generation",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_generate_embedding_with_bm25",
            "description": "Test sparse embedding generation with BM25 model",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_generate_embedding_validation_error",
            "description": "Test validation error handling",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "test\\unit\\test_mcp_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_generate_embedding_service_error",
            "description": "Test service error handling",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_embedding_service"
                ]
            },
            "file": "test\\unit\\test_mcp_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_vector_service",
            "description": "Mock vector service for testing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_mcp_sparse_embedding_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tool",
            "description": "Create tool instance for testing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_service"
                ]
            },
            "file": "test\\unit\\test_mcp_sparse_embedding_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_create_sparse_index",
            "description": "Test sparse index creation",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_vector_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_vector_service"
                ]
            },
            "file": "test\\unit\\test_mcp_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_load_sparse_index",
            "description": "Test sparse index loading",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_vector_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_vector_service"
                ]
            },
            "file": "test\\unit\\test_mcp_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_vector_service",
            "description": "Mock vector service for testing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_mcp_sparse_embedding_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tool",
            "description": "Create tool instance for testing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_service"
                ]
            },
            "file": "test\\unit\\test_mcp_sparse_embedding_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_sparse_search_success",
            "description": "Test successful sparse search",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_vector_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_vector_service"
                ]
            },
            "file": "test\\unit\\test_mcp_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sparse_search_with_filters",
            "description": "Test sparse search with metadata filters",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_vector_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_vector_service"
                ]
            },
            "file": "test\\unit\\test_mcp_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sparse_search_no_results",
            "description": "Test sparse search with no results",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    },
                    "mock_vector_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool",
                    "mock_vector_service"
                ]
            },
            "file": "test\\unit\\test_mcp_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "validate_text_input",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_models_isolated.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "validate_model_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_models_isolated.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "validate_dataset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_models_isolated.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "test_validate_text_input_valid",
            "description": "Test valid text input",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_models_isolated.py",
            "decorator": [
                "pytest.mark.skipif"
            ]
        },
        {
            "name": "test_validate_text_input_empty",
            "description": "Test empty text input",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_models_isolated.py",
            "decorator": [
                "pytest.mark.skipif"
            ]
        },
        {
            "name": "test_validate_text_input_too_long",
            "description": "Test text input that's too long",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_models_isolated.py",
            "decorator": [
                "pytest.mark.skipif"
            ]
        },
        {
            "name": "test_validate_model_name_valid",
            "description": "Test valid model names",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_models_isolated.py",
            "decorator": [
                "pytest.mark.skipif"
            ]
        },
        {
            "name": "test_validate_model_name_invalid",
            "description": "Test invalid model names",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_models_isolated.py",
            "decorator": [
                "pytest.mark.skipif"
            ]
        },
        {
            "name": "test_validate_dataset_name_valid",
            "description": "Test valid dataset names",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_models_isolated.py",
            "decorator": [
                "pytest.mark.skipif"
            ]
        },
        {
            "name": "test_validate_dataset_name_invalid",
            "description": "Test invalid dataset names",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_models_isolated.py",
            "decorator": [
                "pytest.mark.skipif"
            ]
        },
        {
            "name": "test_search_request_valid",
            "description": "Test valid SearchRequest",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_models_isolated.py",
            "decorator": [
                "pytest.mark.skipif"
            ]
        },
        {
            "name": "test_search_request_default_n",
            "description": "Test SearchRequest with default n",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_models_isolated.py",
            "decorator": [
                "pytest.mark.skipif"
            ]
        },
        {
            "name": "test_search_request_validation_errors",
            "description": "Test SearchRequest validation errors",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_models_isolated.py",
            "decorator": [
                "pytest.mark.skipif"
            ]
        },
        {
            "name": "test_create_embeddings_request_valid",
            "description": "Test valid CreateEmbeddingsRequest",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_models_isolated.py",
            "decorator": [
                "pytest.mark.skipif"
            ]
        },
        {
            "name": "test_create_embeddings_request_validation_errors",
            "description": "Test CreateEmbeddingsRequest validation errors",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\unit\\test_models_isolated.py",
            "decorator": [
                "pytest.mark.skipif"
            ]
        },
        {
            "name": "temp_dir",
            "description": "Create a temporary directory for test files.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_embeddings",
            "description": "Generate sample embeddings for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_metadata",
            "description": "Generate sample metadata for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_embedding_service",
            "description": "Mock embedding service for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_vector_store",
            "description": "Mock vector store for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_dataset_data",
            "description": "Sample dataset data for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_workflow_definition",
            "description": "Sample workflow definition for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "create",
            "description": "Create a mock vector store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\conftest.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "event_loop",
            "description": "Create an instance of the default event loop for the test session.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_get_system_status_tool_success",
            "description": "Test successful system status retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_admin_monitoring_cache_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_restart_service_tool_success",
            "description": "Test successful service restart.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_admin_monitoring_cache_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_cleanup_resources_tool_success",
            "description": "Test successful resource cleanup.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_admin_monitoring_cache_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_update_configuration_tool_success",
            "description": "Test successful configuration update.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_admin_monitoring_cache_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_metrics_tool_success",
            "description": "Test successful metrics retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_service_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_service_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_admin_monitoring_cache_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_create_alert_tool_success",
            "description": "Test successful alert creation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_service_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_service_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_admin_monitoring_cache_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_list_alerts_tool_success",
            "description": "Test successful alert listing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_service_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_service_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_admin_monitoring_cache_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_export_metrics_tool_success",
            "description": "Test successful metrics export.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_service_class": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_service_class",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_admin_monitoring_cache_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_cache_stats_tool_success",
            "description": "Test successful cache statistics retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_admin_monitoring_cache_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_clear_cache_tool_success",
            "description": "Test successful cache clearing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_admin_monitoring_cache_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_set_cache_config_tool_success",
            "description": "Test successful cache configuration update.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_admin_monitoring_cache_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_warm_cache_tool_success",
            "description": "Test successful cache warming.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_admin_monitoring_cache_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "mock_embedding_service",
            "description": "Mock embedding service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "cluster_tool",
            "description": "Create ClusterAnalysisTool instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_kmeans_clustering",
            "description": "Test K-means clustering analysis.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cluster_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "cluster_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_dbscan_clustering",
            "description": "Test DBSCAN clustering analysis.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cluster_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "cluster_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_hierarchical_clustering",
            "description": "Test hierarchical clustering analysis.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cluster_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "cluster_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_invalid_algorithm",
            "description": "Test handling of invalid clustering algorithm.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cluster_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "cluster_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_empty_data_source",
            "description": "Test handling of empty data source.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cluster_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "cluster_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_algorithm_parameters",
            "description": "Test algorithm-specific parameter handling.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cluster_tool": {
                        "type": "string"
                    },
                    "algorithm": {
                        "type": "string"
                    },
                    "expected_params": {
                        "type": "string"
                    }
                },
                "required": [
                    "cluster_tool",
                    "algorithm",
                    "expected_params"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.mark.parametrize",
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_embedding_service",
            "description": "Mock embedding service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "quality_tool",
            "description": "Create QualityAssessmentTool instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_quality_metrics_calculation",
            "description": "Test quality metrics calculation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "quality_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "quality_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_outlier_detection",
            "description": "Test outlier detection functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "quality_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "quality_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_diversity_calculation",
            "description": "Test diversity score calculation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "quality_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "quality_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_embedding_service",
            "description": "Mock embedding service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "reduction_tool",
            "description": "Create DimensionalityReductionTool instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_pca_reduction",
            "description": "Test PCA dimensionality reduction.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "reduction_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "reduction_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_umap_reduction",
            "description": "Test UMAP dimensionality reduction.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "reduction_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "reduction_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_tsne_reduction",
            "description": "Test t-SNE dimensionality reduction.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "reduction_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "reduction_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_invalid_method",
            "description": "Test handling of invalid reduction method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "reduction_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "reduction_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_analysis_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_auth_service",
            "description": "Mock authentication service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_auth_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "auth_tool",
            "description": "Create AuthenticationTool instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_auth_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_auth_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_auth_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_successful_authentication",
            "description": "Test successful user authentication.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "auth_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "auth_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_auth_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_authentication_with_invalid_credentials",
            "description": "Test authentication with invalid credentials.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "auth_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "auth_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_auth_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_authentication_with_empty_username",
            "description": "Test authentication with empty username.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "auth_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "auth_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_auth_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_authentication_with_missing_password",
            "description": "Test authentication with missing password.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "auth_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "auth_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_auth_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_mock_authentication_without_service",
            "description": "Test mock authentication when no service is provided.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_auth_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_username_validation",
            "description": "Test username validation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "auth_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "auth_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_auth_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_token_service",
            "description": "Mock token service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_auth_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "token_tool",
            "description": "Create TokenValidationTool instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_token_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_token_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_auth_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_valid_token_validation",
            "description": "Test validation of valid JWT token.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "token_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "token_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_auth_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_invalid_token_validation",
            "description": "Test validation of invalid JWT token.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "token_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "token_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_auth_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_malformed_token",
            "description": "Test validation of malformed token.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "token_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "token_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_auth_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_token_refresh",
            "description": "Test token refresh functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "token_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "token_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_auth_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_token_decode",
            "description": "Test token decoding functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "token_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "token_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_auth_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_embedding_service",
            "description": "Mock embedding service with task tracking.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "status_tool",
            "description": "Create BackgroundTaskStatusTool instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_get_specific_task_status",
            "description": "Test getting status of specific task.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "status_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "status_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_all_tasks",
            "description": "Test listing all tasks.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "status_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "status_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_filter_tasks_by_type",
            "description": "Test filtering tasks by type.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "status_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "status_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_filter_tasks_by_status",
            "description": "Test filtering tasks by status.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "status_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "status_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_limit_tasks_returned",
            "description": "Test limiting number of tasks returned.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "status_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "status_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_nonexistent_task",
            "description": "Test getting status of non-existent task.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "status_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "status_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_different_task_types",
            "description": "Test filtering by different task types.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "status_tool": {
                        "type": "string"
                    },
                    "task_type": {
                        "type": "string"
                    }
                },
                "required": [
                    "status_tool",
                    "task_type"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.mark.parametrize",
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_different_status_filters",
            "description": "Test filtering by different status values.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "status_tool": {
                        "type": "string"
                    },
                    "status_filter": {
                        "type": "string"
                    }
                },
                "required": [
                    "status_tool",
                    "status_filter"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.mark.parametrize",
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_task_manager",
            "description": "Mock task manager.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "management_tool",
            "description": "Create BackgroundTaskManagementTool instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_task_manager": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_task_manager"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_create_task",
            "description": "Test creating a new background task.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "management_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "management_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cancel_task",
            "description": "Test canceling a background task.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "management_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "management_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_pause_task",
            "description": "Test pausing a background task.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "management_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "management_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_resume_task",
            "description": "Test resuming a paused task.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "management_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "management_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_restart_task",
            "description": "Test restarting a failed task.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "management_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "management_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_invalid_action",
            "description": "Test handling of invalid action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "management_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "management_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cancel_nonexistent_task",
            "description": "Test canceling non-existent task.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "management_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "management_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_background_task_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_embeddings_tool_success",
            "description": "Test successful embedding creation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_processor_class": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_processor_class",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_create_embeddings_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_create_embeddings_tool_processor_exception",
            "description": "Test handling of processor exceptions.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_processor_class": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_processor_class",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_create_embeddings_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_batch_create_embeddings_tool_success",
            "description": "Test successful batch embedding creation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_create_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_create_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_create_embeddings_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_batch_create_embeddings_tool_partial_failure",
            "description": "Test batch embedding creation with some failures.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_create_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_create_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_create_embeddings_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_create_embeddings_tool_with_custom_params",
            "description": "Test embedding creation with custom parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_processor_class": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_processor_class",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_create_embeddings_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_create_embeddings_tool_config_objects",
            "description": "Test that configuration objects are created correctly.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_processor_class": {
                        "type": "string"
                    },
                    "mock_output_config": {
                        "type": "string"
                    },
                    "mock_data_config": {
                        "type": "string"
                    },
                    "mock_embedding_config": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_processor_class",
                    "mock_output_config",
                    "mock_data_config",
                    "mock_embedding_config",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_create_embeddings_tools.py",
            "decorator": [
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "mock_ipfs_embeddings",
            "description": "Mock IPFS embeddings instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_data_processing_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_chunker",
            "description": "Mock chunker instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_data_processing_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "chunking_tool",
            "description": "Create ChunkingTool instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_ipfs_embeddings": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_ipfs_embeddings"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_data_processing_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_token_based_chunking",
            "description": "Test token-based text chunking.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "chunking_tool": {
                        "type": "string"
                    },
                    "mock_chunker": {
                        "type": "string"
                    }
                },
                "required": [
                    "chunking_tool",
                    "mock_chunker"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_data_processing_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sentence_based_chunking",
            "description": "Test sentence-based text chunking.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "chunking_tool": {
                        "type": "string"
                    },
                    "mock_chunker": {
                        "type": "string"
                    }
                },
                "required": [
                    "chunking_tool",
                    "mock_chunker"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_data_processing_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_semantic_chunking",
            "description": "Test semantic text chunking.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "chunking_tool": {
                        "type": "string"
                    },
                    "mock_chunker": {
                        "type": "string"
                    }
                },
                "required": [
                    "chunking_tool",
                    "mock_chunker"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_data_processing_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sliding_window_chunking",
            "description": "Test sliding window text chunking.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "chunking_tool": {
                        "type": "string"
                    },
                    "mock_chunker": {
                        "type": "string"
                    }
                },
                "required": [
                    "chunking_tool",
                    "mock_chunker"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_data_processing_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_empty_text_input",
            "description": "Test handling of empty text input.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "chunking_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "chunking_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_data_processing_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_invalid_chunking_method",
            "description": "Test handling of invalid chunking method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "chunking_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "chunking_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_data_processing_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_method_specific_parameters",
            "description": "Test method-specific parameter handling.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "chunking_tool": {
                        "type": "string"
                    },
                    "mock_chunker": {
                        "type": "string"
                    },
                    "method": {
                        "type": "string"
                    },
                    "expected_params": {
                        "type": "string"
                    }
                },
                "required": [
                    "chunking_tool",
                    "mock_chunker",
                    "method",
                    "expected_params"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_data_processing_tools.py",
            "decorator": [
                "pytest.mark.parametrize",
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_embeddings_from_text_tool",
            "description": "Test creating embeddings from text.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_service_class": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_service_class",
                    "mock_embedding_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_embedding_search_storage_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_create_embeddings_from_file_tool",
            "description": "Test creating embeddings from file.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_service_class": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_service_class",
                    "mock_embedding_service",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_embedding_search_storage_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_batch_create_embeddings_tool",
            "description": "Test batch embedding creation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_service_class": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_service_class",
                    "mock_embedding_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_embedding_search_storage_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_list_available_models_tool",
            "description": "Test listing available embedding models.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get_models": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get_models"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_embedding_search_storage_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_compare_embeddings_tool",
            "description": "Test comparing embeddings similarity.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_service_class": {
                        "type": "string"
                    },
                    "mock_embedding_service": {
                        "type": "string"
                    },
                    "sample_embeddings": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_service_class",
                    "mock_embedding_service",
                    "sample_embeddings"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_embedding_search_storage_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_save_embeddings_tool",
            "description": "Test saving embeddings to storage.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_storage_class": {
                        "type": "string"
                    },
                    "sample_embeddings": {
                        "type": "string"
                    },
                    "sample_metadata": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_storage_class",
                    "sample_embeddings",
                    "sample_metadata",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_embedding_search_storage_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_load_embeddings_tool",
            "description": "Test loading embeddings from storage.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_storage_class": {
                        "type": "string"
                    },
                    "sample_embeddings": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_storage_class",
                    "sample_embeddings",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_embedding_search_storage_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_semantic_search_tool",
            "description": "Test semantic search functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_service_class": {
                        "type": "string"
                    },
                    "sample_embeddings": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_service_class",
                    "sample_embeddings"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_embedding_search_storage_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_batch_search_tool",
            "description": "Test batch search functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_service_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_service_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_embedding_search_storage_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "mock_embedding_service",
            "description": "Mock embedding service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_index_management_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "index_tool",
            "description": "Create IndexLoadingTool instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_index_management_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_load_index",
            "description": "Test loading an existing index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "index_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_index_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_index",
            "description": "Test creating a new index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "index_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_index_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_reload_index",
            "description": "Test reloading an index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "index_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_index_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_unload_index",
            "description": "Test unloading an index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "index_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_index_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_index_status",
            "description": "Test getting index status.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "index_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_index_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_optimize_index",
            "description": "Test optimizing an index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "index_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_index_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_invalid_action",
            "description": "Test handling of invalid action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "index_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_index_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_missing_dataset",
            "description": "Test handling of missing dataset parameter.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "index_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_index_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_load_nonexistent_index",
            "description": "Test loading non-existent index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "index_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_index_management_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_index_types",
            "description": "Test different index types.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "index_tool": {
                        "type": "string"
                    },
                    "index_type": {
                        "type": "string"
                    },
                    "expected_params": {
                        "type": "string"
                    }
                },
                "required": [
                    "index_tool",
                    "index_type",
                    "expected_params"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_index_management_tools.py",
            "decorator": [
                "pytest.mark.parametrize",
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "cluster_management_tool",
            "description": "Create an IPFS cluster management tool for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_initialize_cluster",
            "description": "Test initializing an IPFS cluster.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cluster_management_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "cluster_management_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_start_cluster",
            "description": "Test starting an IPFS cluster.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cluster_management_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "cluster_management_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_stop_cluster",
            "description": "Test stopping an IPFS cluster.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cluster_management_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "cluster_management_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_cluster_status",
            "description": "Test getting cluster status.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cluster_management_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "cluster_management_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_add_peer_to_cluster",
            "description": "Test adding a peer to the cluster.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cluster_management_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "cluster_management_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_remove_peer_from_cluster",
            "description": "Test removing a peer from the cluster.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cluster_management_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "cluster_management_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_clusters",
            "description": "Test listing all clusters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cluster_management_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "cluster_management_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cluster_health_check",
            "description": "Test cluster health check.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cluster_management_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "cluster_management_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_invalid_cluster_action",
            "description": "Test invalid cluster action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cluster_management_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "cluster_management_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "storacha_tool",
            "description": "Create a Storacha integration tool for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_configure_storacha_connection",
            "description": "Test configuring Storacha connection.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "storacha_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "storacha_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_upload_to_storacha",
            "description": "Test uploading data to Storacha.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "storacha_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "storacha_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_upload_dataset_to_storacha",
            "description": "Test uploading a dataset to Storacha.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "storacha_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "storacha_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_retrieve_from_storacha",
            "description": "Test retrieving data from Storacha.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "storacha_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "storacha_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_storacha_uploads",
            "description": "Test listing uploads in Storacha space.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "storacha_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "storacha_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_storacha_space_info",
            "description": "Test getting Storacha space information.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "storacha_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "storacha_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_storacha_car_file",
            "description": "Test creating CAR file for Storacha.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "storacha_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "storacha_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_storacha_invalid_action",
            "description": "Test invalid Storacha action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "storacha_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "storacha_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "pinning_tool",
            "description": "Create an IPFS pinning tool for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_pin_cid",
            "description": "Test pinning a CID.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pinning_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "pinning_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_pin_file",
            "description": "Test pinning a file.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pinning_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "pinning_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_pin_directory",
            "description": "Test pinning a directory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pinning_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "pinning_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_unpin_cid",
            "description": "Test unpinning a CID.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pinning_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "pinning_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_pins",
            "description": "Test listing pinned CIDs.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pinning_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "pinning_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_pin_status",
            "description": "Test getting pin status.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pinning_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "pinning_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_pin_with_cluster",
            "description": "Test pinning with cluster replication.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pinning_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "pinning_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_pin_with_metadata",
            "description": "Test pinning with rich metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pinning_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "pinning_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_bulk_pin_operations",
            "description": "Test bulk pinning operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pinning_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "pinning_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_pinning_invalid_action",
            "description": "Test invalid pinning action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "pinning_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "pinning_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_complete_ipfs_workflow",
            "description": "Test complete IPFS workflow with cluster, pinning, and Storacha.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_embedding_dataset_storage_workflow",
            "description": "Test storing embedding dataset through IPFS and Storacha.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_distributed_pinning_strategy",
            "description": "Test distributed pinning strategy across cluster.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_ipfs_error_handling_and_recovery",
            "description": "Test error handling and recovery in IPFS operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_ipfs_cluster_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_rate_limit_service",
            "description": "Mock rate limiting service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "config_tool",
            "description": "Create RateLimitConfigurationTool instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_rate_limit_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_rate_limit_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_get_rate_limit_config",
            "description": "Test getting rate limit configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "config_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "config_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_set_rate_limit_config",
            "description": "Test setting rate limit configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "config_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "config_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_rate_limit_config",
            "description": "Test updating existing rate limit configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "config_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "config_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_rate_limit_config",
            "description": "Test deleting rate limit configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "config_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "config_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_rate_limits",
            "description": "Test listing all rate limit configurations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "config_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "config_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_reset_rate_limits",
            "description": "Test resetting rate limit counters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "config_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "config_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_invalid_action",
            "description": "Test handling of invalid action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "config_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "config_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_invalid_rate_limit_values",
            "description": "Test handling of invalid rate limit values.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "config_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "config_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_different_endpoints",
            "description": "Test configuration for different endpoints.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "config_tool": {
                        "type": "string"
                    },
                    "endpoint": {
                        "type": "string"
                    },
                    "rpm": {
                        "type": "string"
                    },
                    "rph": {
                        "type": "string"
                    }
                },
                "required": [
                    "config_tool",
                    "endpoint",
                    "rpm",
                    "rph"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.parametrize",
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_monitoring_service",
            "description": "Mock rate limit monitoring service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "monitoring_tool",
            "description": "Create RateLimitMonitoringTool instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_monitoring_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_monitoring_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_get_current_usage",
            "description": "Test getting current usage statistics.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monitoring_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "monitoring_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_historical_usage",
            "description": "Test getting historical usage statistics.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monitoring_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "monitoring_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_violation_stats",
            "description": "Test getting rate limit violation statistics.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monitoring_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "monitoring_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_all_endpoints_usage",
            "description": "Test getting usage for all endpoints.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monitoring_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "monitoring_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_usage_trends",
            "description": "Test getting usage trends over time.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monitoring_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "monitoring_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_alerts",
            "description": "Test getting rate limit alerts.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monitoring_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "monitoring_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_different_time_ranges",
            "description": "Test monitoring for different time ranges.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monitoring_tool": {
                        "type": "string"
                    },
                    "time_range": {
                        "type": "string"
                    }
                },
                "required": [
                    "monitoring_tool",
                    "time_range"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.parametrize",
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_enforcement_service",
            "description": "Mock rate limit enforcement service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "enforcement_tool",
            "description": "Create RateLimitEnforcementTool instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_enforcement_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_enforcement_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_check_rate_limit_allowed",
            "description": "Test checking rate limit when request is allowed.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "enforcement_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "enforcement_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_check_rate_limit_blocked",
            "description": "Test checking rate limit when request should be blocked.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "enforcement_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "enforcement_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_enforce_rate_limit",
            "description": "Test enforcing rate limit action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "enforcement_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "enforcement_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_throttle_requests",
            "description": "Test throttling requests.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "enforcement_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "enforcement_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_whitelist_client",
            "description": "Test whitelisting a client.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "enforcement_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "enforcement_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_blacklist_client",
            "description": "Test blacklisting a client.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "enforcement_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "enforcement_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_client_status",
            "description": "Test getting client enforcement status.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "enforcement_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "enforcement_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_invalid_enforcement_action",
            "description": "Test handling of invalid enforcement action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "enforcement_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "enforcement_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_bypass_service",
            "description": "Mock rate limit bypass service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "bypass_tool",
            "description": "Create RateLimitBypassTool instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_bypass_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_bypass_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_create_bypass_token",
            "description": "Test creating a bypass token.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "bypass_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "bypass_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_validate_bypass_token",
            "description": "Test validating a bypass token.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "bypass_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "bypass_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_revoke_bypass_token",
            "description": "Test revoking a bypass token.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "bypass_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "bypass_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_bypass_tokens",
            "description": "Test listing active bypass tokens.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "bypass_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "bypass_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_temporary_bypass",
            "description": "Test creating temporary bypass.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "bypass_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "bypass_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_invalid_bypass_token",
            "description": "Test validation of invalid bypass token.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "bypass_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "bypass_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_unauthorized_bypass_creation",
            "description": "Test unauthorized bypass token creation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "bypass_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "bypass_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_rate_limiting_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_session_tool_success",
            "description": "Test successful session creation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_session_management_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_session_tool_success",
            "description": "Test successful session retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_session_management_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_update_session_tool_success",
            "description": "Test successful session update.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_session_management_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_end_session_tool_success",
            "description": "Test successful session termination.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_session_management_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_list_sessions_tool_success",
            "description": "Test successful session listing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_session_management_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_cleanup_expired_sessions_tool_success",
            "description": "Test successful cleanup of expired sessions.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_session_management_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_get_session_stats_tool_success",
            "description": "Test successful session statistics retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_session_management_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_session_manager_exception",
            "description": "Test handling of session manager exceptions.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_session_management_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_create_session_tool_with_custom_metadata",
            "description": "Test session creation with custom metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_manager_class": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_manager_class"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_session_management_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_shard_embeddings_tool_success",
            "description": "Test successful embedding sharding.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_processor_class": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    },
                    "sample_embeddings": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_processor_class",
                    "temp_dir",
                    "sample_embeddings"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_shard_embeddings_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_shard_embeddings_tool_with_options",
            "description": "Test sharding with custom options.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_processor_class": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    },
                    "sample_embeddings": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_processor_class",
                    "temp_dir",
                    "sample_embeddings"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_shard_embeddings_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_merge_shards_tool_success",
            "description": "Test successful shard merging.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_processor_class": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_processor_class",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_shard_embeddings_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_merge_shards_tool_with_cleanup",
            "description": "Test shard merging with cleanup option.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_processor_class": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_processor_class",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_shard_embeddings_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_shard_info_tool_success",
            "description": "Test successful shard info retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_processor_class": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_processor_class",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_shard_embeddings_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_shard_embeddings_tool_exception",
            "description": "Test handling of processor exceptions.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_processor_class": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    },
                    "sample_embeddings": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_processor_class",
                    "temp_dir",
                    "sample_embeddings"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_shard_embeddings_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_shard_embeddings_tool_config_objects",
            "description": "Test that configuration objects are created correctly.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_processor_class": {
                        "type": "string"
                    },
                    "mock_output_config": {
                        "type": "string"
                    },
                    "mock_input_config": {
                        "type": "string"
                    },
                    "mock_shard_config": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    },
                    "sample_embeddings": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_processor_class",
                    "mock_output_config",
                    "mock_input_config",
                    "mock_shard_config",
                    "temp_dir",
                    "sample_embeddings"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_shard_embeddings_tools.py",
            "decorator": [
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_merge_shards_tool_exception_handling",
            "description": "Test exception handling in merge shards tool.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_processor_class": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_processor_class",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_shard_embeddings_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_shard_info_tool_exception_handling",
            "description": "Test exception handling in shard info tool.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_processor_class": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_processor_class",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_shard_embeddings_tools.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "sparse_embedding_tool",
            "description": "Create a sparse embedding generation tool for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_texts",
            "description": "Generate sample texts for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_generate_sparse_embeddings_tfidf",
            "description": "Test generating sparse embeddings using TF-IDF.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_embedding_tool": {
                        "type": "string"
                    },
                    "sample_texts": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_embedding_tool",
                    "sample_texts"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_generate_sparse_embeddings_bm25",
            "description": "Test generating sparse embeddings using BM25.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_embedding_tool": {
                        "type": "string"
                    },
                    "sample_texts": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_embedding_tool",
                    "sample_texts"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_generate_sparse_embeddings_splade",
            "description": "Test generating sparse embeddings using SPLADE.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_embedding_tool": {
                        "type": "string"
                    },
                    "sample_texts": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_embedding_tool",
                    "sample_texts"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_generate_sparse_embeddings_batch_processing",
            "description": "Test batch processing of sparse embeddings.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_embedding_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_embedding_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_generate_sparse_embeddings_with_preprocessing",
            "description": "Test sparse embedding generation with text preprocessing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_embedding_tool": {
                        "type": "string"
                    },
                    "sample_texts": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_embedding_tool",
                    "sample_texts"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_generate_sparse_embeddings_invalid_method",
            "description": "Test sparse embedding generation with invalid method.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_embedding_tool": {
                        "type": "string"
                    },
                    "sample_texts": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_embedding_tool",
                    "sample_texts"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_generate_sparse_embeddings_empty_texts",
            "description": "Test sparse embedding generation with empty texts.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_embedding_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_embedding_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "sparse_indexing_tool",
            "description": "Create a sparse indexing tool for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_sparse_embeddings",
            "description": "Generate sample sparse embeddings for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_sparse_metadata",
            "description": "Generate sample metadata for sparse embeddings.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_create_sparse_index",
            "description": "Test creating a sparse index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_indexing_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_indexing_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_add_sparse_embeddings_to_index",
            "description": "Test adding sparse embeddings to index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_indexing_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    },
                    "sample_sparse_embeddings": {
                        "type": "string"
                    },
                    "sample_sparse_metadata": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_indexing_tool",
                    "temp_dir",
                    "sample_sparse_embeddings",
                    "sample_sparse_metadata"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_build_sparse_index_from_texts",
            "description": "Test building sparse index directly from texts.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_indexing_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_indexing_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_optimize_sparse_index",
            "description": "Test optimizing a sparse index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_indexing_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    },
                    "sample_sparse_embeddings": {
                        "type": "string"
                    },
                    "sample_sparse_metadata": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_indexing_tool",
                    "temp_dir",
                    "sample_sparse_embeddings",
                    "sample_sparse_metadata"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_sparse_index_stats",
            "description": "Test getting sparse index statistics.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_indexing_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_indexing_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sparse_indexing_invalid_action",
            "description": "Test sparse indexing with invalid action.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_indexing_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_indexing_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "sparse_search_tool",
            "description": "Create a sparse search tool for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "populated_sparse_index",
            "description": "Create and populate a sparse index for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_indexing_tool": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_indexing_tool",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_sparse_search_by_text",
            "description": "Test sparse search using text query.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_search_tool": {
                        "type": "string"
                    },
                    "populated_sparse_index": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_search_tool",
                    "populated_sparse_index"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sparse_search_by_sparse_vector",
            "description": "Test sparse search using sparse vector query.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_search_tool": {
                        "type": "string"
                    },
                    "populated_sparse_index": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_search_tool",
                    "populated_sparse_index"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sparse_search_with_filters",
            "description": "Test sparse search with metadata filters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_search_tool": {
                        "type": "string"
                    },
                    "populated_sparse_index": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_search_tool",
                    "populated_sparse_index"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sparse_search_multiple_methods",
            "description": "Test sparse search with multiple search methods.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_search_tool": {
                        "type": "string"
                    },
                    "populated_sparse_index": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_search_tool",
                    "populated_sparse_index"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sparse_search_hybrid_scoring",
            "description": "Test hybrid scoring combining multiple signals.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_search_tool": {
                        "type": "string"
                    },
                    "populated_sparse_index": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_search_tool",
                    "populated_sparse_index"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sparse_search_explain_scores",
            "description": "Test sparse search with score explanation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_search_tool": {
                        "type": "string"
                    },
                    "populated_sparse_index": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_search_tool",
                    "populated_sparse_index"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sparse_search_aggregated_results",
            "description": "Test sparse search with result aggregation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_search_tool": {
                        "type": "string"
                    },
                    "populated_sparse_index": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_search_tool",
                    "populated_sparse_index"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sparse_search_nonexistent_index",
            "description": "Test sparse search with non-existent index.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_search_tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_search_tool"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sparse_search_empty_query",
            "description": "Test sparse search with empty query.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sparse_search_tool": {
                        "type": "string"
                    },
                    "populated_sparse_index": {
                        "type": "string"
                    }
                },
                "required": [
                    "sparse_search_tool",
                    "populated_sparse_index"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_complete_sparse_workflow",
            "description": "Test complete sparse embedding workflow.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sparse_vs_dense_comparison",
            "description": "Test comparison between sparse and dense embeddings.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_sparse_embedding_persistence",
            "description": "Test persistence and loading of sparse embeddings.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    },
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service",
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_sparse_embedding_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_vector_store_success",
            "description": "Test successful vector store creation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_vector_store_with_config",
            "description": "Test vector store creation with custom config.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_vector_store_invalid_dimension",
            "description": "Test vector store creation with invalid dimension.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_vector_store_unsupported_provider",
            "description": "Test vector store creation with unsupported provider.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "sample_embeddings",
            "description": "Generate sample embeddings for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_metadata",
            "description": "Generate sample metadata for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_add_embeddings_success",
            "description": "Test successful embeddings addition.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    },
                    "sample_embeddings": {
                        "type": "string"
                    },
                    "sample_metadata": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir",
                    "sample_embeddings",
                    "sample_metadata"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_add_embeddings_batch",
            "description": "Test adding embeddings in batches.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    },
                    "sample_embeddings": {
                        "type": "string"
                    },
                    "sample_metadata": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir",
                    "sample_embeddings",
                    "sample_metadata"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_add_embeddings_dimension_mismatch",
            "description": "Test adding embeddings with dimension mismatch.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    },
                    "sample_metadata": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir",
                    "sample_metadata"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_add_embeddings_nonexistent_store",
            "description": "Test adding embeddings to non-existent store.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "sample_embeddings": {
                        "type": "string"
                    },
                    "sample_metadata": {
                        "type": "string"
                    }
                },
                "required": [
                    "sample_embeddings",
                    "sample_metadata"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "sample_embeddings",
            "description": "Generate sample embeddings for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_metadata",
            "description": "Generate sample metadata for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "populated_store",
            "description": "Create and populate a vector store for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    },
                    "sample_embeddings": {
                        "type": "string"
                    },
                    "sample_metadata": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir",
                    "sample_embeddings",
                    "sample_metadata"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_search_vector_store_success",
            "description": "Test successful vector store search.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "populated_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "populated_store"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_vector_store_with_filter",
            "description": "Test vector store search with metadata filter.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "populated_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "populated_store"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_vector_store_invalid_dimension",
            "description": "Test search with invalid query vector dimension.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "populated_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "populated_store"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_nonexistent_store",
            "description": "Test search on non-existent store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_stats_success",
            "description": "Test successful stats retrieval.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_stats_with_data",
            "description": "Test stats retrieval with data in store.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_stats_nonexistent_store",
            "description": "Test stats retrieval for non-existent store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_by_ids_success",
            "description": "Test successful deletion by IDs.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_by_filter_success",
            "description": "Test successful deletion by filter.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_nonexistent_ids",
            "description": "Test deletion of non-existent IDs.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_from_nonexistent_store",
            "description": "Test deletion from non-existent store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_optimize_store_success",
            "description": "Test successful store optimization.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_optimize_with_options",
            "description": "Test store optimization with custom options.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_optimize_nonexistent_store",
            "description": "Test optimization of non-existent store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_complete_workflow",
            "description": "Test complete vector store workflow.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_concurrent_operations",
            "description": "Test concurrent operations on vector store.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_vector_store_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_simple_workflow",
            "description": "Test execution of a simple workflow.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_workflow_with_dependencies",
            "description": "Test execution of workflow with step dependencies.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_workflow_async",
            "description": "Test asynchronous workflow execution.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_workflow_with_parameters",
            "description": "Test workflow execution with runtime parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_workflow_invalid_config",
            "description": "Test workflow execution with invalid configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_workflow_circular_dependency",
            "description": "Test workflow execution with circular dependencies.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_basic_pipeline",
            "description": "Test creation of basic embedding pipeline.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_pipeline_with_preprocessing",
            "description": "Test creation of pipeline with preprocessing steps.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_pipeline_with_vector_store",
            "description": "Test creation of pipeline with vector store integration.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_pipeline_with_sharding",
            "description": "Test creation of pipeline with sharding configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_pipeline_invalid_model",
            "description": "Test pipeline creation with invalid model.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_pipeline_missing_source",
            "description": "Test pipeline creation with missing input source.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "running_workflow",
            "description": "Create a running workflow for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_get_workflow_status_running",
            "description": "Test getting status of a running workflow.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "running_workflow": {
                        "type": "string"
                    }
                },
                "required": [
                    "running_workflow"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_workflow_status_detailed",
            "description": "Test getting detailed workflow status.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "running_workflow": {
                        "type": "string"
                    }
                },
                "required": [
                    "running_workflow"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_workflow_status_with_logs",
            "description": "Test getting workflow status with execution logs.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "running_workflow": {
                        "type": "string"
                    }
                },
                "required": [
                    "running_workflow"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_workflow_status_nonexistent",
            "description": "Test getting status of non-existent workflow.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_workflow_status_by_name",
            "description": "Test getting workflow status by workflow name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "multiple_workflows",
            "description": "Create multiple workflows for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_list_all_workflows",
            "description": "Test listing all workflows.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "multiple_workflows": {
                        "type": "string"
                    }
                },
                "required": [
                    "multiple_workflows"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_workflows_filtered_by_status",
            "description": "Test listing workflows filtered by status.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "multiple_workflows": {
                        "type": "string"
                    }
                },
                "required": [
                    "multiple_workflows"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_workflows_filtered_by_category",
            "description": "Test listing workflows filtered by category.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "multiple_workflows": {
                        "type": "string"
                    }
                },
                "required": [
                    "multiple_workflows"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_workflows_with_pagination",
            "description": "Test listing workflows with pagination.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "multiple_workflows": {
                        "type": "string"
                    }
                },
                "required": [
                    "multiple_workflows"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_workflows_sorted",
            "description": "Test listing workflows with sorting.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "multiple_workflows": {
                        "type": "string"
                    }
                },
                "required": [
                    "multiple_workflows"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_workflows_search",
            "description": "Test searching workflows by name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_list_workflows_with_details",
            "description": "Test listing workflows with detailed information.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "multiple_workflows": {
                        "type": "string"
                    }
                },
                "required": [
                    "multiple_workflows"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_complete_workflow_lifecycle",
            "description": "Test complete workflow lifecycle from creation to completion.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_parallel_workflow_execution",
            "description": "Test parallel execution of multiple workflows.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_workflow_error_handling",
            "description": "Test workflow error handling and recovery.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_workflow_monitoring_and_metrics",
            "description": "Test workflow monitoring and metrics collection.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "temp_dir": {
                        "type": "string"
                    }
                },
                "required": [
                    "temp_dir"
                ]
            },
            "file": "tests\\test_mcp_tools\\test_workflow_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "get_test_metadata",
            "description": "Get standard test metadata",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test_backup\\comprehensive_test_suite.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_test_resources",
            "description": "Get standard test resources configuration",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test_backup\\comprehensive_test_suite.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_test_samples",
            "description": "Get test text samples for embedding testing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test_backup\\comprehensive_test_suite.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "sample_search_request",
            "description": "Sample search request for testing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test_backup\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_create_embeddings_request",
            "description": "Sample create embeddings request for testing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test_backup\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_invalid_request",
            "description": "Sample invalid request for testing validation",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test_backup\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "detect_cuda",
            "description": "Detect CUDA availability",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test_backup\\hardware_tests.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "detect_openvino",
            "description": "Detect OpenVINO availability",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test_backup\\hardware_tests.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "detect_intel_extensions",
            "description": "Detect Intel Extension for PyTorch (IPEX)",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test_backup\\hardware_tests.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_system_info",
            "description": "Get system information",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test_backup\\hardware_tests.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "create_test_dataset",
            "description": "Create a minimal test dataset",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test_backup\\integration_tests.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "create_temp_directory",
            "description": "Create temporary directory for testing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test_backup\\integration_tests.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "cleanup_temp_directory",
            "description": "Clean up temporary directory",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "required": [
                    "path"
                ]
            },
            "file": "test_backup\\integration_tests.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "timeout",
            "description": "Context manager for timeouts using signals",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "duration": {
                        "type": "string"
                    }
                },
                "required": [
                    "duration"
                ]
            },
            "file": "test_backup\\minimal_test.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "measure_memory_usage",
            "description": "Get current memory usage in MB",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test_backup\\performance_tests.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "generate_test_data",
            "description": "Generate test data for performance testing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test_backup\\performance_tests.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "time_function",
            "description": "Time function execution",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "func": {
                        "type": "string"
                    }
                },
                "required": [
                    "func"
                ]
            },
            "file": "test_backup\\performance_tests.py",
            "decorator": [
                "staticmethod"
            ]
        }
    ]
}