{
    "tools": [
        {
            "name": "app_lifespan",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\server.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "mock_env",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_server.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_response",
            "description": "Fixture to create a mock response object",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_server.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_error_response",
            "description": "Fixture for error responses",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_server.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_unauthorized_response",
            "description": "Fixture for unauthorized responses",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_server.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_context",
            "description": "Fixture to create a mock context object for MCP",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_server.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_fetch_mcp_settings_success",
            "description": "Test successful MCP settings fetch",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get": {
                        "type": "string"
                    },
                    "mock_response": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get",
                    "mock_response"
                ]
            },
            "file": "test\\test_server.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_fetch_mcp_settings_error_response",
            "description": "Test error response handling",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get": {
                        "type": "string"
                    },
                    "mock_error_response": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get",
                    "mock_error_response"
                ]
            },
            "file": "test\\test_server.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_fetch_mcp_settings_inactive_mcp",
            "description": "Test when MCP is not active",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get": {
                        "type": "string"
                    },
                    "mock_response": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get",
                    "mock_response"
                ]
            },
            "file": "test\\test_server.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_fetch_mcp_settings_empty_name_description",
            "description": "Test when name or description is empty",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get": {
                        "type": "string"
                    },
                    "mock_response": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get",
                    "mock_response"
                ]
            },
            "file": "test\\test_server.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_send_message_success",
            "description": "Test successful message sending",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    },
                    "mock_response": {
                        "type": "string"
                    },
                    "mock_context": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post",
                    "mock_response",
                    "mock_context"
                ]
            },
            "file": "test\\test_server.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_send_message_unauthorized",
            "description": "Test unauthorized error handling",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    },
                    "mock_unauthorized_response": {
                        "type": "string"
                    },
                    "mock_context": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post",
                    "mock_unauthorized_response",
                    "mock_context"
                ]
            },
            "file": "test\\test_server.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_send_message_server_error",
            "description": "Test server error handling",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    },
                    "mock_error_response": {
                        "type": "string"
                    },
                    "mock_context": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post",
                    "mock_error_response",
                    "mock_context"
                ]
            },
            "file": "test\\test_server.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        },
        {
            "name": "test_app_lifespan",
            "description": "Test the app_lifespan context manager",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "test\\test_server.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_multiple_conv_ids",
            "description": "Test correct handling of requests with multiple scenario_ids and conv_ids",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_post": {
                        "type": "string"
                    },
                    "mock_response": {
                        "type": "string"
                    },
                    "mock_context": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_post",
                    "mock_response",
                    "mock_context"
                ]
            },
            "file": "test\\test_server.py",
            "decorator": [
                "pytest.mark.asyncio",
                "patch"
            ]
        }
    ]
}