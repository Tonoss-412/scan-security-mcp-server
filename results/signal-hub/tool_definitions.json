{
    "tools": [
        {
            "name": "benchmark_indexing_small",
            "description": "Benchmark indexing speed on small dataset (100 files).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "benchmarks\\indexing\\speed_test.py",
            "decorator": [
                "runner.register"
            ]
        },
        {
            "name": "benchmark_indexing_medium",
            "description": "Benchmark indexing speed on medium dataset (1000 files).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "benchmarks\\indexing\\speed_test.py",
            "decorator": [
                "runner.register"
            ]
        },
        {
            "name": "benchmark_indexing_memory",
            "description": "Benchmark memory usage during indexing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "benchmarks\\indexing\\speed_test.py",
            "decorator": [
                "runner.register"
            ]
        },
        {
            "name": "benchmark_concurrent_indexing",
            "description": "Benchmark concurrent file processing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "benchmarks\\indexing\\speed_test.py",
            "decorator": [
                "runner.register"
            ]
        },
        {
            "name": "cache_stats",
            "description": "Get cache statistics.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\caching\\embedder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_expired",
            "description": "Check if cache entry is expired.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\caching\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "age_seconds",
            "description": "Get age of cache entry in seconds.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\caching\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_valid",
            "description": "Check if result is valid (not expired).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\caching\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ttl_seconds",
            "description": "Get TTL in seconds.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\caching\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "hit_rate",
            "description": "Calculate cache hit rate.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\caching\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "miss_rate",
            "description": "Calculate cache miss rate.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\caching\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "initialize",
            "description": "Initialize storage backend.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\caching\\storage\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "add",
            "description": "Add entry to cache.\n        \n        Args:\n            entry: Cache entry to add\n            \n        Returns:\n            True if added successfully\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "entry": {
                        "type": "string",
                        "description": "Cache entry to add"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "entry",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\caching\\storage\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "search_similar",
            "description": "Search for similar cached queries.\n        \n        Args:\n            query_embedding: Embedding of query\n            threshold: Minimum similarity threshold\n            limit: Maximum results to return\n            context: Optional context for filtering\n            \n        Returns:\n            List of similar cache entries\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query_embedding": {
                        "type": "string",
                        "description": "Embedding of query"
                    },
                    "threshold": {
                        "type": "string",
                        "description": "Minimum similarity threshold"
                    },
                    "limit": {
                        "type": "string",
                        "description": "Maximum results to return"
                    },
                    "context": {
                        "type": "string",
                        "description": "Optional context for filtering"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "query_embedding",
                    "threshold",
                    "limit",
                    "context",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\caching\\storage\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get",
            "description": "Get specific cache entry by ID.\n        \n        Args:\n            entry_id: ID of cache entry\n            \n        Returns:\n            Cache entry or None if not found\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "entry_id": {
                        "type": "string",
                        "description": "ID of cache entry"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "entry_id",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\caching\\storage\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "update",
            "description": "Update existing cache entry.\n        \n        Args:\n            entry: Updated cache entry\n            \n        Returns:\n            True if updated successfully\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "entry": {
                        "type": "string",
                        "description": "Updated cache entry"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "entry",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\caching\\storage\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete",
            "description": "Delete cache entry.\n        \n        Args:\n            entry_id: ID of entry to delete\n            \n        Returns:\n            True if deleted successfully\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "entry_id": {
                        "type": "string",
                        "description": "ID of entry to delete"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "entry_id",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\caching\\storage\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "clear",
            "description": "Clear all cache entries.\n        \n        Returns:\n            Number of entries cleared\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\caching\\storage\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "size",
            "description": "Get number of cache entries.\n        \n        Returns:\n            Number of entries\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\caching\\storage\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_stats",
            "description": "Get storage statistics.\n        \n        Returns:\n            Storage statistics\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\caching\\storage\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "cleanup_expired",
            "description": "Remove expired entries.\n        \n        Returns:\n            Number of entries removed\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\caching\\storage\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "main",
            "description": "Signal Hub - Intelligent MCP server for RAG-enhanced development.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\cli\\main.py",
            "decorator": [
                "app.callback"
            ]
        },
        {
            "name": "version",
            "description": "Show Signal Hub version and edition.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\cli\\main.py",
            "decorator": [
                "app.command"
            ]
        },
        {
            "name": "version",
            "description": "Show Signal Hub version and edition.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\cli\\simple.py",
            "decorator": [
                "app.command"
            ]
        },
        {
            "name": "serve",
            "description": "Start the Signal Hub MCP server.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\cli\\simple.py",
            "decorator": [
                "app.command"
            ]
        },
        {
            "name": "init",
            "description": "Initialize Signal Hub for a project.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\cli\\simple.py",
            "decorator": [
                "app.command"
            ]
        },
        {
            "name": "validate_level",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\config\\settings.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "validate_threshold",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\config\\settings.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "validate_thresholds",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\config\\settings.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "parse_edition",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\config\\settings.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "parse_bool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\config\\settings.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "from_env",
            "description": "Get edition from environment variable.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\core\\features.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "elapsed_time",
            "description": "Get elapsed time in seconds.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\middleware.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "elapsed_ms",
            "description": "Get elapsed time in milliseconds.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\middleware.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "Plugin name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\plugins.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "version",
            "description": "Plugin version.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\plugins.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "description",
            "description": "Plugin description.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\plugins.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "requires_pro",
            "description": "Whether this plugin requires Signal Hub Pro.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\plugins.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "process_message",
            "description": "\n        Process an incoming MCP message.\n        \n        Args:\n            raw_message: Raw JSON message string\n            \n        Returns:\n            Response message as JSON string, or None for notifications\n            \n        Raises:\n            ProtocolError: If message processing fails\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "raw_message": {
                        "type": "string",
                        "description": "Raw JSON message string"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "Raises": {
                        "type": "string"
                    },
                    "ProtocolError": {
                        "type": "string",
                        "description": "If message processing fails"
                    }
                },
                "required": [
                    "raw_message",
                    "Returns",
                    "Raises",
                    "ProtocolError"
                ]
            },
            "file": "src\\signal_hub\\core\\protocol.py",
            "decorator": [
                "log_performance"
            ]
        },
        {
            "name": "list_tools",
            "description": "List available tools.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\server.py",
            "decorator": [
                "self._server.list_tools"
            ]
        },
        {
            "name": "call_tool",
            "description": "Execute a tool.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\server.py",
            "decorator": [
                "self._server.call_tool"
            ]
        },
        {
            "name": "search_codebase",
            "description": "Search the indexed codebase.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools.py",
            "decorator": [
                "require_feature"
            ]
        },
        {
            "name": "explain_code",
            "description": "Explain code functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools.py",
            "decorator": [
                "require_feature"
            ]
        },
        {
            "name": "name",
            "description": "Get tool name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "description",
            "description": "Get tool description.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "input_schema",
            "description": "Get JSON schema for tool inputs.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "execute",
            "description": "Execute the tool with given parameters.\n        \n        Args:\n            params: Tool parameters\n            \n        Returns:\n            Tool execution result\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "params": {
                        "type": "string",
                        "description": "Tool parameters"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "params",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\core\\tools\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "name",
            "description": "Get tool name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\escalate_query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "description",
            "description": "Get tool description.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\escalate_query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_schema",
            "description": "Get JSON schema for tool inputs.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\escalate_query.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "Get tool name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\explain_code.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "description",
            "description": "Get tool description.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\explain_code.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_schema",
            "description": "Get JSON schema for tool inputs.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\explain_code.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "Get tool name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\find_similar.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "description",
            "description": "Get tool description.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\find_similar.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_schema",
            "description": "Get JSON schema for tool inputs.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\find_similar.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "Get tool name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\get_context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "description",
            "description": "Get tool description.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\get_context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_schema",
            "description": "Get JSON schema for tool inputs.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\get_context.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "Get tool name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\search_code.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "description",
            "description": "Get tool description.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\search_code.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_schema",
            "description": "Get JSON schema for tool inputs.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\core\\tools\\search_code.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "total_tokens",
            "description": "Get total tokens used.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\costs\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "savings_percentage",
            "description": "Calculate savings percentage.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\costs\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "cache_hit_rate",
            "description": "Calculate cache hit rate.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\costs\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "initialize",
            "description": "Initialize storage backend.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\costs\\storage\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "add_usage",
            "description": "Add usage record.\n        \n        Args:\n            usage: Usage record to store\n            \n        Returns:\n            True if stored successfully\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "usage": {
                        "type": "string",
                        "description": "Usage record to store"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "usage",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\costs\\storage\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_usage_range",
            "description": "Get usage records in time range.\n        \n        Args:\n            start_time: Start of range\n            end_time: End of range\n            user_id: Optional filter by user\n            \n        Returns:\n            List of usage records\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "start_time": {
                        "type": "string",
                        "description": "Start of range"
                    },
                    "end_time": {
                        "type": "string",
                        "description": "End of range"
                    },
                    "user_id": {
                        "type": "string",
                        "description": "Optional filter by user"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "start_time",
                    "end_time",
                    "user_id",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\costs\\storage\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_recent_usage",
            "description": "Get recent usage records.\n        \n        Args:\n            limit: Maximum records to return\n            user_id: Optional filter by user\n            \n        Returns:\n            Recent usage records\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "string",
                        "description": "Maximum records to return"
                    },
                    "user_id": {
                        "type": "string",
                        "description": "Optional filter by user"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "limit",
                    "user_id",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\costs\\storage\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "cleanup_before",
            "description": "Delete records before cutoff date.\n        \n        Args:\n            cutoff_date: Delete records before this date\n            \n        Returns:\n            Number of records deleted\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cutoff_date": {
                        "type": "string",
                        "description": "Delete records before this date"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "cutoff_date",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\costs\\storage\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_total_cost",
            "description": "Get total cost for period.\n        \n        Args:\n            start_time: Start of period (or all time)\n            end_time: End of period (or now)\n            \n        Returns:\n            Total cost\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "start_time": {
                        "type": "string",
                        "description": "Start of period (or all time)"
                    },
                    "end_time": {
                        "type": "string",
                        "description": "End of period (or now)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "start_time",
                    "end_time",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\costs\\storage\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "relative_path",
            "description": "Get path relative to the repository root.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\indexing\\file_info.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "extension",
            "description": "Get file extension.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\indexing\\file_info.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_path",
            "description": "Create FileInfo from a file path.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\indexing\\file_info.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "percentage",
            "description": "Get completion percentage.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\indexing\\progress.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "elapsed_time",
            "description": "Get elapsed time in seconds.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\indexing\\progress.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "estimated_time_remaining",
            "description": "Estimate remaining time in seconds.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\indexing\\progress.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "items_per_second",
            "description": "Calculate processing rate.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\indexing\\progress.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "percentage",
            "description": "Get completion percentage.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\indexing\\scanner.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "size",
            "description": "Get chunk size in characters.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\indexing\\chunking\\strategy.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "line_count",
            "description": "Get number of lines in chunk.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\indexing\\chunking\\strategy.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "can_handle",
            "description": "Check if this strategy can handle the file.\n        \n        Args:\n            file_path: Path to the file\n            \n        Returns:\n            True if strategy can handle this file type\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "file_path": {
                        "type": "string",
                        "description": "Path to the file"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "file_path",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\indexing\\chunking\\strategy.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "chunk_file",
            "description": "Chunk a file into logical pieces.\n        \n        Args:\n            file_path: Path to the file\n            content: File content (if not provided, will be read)\n            \n        Returns:\n            List of code chunks\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "file_path": {
                        "type": "string",
                        "description": "Path to the file"
                    },
                    "content": {
                        "type": "string",
                        "description": "File content (if not provided, will be read)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "file_path",
                    "content",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\indexing\\chunking\\strategy.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "chunk_text",
            "description": "Chunk text into logical pieces.\n        \n        Args:\n            text: Text content to chunk\n            metadata: Optional metadata about the text\n            \n        Returns:\n            List of code chunks\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "Text content to chunk"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Optional metadata about the text"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "text",
                    "metadata",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\indexing\\chunking\\strategy.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "for_language",
            "description": "Factory method to get appropriate strategy for a language.\n        \n        Args:\n            language: Programming language\n            context: Chunking configuration\n            \n        Returns:\n            Appropriate chunking strategy\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "language": {
                        "type": "string",
                        "description": "Programming language"
                    },
                    "context": {
                        "type": "string",
                        "description": "Chunking configuration"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "language",
                    "context",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\indexing\\chunking\\strategy.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "rate",
            "description": "Calculate processing rate (items/second).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\indexing\\embeddings\\batch_processor.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "eta",
            "description": "Estimate time to completion (seconds).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\indexing\\embeddings\\batch_processor.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "percentage",
            "description": "Calculate completion percentage.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\indexing\\embeddings\\batch_processor.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "can_extract",
            "description": "Check if this extractor can handle the file.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\indexing\\metadata\\extractor.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "extract",
            "description": "Extract metadata from file content.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\indexing\\metadata\\extractor.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "validate_name",
            "description": "Validate class name is not empty.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\indexing\\metadata\\models.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "validate_line_range",
            "description": "Validate line range is valid.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "info": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "info"
                ]
            },
            "file": "src\\signal_hub\\indexing\\metadata\\models.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "validate_name",
            "description": "Validate function name is not empty.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\indexing\\metadata\\models.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "validate_line_range",
            "description": "Validate line range is valid.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "info": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "info"
                ]
            },
            "file": "src\\signal_hub\\indexing\\metadata\\models.py",
            "decorator": [
                "field_validator",
                "classmethod"
            ]
        },
        {
            "name": "parse",
            "description": "Parse file content into chunks.\n        \n        Args:\n            content: File content to parse\n            file_path: Optional path for context\n            \n        Returns:\n            List of extracted chunks\n            \n        Raises:\n            ParseError: If parsing fails\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "File content to parse"
                    },
                    "file_path": {
                        "type": "string",
                        "description": "Optional path for context"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "Raises": {
                        "type": "string"
                    },
                    "ParseError": {
                        "type": "string",
                        "description": "If parsing fails"
                    }
                },
                "required": [
                    "content",
                    "file_path",
                    "Returns",
                    "Raises",
                    "ParseError"
                ]
            },
            "file": "src\\signal_hub\\indexing\\parsers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "line_count",
            "description": "Number of lines in the chunk.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\indexing\\parsers\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "identifier",
            "description": "Unique identifier for the chunk.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\indexing\\parsers\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "route_query",
            "description": "Route query using ML model based on complexity analysis.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\plugins\\pro_example.py",
            "decorator": [
                "requires_feature"
            ]
        },
        {
            "name": "track_query",
            "description": "Track detailed query information.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\plugins\\pro_example.py",
            "decorator": [
                "requires_feature"
            ]
        },
        {
            "name": "get_cost_savings",
            "description": "Get detailed cost savings analytics.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\plugins\\pro_example.py",
            "decorator": [
                "requires_feature"
            ]
        },
        {
            "name": "location",
            "description": "Get formatted location.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\retrieval\\assembly\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "token_estimate",
            "description": "Estimate token count for this section.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\retrieval\\assembly\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "location",
            "description": "Get formatted location string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\retrieval\\search\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "display_name",
            "description": "Get display name for model.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\routing\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "relative_cost",
            "description": "Get relative cost factor (Haiku = 1.0).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\routing\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "length",
            "description": "Get query length in characters.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\routing\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "estimated_tokens",
            "description": "Estimate token count (rough approximation).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\routing\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "validate_priority",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "src\\signal_hub\\routing\\config\\schema.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "is_running",
            "description": "Check if watcher is running.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\routing\\config\\watcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "Get provider name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\routing\\providers\\anthropic.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "Get provider name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\routing\\providers\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "complete",
            "description": "Generate completion from model.\n        \n        Args:\n            model: Model to use\n            messages: Conversation messages\n            temperature: Sampling temperature\n            max_tokens: Maximum tokens to generate\n            stream: Whether to stream response\n            **kwargs: Additional provider-specific parameters\n            \n        Returns:\n            Completion response\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "model": {
                        "type": "string",
                        "description": "Model to use"
                    },
                    "messages": {
                        "type": "string",
                        "description": "Conversation messages"
                    },
                    "temperature": {
                        "type": "string",
                        "description": "Sampling temperature"
                    },
                    "max_tokens": {
                        "type": "string",
                        "description": "Maximum tokens to generate"
                    },
                    "stream": {
                        "type": "string",
                        "description": "Whether to stream response"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "model",
                    "messages",
                    "temperature",
                    "max_tokens",
                    "stream",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\routing\\providers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "count_tokens",
            "description": "Count tokens for given text and model.\n        \n        Args:\n            text: Text to count tokens for\n            model: Model to use for counting\n            \n        Returns:\n            Token count\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "Text to count tokens for"
                    },
                    "model": {
                        "type": "string",
                        "description": "Model to use for counting"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "text",
                    "model",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\routing\\providers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_model_info",
            "description": "Get information about a model.\n        \n        Args:\n            model: Model to get info for\n            \n        Returns:\n            Model information including limits, pricing, etc.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "model": {
                        "type": "string",
                        "description": "Model to get info for"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "model",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\routing\\providers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "is_available",
            "description": "Check if model is available.\n        \n        Args:\n            model: Model to check\n            \n        Returns:\n            True if model is available\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "model": {
                        "type": "string",
                        "description": "Model to check"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "model",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\routing\\providers\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "name",
            "description": "Get rule name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\routing\\rules\\base.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "evaluate",
            "description": "Evaluate query and return routing decision if applicable.\n        \n        Args:\n            query: Query to evaluate\n            \n        Returns:\n            RoutingDecision if rule applies, None otherwise\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Query to evaluate"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "query",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\routing\\rules\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "name",
            "description": "Get rule name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\routing\\rules\\complexity.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "Get rule name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\routing\\rules\\length.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "Get rule name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\routing\\rules\\task_type.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "success",
            "description": "Create successful auth result.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\security\\auth\\models.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "failure",
            "description": "Create failed auth result.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\security\\auth\\models.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_usage",
            "description": "Get current usage for a key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\security\\rate_limit\\limiter.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "increment",
            "description": "Increment usage and return new value.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\security\\rate_limit\\limiter.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "reset",
            "description": "Reset usage for a key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\security\\rate_limit\\limiter.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "validate_username",
            "description": "\n        Validate username format.\n        \n        Args:\n            username: Username to validate\n            \n        Returns:\n            Validated username\n            \n        Raises:\n            ValidationError: If invalid\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\security\\validation\\inputs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "validate_email",
            "description": "\n        Validate email format.\n        \n        Args:\n            email: Email to validate\n            \n        Returns:\n            Validated email (lowercase)\n            \n        Raises:\n            ValidationError: If invalid\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\security\\validation\\inputs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "validate_path",
            "description": "\n        Validate file path (prevent traversal).\n        \n        Args:\n            path: Path to validate\n            base_path: Base path to restrict to\n            \n        Returns:\n            Validated Path object\n            \n        Raises:\n            ValidationError: If invalid\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\security\\validation\\inputs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "sanitize_query",
            "description": "\n        Sanitize search query.\n        \n        Args:\n            query: Query string to sanitize\n            max_length: Maximum allowed length\n            \n        Returns:\n            Sanitized query\n            \n        Raises:\n            ValidationError: If suspicious patterns detected\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\security\\validation\\inputs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "validate_json_field",
            "description": "\n        Validate JSON field.\n        \n        Args:\n            data: JSON data dict\n            field: Field name\n            field_type: Expected type\n            required: Whether field is required\n            default: Default value if not required\n            \n        Returns:\n            Field value\n            \n        Raises:\n            ValidationError: If invalid\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\security\\validation\\inputs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "validate_enum",
            "description": "\n        Validate enum/choice field.\n        \n        Args:\n            value: Value to validate\n            allowed: List of allowed values\n            field_name: Field name for error message\n            \n        Returns:\n            Validated value\n            \n        Raises:\n            ValidationError: If not in allowed list\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\security\\validation\\inputs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "validate_integer",
            "description": "\n        Validate integer value.\n        \n        Args:\n            value: Value to validate\n            min_value: Minimum allowed value\n            max_value: Maximum allowed value\n            field_name: Field name for error message\n            \n        Returns:\n            Validated integer\n            \n        Raises:\n            ValidationError: If invalid\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\security\\validation\\inputs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "escape_html",
            "description": "\n        Escape HTML special characters.\n        \n        Args:\n            text: Text to escape\n            \n        Returns:\n            Escaped text\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\security\\validation\\inputs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "transaction",
            "description": "Context manager for transactions (if supported).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\storage\\chromadb_client.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create from dictionary configuration.\n        \n        Args:\n            config: Configuration dictionary\n            \n        Returns:\n            StorageConfig instance\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\storage\\config.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "create_vector_store",
            "description": "Create a vector store instance based on configuration.\n        \n        Args:\n            config: Store configuration dictionary\n            \n        Returns:\n            VectorStore instance\n            \n        Raises:\n            ValueError: If store type is not supported\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "Store configuration dictionary"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "Raises": {
                        "type": "string"
                    },
                    "ValueError": {
                        "type": "string",
                        "description": "If store type is not supported"
                    }
                },
                "required": [
                    "config",
                    "Returns",
                    "Raises",
                    "ValueError"
                ]
            },
            "file": "src\\signal_hub\\storage\\factory.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "create_cache_store",
            "description": "Create a cache store instance based on configuration.\n        \n        Args:\n            config: Store configuration dictionary\n            \n        Returns:\n            CacheStore instance\n            \n        Raises:\n            ValueError: If store type is not supported\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "Store configuration dictionary"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "Raises": {
                        "type": "string"
                    },
                    "ValueError": {
                        "type": "string",
                        "description": "If store type is not supported"
                    }
                },
                "required": [
                    "config",
                    "Returns",
                    "Raises",
                    "ValueError"
                ]
            },
            "file": "src\\signal_hub\\storage\\factory.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "create_from_config",
            "description": "Create all stores from a configuration dictionary.\n        \n        Args:\n            config: Full configuration with 'vector_store' and 'cache_store' sections\n            \n        Returns:\n            Dictionary with 'vector_store' and 'cache_store' instances\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "Full configuration with 'vector_store' and 'cache_store' sections"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "config",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\factory.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "create",
            "description": "Create a new document.\n        \n        Args:\n            content: Document content\n            embedding: Embedding vector\n            metadata: Optional metadata\n            doc_id: Optional document ID\n            \n        Returns:\n            New Document instance\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\storage\\models.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "similarity",
            "description": "Get similarity score (1 - distance for cosine).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\storage\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create from dictionary.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\signal_hub\\storage\\models.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "eq",
            "description": "Create equality condition.\n        \n        Args:\n            field: Field name\n            value: Value to match\n            \n        Returns:\n            Condition dictionary\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "field": {
                        "type": "string",
                        "description": "Field name"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value to match"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "field",
                    "value",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\queries.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "ne",
            "description": "Create not-equal condition.\n        \n        Args:\n            field: Field name\n            value: Value to not match\n            \n        Returns:\n            Condition dictionary\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "field": {
                        "type": "string",
                        "description": "Field name"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value to not match"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "field",
                    "value",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\queries.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "gt",
            "description": "Create greater-than condition.\n        \n        Args:\n            field: Field name\n            value: Value to compare\n            \n        Returns:\n            Condition dictionary\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "field": {
                        "type": "string",
                        "description": "Field name"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value to compare"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "field",
                    "value",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\queries.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "gte",
            "description": "Create greater-than-or-equal condition.\n        \n        Args:\n            field: Field name\n            value: Value to compare\n            \n        Returns:\n            Condition dictionary\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "field": {
                        "type": "string",
                        "description": "Field name"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value to compare"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "field",
                    "value",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\queries.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "lt",
            "description": "Create less-than condition.\n        \n        Args:\n            field: Field name\n            value: Value to compare\n            \n        Returns:\n            Condition dictionary\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "field": {
                        "type": "string",
                        "description": "Field name"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value to compare"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "field",
                    "value",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\queries.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "lte",
            "description": "Create less-than-or-equal condition.\n        \n        Args:\n            field: Field name\n            value: Value to compare\n            \n        Returns:\n            Condition dictionary\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "field": {
                        "type": "string",
                        "description": "Field name"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value to compare"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "field",
                    "value",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\queries.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "in_",
            "description": "Create in-list condition.\n        \n        Args:\n            field: Field name\n            values: List of values\n            \n        Returns:\n            Condition dictionary\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "field": {
                        "type": "string",
                        "description": "Field name"
                    },
                    "values": {
                        "type": "string",
                        "description": "List of values"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "field",
                    "values",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\queries.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "nin",
            "description": "Create not-in-list condition.\n        \n        Args:\n            field: Field name\n            values: List of values\n            \n        Returns:\n            Condition dictionary\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "field": {
                        "type": "string",
                        "description": "Field name"
                    },
                    "values": {
                        "type": "string",
                        "description": "List of values"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "field",
                    "values",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\queries.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get",
            "description": "Get a value from cache.\n        \n        Args:\n            key: Cache key\n            \n        Returns:\n            Cached value or None if not found\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Cache key"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "key",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\interfaces\\cache_store.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "set",
            "description": "Set a value in cache.\n        \n        Args:\n            key: Cache key\n            value: Value to cache\n            ttl: Time to live in seconds (optional)\n            \n        Returns:\n            True if successful\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Cache key"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value to cache"
                    },
                    "ttl": {
                        "type": "string",
                        "description": "Time to live in seconds (optional)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "key",
                    "value",
                    "ttl",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\interfaces\\cache_store.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete",
            "description": "Delete a key from cache.\n        \n        Args:\n            key: Cache key to delete\n            \n        Returns:\n            True if key was deleted, False if not found\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Cache key to delete"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "key",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\interfaces\\cache_store.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "exists",
            "description": "Check if a key exists in cache.\n        \n        Args:\n            key: Cache key to check\n            \n        Returns:\n            True if key exists\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Cache key to check"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "key",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\interfaces\\cache_store.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "clear",
            "description": "Clear all cache entries.\n        \n        Returns:\n            True if successful\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\storage\\interfaces\\cache_store.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_many",
            "description": "Get multiple values from cache.\n        \n        Args:\n            keys: List of cache keys\n            \n        Returns:\n            Dictionary of key-value pairs (only existing keys)\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "keys": {
                        "type": "string",
                        "description": "List of cache keys"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "keys",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\interfaces\\cache_store.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "set_many",
            "description": "Set multiple values in cache.\n        \n        Args:\n            items: Dictionary of key-value pairs\n            ttl: Time to live in seconds (optional)\n            \n        Returns:\n            True if successful\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "string",
                        "description": "Dictionary of key-value pairs"
                    },
                    "ttl": {
                        "type": "string",
                        "description": "Time to live in seconds (optional)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "items",
                    "ttl",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\interfaces\\cache_store.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "add_vectors",
            "description": "Add vectors to the store.\n        \n        Args:\n            vectors: List of embedding vectors\n            texts: List of text content\n            metadata: List of metadata dictionaries\n            \n        Returns:\n            List of IDs for the added vectors\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "vectors": {
                        "type": "string",
                        "description": "List of embedding vectors"
                    },
                    "texts": {
                        "type": "string",
                        "description": "List of text content"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "List of metadata dictionaries"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "vectors",
                    "texts",
                    "metadata",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\interfaces\\vector_store.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "search",
            "description": "Search for similar vectors.\n        \n        Args:\n            query_vector: Query embedding vector\n            k: Number of results to return\n            filter_dict: Optional metadata filters\n            \n        Returns:\n            List of search results ordered by similarity\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "query_vector": {
                        "type": "string",
                        "description": "Query embedding vector"
                    },
                    "k": {
                        "type": "string",
                        "description": "Number of results to return"
                    },
                    "filter_dict": {
                        "type": "string",
                        "description": "Optional metadata filters"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "query_vector",
                    "k",
                    "filter_dict",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\interfaces\\vector_store.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_by_ids",
            "description": "Get vectors by their IDs.\n        \n        Args:\n            ids: List of vector IDs\n            \n        Returns:\n            List of search results\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ids": {
                        "type": "string",
                        "description": "List of vector IDs"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "ids",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\interfaces\\vector_store.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete",
            "description": "Delete vectors by IDs.\n        \n        Args:\n            ids: List of vector IDs to delete\n            \n        Returns:\n            True if successful\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ids": {
                        "type": "string",
                        "description": "List of vector IDs to delete"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "ids",
                    "Returns"
                ]
            },
            "file": "src\\signal_hub\\storage\\interfaces\\vector_store.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "clear",
            "description": "Clear all vectors from the store.\n        \n        Returns:\n            True if successful\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\storage\\interfaces\\vector_store.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "count",
            "description": "Get the total number of vectors.\n        \n        Returns:\n            Number of vectors in the store\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\storage\\interfaces\\vector_store.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "async_wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\utils\\logging.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "sync_wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\utils\\logging.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "time",
            "description": "Context manager to time an operation.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\signal_hub\\utils\\metrics.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "event_loop",
            "description": "Create an instance of the default event loop for the test session.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_data_dir",
            "description": "Path to test data directory.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "tmp_workspace",
            "description": "Create a temporary workspace for tests.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_env",
            "description": "Mock environment variables for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monkeypatch": {
                        "type": "string"
                    }
                },
                "required": [
                    "monkeypatch"
                ]
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "edition_basic",
            "description": "Configure Signal Hub Basic edition for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monkeypatch": {
                        "type": "string"
                    }
                },
                "required": [
                    "monkeypatch"
                ]
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "edition_pro",
            "description": "Configure Signal Hub Pro edition for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monkeypatch": {
                        "type": "string"
                    }
                },
                "required": [
                    "monkeypatch"
                ]
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "early_access",
            "description": "Enable early access mode for testing all features.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "monkeypatch": {
                        "type": "string"
                    }
                },
                "required": [
                    "monkeypatch"
                ]
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_code_file",
            "description": "Create a sample Python file for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_config",
            "description": "Create a sample configuration file.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_mcp_server",
            "description": "Mock MCP server for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest_asyncio.fixture"
            ]
        },
        {
            "name": "capture_logs",
            "description": "Fixture to capture and assert on logs.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "caplog": {
                        "type": "string"
                    }
                },
                "required": [
                    "caplog"
                ]
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "embedding_service",
            "description": "Create embedding service with local provider.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_batch_embedding_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_large_batch_processing",
            "description": "Test processing large number of chunks.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "embedding_service"
                ]
            },
            "file": "tests\\integration\\test_batch_embedding_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_progress_tracking_accuracy",
            "description": "Test accuracy of progress tracking.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "embedding_service"
                ]
            },
            "file": "tests\\integration\\test_batch_embedding_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_concurrent_vs_sequential_performance",
            "description": "Compare concurrent vs sequential processing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "embedding_service"
                ]
            },
            "file": "tests\\integration\\test_batch_embedding_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_memory_efficiency",
            "description": "Test memory efficiency with large batches.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "embedding_service"
                ]
            },
            "file": "tests\\integration\\test_batch_embedding_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_real_world_scenario",
            "description": "Test realistic codebase indexing scenario.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "embedding_service"
                ]
            },
            "file": "tests\\integration\\test_batch_embedding_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "client",
            "description": "Create a test ChromaDB client.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_chromadb_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_client_connect_disconnect",
            "description": "Test client connection lifecycle.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_chromadb_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_create_collection",
            "description": "Test creating a collection.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\integration\\test_chromadb_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_collection",
            "description": "Test getting an existing collection.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\integration\\test_chromadb_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_or_create_collection",
            "description": "Test get or create collection.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\integration\\test_chromadb_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_collection",
            "description": "Test deleting a collection.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\integration\\test_chromadb_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_collection_add_documents",
            "description": "Test adding documents to collection.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\integration\\test_chromadb_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_collection_query",
            "description": "Test querying collection.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\integration\\test_chromadb_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_collection_query_with_filter",
            "description": "Test querying with metadata filter.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\integration\\test_chromadb_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_collection_get_by_id",
            "description": "Test getting documents by ID.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\integration\\test_chromadb_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_collection_update",
            "description": "Test updating documents.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\integration\\test_chromadb_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_collection_delete",
            "description": "Test deleting documents.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\integration\\test_chromadb_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_collection_clear",
            "description": "Test clearing all documents.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\integration\\test_chromadb_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_concurrent_operations",
            "description": "Test concurrent operations on collections.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "tests\\integration\\test_chromadb_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_persistence",
            "description": "Test data persistence across client restarts.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_chromadb_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_environment",
            "description": "Set up test environment with all components.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "tmp_path"
                ]
            },
            "file": "tests\\integration\\test_chunking_search_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_python_code",
            "description": "Sample Python code for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_chunking_search_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_chunk_and_index",
            "description": "Test chunking code and indexing for search.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_environment": {
                        "type": "string"
                    },
                    "sample_python_code": {
                        "type": "string"
                    },
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_environment",
                    "sample_python_code",
                    "tmp_path"
                ]
            },
            "file": "tests\\integration\\test_chunking_search_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_indexed_code",
            "description": "Test searching indexed code.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_environment": {
                        "type": "string"
                    },
                    "sample_python_code": {
                        "type": "string"
                    },
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_environment",
                    "sample_python_code",
                    "tmp_path"
                ]
            },
            "file": "tests\\integration\\test_chunking_search_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_with_filters",
            "description": "Test searching with metadata filters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_environment": {
                        "type": "string"
                    },
                    "sample_python_code": {
                        "type": "string"
                    },
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_environment",
                    "sample_python_code",
                    "tmp_path"
                ]
            },
            "file": "tests\\integration\\test_chunking_search_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_with_context",
            "description": "Test that parent context is preserved in search.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_environment": {
                        "type": "string"
                    },
                    "sample_python_code": {
                        "type": "string"
                    },
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_environment",
                    "sample_python_code",
                    "tmp_path"
                ]
            },
            "file": "tests\\integration\\test_chunking_search_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_hybrid_search",
            "description": "Test hybrid semantic + keyword search.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_environment": {
                        "type": "string"
                    },
                    "sample_python_code": {
                        "type": "string"
                    },
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_environment",
                    "sample_python_code",
                    "tmp_path"
                ]
            },
            "file": "tests\\integration\\test_chunking_search_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_performance",
            "description": "Test search performance with multiple files.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_environment": {
                        "type": "string"
                    },
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_environment",
                    "tmp_path"
                ]
            },
            "file": "tests\\integration\\test_chunking_search_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_caching",
            "description": "Test search result caching.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_environment": {
                        "type": "string"
                    },
                    "sample_python_code": {
                        "type": "string"
                    },
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_environment",
                    "sample_python_code",
                    "tmp_path"
                ]
            },
            "file": "tests\\integration\\test_chunking_search_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "large_repo",
            "description": "Create a larger test repository for performance testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_scanner_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_performance_large_repo",
            "description": "Test scanning performance on larger repository.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "large_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "large_repo"
                ]
            },
            "file": "tests\\integration\\test_scanner_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_real_python_project",
            "description": "Test scanning the Signal Hub project itself.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_scanner_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_concurrent_scans",
            "description": "Test running multiple scans concurrently.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\integration\\test_scanner_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_memory_usage_streaming",
            "description": "Test that async iteration doesn't load all files in memory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "large_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "large_repo"
                ]
            },
            "file": "tests\\integration\\test_scanner_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_progress_accuracy",
            "description": "Test that progress reporting is accurate.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "large_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "large_repo"
                ]
            },
            "file": "tests\\integration\\test_scanner_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "search_function",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_features.py",
            "decorator": [
                "require_feature"
            ]
        },
        {
            "name": "ml_routing_function",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_features.py",
            "decorator": [
                "require_feature"
            ]
        },
        {
            "name": "enterprise_function",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_features.py",
            "decorator": [
                "require_feature"
            ]
        },
        {
            "name": "test_successful_request",
            "description": "Test logging successful request.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_middleware.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_failed_request",
            "description": "Test logging failed request.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_middleware.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_successful_request_metrics",
            "description": "Test metrics for successful request.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_middleware.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_failed_request_metrics",
            "description": "Test metrics for failed request.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_middleware.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_rate_limit_allows_requests",
            "description": "Test rate limit allows requests under limit.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_middleware.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_rate_limit_blocks_excess_requests",
            "description": "Test rate limit blocks excess requests.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_middleware.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_rate_limit_time_window",
            "description": "Test rate limit resets after time window.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_middleware.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_miss",
            "description": "Test cache miss.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_middleware.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_hit",
            "description": "Test cache hit.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_middleware.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_ttl",
            "description": "Test cache TTL expiration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_middleware.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_only_for_search_methods",
            "description": "Test cache only applies to search methods.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_middleware.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_empty_stack",
            "description": "Test empty middleware stack.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_middleware.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_single_middleware",
            "description": "Test stack with single middleware.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_middleware.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_multiple_middleware_order",
            "description": "Test middleware execution order.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_middleware.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_health_check",
            "description": "Test health check.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_monitoring.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_readiness_check",
            "description": "Test readiness check.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_monitoring.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_metrics_prometheus",
            "description": "Test Prometheus metrics format.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_monitoring.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_metrics_json",
            "description": "Test JSON metrics format.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_monitoring.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_system_info",
            "description": "Test system info.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_monitoring.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_debug_info",
            "description": "Test debug info.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_monitoring.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_health_tool",
            "description": "Test health tool handler.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_monitoring.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_metrics_tool",
            "description": "Test metrics tool handler.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_monitoring.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_system_info_tool",
            "description": "Test system info tool handler.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_monitoring.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_unknown_tool",
            "description": "Test handling unknown tool.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_monitoring.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_settings",
            "description": "Create mock settings for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_server.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "server",
            "description": "Create server instance for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_settings": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_settings"
                ]
            },
            "file": "tests\\unit\\test_server.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_handle_initialize",
            "description": "Test initialization handler.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "server": {
                        "type": "string"
                    }
                },
                "required": [
                    "server"
                ]
            },
            "file": "tests\\unit\\test_server.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_list_tools",
            "description": "Test list tools handler.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "server": {
                        "type": "string"
                    }
                },
                "required": [
                    "server"
                ]
            },
            "file": "tests\\unit\\test_server.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_call_tool_success",
            "description": "Test successful tool call.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "server": {
                        "type": "string"
                    }
                },
                "required": [
                    "server"
                ]
            },
            "file": "tests\\unit\\test_server.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_call_tool_not_found",
            "description": "Test calling non-existent tool.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "server": {
                        "type": "string"
                    }
                },
                "required": [
                    "server"
                ]
            },
            "file": "tests\\unit\\test_server.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_handle_shutdown",
            "description": "Test shutdown handler.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "server": {
                        "type": "string"
                    }
                },
                "required": [
                    "server"
                ]
            },
            "file": "tests\\unit\\test_server.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_protocol_handler_registration",
            "description": "Test protocol handlers are registered.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "server": {
                        "type": "string"
                    }
                },
                "required": [
                    "server"
                ]
            },
            "file": "tests\\unit\\test_server.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_ping_handler",
            "description": "Test ping handler.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "server": {
                        "type": "string"
                    }
                },
                "required": [
                    "server"
                ]
            },
            "file": "tests\\unit\\test_server.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_shutdown_sequence",
            "description": "Test graceful shutdown sequence.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "server": {
                        "type": "string"
                    }
                },
                "required": [
                    "server"
                ]
            },
            "file": "tests\\unit\\test_server.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_health_check_server",
            "description": "Test health check server startup.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "server": {
                        "type": "string"
                    },
                    "mock_settings": {
                        "type": "string"
                    }
                },
                "required": [
                    "server",
                    "mock_settings"
                ]
            },
            "file": "tests\\unit\\test_server.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "sample_tool",
            "description": "Create a sample tool.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "registry",
            "description": "Create a tool registry.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_execute_tool_success",
            "description": "Test successful tool execution.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "registry": {
                        "type": "string"
                    }
                },
                "required": [
                    "registry"
                ]
            },
            "file": "tests\\unit\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_tool_not_found",
            "description": "Test executing non-existent tool.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "registry": {
                        "type": "string"
                    }
                },
                "required": [
                    "registry"
                ]
            },
            "file": "tests\\unit\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_execute_tool_missing_params",
            "description": "Test executing tool with missing required params.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "registry": {
                        "type": "string"
                    }
                },
                "required": [
                    "registry"
                ]
            },
            "file": "tests\\unit\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "my_tool",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\test_tools.py",
            "decorator": [
                "create_tool"
            ]
        },
        {
            "name": "cache",
            "description": "Create test cache.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\caching\\test_semantic_cache.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_initialization",
            "description": "Test cache initialization.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\caching\\test_semantic_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_miss",
            "description": "Test cache miss on empty cache.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cache": {
                        "type": "string"
                    }
                },
                "required": [
                    "cache"
                ]
            },
            "file": "tests\\unit\\caching\\test_semantic_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_put_and_get",
            "description": "Test storing and retrieving from cache.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cache": {
                        "type": "string"
                    }
                },
                "required": [
                    "cache"
                ]
            },
            "file": "tests\\unit\\caching\\test_semantic_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_similarity_matching",
            "description": "Test semantic similarity matching.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cache": {
                        "type": "string"
                    }
                },
                "required": [
                    "cache"
                ]
            },
            "file": "tests\\unit\\caching\\test_semantic_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_exact_match",
            "description": "Test exact query matching.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cache": {
                        "type": "string"
                    }
                },
                "required": [
                    "cache"
                ]
            },
            "file": "tests\\unit\\caching\\test_semantic_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_context_aware_caching",
            "description": "Test context-aware caching.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cache": {
                        "type": "string"
                    }
                },
                "required": [
                    "cache"
                ]
            },
            "file": "tests\\unit\\caching\\test_semantic_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_ttl_expiration",
            "description": "Test TTL expiration.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cache": {
                        "type": "string"
                    }
                },
                "required": [
                    "cache"
                ]
            },
            "file": "tests\\unit\\caching\\test_semantic_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_clear",
            "description": "Test clearing cache.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cache": {
                        "type": "string"
                    }
                },
                "required": [
                    "cache"
                ]
            },
            "file": "tests\\unit\\caching\\test_semantic_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_stats",
            "description": "Test cache statistics.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cache": {
                        "type": "string"
                    }
                },
                "required": [
                    "cache"
                ]
            },
            "file": "tests\\unit\\caching\\test_semantic_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_similar",
            "description": "Test searching for similar queries.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cache": {
                        "type": "string"
                    }
                },
                "required": [
                    "cache"
                ]
            },
            "file": "tests\\unit\\caching\\test_semantic_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_warmup",
            "description": "Test cache warming.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cache": {
                        "type": "string"
                    }
                },
                "required": [
                    "cache"
                ]
            },
            "file": "tests\\unit\\caching\\test_semantic_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_disabled_cache",
            "description": "Test disabled cache returns None.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\caching\\test_semantic_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_hit_count_tracking",
            "description": "Test cache hit counting.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cache": {
                        "type": "string"
                    }
                },
                "required": [
                    "cache"
                ]
            },
            "file": "tests\\unit\\caching\\test_semantic_cache.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "tool",
            "description": "Create search tool with mock engine.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\core\\tools\\test_search_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_basic_search",
            "description": "Test basic code search.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\core\\tools\\test_search_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_with_filters",
            "description": "Test search with language filter.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\core\\tools\\test_search_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_with_file_pattern",
            "description": "Test search with file pattern.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\core\\tools\\test_search_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_error_handling",
            "description": "Test error handling.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\core\\tools\\test_search_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_missing_query",
            "description": "Test missing required parameter.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\core\\tools\\test_search_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "tool",
            "description": "Create explain tool with mocks.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\core\\tools\\test_search_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_explain_file",
            "description": "Test explaining a file.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\core\\tools\\test_search_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_explain_function",
            "description": "Test explaining a specific function.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\core\\tools\\test_search_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_include_dependencies",
            "description": "Test including dependencies.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\core\\tools\\test_search_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "tool",
            "description": "Create find similar tool.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\core\\tools\\test_search_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_find_similar_code",
            "description": "Test finding similar code.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\core\\tools\\test_search_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "tool",
            "description": "Create context tool.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\core\\tools\\test_search_tools.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_get_context_for_task",
            "description": "Test getting context for a task.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\core\\tools\\test_search_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_context_with_current_file",
            "description": "Test getting context with current file context.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tool": {
                        "type": "string"
                    }
                },
                "required": [
                    "tool"
                ]
            },
            "file": "tests\\unit\\core\\tools\\test_search_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "tracker",
            "description": "Create test cost tracker.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "tmp_path"
                ]
            },
            "file": "tests\\unit\\costs\\test_tracker.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_track_usage",
            "description": "Test tracking model usage.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tracker": {
                        "type": "string"
                    }
                },
                "required": [
                    "tracker"
                ]
            },
            "file": "tests\\unit\\costs\\test_tracker.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_hit_zero_cost",
            "description": "Test cache hits have zero cost.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tracker": {
                        "type": "string"
                    }
                },
                "required": [
                    "tracker"
                ]
            },
            "file": "tests\\unit\\costs\\test_tracker.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cost_summary",
            "description": "Test cost summary calculation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tracker": {
                        "type": "string"
                    }
                },
                "required": [
                    "tracker"
                ]
            },
            "file": "tests\\unit\\costs\\test_tracker.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cost_trends",
            "description": "Test cost trend tracking.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tracker": {
                        "type": "string"
                    }
                },
                "required": [
                    "tracker"
                ]
            },
            "file": "tests\\unit\\costs\\test_tracker.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_model_distribution",
            "description": "Test tracking model distribution.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tracker": {
                        "type": "string"
                    }
                },
                "required": [
                    "tracker"
                ]
            },
            "file": "tests\\unit\\costs\\test_tracker.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cleanup_old_records",
            "description": "Test cleaning up old records.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tracker": {
                        "type": "string"
                    }
                },
                "required": [
                    "tracker"
                ]
            },
            "file": "tests\\unit\\costs\\test_tracker.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "scanner",
            "description": "Create a scanner instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\indexing\\test_scanner.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_repo",
            "description": "Create a test repository structure.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\indexing\\test_scanner.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_scan_basic",
            "description": "Test basic scanning functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "scanner": {
                        "type": "string"
                    },
                    "test_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "scanner",
                    "test_repo"
                ]
            },
            "file": "tests\\unit\\indexing\\test_scanner.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_scan_async_iterator",
            "description": "Test async iteration over files.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "scanner": {
                        "type": "string"
                    },
                    "test_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "scanner",
                    "test_repo"
                ]
            },
            "file": "tests\\unit\\indexing\\test_scanner.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_scan_with_custom_ignore",
            "description": "Test scanning with custom ignore patterns.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "scanner": {
                        "type": "string"
                    },
                    "test_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "scanner",
                    "test_repo"
                ]
            },
            "file": "tests\\unit\\indexing\\test_scanner.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_scan_nonexistent_path",
            "description": "Test scanning non-existent path.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "scanner": {
                        "type": "string"
                    }
                },
                "required": [
                    "scanner"
                ]
            },
            "file": "tests\\unit\\indexing\\test_scanner.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_scan_file_not_directory",
            "description": "Test scanning a file instead of directory.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "scanner": {
                        "type": "string"
                    },
                    "test_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "scanner",
                    "test_repo"
                ]
            },
            "file": "tests\\unit\\indexing\\test_scanner.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_scan_with_progress",
            "description": "Test scanning with progress reporting.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "scanner": {
                        "type": "string"
                    },
                    "test_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "scanner",
                    "test_repo"
                ]
            },
            "file": "tests\\unit\\indexing\\test_scanner.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_scan_cancellation",
            "description": "Test cancelling a scan operation.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "scanner": {
                        "type": "string"
                    },
                    "test_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "scanner",
                    "test_repo"
                ]
            },
            "file": "tests\\unit\\indexing\\test_scanner.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_scan_with_max_depth",
            "description": "Test scanning with maximum depth limit.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_repo"
                ]
            },
            "file": "tests\\unit\\indexing\\test_scanner.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_scan_symlinks",
            "description": "Test handling of symbolic links.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "test_repo": {
                        "type": "string"
                    }
                },
                "required": [
                    "test_repo"
                ]
            },
            "file": "tests\\unit\\indexing\\test_scanner.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_scan_permission_errors",
            "description": "Test handling of permission errors.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "scanner": {
                        "type": "string"
                    }
                },
                "required": [
                    "scanner"
                ]
            },
            "file": "tests\\unit\\indexing\\test_scanner.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "strategy",
            "description": "Create Python chunking strategy.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\indexing\\chunking\\test_python_strategy.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "python_code",
            "description": "Sample Python code for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\indexing\\chunking\\test_python_strategy.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "processor",
            "description": "Create batch processor for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\indexing\\embeddings\\test_batch_processor.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_batch_collection",
            "description": "Test batch collection logic.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "processor": {
                        "type": "string"
                    }
                },
                "required": [
                    "processor"
                ]
            },
            "file": "tests\\unit\\indexing\\embeddings\\test_batch_processor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_max_wait_time",
            "description": "Test that batches are processed after max wait time.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "processor": {
                        "type": "string"
                    }
                },
                "required": [
                    "processor"
                ]
            },
            "file": "tests\\unit\\indexing\\embeddings\\test_batch_processor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_queue_full_error",
            "description": "Test queue full error.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "processor": {
                        "type": "string"
                    }
                },
                "required": [
                    "processor"
                ]
            },
            "file": "tests\\unit\\indexing\\embeddings\\test_batch_processor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_callback_execution",
            "description": "Test that callbacks are executed.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "processor": {
                        "type": "string"
                    }
                },
                "required": [
                    "processor"
                ]
            },
            "file": "tests\\unit\\indexing\\embeddings\\test_batch_processor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_embedding_service",
            "description": "Create mock embedding service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\indexing\\embeddings\\test_batch_processor.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_process_with_progress",
            "description": "Test processing with progress tracking.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "tests\\unit\\indexing\\embeddings\\test_batch_processor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_retry_on_failure",
            "description": "Test retry mechanism on failures.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "tests\\unit\\indexing\\embeddings\\test_batch_processor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_concurrent_batches",
            "description": "Test concurrent batch processing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_embedding_service": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_embedding_service"
                ]
            },
            "file": "tests\\unit\\indexing\\embeddings\\test_batch_processor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_progress_calculation",
            "description": "Test progress calculation accuracy.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\indexing\\embeddings\\test_batch_processor.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "extractor",
            "description": "Create metadata extractor instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\indexing\\metadata\\test_extractor.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "python_code",
            "description": "Sample Python code for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\indexing\\metadata\\test_extractor.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "javascript_code",
            "description": "Sample JavaScript code for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\indexing\\metadata\\test_extractor.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "parser",
            "description": "Create a mock parser.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\indexing\\parsers\\test_base.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "parser",
            "description": "Create JavaScript parser.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\indexing\\parsers\\test_javascript.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "parser",
            "description": "Create Markdown parser.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\indexing\\parsers\\test_markdown.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "parser",
            "description": "Create Python parser.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\indexing\\parsers\\test_python.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "registry",
            "description": "Create parser registry.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\indexing\\parsers\\test_registry.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "assembler",
            "description": "Create context assembler with default config.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\retrieval\\assembly\\test_assembler.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "sample_search_results",
            "description": "Create sample search results for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\retrieval\\assembly\\test_assembler.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "search_engine",
            "description": "Create search engine with mocks.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\retrieval\\search\\test_engine.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_basic_search",
            "description": "Test basic semantic search.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "search_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "search_engine"
                ]
            },
            "file": "tests\\unit\\retrieval\\search\\test_engine.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_with_filters",
            "description": "Test search with metadata filters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "search_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "search_engine"
                ]
            },
            "file": "tests\\unit\\retrieval\\search\\test_engine.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_with_language_filter",
            "description": "Test filtering by programming language.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "search_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "search_engine"
                ]
            },
            "file": "tests\\unit\\retrieval\\search\\test_engine.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_similarity_threshold",
            "description": "Test similarity threshold filtering.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "search_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "search_engine"
                ]
            },
            "file": "tests\\unit\\retrieval\\search\\test_engine.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_result_limit",
            "description": "Test result limit is respected.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "search_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "search_engine"
                ]
            },
            "file": "tests\\unit\\retrieval\\search\\test_engine.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_empty_query",
            "description": "Test handling of empty query.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "search_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "search_engine"
                ]
            },
            "file": "tests\\unit\\retrieval\\search\\test_engine.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_result_ranking",
            "description": "Test that results are properly ranked.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "search_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "search_engine"
                ]
            },
            "file": "tests\\unit\\retrieval\\search\\test_engine.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_result_structure",
            "description": "Test search result structure.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "search_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "search_engine"
                ]
            },
            "file": "tests\\unit\\retrieval\\search\\test_engine.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_batch_search",
            "description": "Test batch search functionality.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "search_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "search_engine"
                ]
            },
            "file": "tests\\unit\\retrieval\\search\\test_engine.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_reranking",
            "description": "Test result reranking.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "search_engine": {
                        "type": "string"
                    }
                },
                "required": [
                    "search_engine"
                ]
            },
            "file": "tests\\unit\\retrieval\\search\\test_engine.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\routing\\test_engine.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "key_manager",
            "description": "Create test key manager.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\security\\test_keys.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "adapter",
            "description": "Create ChromaDB adapter for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tmp_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "tmp_path"
                ]
            },
            "file": "tests\\unit\\storage\\test_chromadb_adapter.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_add_and_search_vectors",
            "description": "Test adding and searching vectors.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "adapter": {
                        "type": "string"
                    }
                },
                "required": [
                    "adapter"
                ]
            },
            "file": "tests\\unit\\storage\\test_chromadb_adapter.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_with_filters",
            "description": "Test searching with metadata filters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "adapter": {
                        "type": "string"
                    }
                },
                "required": [
                    "adapter"
                ]
            },
            "file": "tests\\unit\\storage\\test_chromadb_adapter.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_by_ids",
            "description": "Test retrieving vectors by IDs.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "adapter": {
                        "type": "string"
                    }
                },
                "required": [
                    "adapter"
                ]
            },
            "file": "tests\\unit\\storage\\test_chromadb_adapter.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_delete_vectors",
            "description": "Test deleting vectors.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "adapter": {
                        "type": "string"
                    }
                },
                "required": [
                    "adapter"
                ]
            },
            "file": "tests\\unit\\storage\\test_chromadb_adapter.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_clear_collection",
            "description": "Test clearing the collection.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "adapter": {
                        "type": "string"
                    }
                },
                "required": [
                    "adapter"
                ]
            },
            "file": "tests\\unit\\storage\\test_chromadb_adapter.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_update_metadata",
            "description": "Test updating vector metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "adapter": {
                        "type": "string"
                    }
                },
                "required": [
                    "adapter"
                ]
            },
            "file": "tests\\unit\\storage\\test_chromadb_adapter.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_health_check",
            "description": "Test health check.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "adapter": {
                        "type": "string"
                    }
                },
                "required": [
                    "adapter"
                ]
            },
            "file": "tests\\unit\\storage\\test_chromadb_adapter.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_empty_search",
            "description": "Test searching empty collection.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "adapter": {
                        "type": "string"
                    }
                },
                "required": [
                    "adapter"
                ]
            },
            "file": "tests\\unit\\storage\\test_chromadb_adapter.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_large_batch",
            "description": "Test adding large batch of vectors.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "adapter": {
                        "type": "string"
                    }
                },
                "required": [
                    "adapter"
                ]
            },
            "file": "tests\\unit\\storage\\test_chromadb_adapter.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_vector_store",
            "description": "Create a mock vector store for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\storage\\test_interfaces.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_vector_store_add_and_search",
            "description": "Test adding and searching vectors.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_store"
                ]
            },
            "file": "tests\\unit\\storage\\test_interfaces.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_vector_store_filter_search",
            "description": "Test searching with filters.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_store"
                ]
            },
            "file": "tests\\unit\\storage\\test_interfaces.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_vector_store_get_by_ids",
            "description": "Test getting vectors by IDs.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_store"
                ]
            },
            "file": "tests\\unit\\storage\\test_interfaces.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_vector_store_delete",
            "description": "Test deleting vectors.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_store"
                ]
            },
            "file": "tests\\unit\\storage\\test_interfaces.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_vector_store_clear",
            "description": "Test clearing all vectors.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_vector_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_vector_store"
                ]
            },
            "file": "tests\\unit\\storage\\test_interfaces.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "mock_cache_store",
            "description": "Create a mock cache store for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\storage\\test_interfaces.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_cache_store_basic_operations",
            "description": "Test basic cache operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cache_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cache_store"
                ]
            },
            "file": "tests\\unit\\storage\\test_interfaces.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_store_batch_operations",
            "description": "Test batch cache operations.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cache_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cache_store"
                ]
            },
            "file": "tests\\unit\\storage\\test_interfaces.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_store_clear",
            "description": "Test clearing cache.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cache_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cache_store"
                ]
            },
            "file": "tests\\unit\\storage\\test_interfaces.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_cache_store_complex_values",
            "description": "Test storing complex values.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_cache_store": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_cache_store"
                ]
            },
            "file": "tests\\unit\\storage\\test_interfaces.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "builder",
            "description": "Create a query builder.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\unit\\storage\\test_queries.py",
            "decorator": [
                "pytest.fixture"
            ]
        }
    ]
}