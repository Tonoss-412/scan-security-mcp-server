{
    "tools": [
        {
            "name": "frozen",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "resolve",
            "description": "Return MATCH_INFO for given request",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "handler",
            "description": "Execute matched request handler",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "property#pragma:nobranch",
                "abstractmethod"
            ]
        },
        {
            "name": "expect_handler",
            "description": "Expect handler for 100-continue processing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "http_exception",
            "description": "HTTPException instance raised on router's resolving, or None",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "property#pragma:nobranch",
                "abstractmethod"
            ]
        },
        {
            "name": "get_info",
            "description": "Return a dict with additional info useful for introspection",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod#pragma:nobranch"
            ]
        },
        {
            "name": "apps",
            "description": "Stack of nested applications.\n\n        Top level application is left-most element.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "property#pragma:nobranch",
                "abstractmethod"
            ]
        },
        {
            "name": "add_app",
            "description": "Add application to the nested apps stack.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "freeze",
            "description": "Freeze the match info.\n\n        The method is called after route resolution.\n\n        After the call .add_app() is forbidden.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "request",
            "description": "Request instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__await__",
            "description": "Execute the view handler.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "resolve",
            "description": "Return IP address for given hostname",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "close",
            "description": "Release resolver",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "quote_cookie",
            "description": "Return True if cookies should be quoted.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "clear",
            "description": "Clear all cookies if no predicate is passed.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "clear_domain",
            "description": "Clear all cookies for domain and all subdomains.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "update_cookies",
            "description": "Update cookies.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "filter_cookies",
            "description": "Return the jar's cookies filtered by their attributes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "write",
            "description": "Write chunk into stream.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "write_eof",
            "description": "Write last chunk.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "drain",
            "description": "Flush the write buffer.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "enable_compression",
            "description": "Enable HTTP body compression",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "enable_chunking",
            "description": "Enable HTTP chunked mode",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "write_headers",
            "description": "Write HTTP headers",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "log",
            "description": "Emit log to logger.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "enabled",
            "description": "Check if logger is enabled.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\abc.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "connected",
            "description": "Return True if the connection is open.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\base_protocol.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "writing_paused",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\base_protocol.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "closed",
            "description": "Is client session closed.\n\n        A readonly property.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "connector",
            "description": "Connector instance used for the session.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "cookie_jar",
            "description": "The session cookies.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "The session HTTP protocol version.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "requote_redirect_url",
            "description": "Do URL requoting on redirection handling.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "requote_redirect_url",
            "description": "Do URL requoting on redirection handling.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "requote_redirect_url.setter"
            ]
        },
        {
            "name": "loop",
            "description": "Session's loop.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "timeout",
            "description": "Timeout for the session.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "headers",
            "description": "The default headers of the client session.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "skip_auto_headers",
            "description": "Headers for which autogeneration should be skipped",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "auth",
            "description": "An object that represents HTTP Basic Authorization",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "json_serialize",
            "description": "Json serializer callable",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "connector_owner",
            "description": "Should connector be closed on session closing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "raise_for_status",
            "description": "Should `ClientResponse.raise_for_status()` be called for each response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "auto_decompress",
            "description": "Should the body response be automatically decompressed.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "trust_env",
            "description": "\n        Should proxies information from environment or netrc be trusted.\n\n        Information is from HTTP_PROXY / HTTPS_PROXY environment variables\n        or ~/.netrc file if present.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "trace_configs",
            "description": "A list of TraceConfig instances used for client tracing",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "code",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "code",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_exceptions.py",
            "decorator": [
                "code.setter"
            ]
        },
        {
            "name": "os_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "host",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "port",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ssl",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "description",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "certificate_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "host",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "port",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ssl",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "upgraded",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_proto.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "should_close",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_proto.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "read_timeout",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_proto.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "read_timeout",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_proto.py",
            "decorator": [
                "read_timeout.setter"
            ]
        },
        {
            "name": "fingerprint",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "skip_auto_headers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_writer",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_writer",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "_writer.setter"
            ]
        },
        {
            "name": "ssl",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "connection_key",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "host",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "port",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "request_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_writer",
            "description": "The writer task for streaming data.\n\n        _writer is only provided for backwards compatibility\n        for subclasses that may need to access it.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_writer",
            "description": "Set the writer task for streaming data.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "_writer.setter"
            ]
        },
        {
            "name": "cookies",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "cookies",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "cookies.setter"
            ]
        },
        {
            "name": "url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "url_obj",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "real_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "host",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "headers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "raw_headers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "request_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "content_disposition",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "connection",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "history",
            "description": "A sequence of of responses, if redirects occurred.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "links",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "closed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ok",
            "description": "Returns ``True`` if ``status`` is less than ``400``, ``False`` if not.\n\n        This is **not** a check for ``200 OK`` but a check that the response\n        status is under 400.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_reqrep.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "closed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_ws.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "close_code",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_ws.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "protocol",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_ws.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "compress",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_ws.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client_notakeover",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\client_ws.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "eof",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\compression_utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "unconsumed_tail",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\compression_utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "unused_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\compression_utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "loop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\connector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "transport",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\connector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "protocol",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\connector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "closed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\connector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "force_close",
            "description": "Ultimately close connection on releasing if True.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\connector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "limit",
            "description": "The total number for simultaneous connections.\n\n        If limit is 0 the connector has no limit.\n        The default limit size is 100.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\connector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "limit_per_host",
            "description": "The limit for simultaneous connections to the same endpoint.\n\n        Endpoints are the same if they are have equal\n        (host, port, is_ssl) triple.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\connector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "closed",
            "description": "Is connector closed.\n\n        A readonly property.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\connector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "quote_cookie",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\cookiejar.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_is_domain_match",
            "description": "Implements domain matching adhering to RFC 6265.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\cookiejar.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_parse_date",
            "description": "Implements date string parsing adhering to RFC 6265.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\cookiejar.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "quote_cookie",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\cookiejar.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_multipart",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\formdata.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "decode",
            "description": "Create a BasicAuth object from an Authorization HTTP header.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\helpers.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_url",
            "description": "Create BasicAuth from url.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\helpers.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "parse_mimetype",
            "description": "Parses a MIME type into its components.\n\n    mimetype is a MIME type string.\n\n    Returns a MimeType object.\n\n    Example:\n\n    >>> parse_mimetype('text/html; charset=utf-8')\n    MimeType(type='text', subtype='html', suffix='',\n             parameters={'charset': 'utf-8'})\n\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\helpers.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "parse_content_type",
            "description": "Parse Content-Type header.\n\n    Returns a tuple of the parsed content type and a\n    MappingProxyType of parameters.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\helpers.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "content_type",
            "description": "The value of content part for Content-Type HTTP header.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\helpers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset",
            "description": "The value of charset part for Content-Type HTTP header.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\helpers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "content_length",
            "description": "The value of Content-Length HTTP header.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\helpers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\helpers.py",
            "decorator": [
                "overload#type:ignore[override]"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\helpers.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\helpers.py",
            "decorator": [
                "overload#type:ignore[override]"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\helpers.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\helpers.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "must_be_empty_body",
            "description": "Check if a request must return an empty body.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\helpers.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "parse_message",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\http_parser.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "_is_chunked_te",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\http_parser.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "transport",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\http_writer.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "protocol",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\http_writer.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "Returns name specified in Content-Disposition header.\n\n        If the header is missing or malformed, returns None.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\multipart.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "filename",
            "description": "Returns filename specified in Content-Disposition header.\n\n        Returns None if the header is missing or malformed.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\multipart.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "from_response",
            "description": "Constructs reader instance from HTTP response.\n\n        :param response: :class:`~aiohttp.client.ClientResponse` instance\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\multipart.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_boundary_value",
            "description": "Wrap boundary parameter value in quotes, if necessary.\n\n        Reads self.boundary and returns a unicode string.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\multipart.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "boundary",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\multipart.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "size",
            "description": "Size of the payload.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\multipart.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "size",
            "description": "Size of the payload.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\payload.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "filename",
            "description": "Filename of the payload.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\payload.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "headers",
            "description": "Custom item headers",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\payload.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_binary_headers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\payload.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "encoding",
            "description": "Payload encoding",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\payload.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "content_type",
            "description": "Content type",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\payload.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "decode",
            "description": "Return string representation of the value.\n\n        This is named decode() to allow compatibility with bytes objects.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\payload.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "write",
            "description": "Write payload.\n\n        writer is an AbstractStreamWriter instance:\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\payload.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "size",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\payload.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "size",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\payload.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "size",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\payload.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "fast",
            "description": "--fast config option",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "request": {
                        "type": "string"
                    }
                },
                "required": [
                    "request"
                ]
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "loop_debug",
            "description": "--enable-loop-debug config option",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "request": {
                        "type": "string"
                    }
                },
                "required": [
                    "request"
                ]
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "_runtime_warning_context",
            "description": "Context manager which checks for RuntimeWarnings.\n\n    This exists specifically to\n    avoid \"coroutine 'X' was never awaited\" warnings being missed.\n\n    If RuntimeWarnings occur in the context a RuntimeError is raised.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "_passthrough_loop_context",
            "description": "Passthrough loop context.\n\n    Sets up and tears down a loop unless one is passed in via the loop\n    argument when it's passed straight through.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "loop": {
                        "type": "string"
                    }
                },
                "required": [
                    "loop"
                ]
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "loop",
            "description": "Return an instance of the event loop.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "loop_factory": {
                        "type": "string"
                    },
                    "fast": {
                        "type": "string"
                    },
                    "loop_debug": {
                        "type": "string"
                    }
                },
                "required": [
                    "loop_factory",
                    "fast",
                    "loop_debug"
                ]
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "proactor_loop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "unused_port",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "aiohttp_unused_port",
            "description": "Return a port that is unused on the current host.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "aiohttp_server",
            "description": "Factory to create a TestServer instance, given an app.\n\n    aiohttp_server(app, **kwargs)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "aiohttp_server": {
                        "type": "string"
                    }
                },
                "required": [
                    "aiohttp_server"
                ]
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "aiohttp_raw_server",
            "description": "Factory to create a RawTestServer instance, given a web handler.\n\n    aiohttp_raw_server(handler, **kwargs)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "raw_test_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "aiohttp_raw_server": {
                        "type": "string"
                    }
                },
                "required": [
                    "aiohttp_raw_server"
                ]
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "aiohttp_client",
            "description": "Factory to create a TestClient instance.\n\n    aiohttp_client(app, **kwargs)\n    aiohttp_client(server, **kwargs)\n    aiohttp_client(raw_server, **kwargs)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "go",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "go",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "test_client",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "aiohttp_client": {
                        "type": "string"
                    }
                },
                "required": [
                    "aiohttp_client"
                ]
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\pytest_plugin.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "_make_runner",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\test_utils.py",
            "decorator": [
                "abstractmethod#pragma:nocover"
            ]
        },
        {
            "name": "started",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\test_utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "closed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\test_utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "handler",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\test_utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__init__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\test_utils.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "__init__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\test_utils.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "host",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\test_utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "port",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\test_utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\test_utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "app",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\test_utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "session",
            "description": "An internal aiohttp.ClientSession.\n\n        Unlike the methods on the TestClient, client session requests\n        do not automatically include the host in the url queried, and\n        will require an absolute path to the resource.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\test_utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "loop_context",
            "description": "A contextmanager that creates an event_loop, for test purposes.\n\n    Handles the creation and cleanup of a test loop.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\test_utils.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "on_request_start",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\tracing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_request_chunk_sent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\tracing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_response_chunk_received",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\tracing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_request_end",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\tracing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_request_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\tracing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_request_redirect",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\tracing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_connection_queued_start",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\tracing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_connection_queued_end",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\tracing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_connection_create_start",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\tracing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_connection_create_end",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\tracing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_connection_reuseconn",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\tracing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_dns_resolvehost_start",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\tracing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_dns_resolvehost_end",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\tracing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_dns_cache_hit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\tracing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_dns_cache_miss",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\tracing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_request_headers_sent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\tracing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "overload#type:ignore[override]"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "__setitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "overload#type:ignore[override]"
            ]
        },
        {
            "name": "__setitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "overload#type:ignore[override]"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "loop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "pre_frozen",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "frozen",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "debug",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_response_prepare",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_startup",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_shutdown",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "on_cleanup",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "cleanup_ctx",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "router",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "middlewares",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "exceptions",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "link",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_etag_match",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_fileresponse.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_format_i",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_log.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_format_o",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_log.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_format_a",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_log.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_format_t",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_log.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_format_P",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_log.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_format_r",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_log.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_format_s",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_log.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_format_b",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_log.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_format_T",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_log.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_format_Tf",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_log.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_format_D",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_log.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "enabled",
            "description": "Check if logger is enabled.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_log.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "impl",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_middlewares.py",
            "decorator": [
                "middleware"
            ]
        },
        {
            "name": "impl",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_middlewares.py",
            "decorator": [
                "middleware"
            ]
        },
        {
            "name": "keepalive_timeout",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_protocol.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "task",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "protocol",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "transport",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "writer",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "client_max_size",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "message",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "rel_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "loop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "secure",
            "description": "A bool indicating if the request is handled with SSL.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "forwarded",
            "description": "A tuple containing all parsed Forwarded header(s).\n\n        Makes an effort to parse Forwarded headers as specified by RFC 7239:\n\n        - It adds one (immutable) dictionary per Forwarded 'field-value', ie\n          per proxy. The element corresponds to the data in the Forwarded\n          field-value added by the first proxy encountered by the client. Each\n          subsequent item corresponds to those added by later proxies.\n        - It checks that every value has valid syntax in general as specified\n          in section 4: either a 'token' or a 'quoted-string'.\n        - It un-escapes found escape sequences.\n        - It does NOT validate 'by' and 'for' contents as specified in section\n          6.\n        - It does NOT validate 'host' contents (Host ABNF).\n        - It does NOT validate 'proto' contents for valid URI scheme names.\n\n        Returns a tuple containing one or more immutable dicts\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "scheme",
            "description": "A string representing the scheme of the request.\n\n        Hostname is resolved in this order:\n\n        - overridden value by .clone(scheme=new_scheme) call.\n        - type of connection to peer: HTTPS if socket is SSL, HTTP otherwise.\n\n        'http' or 'https'.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "method",
            "description": "Read only property for getting HTTP method.\n\n        The value is upper-cased str like 'GET', 'POST', 'PUT' etc.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "version",
            "description": "Read only property for getting HTTP version of request.\n\n        Returns aiohttp.protocol.HttpVersion instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "host",
            "description": "Hostname of the request.\n\n        Hostname is resolved in this order:\n\n        - overridden value by .clone(host=new_host) call.\n        - HOST HTTP header\n        - socket.getfqdn() value\n\n        For example, 'example.com' or 'localhost:8080'.\n\n        For historical reasons, the port number may be included.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "remote",
            "description": "Remote IP of client initiated HTTP request.\n\n        The IP is resolved in this order:\n\n        - overridden value by .clone(remote=new_remote) call.\n        - peername of opened socket\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "url",
            "description": "The full URL of the request.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "path",
            "description": "The URL including *PATH INFO* without the host or scheme.\n\n        E.g., ``/app/blog``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "path_qs",
            "description": "The URL including PATH_INFO and the query string.\n\n        E.g, /app/blog?id=10\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "raw_path",
            "description": "The URL including raw *PATH INFO* without the host or scheme.\n\n        Warning, the path is unquoted and may contains non valid URL characters\n\n        E.g., ``/my%2Fpath%7Cwith%21some%25strange%24characters``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "query",
            "description": "A multidict with all the variables in the query string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "query_string",
            "description": "The query string in the URL.\n\n        E.g., id=10\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "headers",
            "description": "A case-insensitive multidict proxy with all headers.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "raw_headers",
            "description": "A sequence of pairs for all headers.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "if_modified_since",
            "description": "The value of If-Modified-Since HTTP header, or None.\n\n        This header is represented as a `datetime` object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "if_unmodified_since",
            "description": "The value of If-Unmodified-Since HTTP header, or None.\n\n        This header is represented as a `datetime` object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "_etag_values",
            "description": "Extract `ETag` objects from raw header.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_if_match_or_none_impl",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "if_match",
            "description": "The value of If-Match HTTP header, or None.\n\n        This header is represented as a `tuple` of `ETag` objects.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "if_none_match",
            "description": "The value of If-None-Match HTTP header, or None.\n\n        This header is represented as a `tuple` of `ETag` objects.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "if_range",
            "description": "The value of If-Range HTTP header, or None.\n\n        This header is represented as a `datetime` object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "keep_alive",
            "description": "Is keepalive enabled by client?",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "cookies",
            "description": "Return request cookies.\n\n        A read-only dictionary-like object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "http_range",
            "description": "The content of Range HTTP header.\n\n        Return a slice instance.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "content",
            "description": "Return raw payload stream.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "has_body",
            "description": "Return True if request's HTTP BODY can be read, False otherwise.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "can_read_body",
            "description": "Return True if request's HTTP BODY can be read, False otherwise.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "body_exists",
            "description": "Return True if request has HTTP BODY, False otherwise.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "match_info",
            "description": "Result of route resolving.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "reify"
            ]
        },
        {
            "name": "app",
            "description": "Application instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "config_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_request.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prepared",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "task",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "status",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "chunked",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "compression",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "reason",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "keep_alive",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "body_length",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output_length",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "headers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "cookies",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "content_length",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "content_length",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "content_length.setter"
            ]
        },
        {
            "name": "content_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "content_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "content_type.setter"
            ]
        },
        {
            "name": "charset",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "charset.setter"
            ]
        },
        {
            "name": "last_modified",
            "description": "The value of Last-Modified HTTP header, or None.\n\n        This header is represented as a `datetime` object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "last_modified",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "last_modified.setter"
            ]
        },
        {
            "name": "etag",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "etag",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "etag.setter"
            ]
        },
        {
            "name": "body",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "body",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "body.setter"
            ]
        },
        {
            "name": "text",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "text",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "text.setter"
            ]
        },
        {
            "name": "content_length",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "content_length",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_response.py",
            "decorator": [
                "content_length.setter"
            ]
        },
        {
            "name": "register",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_routedef.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_routedef.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_routedef.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_runner.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "start",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_runner.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_runner.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_runner.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_runner.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_runner.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_runner.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "addresses",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_runner.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "sites",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_runner.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "shutdown",
            "description": "Call any shutdown hooks to help server close gracefully.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_runner.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_make_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_runner.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_cleanup_server",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_runner.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "app",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_runner.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "connections",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_server.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "canonical",
            "description": "Exposes the resource's canonical path.\n\n        For example '/foo/bar/{name}'\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property",
                "abc.abstractmethod"
            ]
        },
        {
            "name": "url_for",
            "description": "Construct url for resource with additional params.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "abc.abstractmethod#pragma:nobranch"
            ]
        },
        {
            "name": "resolve",
            "description": "Resolve resource.\n\n        Return (UrlMappingMatchInfo, allowed_methods) pair.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "abc.abstractmethod#pragma:nobranch"
            ]
        },
        {
            "name": "add_prefix",
            "description": "Add a prefix to processed URLs.\n\n        Required for subapplications support.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "get_info",
            "description": "Return a dict with additional info useful for introspection",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "raw_match",
            "description": "Perform a raw match against path",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "handler_wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "method",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "handler",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "Optional route's name, always equals to resource's name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property",
                "abc.abstractmethod"
            ]
        },
        {
            "name": "resource",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_info",
            "description": "Return a dict with additional info useful for introspection",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "url_for",
            "description": "Construct url for route with additional params.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "abc.abstractmethod#pragma:nobranch"
            ]
        },
        {
            "name": "handler",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "route",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "expect_handler",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "http_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "apps",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "current_app",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "current_app",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "current_app.setter"
            ]
        },
        {
            "name": "http_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_match",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "canonical",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "canonical",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "canonical",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_get_file_hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "match",
            "description": "Return bool if the request satisfies the criteria",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "abc.abstractmethod#pragma:nobranch"
            ]
        },
        {
            "name": "get_info",
            "description": "Return a dict with additional info useful for introspection",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "abc.abstractmethod#pragma:nobranch"
            ]
        },
        {
            "name": "canonical",
            "description": "Return a str",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property",
                "abc.abstractmethod#pragma:nobranch"
            ]
        },
        {
            "name": "canonical",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "canonical",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "canonical",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "status",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "reason",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\web_urldispatcher.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_create_ssl_context",
            "description": "Creates SSLContext instance for usage in asyncio.create_server.\n\n        See ssl.SSLSocket.__init__ for more details.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\worker.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_xor_table",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\aiohttp\\_websocket\\helpers.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "disabled",
            "description": "\n    Context manager that disables running validators within its context.\n\n    .. warning::\n\n        This context manager is not thread-safe!\n\n    .. versionadded:: 21.3.0\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\attr\\validators.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "from_counting_attr",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\attr\\_make.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_get_global_name",
            "description": "\n        Return the name that a converter for an attribute name *attr_name*\n        would have.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\attr\\_make.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_from_version_string",
            "description": "\n        Parse *s* and return a _VersionInfo.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "s": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "s"
                ]
            },
            "file": "venv\\Lib\\site-packages\\attr\\_version_info.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "receiver_connected",
            "description": "Emitted at the end of each :meth:`connect` call.\n\n        The signal sender is the signal instance, and the :meth:`connect`\n        arguments are passed through: ``receiver``, ``sender``, and ``weak``.\n\n        .. versionadded:: 1.2\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\blinker\\base.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "receiver_disconnected",
            "description": "Emitted at the end of each :meth:`disconnect` call.\n\n        The sender is the signal instance, and the :meth:`disconnect` arguments\n        are passed through: ``receiver`` and ``sender``.\n\n        This signal is emitted **only** when :meth:`disconnect` is called\n        explicitly. This signal cannot be emitted by an automatic disconnect\n        when a weakly referenced receiver or sender goes out of scope, as the\n        instance is no longer be available to be used as the sender for this\n        signal.\n\n        An alternative approach is available by subscribing to\n        :attr:`receiver_connected` and setting up a custom weakref cleanup\n        callback on weak receivers and senders.\n\n        .. versionadded:: 1.2\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\blinker\\base.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "connected_to",
            "description": "A context manager that temporarily connects ``receiver`` to the\n        signal while a ``with`` block executes. When the block exits, the\n        receiver is disconnected. Useful for tests.\n\n        :param receiver: The callable to call when :meth:`send` is called with\n            the given ``sender``, passing ``sender`` as a positional argument\n            along with any extra keyword arguments.\n        :param sender: Any object or :data:`ANY`. ``receiver`` will only be\n            called when :meth:`send` is called with this sender. If ``ANY``, the\n            receiver will be called for any sender.\n\n        .. versionadded:: 1.1\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\blinker\\base.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "muted",
            "description": "A context manager that temporarily disables the signal. No receivers\n        will be called if the signal is sent, until the ``with`` block exits.\n        Useful for tests.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\blinker\\base.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "augment_usage_errors",
            "description": "Context manager that attaches extra information to exceptions.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "scope",
            "description": "This helper method can be used with the context object to promote\n        it to the current thread local (see :func:`get_current_context`).\n        The default behavior of this is to invoke the cleanup functions which\n        can be disabled by setting `cleanup` to `False`.  The cleanup\n        functions are typically used for things such as closing file handles.\n\n        If the cleanup is intended the context object can also be directly\n        used as a context manager.\n\n        Example usage::\n\n            with ctx.scope():\n                assert get_current_context() is ctx\n\n        This is equivalent::\n\n            with ctx:\n                assert get_current_context() is ctx\n\n        .. versionadded:: 5.0\n\n        :param cleanup: controls if the cleanup functions should be run or\n                        not.  The default is to run these functions.  In\n                        some situations the context only wants to be\n                        temporarily pushed in which case this can be disabled.\n                        Nested pushes automatically defer the cleanup.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "meta",
            "description": "This is a dictionary which is shared with all the contexts\n        that are nested.  It exists so that click utilities can store some\n        state here if they need to.  It is however the responsibility of\n        that code to manage this dictionary well.\n\n        The keys are supposed to be unique dotted strings.  For instance\n        module paths are a good choice for it.  What is stored in there is\n        irrelevant for the operation of click.  However what is important is\n        that code that places data here adheres to the general semantics of\n        the system.\n\n        Example usage::\n\n            LANG_KEY = f'{__name__}.lang'\n\n            def set_language(value):\n                ctx = get_current_context()\n                ctx.meta[LANG_KEY] = value\n\n            def get_language():\n                return get_current_context().meta.get(LANG_KEY, 'en_US')\n\n        .. versionadded:: 5.0\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "command_path",
            "description": "The computed command path.  This is used for the ``usage``\n        information on the help page.  It's automatically created by\n        combining the info names of the chain of contexts to the root.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "lookup_default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "lookup_default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "invoke",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "__self": {
                        "type": "string"
                    }
                },
                "required": [
                    "__self"
                ]
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "invoke",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "__self": {
                        "type": "string"
                    }
                },
                "required": [
                    "__self"
                ]
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "main",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "main",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "command",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "command",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "group",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "group",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "human_readable_name",
            "description": "Returns the human readable name of this parameter.  This is the\n        same as the name for options, but the metavar for arguments.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get_default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get_default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get_default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "human_readable_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\core.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "command",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\decorators.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "command",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\decorators.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "command",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\decorators.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "command",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\decorators.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "group",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\decorators.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "group",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\decorators.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "group",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\decorators.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "group",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\decorators.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "show_help",
            "description": "Callback that print the help page on ``<stdout>`` and exits.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\decorators.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "section",
            "description": "Helpful context manager that writes a paragraph, a heading,\n        and the indents.\n\n        :param name: the section name that is written as heading.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\formatting.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "indentation",
            "description": "A context manager that increases the indentation.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\formatting.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "get_current_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\globals.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get_current_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\globals.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "takes_value",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\parser.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "func_name",
            "description": "The name of the shell function defined by the completion\n        script.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\shell_completion.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_check_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\shell_completion.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_pause_echo",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\testing.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\testing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\testing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "output",
            "description": "The (standard) output as unicode string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\testing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "stdout",
            "description": "The standard output as unicode string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\testing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "stderr",
            "description": "The standard error as unicode string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\testing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "isolation",
            "description": "A context manager that sets up the isolation for invoking of a\n        command line tool.  This sets up stdin with the given input data\n        and `os.environ` with the overrides from the given dictionary.\n        This also rebinds some internals in Click to be mocked (like the\n        prompt functionality).\n\n        This is automatically done in the :meth:`invoke` method.\n\n        :param input: the input stream to put into sys.stdin.\n        :param env: the environment overrides as dictionary.\n        :param color: whether the output should contain color codes. The\n                      application can still override this explicitly.\n\n        .. versionchanged:: 8.0\n            ``stderr`` is opened with ``errors=\"backslashreplace\"``\n            instead of the default ``\"strict\"``.\n\n        .. versionchanged:: 4.0\n            Added the ``color`` parameter.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\testing.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "visible_input",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\testing.py",
            "decorator": [
                "_pause_echo"
            ]
        },
        {
            "name": "hidden_input",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\testing.py",
            "decorator": [
                "_pause_echo"
            ]
        },
        {
            "name": "_getchar",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\testing.py",
            "decorator": [
                "_pause_echo"
            ]
        },
        {
            "name": "isolated_filesystem",
            "description": "A context manager that creates a temporary directory and\n        changes the current working directory to it. This isolates tests\n        that affect the contents of the CWD to prevent them from\n        interfering with each other.\n\n        :param temp_dir: Create the temporary directory under this\n            directory. If given, the created directory is not removed\n            when exiting.\n\n        .. versionchanged:: 8.0\n            Added the ``temp_dir`` parameter.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\testing.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "arity",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "arity",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\types.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\_compat.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "pct",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\_termui_impl.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "time_per_iteration",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\_termui_impl.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "eta",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\_termui_impl.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "raw_terminal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\_termui_impl.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "raw_terminal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\_termui_impl.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "extra_indent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\click\\_textwrap.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "closed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\colorama\\ansitowin32.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "colorama_text",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\colorama\\initialise.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "testStripIsTrueOnWindows",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\ansitowin32_test.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "setUp",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\initialise_test.py",
            "decorator": [
                "skipUnless"
            ]
        },
        {
            "name": "testInitWrapsOnWindows",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "_": {
                        "type": "string"
                    }
                },
                "required": [
                    "_"
                ]
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\initialise_test.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "testInitDoesntWrapOnEmulatedWindows",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "_": {
                        "type": "string"
                    }
                },
                "required": [
                    "_"
                ]
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\initialise_test.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "testAutoResetPassedOn",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mockATW32": {
                        "type": "string"
                    },
                    "_": {
                        "type": "string"
                    }
                },
                "required": [
                    "mockATW32",
                    "_"
                ]
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\initialise_test.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "testAutoResetChangeable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mockATW32": {
                        "type": "string"
                    }
                },
                "required": [
                    "mockATW32"
                ]
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\initialise_test.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "testAtexitRegisteredOnlyOnce",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mockRegister": {
                        "type": "string"
                    }
                },
                "required": [
                    "mockRegister"
                ]
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\initialise_test.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "testJustFixWindowsConsole",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\initialise_test.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "osname",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\utils.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "replace_by",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "stream": {
                        "type": "string"
                    }
                },
                "required": [
                    "stream"
                ]
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\utils.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "replace_original_by",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "stream": {
                        "type": "string"
                    }
                },
                "required": [
                    "stream"
                ]
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\utils.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "pycharm",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\utils.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "testInit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mockWin32": {
                        "type": "string"
                    }
                },
                "required": [
                    "mockWin32"
                ]
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\winterm_test.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "testGetAttrs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\winterm_test.py",
            "decorator": [
                "skipUnless"
            ]
        },
        {
            "name": "testResetAll",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mockWin32": {
                        "type": "string"
                    }
                },
                "required": [
                    "mockWin32"
                ]
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\winterm_test.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "testFore",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\winterm_test.py",
            "decorator": [
                "skipUnless"
            ]
        },
        {
            "name": "testBack",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\winterm_test.py",
            "decorator": [
                "skipUnless"
            ]
        },
        {
            "name": "testStyle",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\winterm_test.py",
            "decorator": [
                "skipUnless"
            ]
        },
        {
            "name": "testSetConsole",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mockWin32": {
                        "type": "string"
                    }
                },
                "required": [
                    "mockWin32"
                ]
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\winterm_test.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "testSetConsoleOnStderr",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mockWin32": {
                        "type": "string"
                    }
                },
                "required": [
                    "mockWin32"
                ]
            },
            "file": "venv\\Lib\\site-packages\\colorama\\tests\\winterm_test.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "cli",
            "description": "This script is used to set, get or unset values from a .env file.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\dotenv\\cli.py",
            "decorator": [
                "click.group",
                "click.option",
                "click.option",
                "click.option",
                "click.version_option",
                "click.pass_context"
            ]
        },
        {
            "name": "stream_file",
            "description": "\n    Open a file and yield the corresponding (decoded) stream.\n\n    Exits with error code 2 if the file cannot be opened.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\dotenv\\cli.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "list",
            "description": "Display all the stored key/value.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\dotenv\\cli.py",
            "decorator": [
                "cli.command",
                "click.pass_context",
                "click.option"
            ]
        },
        {
            "name": "set",
            "description": "Store the given key/value.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\dotenv\\cli.py",
            "decorator": [
                "cli.command",
                "click.pass_context",
                "click.argument",
                "click.argument"
            ]
        },
        {
            "name": "get",
            "description": "Retrieve the value for the given key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\dotenv\\cli.py",
            "decorator": [
                "cli.command",
                "click.pass_context",
                "click.argument"
            ]
        },
        {
            "name": "unset",
            "description": "Removes the given key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\dotenv\\cli.py",
            "decorator": [
                "cli.command",
                "click.pass_context",
                "click.argument"
            ]
        },
        {
            "name": "run",
            "description": "Run command with environment variables present.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\dotenv\\cli.py",
            "decorator": [
                "cli.command",
                "click.pass_context",
                "click.option",
                "click.argument"
            ]
        },
        {
            "name": "dotenv",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "line": {
                        "type": "string"
                    }
                },
                "required": [
                    "line"
                ]
            },
            "file": "venv\\Lib\\site-packages\\dotenv\\ipython.py",
            "decorator": [
                "magic_arguments",
                "argument",
                "argument",
                "argument",
                "line_magic"
            ]
        },
        {
            "name": "_get_stream",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\dotenv\\main.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "rewrite",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\dotenv\\main.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "start",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\dotenv\\parser.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "resolve",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\dotenv\\variables.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "locate_app",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\cli.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "locate_app",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\cli.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "decorator",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\cli.py",
            "decorator": [
                "click.pass_context"
            ]
        },
        {
            "name": "run_command",
            "description": "Run a local development server.\n\n    This server is for development purposes only. It does not provide\n    the stability, security, or performance of production WSGI servers.\n\n    The reloader and debugger are enabled by default with the '--debug'\n    option.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\cli.py",
            "decorator": [
                "click.command",
                "click.option",
                "click.option",
                "click.option",
                "click.option",
                "click.option",
                "click.option",
                "click.option",
                "click.option",
                "click.option",
                "pass_script_info"
            ]
        },
        {
            "name": "shell_command",
            "description": "Run an interactive Python shell in the context of a given\n    Flask application.  The application will populate the default\n    namespace of this shell according to its configuration.\n\n    This is useful for executing small snippets of management code\n    without having to manually configure the application.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\cli.py",
            "decorator": [
                "click.command",
                "with_appcontext"
            ]
        },
        {
            "name": "routes_command",
            "description": "Show all registered routes with endpoints and methods.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\cli.py",
            "decorator": [
                "click.command",
                "click.option",
                "click.option",
                "with_appcontext"
            ]
        },
        {
            "name": "__get__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\config.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__get__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\config.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "stream_with_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\helpers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "stream_with_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\helpers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "_split_blueprint_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\helpers.py",
            "decorator": [
                "cache"
            ]
        },
        {
            "name": "wsgi_errors_stream",
            "description": "Find the most appropriate error stream for the application. If a request\n    is active, log to ``wsgi.errors``, otherwise use ``sys.stderr``.\n\n    If you configure your own :class:`logging.StreamHandler`, you may want to\n    use this for the stream. If you are using file or dict configuration and\n    can't import this directly, you can refer to it as\n    ``ext://flask.logging.wsgi_errors_stream``.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\logging.py",
            "decorator": [
                "LocalProxy"
            ]
        },
        {
            "name": "permanent",
            "description": "This reflects the ``'_permanent'`` key in the dict.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sessions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "permanent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sessions.py",
            "decorator": [
                "permanent.setter"
            ]
        },
        {
            "name": "session_transaction",
            "description": "When used in combination with a ``with`` statement this opens a\n        session transaction.  This can be used to modify the session that\n        the test client uses.  Once the ``with`` block is left the session is\n        stored back.\n\n        ::\n\n            with client.session_transaction() as session:\n                session['value'] = 42\n\n        Internally this is implemented by going through a temporary test\n        request context and since session handling could depend on\n        request variables this function accepts the same arguments as\n        :meth:`~flask.Flask.test_request_context` which are directly\n        passed through.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\testing.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "as_view",
            "description": "Convert the class into a view function that can be registered\n        for a route.\n\n        By default, the generated view will create a new instance of the\n        view class for every request and call its\n        :meth:`dispatch_request` method. If the view class sets\n        :attr:`init_every_request` to ``False``, the same instance will\n        be used for every request.\n\n        Except for ``name``, all other arguments passed to this method\n        are forwarded to the view class ``__init__`` method.\n\n        .. versionchanged:: 2.2\n            Added the ``init_every_request`` class attribute.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\flask\\views.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "max_content_length",
            "description": "The maximum number of bytes that will be read during this request. If\n        this limit is exceeded, a 413 :exc:`~werkzeug.exceptions.RequestEntityTooLarge`\n        error is raised. If it is set to ``None``, no limit is enforced at the\n        Flask application level. However, if it is ``None`` and the request has\n        no ``Content-Length`` header and the WSGI server does not indicate that\n        it terminates the stream, then no data is read to avoid an infinite\n        stream.\n\n        Each request defaults to the :data:`MAX_CONTENT_LENGTH` config, which\n        defaults to ``None``. It can be set on a specific ``request`` to apply\n        the limit to that specific view. This should be set appropriately based\n        on an application's or view's specific needs.\n\n        .. versionchanged:: 3.1\n            This can be set per-request.\n\n        .. versionchanged:: 0.6\n            This is configurable through Flask config.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\wrappers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "max_content_length",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\wrappers.py",
            "decorator": [
                "max_content_length.setter"
            ]
        },
        {
            "name": "max_form_memory_size",
            "description": "The maximum size in bytes any non-file form field may be in a\n        ``multipart/form-data`` body. If this limit is exceeded, a 413\n        :exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it\n        is set to ``None``, no limit is enforced at the Flask application level.\n\n        Each request defaults to the :data:`MAX_FORM_MEMORY_SIZE` config, which\n        defaults to ``500_000``. It can be set on a specific ``request`` to\n        apply the limit to that specific view. This should be set appropriately\n        based on an application's or view's specific needs.\n\n        .. versionchanged:: 3.1\n            This is configurable through Flask config.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\wrappers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "max_form_memory_size",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\wrappers.py",
            "decorator": [
                "max_form_memory_size.setter"
            ]
        },
        {
            "name": "max_form_parts",
            "description": "The maximum number of fields that may be present in a\n        ``multipart/form-data`` body. If this limit is exceeded, a 413\n        :exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it\n        is set to ``None``, no limit is enforced at the Flask application level.\n\n        Each request defaults to the :data:`MAX_FORM_PARTS` config, which\n        defaults to ``1_000``. It can be set on a specific ``request`` to apply\n        the limit to that specific view. This should be set appropriately based\n        on an application's or view's specific needs.\n\n        .. versionchanged:: 3.1\n            This is configurable through Flask config.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\wrappers.py",
            "decorator": [
                "property#type:ignore[override]"
            ]
        },
        {
            "name": "max_form_parts",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\wrappers.py",
            "decorator": [
                "max_form_parts.setter"
            ]
        },
        {
            "name": "endpoint",
            "description": "The endpoint that matched the request URL.\n\n        This will be ``None`` if matching failed or has not been\n        performed yet.\n\n        This in combination with :attr:`view_args` can be used to\n        reconstruct the same URL or a modified URL.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\wrappers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "blueprint",
            "description": "The registered name of the current blueprint.\n\n        This will be ``None`` if the endpoint is not part of a\n        blueprint, or if URL matching failed or has not been performed\n        yet.\n\n        This does not necessarily match the name the blueprint was\n        created with. It may have been nested, or registered with a\n        different name.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\wrappers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "blueprints",
            "description": "The registered names of the current blueprint upwards through\n        parent blueprints.\n\n        This will be an empty list if there is no current blueprint, or\n        if URL matching failed.\n\n        .. versionadded:: 2.0.1\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\wrappers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "max_cookie_size",
            "description": "Read-only view of the :data:`MAX_COOKIE_SIZE` config key.\n\n        See :attr:`~werkzeug.wrappers.Response.max_cookie_size` in\n        Werkzeug's docs.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\wrappers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\app.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "logger",
            "description": "A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\app.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "jinja_env",
            "description": "The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\app.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "debug",
            "description": "Whether debug mode is enabled. When using ``flask run`` to start the\n        development server, an interactive debugger will be shown for unhandled\n        exceptions, and the server will be reloaded when code changes. This maps to the\n        :data:`DEBUG` config key. It may not behave as expected if set late.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``False``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\app.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "debug",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\app.py",
            "decorator": [
                "debug.setter"
            ]
        },
        {
            "name": "register_blueprint",
            "description": "Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionchanged:: 2.0.1\n            The ``name`` option can be used to change the (pre-dotted)\n            name the blueprint is registered with. This allows the same\n            blueprint to be registered multiple times with unique names\n            for ``url_for``.\n\n        .. versionadded:: 0.7\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\app.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "add_url_rule",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\app.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "template_filter",
            "description": "A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\app.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "add_template_filter",
            "description": "Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\app.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "template_test",
            "description": "A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\app.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "add_template_test",
            "description": "Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\app.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "template_global",
            "description": "A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\app.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "add_template_global",
            "description": "Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\app.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "teardown_appcontext",
            "description": "Registers a function to be called when the application\n        context is popped. The application context is typically popped\n        after the request context for each request, at the end of CLI\n        commands, or after a manually pushed context ends.\n\n        .. code-block:: python\n\n            with app.app_context():\n                ...\n\n        When the ``with`` block exits (or ``ctx.pop()`` is called), the\n        teardown functions are called just before the app context is\n        made inactive. Since a request context typically also manages an\n        application context it would also be called when you pop a\n        request context.\n\n        When a teardown function was called because of an unhandled\n        exception it will be passed an error object. If an\n        :meth:`errorhandler` is registered, it will handle the exception\n        and the teardown will not receive it.\n\n        Teardown functions must avoid raising exceptions. If they\n        execute code that might fail they must surround that code with a\n        ``try``/``except`` block and log any errors.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\app.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "shell_context_processor",
            "description": "Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\app.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "record",
            "description": "Registers a function that is called when the blueprint is\n        registered on the application.  This function is called with the\n        state as argument as returned by the :meth:`make_setup_state`\n        method.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "record_once",
            "description": "Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "register_blueprint",
            "description": "Register a :class:`~flask.Blueprint` on this blueprint. Keyword\n        arguments passed to this method will override the defaults set\n        on the blueprint.\n\n        .. versionchanged:: 2.0.1\n            The ``name`` option can be used to change the (pre-dotted)\n            name the blueprint is registered with. This allows the same\n            blueprint to be registered multiple times with unique names\n            for ``url_for``.\n\n        .. versionadded:: 2.0\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "add_url_rule",
            "description": "Register a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for\n        full documentation.\n\n        The URL rule is prefixed with the blueprint's URL prefix. The endpoint name,\n        used with :func:`url_for`, is prefixed with the blueprint's name.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "app_template_filter",
            "description": "Register a template filter, available in any template rendered by the\n        application. Equivalent to :meth:`.Flask.template_filter`.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "add_app_template_filter",
            "description": "Register a template filter, available in any template rendered by the\n        application. Works like the :meth:`app_template_filter` decorator. Equivalent to\n        :meth:`.Flask.add_template_filter`.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "app_template_test",
            "description": "Register a template test, available in any template rendered by the\n        application. Equivalent to :meth:`.Flask.template_test`.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "add_app_template_test",
            "description": "Register a template test, available in any template rendered by the\n        application. Works like the :meth:`app_template_test` decorator. Equivalent to\n        :meth:`.Flask.add_template_test`.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "app_template_global",
            "description": "Register a template global, available in any template rendered by the\n        application. Equivalent to :meth:`.Flask.template_global`.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global, otherwise the\n                     function name will be used.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "add_app_template_global",
            "description": "Register a template global, available in any template rendered by the\n        application. Works like the :meth:`app_template_global` decorator. Equivalent to\n        :meth:`.Flask.add_template_global`.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global, otherwise the\n                     function name will be used.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "before_app_request",
            "description": "Like :meth:`before_request`, but before every request, not only those handled\n        by the blueprint. Equivalent to :meth:`.Flask.before_request`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "after_app_request",
            "description": "Like :meth:`after_request`, but after every request, not only those handled\n        by the blueprint. Equivalent to :meth:`.Flask.after_request`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "teardown_app_request",
            "description": "Like :meth:`teardown_request`, but after every request, not only those\n        handled by the blueprint. Equivalent to :meth:`.Flask.teardown_request`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "app_context_processor",
            "description": "Like :meth:`context_processor`, but for templates rendered by every view, not\n        only by the blueprint. Equivalent to :meth:`.Flask.context_processor`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "app_errorhandler",
            "description": "Like :meth:`errorhandler`, but for every request, not only those handled by\n        the blueprint. Equivalent to :meth:`.Flask.errorhandler`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "app_url_value_preprocessor",
            "description": "Like :meth:`url_value_preprocessor`, but for every request, not only those\n        handled by the blueprint. Equivalent to :meth:`.Flask.url_value_preprocessor`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "app_url_defaults",
            "description": "Like :meth:`url_defaults`, but for every request, not only those handled by\n        the blueprint. Equivalent to :meth:`.Flask.url_defaults`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\blueprints.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "static_folder",
            "description": "The absolute path to the configured static folder. ``None``\n        if no static folder is set.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "static_folder",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "static_folder.setter"
            ]
        },
        {
            "name": "has_static_folder",
            "description": "``True`` if :attr:`static_folder` is set.\n\n        .. versionadded:: 0.5\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "static_url_path",
            "description": "The URL prefix that the static route will be accessible from.\n\n        If it was not configured during init, it is derived from\n        :attr:`static_folder`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "static_url_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "static_url_path.setter"
            ]
        },
        {
            "name": "jinja_loader",
            "description": "The Jinja loader for this object's templates. By default this\n        is a class :class:`jinja2.loaders.FileSystemLoader` to\n        :attr:`template_folder` if it is set.\n\n        .. versionadded:: 0.5\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "get",
            "description": "Shortcut for :meth:`route` with ``methods=[\"GET\"]``.\n\n        .. versionadded:: 2.0\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "post",
            "description": "Shortcut for :meth:`route` with ``methods=[\"POST\"]``.\n\n        .. versionadded:: 2.0\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "put",
            "description": "Shortcut for :meth:`route` with ``methods=[\"PUT\"]``.\n\n        .. versionadded:: 2.0\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "delete",
            "description": "Shortcut for :meth:`route` with ``methods=[\"DELETE\"]``.\n\n        .. versionadded:: 2.0\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "patch",
            "description": "Shortcut for :meth:`route` with ``methods=[\"PATCH\"]``.\n\n        .. versionadded:: 2.0\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "route",
            "description": "Decorate a view function to register it with the given URL\n        rule and options. Calls :meth:`add_url_rule`, which has more\n        details about the implementation.\n\n        .. code-block:: python\n\n            @app.route(\"/\")\n            def index():\n                return \"Hello, World!\"\n\n        See :ref:`url-route-registrations`.\n\n        The endpoint name for the route defaults to the name of the view\n        function if the ``endpoint`` parameter isn't passed.\n\n        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` and\n        ``OPTIONS`` are added automatically.\n\n        :param rule: The URL rule string.\n        :param options: Extra options passed to the\n            :class:`~werkzeug.routing.Rule` object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "add_url_rule",
            "description": "Register a rule for routing incoming requests and building\n        URLs. The :meth:`route` decorator is a shortcut to call this\n        with the ``view_func`` argument. These are equivalent:\n\n        .. code-block:: python\n\n            @app.route(\"/\")\n            def index():\n                ...\n\n        .. code-block:: python\n\n            def index():\n                ...\n\n            app.add_url_rule(\"/\", view_func=index)\n\n        See :ref:`url-route-registrations`.\n\n        The endpoint name for the route defaults to the name of the view\n        function if the ``endpoint`` parameter isn't passed. An error\n        will be raised if a function has already been registered for the\n        endpoint.\n\n        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` is\n        always added automatically, and ``OPTIONS`` is added\n        automatically by default.\n\n        ``view_func`` does not necessarily need to be passed, but if the\n        rule should participate in routing an endpoint name must be\n        associated with a view function at some point with the\n        :meth:`endpoint` decorator.\n\n        .. code-block:: python\n\n            app.add_url_rule(\"/\", endpoint=\"index\")\n\n            @app.endpoint(\"index\")\n            def index():\n                ...\n\n        If ``view_func`` has a ``required_methods`` attribute, those\n        methods are added to the passed and automatic methods. If it\n        has a ``provide_automatic_methods`` attribute, it is used as the\n        default if the parameter is not passed.\n\n        :param rule: The URL rule string.\n        :param endpoint: The endpoint name to associate with the rule\n            and view function. Used when routing and building URLs.\n            Defaults to ``view_func.__name__``.\n        :param view_func: The view function to associate with the\n            endpoint name.\n        :param provide_automatic_options: Add the ``OPTIONS`` method and\n            respond to ``OPTIONS`` requests automatically.\n        :param options: Extra options passed to the\n            :class:`~werkzeug.routing.Rule` object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "endpoint",
            "description": "Decorate a view function to register it for the given\n        endpoint. Used if a rule is added without a ``view_func`` with\n        :meth:`add_url_rule`.\n\n        .. code-block:: python\n\n            app.add_url_rule(\"/ex\", endpoint=\"example\")\n\n            @app.endpoint(\"example\")\n            def example():\n                ...\n\n        :param endpoint: The endpoint name to associate with the view\n            function.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "before_request",
            "description": "Register a function to run before each request.\n\n        For example, this can be used to open a database connection, or\n        to load the logged in user from the session.\n\n        .. code-block:: python\n\n            @app.before_request\n            def load_user():\n                if \"user_id\" in session:\n                    g.user = db.session.get(session[\"user_id\"])\n\n        The function will be called without any arguments. If it returns\n        a non-``None`` value, the value is handled as if it was the\n        return value from the view, and further request handling is\n        stopped.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        executes before every request. When used on a blueprint, this executes before\n        every request that the blueprint handles. To register with a blueprint and\n        execute before every request, use :meth:`.Blueprint.before_app_request`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "after_request",
            "description": "Register a function to run after each request to this object.\n\n        The function is called with the response object, and must return\n        a response object. This allows the functions to modify or\n        replace the response before it is sent.\n\n        If a function raises an exception, any remaining\n        ``after_request`` functions will not be called. Therefore, this\n        should not be used for actions that must execute, such as to\n        close resources. Use :meth:`teardown_request` for that.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        executes after every request. When used on a blueprint, this executes after\n        every request that the blueprint handles. To register with a blueprint and\n        execute after every request, use :meth:`.Blueprint.after_app_request`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "teardown_request",
            "description": "Register a function to be called when the request context is\n        popped. Typically this happens at the end of each request, but\n        contexts may be pushed manually as well during testing.\n\n        .. code-block:: python\n\n            with app.test_request_context():\n                ...\n\n        When the ``with`` block exits (or ``ctx.pop()`` is called), the\n        teardown functions are called just before the request context is\n        made inactive.\n\n        When a teardown function was called because of an unhandled\n        exception it will be passed an error object. If an\n        :meth:`errorhandler` is registered, it will handle the exception\n        and the teardown will not receive it.\n\n        Teardown functions must avoid raising exceptions. If they\n        execute code that might fail they must surround that code with a\n        ``try``/``except`` block and log any errors.\n\n        The return values of teardown functions are ignored.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        executes after every request. When used on a blueprint, this executes after\n        every request that the blueprint handles. To register with a blueprint and\n        execute after every request, use :meth:`.Blueprint.teardown_app_request`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "context_processor",
            "description": "Registers a template context processor function. These functions run before\n        rendering a template. The keys of the returned dict are added as variables\n        available in the template.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        is called for every rendered template. When used on a blueprint, this is called\n        for templates rendered from the blueprint's views. To register with a blueprint\n        and affect every template, use :meth:`.Blueprint.app_context_processor`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "url_value_preprocessor",
            "description": "Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        is called for every request. When used on a blueprint, this is called for\n        requests that the blueprint handles. To register with a blueprint and affect\n        every request, use :meth:`.Blueprint.app_url_value_preprocessor`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "url_defaults",
            "description": "Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        is called for every request. When used on a blueprint, this is called for\n        requests that the blueprint handles. To register with a blueprint and affect\n        every request, use :meth:`.Blueprint.app_url_defaults`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "errorhandler",
            "description": "Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        This is available on both app and blueprint objects. When used on an app, this\n        can handle errors from every request. When used on a blueprint, this can handle\n        errors from requests that the blueprint handles. To register with a blueprint\n        and affect every request, use :meth:`.Blueprint.app_errorhandler`.\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "register_error_handler",
            "description": "Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "setupmethod"
            ]
        },
        {
            "name": "_get_exc_class_and_code",
            "description": "Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\flask\\sansio\\scaffold.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "__class_getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\frozenlist\\__init__.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "frozen",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\frozenlist\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__init__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\itsdangerous\\serializer.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__init__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\itsdangerous\\serializer.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__init__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\itsdangerous\\serializer.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__init__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\itsdangerous\\serializer.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__init__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\itsdangerous\\serializer.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "secret_key",
            "description": "The newest (last) entry in the :attr:`secret_keys` list. This\n        is for compatibility from before key rotation support was added.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\itsdangerous\\serializer.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "secret_key",
            "description": "The newest (last) entry in the :attr:`secret_keys` list. This\n        is for compatibility from before key rotation support was added.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\itsdangerous\\signer.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "unsign",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\itsdangerous\\timed.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "unsign",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\itsdangerous\\timed.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "loads",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\itsdangerous\\_json.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "dumps",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\itsdangerous\\_json.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\async_utils.py",
            "decorator": [
                "wraps",
                "wraps"
            ]
        },
        {
            "name": "visitor",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\compiler.py",
            "decorator": [
                "optimizeconst"
            ]
        },
        {
            "name": "visitor",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\compiler.py",
            "decorator": [
                "optimizeconst"
            ]
        },
        {
            "name": "optimized",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\compiler.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_default_finalize",
            "description": "The default finalize function if the environment isn't\n        configured with one. Or, if the environment has one, this is\n        called on that function's output for constants.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\compiler.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "visit_Concat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\compiler.py",
            "decorator": [
                "optimizeconst"
            ]
        },
        {
            "name": "visit_Compare",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\compiler.py",
            "decorator": [
                "optimizeconst"
            ]
        },
        {
            "name": "visit_Getattr",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\compiler.py",
            "decorator": [
                "optimizeconst"
            ]
        },
        {
            "name": "visit_Getitem",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\compiler.py",
            "decorator": [
                "optimizeconst"
            ]
        },
        {
            "name": "_filter_test_common",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\compiler.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "visit_Filter",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\compiler.py",
            "decorator": [
                "optimizeconst"
            ]
        },
        {
            "name": "visit_Test",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\compiler.py",
            "decorator": [
                "optimizeconst"
            ]
        },
        {
            "name": "visit_CondExpr",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\compiler.py",
            "decorator": [
                "optimizeconst"
            ]
        },
        {
            "name": "visit_Call",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\compiler.py",
            "decorator": [
                "optimizeconst"
            ]
        },
        {
            "name": "get_spontaneous_environment",
            "description": "Return a new spontaneous environment. A spontaneous environment\n    is used for templates created directly rather than through an\n    existing environment.\n\n    :param cls: Environment class to create.\n    :param args: Positional arguments passed to environment.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "lexer",
            "description": "The lexer for this environment.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parse",
            "description": "Parse the sourcecode and return the abstract syntax tree.  This\n        tree of nodes is used by the compiler to convert the template into\n        executable source- or bytecode.  This is useful for debugging or to\n        extract information from templates.\n\n        If you are :ref:`developing Jinja extensions <writing-extensions>`\n        this gives you a good overview of the node tree generated.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "compile",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "compile",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "compile",
            "description": "Compile a node or template source code.  The `name` parameter is\n        the load name of the template after it was joined using\n        :meth:`join_path` if necessary, not the filename on the file system.\n        the `filename` parameter is the estimated filename of the template on\n        the file system.  If the template came from a database or memory this\n        can be omitted.\n\n        The return value of this method is a python code object.  If the `raw`\n        parameter is `True` the return value will be a string with python\n        code equivalent to the bytecode returned otherwise.  This method is\n        mainly used internally.\n\n        `defer_init` is use internally to aid the module code generator.  This\n        causes the generated code to be able to import without the global\n        environment variable to be set.\n\n        .. versionadded:: 2.4\n           `defer_init` parameter added.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "_load_template",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "get_template",
            "description": "Load a template by name with :attr:`loader` and return a\n        :class:`Template`. If the template does not exist a\n        :exc:`TemplateNotFound` exception is raised.\n\n        :param name: Name of the template to load. When loading\n            templates from the filesystem, \"/\" is used as the path\n            separator, even on Windows.\n        :param parent: The name of the parent template importing this\n            template. :meth:`join_path` can be used to implement name\n            transformations with this.\n        :param globals: Extend the environment :attr:`globals` with\n            these extra variables available for all renders of this\n            template. If the template has already been loaded and\n            cached, its globals are updated with any new items.\n\n        .. versionchanged:: 3.0\n            If a template is loaded from cache, ``globals`` will update\n            the template's globals instead of ignoring the new values.\n\n        .. versionchanged:: 2.4\n            If ``name`` is a :class:`Template` object it is returned\n            unchanged.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "select_template",
            "description": "Like :meth:`get_template`, but tries loading multiple names.\n        If none of the names can be loaded a :exc:`TemplatesNotFound`\n        exception is raised.\n\n        :param names: List of template names to try loading in order.\n        :param parent: The name of the parent template importing this\n            template. :meth:`join_path` can be used to implement name\n            transformations with this.\n        :param globals: Extend the environment :attr:`globals` with\n            these extra variables available for all renders of this\n            template. If the template has already been loaded and\n            cached, its globals are updated with any new items.\n\n        .. versionchanged:: 3.0\n            If a template is loaded from cache, ``globals`` will update\n            the template's globals instead of ignoring the new values.\n\n        .. versionchanged:: 2.11\n            If ``names`` is :class:`Undefined`, an :exc:`UndefinedError`\n            is raised instead. If no templates were found and ``names``\n            contains :class:`Undefined`, the message is more helpful.\n\n        .. versionchanged:: 2.4\n            If ``names`` contains a :class:`Template` object it is\n            returned unchanged.\n\n        .. versionadded:: 2.3\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "get_or_select_template",
            "description": "Use :meth:`select_template` if an iterable of template names\n        is given, or :meth:`get_template` if one name is given.\n\n        .. versionadded:: 2.3\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "from_code",
            "description": "Creates a template object from compiled code and the globals.  This\n        is used by the loaders and environment to create a template object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_module_dict",
            "description": "Creates a template object from a module.  This is used by the\n        module loader to create a template object.\n\n        .. versionadded:: 2.4\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_from_namespace",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_get_default_module",
            "description": "If a context is passed in, this means that the template was\n        imported. Imported templates have access to the current\n        template's globals by default, but they can only be accessed via\n        the context during runtime.\n\n        If there are new globals, we need to create a new module because\n        the cached module is already rendered and will not have access\n        to globals from the current context. This new module is not\n        cached because the template can be imported elsewhere, and it\n        should have access to only the current template's globals.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "module",
            "description": "The template as module.  This is used for imports in the\n        template runtime but is also useful if one wants to access\n        exported template variables from the Python layer:\n\n        >>> t = Template('{% macro foo() %}42{% endmacro %}23')\n        >>> str(t.module)\n        '23'\n        >>> t.module.foo() == u'42'\n        True\n\n        This attribute is not available if async mode is enabled.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_up_to_date",
            "description": "If this variable is `False` there is a newer version available.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "debug_info",
            "description": "The debug info mapping.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\environment.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "message",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_gettext_alias",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\ext.py",
            "decorator": [
                "pass_context"
            ]
        },
        {
            "name": "gettext",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\ext.py",
            "decorator": [
                "pass_context"
            ]
        },
        {
            "name": "ngettext",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\ext.py",
            "decorator": [
                "pass_context"
            ]
        },
        {
            "name": "pgettext",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\ext.py",
            "decorator": [
                "pass_context"
            ]
        },
        {
            "name": "npgettext",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\ext.py",
            "decorator": [
                "pass_context"
            ]
        },
        {
            "name": "do_replace",
            "description": "Return a copy of the value with all occurrences of a substring\n    replaced with a new one. The first argument is the substring\n    that should be replaced, the second is the replacement string.\n    If the optional third argument ``count`` is given, only the first\n    ``count`` occurrences are replaced:\n\n    .. sourcecode:: jinja\n\n        {{ \"Hello World\"|replace(\"Hello\", \"Goodbye\") }}\n            -> Goodbye World\n\n        {{ \"aaaaargh\"|replace(\"a\", \"d'oh, \", 2) }}\n            -> d'oh, d'oh, aaargh\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_eval_context"
            ]
        },
        {
            "name": "do_xmlattr",
            "description": "Create an SGML/XML attribute string based on the items in a dict.\n\n    **Values** that are neither ``none`` nor ``undefined`` are automatically\n    escaped, safely allowing untrusted user input.\n\n    User input should not be used as **keys** to this filter. If any key\n    contains a space, ``/`` solidus, ``>`` greater-than sign, or ``=`` equals\n    sign, this fails with a ``ValueError``. Regardless of this, user input\n    should never be used as keys to this filter, or must be separately validated\n    first.\n\n    .. sourcecode:: html+jinja\n\n        <ul{{ {'class': 'my_list', 'missing': none,\n                'id': 'list-%d'|format(variable)}|xmlattr }}>\n        ...\n        </ul>\n\n    Results in something like this:\n\n    .. sourcecode:: html\n\n        <ul class=\"my_list\" id=\"list-42\">\n        ...\n        </ul>\n\n    As you can see it automatically prepends a space in front of the item\n    if the filter returned something unless the second parameter is false.\n\n    .. versionchanged:: 3.1.4\n        Keys with ``/`` solidus, ``>`` greater-than sign, or ``=`` equals sign\n        are not allowed.\n\n    .. versionchanged:: 3.1.3\n        Keys with spaces are not allowed.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_eval_context"
            ]
        },
        {
            "name": "do_sort",
            "description": "Sort an iterable using Python's :func:`sorted`.\n\n    .. sourcecode:: jinja\n\n        {% for city in cities|sort %}\n            ...\n        {% endfor %}\n\n    :param reverse: Sort descending instead of ascending.\n    :param case_sensitive: When sorting strings, sort upper and lower\n        case separately.\n    :param attribute: When sorting objects or dicts, an attribute or\n        key to sort by. Can use dot notation like ``\"address.city\"``.\n        Can be a list of attributes like ``\"age,name\"``.\n\n    The sort is stable, it does not change the relative order of\n    elements that compare equal. This makes it is possible to chain\n    sorts on different attributes and ordering.\n\n    .. sourcecode:: jinja\n\n        {% for user in users|sort(attribute=\"name\")\n            |sort(reverse=true, attribute=\"age\") %}\n            ...\n        {% endfor %}\n\n    As a shortcut to chaining when the direction is the same for all\n    attributes, pass a comma separate list of attributes.\n\n    .. sourcecode:: jinja\n\n        {% for user in users|sort(attribute=\"age,name\") %}\n            ...\n        {% endfor %}\n\n    .. versionchanged:: 2.11.0\n        The ``attribute`` parameter can be a comma separated list of\n        attributes, e.g. ``\"age,name\"``.\n\n    .. versionchanged:: 2.6\n       The ``attribute`` parameter was added.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_environment"
            ]
        },
        {
            "name": "sync_do_unique",
            "description": "Returns a list of unique items from the given iterable.\n\n    .. sourcecode:: jinja\n\n        {{ ['foo', 'bar', 'foobar', 'FooBar']|unique|list }}\n            -> ['foo', 'bar', 'foobar']\n\n    The unique items are yielded in the same order as their first occurrence in\n    the iterable passed to the filter.\n\n    :param case_sensitive: Treat upper and lower case strings as distinct.\n    :param attribute: Filter objects with unique values for this attribute.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_environment"
            ]
        },
        {
            "name": "do_unique",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "async_variant"
            ]
        },
        {
            "name": "do_min",
            "description": "Return the smallest item from the sequence.\n\n    .. sourcecode:: jinja\n\n        {{ [1, 2, 3]|min }}\n            -> 1\n\n    :param case_sensitive: Treat upper and lower case strings as distinct.\n    :param attribute: Get the object with the min value of this attribute.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_environment"
            ]
        },
        {
            "name": "do_max",
            "description": "Return the largest item from the sequence.\n\n    .. sourcecode:: jinja\n\n        {{ [1, 2, 3]|max }}\n            -> 3\n\n    :param case_sensitive: Treat upper and lower case strings as distinct.\n    :param attribute: Get the object with the max value of this attribute.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_environment"
            ]
        },
        {
            "name": "sync_do_join",
            "description": "Return a string which is the concatenation of the strings in the\n    sequence. The separator between elements is an empty string per\n    default, you can define it with the optional parameter:\n\n    .. sourcecode:: jinja\n\n        {{ [1, 2, 3]|join('|') }}\n            -> 1|2|3\n\n        {{ [1, 2, 3]|join }}\n            -> 123\n\n    It is also possible to join certain attributes of an object:\n\n    .. sourcecode:: jinja\n\n        {{ users|join(', ', attribute='username') }}\n\n    .. versionadded:: 2.6\n       The `attribute` parameter was added.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_eval_context"
            ]
        },
        {
            "name": "do_join",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "async_variant"
            ]
        },
        {
            "name": "sync_do_first",
            "description": "Return the first item of a sequence.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_environment"
            ]
        },
        {
            "name": "do_first",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "async_variant"
            ]
        },
        {
            "name": "do_last",
            "description": "Return the last item of a sequence.\n\n    Note: Does not work with generators. You may want to explicitly\n    convert it to a list:\n\n    .. sourcecode:: jinja\n\n        {{ data | selectattr('name', '==', 'Jinja') | list | last }}\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_environment"
            ]
        },
        {
            "name": "do_random",
            "description": "Return a random item from the sequence.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_context"
            ]
        },
        {
            "name": "do_urlize",
            "description": "Convert URLs in text into clickable links.\n\n    This may not recognize links in some situations. Usually, a more\n    comprehensive formatter, such as a Markdown library, is a better\n    choice.\n\n    Works on ``http://``, ``https://``, ``www.``, ``mailto:``, and email\n    addresses. Links with trailing punctuation (periods, commas, closing\n    parentheses) and leading punctuation (opening parentheses) are\n    recognized excluding the punctuation. Email addresses that include\n    header fields are not recognized (for example,\n    ``mailto:address@example.com?cc=copy@example.com``).\n\n    :param value: Original text containing URLs to link.\n    :param trim_url_limit: Shorten displayed URL values to this length.\n    :param nofollow: Add the ``rel=nofollow`` attribute to links.\n    :param target: Add the ``target`` attribute to links.\n    :param rel: Add the ``rel`` attribute to links.\n    :param extra_schemes: Recognize URLs that start with these schemes\n        in addition to the default behavior. Defaults to\n        ``env.policies[\"urlize.extra_schemes\"]``, which defaults to no\n        extra schemes.\n\n    .. versionchanged:: 3.0\n        The ``extra_schemes`` parameter was added.\n\n    .. versionchanged:: 3.0\n        Generate ``https://`` links for URLs without a scheme.\n\n    .. versionchanged:: 3.0\n        The parsing rules were updated. Recognize email addresses with\n        or without the ``mailto:`` scheme. Validate IP addresses. Ignore\n        parentheses and brackets in more cases.\n\n    .. versionchanged:: 2.8\n       The ``target`` parameter was added.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_eval_context"
            ]
        },
        {
            "name": "do_truncate",
            "description": "Return a truncated copy of the string. The length is specified\n    with the first parameter which defaults to ``255``. If the second\n    parameter is ``true`` the filter will cut the text at length. Otherwise\n    it will discard the last word. If the text was in fact\n    truncated it will append an ellipsis sign (``\"...\"``). If you want a\n    different ellipsis sign than ``\"...\"`` you can specify it using the\n    third parameter. Strings that only exceed the length by the tolerance\n    margin given in the fourth parameter will not be truncated.\n\n    .. sourcecode:: jinja\n\n        {{ \"foo bar baz qux\"|truncate(9) }}\n            -> \"foo...\"\n        {{ \"foo bar baz qux\"|truncate(9, True) }}\n            -> \"foo ba...\"\n        {{ \"foo bar baz qux\"|truncate(11) }}\n            -> \"foo bar baz qux\"\n        {{ \"foo bar baz qux\"|truncate(11, False, '...', 0) }}\n            -> \"foo bar...\"\n\n    The default leeway on newer Jinja versions is 5 and was 0 before but\n    can be reconfigured globally.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_environment"
            ]
        },
        {
            "name": "do_wordwrap",
            "description": "Wrap a string to the given width. Existing newlines are treated\n    as paragraphs to be wrapped separately.\n\n    :param s: Original text to wrap.\n    :param width: Maximum length of wrapped lines.\n    :param break_long_words: If a word is longer than ``width``, break\n        it across lines.\n    :param break_on_hyphens: If a word contains hyphens, it may be split\n        across lines.\n    :param wrapstring: String to join each wrapped line. Defaults to\n        :attr:`Environment.newline_sequence`.\n\n    .. versionchanged:: 2.11\n        Existing newlines are treated as paragraphs wrapped separately.\n\n    .. versionchanged:: 2.11\n        Added the ``break_on_hyphens`` parameter.\n\n    .. versionchanged:: 2.7\n        Added the ``wrapstring`` parameter.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_environment"
            ]
        },
        {
            "name": "do_slice",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "async_variant"
            ]
        },
        {
            "name": "sync_do_groupby",
            "description": "Group a sequence of objects by an attribute using Python's\n    :func:`itertools.groupby`. The attribute can use dot notation for\n    nested access, like ``\"address.city\"``. Unlike Python's ``groupby``,\n    the values are sorted first so only one group is returned for each\n    unique value.\n\n    For example, a list of ``User`` objects with a ``city`` attribute\n    can be rendered in groups. In this example, ``grouper`` refers to\n    the ``city`` value of the group.\n\n    .. sourcecode:: html+jinja\n\n        <ul>{% for city, items in users|groupby(\"city\") %}\n          <li>{{ city }}\n            <ul>{% for user in items %}\n              <li>{{ user.name }}\n            {% endfor %}</ul>\n          </li>\n        {% endfor %}</ul>\n\n    ``groupby`` yields namedtuples of ``(grouper, list)``, which\n    can be used instead of the tuple unpacking above. ``grouper`` is the\n    value of the attribute, and ``list`` is the items with that value.\n\n    .. sourcecode:: html+jinja\n\n        <ul>{% for group in users|groupby(\"city\") %}\n          <li>{{ group.grouper }}: {{ group.list|join(\", \") }}\n        {% endfor %}</ul>\n\n    You can specify a ``default`` value to use if an object in the list\n    does not have the given attribute.\n\n    .. sourcecode:: jinja\n\n        <ul>{% for city, items in users|groupby(\"city\", default=\"NY\") %}\n          <li>{{ city }}: {{ items|map(attribute=\"name\")|join(\", \") }}</li>\n        {% endfor %}</ul>\n\n    Like the :func:`~jinja-filters.sort` filter, sorting and grouping is\n    case-insensitive by default. The ``key`` for each group will have\n    the case of the first item in that group of values. For example, if\n    a list of users has cities ``[\"CA\", \"NY\", \"ca\"]``, the \"CA\" group\n    will have two values. This can be disabled by passing\n    ``case_sensitive=True``.\n\n    .. versionchanged:: 3.1\n        Added the ``case_sensitive`` parameter. Sorting and grouping is\n        case-insensitive by default, matching other filters that do\n        comparisons.\n\n    .. versionchanged:: 3.0\n        Added the ``default`` parameter.\n\n    .. versionchanged:: 2.6\n        The attribute supports dot notation for nested access.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_environment"
            ]
        },
        {
            "name": "do_groupby",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "async_variant"
            ]
        },
        {
            "name": "sync_do_sum",
            "description": "Returns the sum of a sequence of numbers plus the value of parameter\n    'start' (which defaults to 0).  When the sequence is empty it returns\n    start.\n\n    It is also possible to sum up only certain attributes:\n\n    .. sourcecode:: jinja\n\n        Total: {{ items|sum(attribute='price') }}\n\n    .. versionchanged:: 2.6\n       The ``attribute`` parameter was added to allow summing up over\n       attributes.  Also the ``start`` parameter was moved on to the right.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_environment"
            ]
        },
        {
            "name": "do_sum",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "async_variant"
            ]
        },
        {
            "name": "do_list",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "async_variant"
            ]
        },
        {
            "name": "do_reverse",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "do_reverse",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "do_attr",
            "description": "Get an attribute of an object. ``foo|attr(\"bar\")`` works like\n    ``foo.bar``, but returns undefined instead of falling back to ``foo[\"bar\"]``\n    if the attribute doesn't exist.\n\n    See :ref:`Notes on subscriptions <notes-on-subscriptions>` for more details.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_environment"
            ]
        },
        {
            "name": "sync_do_map",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "sync_do_map",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "sync_do_map",
            "description": "Applies a filter on a sequence of objects or looks up an attribute.\n    This is useful when dealing with lists of objects but you are really\n    only interested in a certain value of it.\n\n    The basic usage is mapping on an attribute.  Imagine you have a list\n    of users but you are only interested in a list of usernames:\n\n    .. sourcecode:: jinja\n\n        Users on this page: {{ users|map(attribute='username')|join(', ') }}\n\n    You can specify a ``default`` value to use if an object in the list\n    does not have the given attribute.\n\n    .. sourcecode:: jinja\n\n        {{ users|map(attribute=\"username\", default=\"Anonymous\")|join(\", \") }}\n\n    Alternatively you can let it invoke a filter by passing the name of the\n    filter and the arguments afterwards.  A good example would be applying a\n    text conversion filter on a sequence:\n\n    .. sourcecode:: jinja\n\n        Users on this page: {{ titles|map('lower')|join(', ') }}\n\n    Similar to a generator comprehension such as:\n\n    .. code-block:: python\n\n        (u.username for u in users)\n        (getattr(u, \"username\", \"Anonymous\") for u in users)\n        (do_lower(x) for x in titles)\n\n    .. versionchanged:: 2.11.0\n        Added the ``default`` parameter.\n\n    .. versionadded:: 2.7\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_context"
            ]
        },
        {
            "name": "do_map",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "do_map",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "do_map",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "async_variant"
            ]
        },
        {
            "name": "sync_do_select",
            "description": "Filters a sequence of objects by applying a test to each object,\n    and only selecting the objects with the test succeeding.\n\n    If no test is specified, each object will be evaluated as a boolean.\n\n    Example usage:\n\n    .. sourcecode:: jinja\n\n        {{ numbers|select(\"odd\") }}\n        {{ numbers|select(\"odd\") }}\n        {{ numbers|select(\"divisibleby\", 3) }}\n        {{ numbers|select(\"lessthan\", 42) }}\n        {{ strings|select(\"equalto\", \"mystring\") }}\n\n    Similar to a generator comprehension such as:\n\n    .. code-block:: python\n\n        (n for n in numbers if test_odd(n))\n        (n for n in numbers if test_divisibleby(n, 3))\n\n    .. versionadded:: 2.7\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_context"
            ]
        },
        {
            "name": "do_select",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "async_variant"
            ]
        },
        {
            "name": "sync_do_reject",
            "description": "Filters a sequence of objects by applying a test to each object,\n    and rejecting the objects with the test succeeding.\n\n    If no test is specified, each object will be evaluated as a boolean.\n\n    Example usage:\n\n    .. sourcecode:: jinja\n\n        {{ numbers|reject(\"odd\") }}\n\n    Similar to a generator comprehension such as:\n\n    .. code-block:: python\n\n        (n for n in numbers if not test_odd(n))\n\n    .. versionadded:: 2.7\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_context"
            ]
        },
        {
            "name": "do_reject",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "async_variant"
            ]
        },
        {
            "name": "sync_do_selectattr",
            "description": "Filters a sequence of objects by applying a test to the specified\n    attribute of each object, and only selecting the objects with the\n    test succeeding.\n\n    If no test is specified, the attribute's value will be evaluated as\n    a boolean.\n\n    Example usage:\n\n    .. sourcecode:: jinja\n\n        {{ users|selectattr(\"is_active\") }}\n        {{ users|selectattr(\"email\", \"none\") }}\n\n    Similar to a generator comprehension such as:\n\n    .. code-block:: python\n\n        (user for user in users if user.is_active)\n        (user for user in users if test_none(user.email))\n\n    .. versionadded:: 2.7\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_context"
            ]
        },
        {
            "name": "do_selectattr",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "async_variant"
            ]
        },
        {
            "name": "sync_do_rejectattr",
            "description": "Filters a sequence of objects by applying a test to the specified\n    attribute of each object, and rejecting the objects with the test\n    succeeding.\n\n    If no test is specified, the attribute's value will be evaluated as\n    a boolean.\n\n    .. sourcecode:: jinja\n\n        {{ users|rejectattr(\"is_active\") }}\n        {{ users|rejectattr(\"email\", \"none\") }}\n\n    Similar to a generator comprehension such as:\n\n    .. code-block:: python\n\n        (user for user in users if not user.is_active)\n        (user for user in users if not test_none(user.email))\n\n    .. versionadded:: 2.7\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_context"
            ]
        },
        {
            "name": "do_rejectattr",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "async_variant"
            ]
        },
        {
            "name": "do_tojson",
            "description": "Serialize an object to a string of JSON, and mark it safe to\n    render in HTML. This filter is only for use in HTML documents.\n\n    The returned string is safe to render in HTML documents and\n    ``<script>`` tags. The exception is in HTML attributes that are\n    double quoted; either use single quotes or the ``|forceescape``\n    filter.\n\n    :param value: The object to serialize to JSON.\n    :param indent: The ``indent`` parameter passed to ``dumps``, for\n        pretty-printing the value.\n\n    .. versionadded:: 2.9\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\filters.py",
            "decorator": [
                "pass_eval_context"
            ]
        },
        {
            "name": "eos",
            "description": "Are we at the end of the stream?",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\lexer.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "load",
            "description": "Loads a template.  This method looks up the template in the cache\n        or loads one by calling :meth:`get_source`.  Subclasses should not\n        override this method as loaders working on collections of other\n        loaders (such as :class:`PrefixLoader` or :class:`ChoiceLoader`)\n        will not call this method but `get_source` directly.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\loaders.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "load",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\loaders.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "load",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\loaders.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "get_template_key",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\loaders.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_module_filename",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\loaders.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "load",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\loaders.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "_default_finalize",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\nativetypes.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "from_untrusted",
            "description": "Return a const object if the value is representable as\n        constant value in the generated code, otherwise it will raise\n        an `Impossible` exception.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\nodes.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "parse_assign_target",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\parser.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "parse_assign_target",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\parser.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "f_all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "call",
            "description": "Call the callable with the arguments and keyword arguments\n        provided but inject the active context or environment as first\n        argument if the callable has :func:`pass_context` or\n        :func:`pass_environment`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "__self": {
                        "type": "string"
                    }
                },
                "required": [
                    "__self"
                ]
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "super",
            "description": "Super the block.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_async_call",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "_to_iterator",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "length",
            "description": "Length of the iterable.\n\n        If the iterable is a generator or otherwise does not have a\n        size, it is eagerly evaluated to get a size.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "depth",
            "description": "How many levels deep a recursive loop currently is, starting at 1.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "index",
            "description": "Current iteration of the loop, starting at 1.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "revindex0",
            "description": "Number of iterations from the end of the loop, ending at 0.\n\n        Requires calculating :attr:`length`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "revindex",
            "description": "Number of iterations from the end of the loop, ending at 1.\n\n        Requires calculating :attr:`length`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "first",
            "description": "Whether this is the first iteration of the loop.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "last",
            "description": "Whether this is the last iteration of the loop.\n\n        Causes the iterable to advance early. See\n        :func:`itertools.groupby` for issues this can cause.\n        The :func:`groupby` filter avoids that issue.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "previtem",
            "description": "The item in the previous iteration. Undefined during the\n        first iteration.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "nextitem",
            "description": "The item in the next iteration. Undefined during the last\n        iteration.\n\n        Causes the iterable to advance early. See\n        :func:`itertools.groupby` for issues this can cause.\n        The :func:`jinja-filters.groupby` filter avoids that issue.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__call__",
            "description": "When iterating over nested data, render the body of the loop\n        recursively with the given inner iterable data.\n\n        The loop must have the ``recursive`` marker for this to work.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "_to_iterator",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "length",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "revindex0",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "revindex",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "last",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "nextitem",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "internalcode",
                "pass_eval_context"
            ]
        },
        {
            "name": "_undefined_message",
            "description": "Build a message about the undefined value based on how it was\n        accessed.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_fail_with_undefined_error",
            "description": "Raise an :exc:`UndefinedError` when operations are performed\n        on the undefined value.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "__getattr__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\runtime.py",
            "decorator": [
                "internalcode"
            ]
        },
        {
            "name": "test_filter",
            "description": "Check if a filter exists by name. Useful if a filter may be\n    optionally available.\n\n    .. code-block:: jinja\n\n        {% if 'markdown' is filter %}\n            {{ value | markdown }}\n        {% else %}\n            {{ value }}\n        {% endif %}\n\n    .. versionadded:: 3.0\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\tests.py",
            "decorator": [
                "pass_environment"
            ]
        },
        {
            "name": "test_test",
            "description": "Check if a test exists by name. Useful if a test may be\n    optionally available.\n\n    .. code-block:: jinja\n\n        {% if 'loud' is test %}\n            {% if value is loud %}\n                {{ value|upper }}\n            {% else %}\n                {{ value|lower }}\n            {% endif %}\n        {% else %}\n            {{ value }}\n        {% endif %}\n\n    .. versionadded:: 3.0\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\tests.py",
            "decorator": [
                "pass_environment"
            ]
        },
        {
            "name": "from_obj",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\utils.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "current",
            "description": "Return the current item. Equivalent to the item that will be\n        returned next time :meth:`next` is called.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\jinja2\\utils.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "getall",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_abc.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "getall",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_abc.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "getall",
            "description": "Return all values for key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_abc.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "getone",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_abc.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "getone",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_abc.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "getone",
            "description": "Return first value for key.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_abc.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "add",
            "description": "Add value to list.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_abc.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "extend",
            "description": "Add everything from arg and kwargs to the mapping.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_abc.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "popone",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_abc.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "popone",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_abc.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "popone",
            "description": "Remove specified key and return the corresponding value.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_abc.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "popall",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_abc.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "popall",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_abc.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "popall",
            "description": "Remove all occurrences of key and return the list of corresponding values.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_abc.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__repr__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "reprlib.recursive_repr"
            ]
        },
        {
            "name": "__repr__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "reprlib.recursive_repr"
            ]
        },
        {
            "name": "_key",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "_title",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "getall",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "getall",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "getone",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "getone",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "__repr__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "reprlib.recursive_repr"
            ]
        },
        {
            "name": "setdefault",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "setdefault",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "popone",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "popone",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "popall",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "popall",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\multidict\\_multidict_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "find_spec",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "fullname": {
                        "type": "string"
                    }
                },
                "required": [
                    "fullname"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\__pip-runner__.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_install_requirements",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\build_env.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "record_download_origin",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\cache.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_dictionary",
            "description": "A dictionary representing the loaded configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\configuration.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "key",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\self_outdated_check.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "exc_logging_wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\cli\\base_command.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "main_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\cli\\command_context.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "option_list_all",
            "description": "Get a list of all options, including those in option groups.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\cli\\parser.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_get_index_urls",
            "description": "Return a list of index urls from user-provided options.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\cli\\req_command.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "determine_resolver_variant",
            "description": "Determines which resolver should be used, based on the given options.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\cli\\req_command.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "make_requirement_preparer",
            "description": "\n        Create a RequirementPreparer instance for the given parameters.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\cli\\req_command.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "make_resolver",
            "description": "\n        Create a Resolver instance for the given parameters.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\cli\\req_command.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "trace_basic_info",
            "description": "\n        Trace basic information about the provided objects.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\cli\\req_command.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "open_spinner",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\cli\\spinners.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "hidden_cursor",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\cli\\spinners.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "run",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\commands\\download.py",
            "decorator": [
                "with_cleanup"
            ]
        },
        {
            "name": "run",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\commands\\install.py",
            "decorator": [
                "with_cleanup"
            ]
        },
        {
            "name": "run",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\commands\\wheel.py",
            "decorator": [
                "with_cleanup"
            ]
        },
        {
            "name": "build_tracker_id",
            "description": "A string that uniquely identifies this requirement to the build tracker.\n\n        If None, then this dist has no work to do in the build tracker, and\n        ``.prepare_distribution_metadata()`` will not be called.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\distributions\\base.py",
            "decorator": [
                "abc.abstractproperty"
            ]
        },
        {
            "name": "get_metadata_distribution",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\distributions\\base.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "prepare_distribution_metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\distributions\\base.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "build_tracker_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\distributions\\installed.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "build_tracker_id",
            "description": "Identify this requirement uniquely by its link.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\distributions\\sdist.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "build_tracker_id",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\distributions\\wheel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\collector.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "wrapper_wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\collector.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "parse_links",
            "description": "\n    Parse a Simple API's Index Content, and yield its anchor elements as Link objects.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\collector.py",
            "decorator": [
                "with_cached_index_content"
            ]
        },
        {
            "name": "create",
            "description": "\n        :param session: The Session to use to make requests.\n        :param suppress_no_index: Whether to ignore the --no-index option\n            when constructing the SearchScope object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\collector.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "find_links",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\collector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "create",
            "description": "Create a CandidateEvaluator object.\n\n        :param target_python: The target Python interpreter to use when\n            checking compatibility. If None (the default), a TargetPython\n            object will be constructed from the running Python.\n        :param specifier: An optional object implementing `filter`\n            (e.g. `packaging.specifiers.SpecifierSet`) to filter applicable\n            versions.\n        :param hashes: An optional collection of allowed hashes.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "create",
            "description": "Create a PackageFinder.\n\n        :param selection_prefs: The candidate selection preferences, as a\n            SelectionPreferences object.\n        :param target_python: The target Python interpreter to use when\n            checking compatibility. If None (the default), a TargetPython\n            object will be constructed from the running Python.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "target_python",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "search_scope",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "search_scope",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "search_scope.setter"
            ]
        },
        {
            "name": "find_links",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "index_urls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "trusted_hosts",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "allow_all_prereleases",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prefer_binary",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "find_all_candidates",
            "description": "Find all available InstallationCandidate for project_name\n\n        This checks index_urls and find_links.\n        All versions found are returned as an InstallationCandidate list.\n\n        See LinkEvaluator.evaluate_link() for details on which files\n        are accepted.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "find_best_candidate",
            "description": "Find matches for the given project and specifier.\n\n        :param specifier: An optional object implementing `filter`\n            (e.g. `packaging.specifiers.SpecifierSet`) to filter applicable\n            versions.\n\n        :return: A `BestCandidateResult` instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\package_finder.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "link",
            "description": "Returns the underlying link, if there's one.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\sources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "page_candidates",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\sources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name_to_urls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\sources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "link",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\sources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "link",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\sources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "link",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\sources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "link",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\index\\sources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_osx_framework",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\locations\\base.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "_looks_like_red_hat_lib",
            "description": "Red Hat patches platlib in unix_prefix and unix_home, but not purelib.\n\n    This is the only way I can see to tell a Red Hat-patched Python.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\locations\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "_looks_like_debian_scheme",
            "description": "Debian adds two additional schemes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\locations\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "_looks_like_red_hat_scheme",
            "description": "Red Hat patches ``sys.prefix`` and ``sys.exec_prefix``.\n\n    Red Hat's ``00251-change-user-install-location.patch`` changes the install\n    command's ``prefix`` and ``exec_prefix`` to append ``\"/local\"``. This is\n    (fortunately?) done quite unconditionally, so we create a default command\n    object without any configuration to detect this.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\locations\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "_looks_like_slackware_scheme",
            "description": "Slackware patches sysconfig but fails to patch distutils and site.\n\n    Slackware changes sysconfig's user scheme to use ``\"lib64\"`` for the lib\n    path, but does not do the same to the site module.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\locations\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "_looks_like_msys2_mingw_scheme",
            "description": "MSYS2 patches distutils and sysconfig to use a UNIX-like scheme.\n\n    However, MSYS2 incorrectly patches sysconfig ``nt`` scheme. The fix is\n    likely going to be included in their 3.10 release, so we ignore the warning.\n    See msys2/MINGW-packages#9319.\n\n    MSYS2 MINGW's patch uses lowercase ``\"lib\"`` instead of the usual uppercase,\n    and is missing the final ``\"site-packages\"``.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\locations\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "_warn_mismatched",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\locations\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "_log_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\locations\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "value",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "group",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_directory",
            "description": "Load the distribution from a metadata directory.\n\n        :param directory: Path to a metadata directory, e.g. ``.dist-info``.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_metadata_file_contents",
            "description": "Load the distribution from the contents of a METADATA file.\n\n        This is used to implement PEP 658 by generating a \"shallow\" dist object that can\n        be used for resolution without downloading or building the actual dist yet.\n\n        :param metadata_contents: The contents of a METADATA file.\n        :param filename: File name for the dist with this metadata.\n        :param project_name: Name of the project this dist represents.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_wheel",
            "description": "Load the distribution from a given wheel.\n\n        :param wheel: A concrete wheel definition.\n        :param name: File name of the wheel.\n\n        :raises InvalidWheel: Whenever loading of the wheel causes a\n            :py:exc:`zipfile.BadZipFile` exception to be thrown.\n        :raises UnsupportedWheel: If the wheel is a valid zip, but malformed\n            internally.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "location",
            "description": "Where the distribution is loaded from.\n\n        A string value is not necessarily a filesystem path, since distributions\n        can be loaded from other sources, e.g. arbitrary zip archives. ``None``\n        means the distribution is created in-memory.\n\n        Do not canonicalize this value with e.g. ``pathlib.Path.resolve()``. If\n        this is a symbolic link, we want to preserve the relative path between\n        it and files in the distribution.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "editable_project_location",
            "description": "The project location for editable distributions.\n\n        This is the directory where pyproject.toml or setup.py is located.\n        None if the distribution is not installed in editable mode.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installed_location",
            "description": "The distribution's \"installed\" location.\n\n        This should generally be a ``site-packages`` directory. This is\n        usually ``dist.location``, except for legacy develop-installed packages,\n        where ``dist.location`` is the source code location, and this is where\n        the ``.egg-link`` file is.\n\n        The returned location is normalized (in particular, with symlinks removed).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "info_location",
            "description": "Location of the .[egg|dist]-info directory or file.\n\n        Similarly to ``location``, a string value is not necessarily a\n        filesystem path. ``None`` means the distribution is created in-memory.\n\n        For a modern .dist-info installation on disk, this should be something\n        like ``{location}/{raw_name}-{version}.dist-info``.\n\n        Do not canonicalize this value with e.g. ``pathlib.Path.resolve()``. If\n        this is a symbolic link, we want to preserve the relative path between\n        it and other files in the distribution.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installed_by_distutils",
            "description": "Whether this distribution is installed with legacy distutils format.\n\n        A distribution installed with \"raw\" distutils not patched by setuptools\n        uses one single file at ``info_location`` to store metadata. We need to\n        treat this specially on uninstallation.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installed_as_egg",
            "description": "Whether this distribution is installed as an egg.\n\n        This usually indicates the distribution was installed by (older versions\n        of) easy_install.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installed_with_setuptools_egg_info",
            "description": "Whether this distribution is installed with the ``.egg-info`` format.\n\n        This usually indicates the distribution was installed with setuptools\n        with an old pip version or with ``single-version-externally-managed``.\n\n        Note that this ensure the metadata store is a directory. distutils can\n        also installs an ``.egg-info``, but as a file, not a directory. This\n        property is *False* for that case. Also see ``installed_by_distutils``.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installed_with_dist_info",
            "description": "Whether this distribution is installed with the \"modern format\".\n\n        This indicates a \"modern\" installation, e.g. storing metadata in the\n        ``.dist-info`` directory. This applies to installations made by\n        setuptools (but through pip, not directly), or anything using the\n        standardized build backend interface (PEP 517).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "canonical_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "setuptools_filename",
            "description": "Convert a project name to its setuptools-compatible filename.\n\n        This is a copy of ``pkg_resources.to_filename()`` for compatibility.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "direct_url",
            "description": "Obtain a DirectUrl from this distribution.\n\n        Returns None if the distribution has no `direct_url.json` metadata,\n        or if `direct_url.json` is invalid.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installer",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "requested",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "editable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "local",
            "description": "If distribution is installed in the current virtual environment.\n\n        Always True if we're not in a virtualenv.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "in_usersite",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "in_site_packages",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_metadata_cached",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "metadata",
            "description": "Metadata of distribution parsed from e.g. METADATA or PKG-INFO.\n\n        This should return an empty message if the metadata file is unavailable.\n\n        :raises NoneMetadataError: If the metadata file is available, but does\n            not contain valid metadata.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata_dict",
            "description": "PEP 566 compliant JSON-serializable representation of METADATA or PKG-INFO.\n\n        This should return an empty dict if the metadata file is unavailable.\n\n        :raises NoneMetadataError: If the metadata file is available, but does\n            not contain valid metadata.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata_version",
            "description": "Value of \"Metadata-Version:\" in distribution metadata, if available.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "raw_name",
            "description": "Value of \"Name:\" in distribution metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "requires_python",
            "description": "Value of \"Requires-Python:\" in distribution metadata.\n\n        If the key does not exist or contains an invalid value, an empty\n        SpecifierSet should be returned.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_paths",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_directory",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_metadata_file_contents",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_wheel",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "location",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installed_location",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "info_location",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installed_by_distutils",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "canonical_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_paths",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "select_backend",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\__init__.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_compat.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_compat.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_zipfile",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_directory",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_metadata_file_contents",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_wheel",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "location",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "info_location",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "installed_location",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "canonical_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_emit_egg_deprecation",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_envs.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_envs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_paths",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_envs.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\direct_url.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\direct_url.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\direct_url.py",
            "decorator": [
                "hash.setter"
            ]
        },
        {
            "name": "_from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\direct_url.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\direct_url.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "redacted_url",
            "description": "url with user:password part removed unless it is formed with\n        environment variables as specified in PEP 610, or it is ``git``\n        in the case of a git URL.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\direct_url.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\direct_url.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\direct_url.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "handle_mutual_excludes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\format_control.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_install_req_to_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\installation_report.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "find_hash_url_fragment",
            "description": "Search a string for a checksum algorithm name and encoded output value.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "classmethod",
                "functools.lru_cache"
            ]
        },
        {
            "name": "from_json",
            "description": "\n        Convert an pypi json document from a simple repository page into a Link.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_element",
            "description": "\n        Convert an anchor element's attributes in a simple repository page to a Link.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "filename",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "file_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "scheme",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "netloc",
            "description": "\n        This can contain auth information.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ext",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "url_without_fragment",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "subdirectory_fragment",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "hash_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "show_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_file",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_wheel",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_vcs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_yanked",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "has_hash",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "links_equivalent",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "create",
            "description": "\n        Create a SearchScope object after normalizing the `find_links`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\models\\search_scope.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_auth_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\auth.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "save_auth_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\auth.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_keyring_provider",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\auth.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "PATH_as_shutil_which_determines_it",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\auth.py",
            "decorator": [
                "typing.no_type_check"
            ]
        },
        {
            "name": "keyring_provider",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\auth.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "keyring_provider",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\auth.py",
            "decorator": [
                "keyring_provider.setter"
            ]
        },
        {
            "name": "use_keyring",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\auth.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "suppressed_cache_errors",
            "description": "If we can't access the cache then we can just skip caching and process\n    requests as if caching wasn't enabled.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\cache.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "mode",
            "description": "Opening mode, which is always rb.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\lazy_wheel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "Path to the underlying file.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\lazy_wheel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "closed",
            "description": "Whether the file is closed.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\lazy_wheel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_stay",
            "description": "Return a context manager keeping the position.\n\n        At the end of the block, seek back to original position.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\network\\lazy_wheel.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "from_dist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\operations\\freeze.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "update_env_context_manager",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\operations\\build\\build_tracker.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "get_build_tracker",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\operations\\build\\build_tracker.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "track",
            "description": "Ensure that `key` cannot install itself as a setup requirement.\n\n        :raises LookupError: If `key` was already provided in a parent invocation of\n                             the context introduced by this method.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\operations\\build\\build_tracker.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "_generate_file",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\operations\\install\\wheel.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "req_error_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\operations\\install\\wheel.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "supports_pyproject_editable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "specifier",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_direct",
            "description": "Whether this requirement was specified as a direct URL.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_pinned",
            "description": "Return whether I am pinned to an exact version.\n\n        For example, some-package==1.2 is pinned; some-package>1.2 is not.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "has_hash_options",
            "description": "Return whether any known-good hashes are specified as options.\n\n        These activate --require-hashes mode; hashes specified as part of a\n        URL do not.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_wheel",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_wheel_from_cache",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "unpacked_source_directory",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "setup_py_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "setup_cfg_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "pyproject_toml_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_install.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "all_requirements",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_set.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "requirements_to_install",
            "description": "Return the list of requirements that need to be installed.\n\n        TODO remove this property together with the legacy resolver, since the new\n             resolver only returns requirements that need to be installed.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_set.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "unique",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_uninstall.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "uninstallation_paths",
            "description": "\n    Yield all the uninstallation paths for dist based on RECORD-without-.py[co]\n\n    Yield paths to all the files in RECORD. For each .py file in RECORD, add\n    the .pyc and .pyo in the same directory.\n\n    UninstallPathSet.add() takes care of the __pycache__ .py[co].\n\n    If RECORD is not found, raises UninstallationError,\n    with possible information from the INSTALLER file.\n\n    https://packaging.python.org/specifications/recording-installed-packages/\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_uninstall.py",
            "decorator": [
                "_unique"
            ]
        },
        {
            "name": "can_rollback",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_uninstall.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_dist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\req\\req_uninstall.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "empty",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_ireq",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "project_name",
            "description": "The \"project name\" of a requirement.\n\n        This is different from ``name`` if this requirement contains extras,\n        in which case ``name`` would contain the ``[...]`` part, while this\n        refers to the name of the project.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "The name identifying this requirement in the resolver.\n\n        This is different from ``project_name`` if this requirement contains\n        extras, where ``project_name`` would not contain the ``[...]`` part.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name",
            "description": "The \"project name\" of the candidate.\n\n        This is different from ``name`` if this candidate contains extras,\n        in which case ``name`` would contain the ``[...]`` part, while this\n        refers to the name of the project.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "The name identifying this candidate in the resolver.\n\n        This is different from ``project_name`` if this candidate contains\n        extras, where ``project_name`` would not contain the ``[...]`` part.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_installed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_editable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "source_link",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "source_link",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name",
            "description": "The normalised name of the project the candidate refers to",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_editable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "The normalised name of the project the candidate refers to",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_installed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_editable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "source_link",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "force_reinstall",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\factory.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__bool__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\found_candidates.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "is_backtrack_cause",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\provider.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "project_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "project_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "adjacent_tmp_file",
            "description": "Return a file-like object pointing to a tmp file next to path.\n\n    The file is created securely and is ensured to be written to disk\n    after the context reaches its end.\n\n    kwargs will be passed to tempfile.NamedTemporaryFile to control\n    the way the temporary file will be opened.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\filesystem.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "digest_count",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\hashes.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "indent_log",
            "description": "\n    A context manager which will cause the log output to be indented for any\n    log messages emitted inside it.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\logging.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "rmtree",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py",
            "decorator": [
                "retry"
            ]
        },
        {
            "name": "from_stream",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "encoding",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "captured_output",
            "description": "Return a context manager used by captured_stdout/stdin/stderr\n    that temporarily replaces the sys stream *stream_name* with a StringIO.\n\n    Taken from Lib/support/__init__.py in the CPython repo.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "get_requirement",
            "description": "Construct a packaging.Requirement object with caching",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\packaging.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "global_tempdir_manager",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\temp_dir.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "tempdir_registry",
            "description": "Provides a scoped global tempdir registry that can be used to dictate\n    whether directories should be deleted.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\temp_dir.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\temp_dir.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_generate_names",
            "description": "Generates a series of temporary names.\n\n        The algorithm replaces the leading characters in the name\n        with ones that are valid filesystem characters, but are not\n        valid package names (for both Python and pip definitions of\n        package).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\temp_dir.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "yield_lines",
            "description": "r\"\"\"\n    Yield valid lines of a string or iterable.\n\n    >>> list(yield_lines(''))\n    []\n    >>> list(yield_lines(['foo', 'bar']))\n    ['foo', 'bar']\n    >>> list(yield_lines('foo\\nbar'))\n    ['foo', 'bar']\n    >>> list(yield_lines('\\nfoo\\n#bar\\nbaz #comment'))\n    ['foo', 'baz #comment']\n    >>> list(yield_lines(['foo\\nbar', 'baz', 'bing\\n\\n\\n']))\n    ['foo', 'bar', 'baz', 'bing']\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "iterable": {
                        "type": "string"
                    }
                },
                "required": [
                    "iterable"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\_jaraco_text.py",
            "decorator": [
                "functools.singledispatch"
            ]
        },
        {
            "name": "_",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string"
                    }
                },
                "required": [
                    "text"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\_jaraco_text.py",
            "decorator": [
                "yield_lines.register"
            ]
        },
        {
            "name": "get_base_rev_args",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\bazaar.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_url_rev_and_auth",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\bazaar.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_remote_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\bazaar.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_revision",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\bazaar.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "is_commit_id_equal",
            "description": "Always assume the versions don't match",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\bazaar.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_base_rev_args",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_current_branch",
            "description": "\n        Return the current branch, or None if HEAD isn't at a branch\n        (e.g. detached HEAD).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_revision_sha",
            "description": "\n        Return (sha_or_none, is_branch), where sha_or_none is a commit hash\n        if the revision names a remote branch or tag, otherwise None.\n\n        Args:\n          dest: the repository directory.\n          rev: the revision name.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_should_fetch",
            "description": "\n        Return true if rev is a ref or is a commit that we don't have locally.\n\n        Branches and tags are not considered in this method because they are\n        assumed to be always available locally (which is a normal outcome of\n        ``git clone`` and ``git fetch --tags``).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "resolve_revision",
            "description": "\n        Resolve a revision to a new RevOptions object with the SHA1 of the\n        branch, tag, or ref if found.\n\n        Args:\n          rev_options: a RevOptions object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "is_commit_id_equal",
            "description": "\n        Return whether the current commit hash equals the given name.\n\n        Args:\n          dest: the repository directory.\n          name: a string name.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_remote_url",
            "description": "\n        Return URL of the first remote encountered.\n\n        Raises RemoteNotFoundError if the repository does not have a remote\n        url configured.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_git_remote_to_pip_url",
            "description": "\n        Convert a remote url from what git uses to what pip accepts.\n\n        There are 3 legal forms **url** may take:\n\n            1. A fully qualified url: ssh://git@example.com/foo/bar.git\n            2. A local project.git folder: /path/to/bare/repository.git\n            3. SCP shorthand for form 1: git@example.com:foo/bar.git\n\n        Form 1 is output as-is. Form 2 must be converted to URI and form 3 must\n        be converted to form 1.\n\n        See the corresponding test test_git_remote_url_to_pip() for examples of\n        sample inputs/outputs.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "has_commit",
            "description": "\n        Check if rev is a commit that is available in the local repository.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_revision",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_subdirectory",
            "description": "\n        Return the path to Python project root, relative to the repo root.\n        Return None if the project root is in the repo root.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_url_rev_and_auth",
            "description": "\n        Prefixes stub URLs like 'user@hostname:user/repo.git' with 'ssh://'.\n        That's required because although they use SSH they sometimes don't\n        work with a ssh:// scheme (e.g. GitHub). But we need a scheme for\n        parsing. Hence we remove it again afterwards and return it as a stub.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "update_submodules",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_repository_root",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "should_add_vcs_url_prefix",
            "description": "In either https or ssh form, requirements must be prefixed with git+.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_base_rev_args",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\mercurial.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_remote_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\mercurial.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_revision",
            "description": "\n        Return the repository-local changeset revision number, as an integer.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\mercurial.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_requirement_revision",
            "description": "\n        Return the changeset identification hash, as a 40-character\n        hexadecimal string\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\mercurial.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "is_commit_id_equal",
            "description": "Always assume the versions don't match",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\mercurial.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_subdirectory",
            "description": "\n        Return the path to Python project root, relative to the repo root.\n        Return None if the project root is in the repo root.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\mercurial.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_repository_root",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\mercurial.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "should_add_vcs_url_prefix",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_base_rev_args",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_revision",
            "description": "\n        Return the maximum revision for all files under a given location\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_netloc_and_auth",
            "description": "\n        This override allows the auth information to be passed to svn via the\n        --username and --password options instead of via the URL.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_url_rev_and_auth",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "make_rev_args",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_remote_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_get_svn_url_rev",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "is_commit_id_equal",
            "description": "Always assume the versions don't match",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\subversion.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "arg_rev",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "backends",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "dirnames",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "all_schemes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "should_add_vcs_url_prefix",
            "description": "\n        Return whether the vcs prefix (e.g. \"git+\") should be added to a\n        repository's remote url when used in a requirement.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_subdirectory",
            "description": "\n        Return the path to Python project root, relative to the repo root.\n        Return None if the project root is in the repo root.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_requirement_revision",
            "description": "\n        Return the revision string that should be used in a requirement.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_src_requirement",
            "description": "\n        Return the requirement string to use to redownload the files\n        currently at the given repository directory.\n\n        Args:\n          project_name: the (unescaped) project name.\n\n        The return value has a form similar to the following:\n\n            {repository_url}@{revision}#egg={project_name}\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_base_rev_args",
            "description": "\n        Return the base revision arguments for a vcs command.\n\n        Args:\n          rev: the name of a revision to install.  Cannot be None.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "rev": {
                        "type": "string",
                        "description": "the name of a revision to install.  Cannot be None."
                    }
                },
                "required": [
                    "rev"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "make_rev_options",
            "description": "\n        Return a RevOptions object.\n\n        Args:\n          rev: the name of a revision to install.\n          extra_args: a list of extra options.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_is_local_repository",
            "description": "\n        posix absolute paths start with os.path.sep,\n        win32 ones start with drive (like c:\\\\folder)\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_netloc_and_auth",
            "description": "\n        Parse the repository URL's netloc, and return the new netloc to use\n        along with auth information.\n\n        Args:\n          netloc: the original repository URL netloc.\n          scheme: the repository URL's scheme without the vcs prefix.\n\n        This is mainly for the Subversion class to override, so that auth\n        information can be provided via the --username and --password options\n        instead of through the URL.  For other subclasses like Git without\n        such an option, auth information must stay in the URL.\n\n        Returns: (netloc, (username, password)).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_url_rev_and_auth",
            "description": "\n        Parse the repository URL to use, and return the URL, revision,\n        and auth info to use.\n\n        Returns: (url, rev, (username, password)).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "make_rev_args",
            "description": "\n        Return the RevOptions \"extra arguments\" to use in obtain().\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "normalize_url",
            "description": "\n        Normalize a URL for comparison by unquoting it and removing any\n        trailing slash.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "compare_urls",
            "description": "\n        Compare two repo URLs for identity, ignoring incidental differences.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "is_commit_id_equal",
            "description": "\n        Return whether the id of the current commit equals the given name.\n\n        Args:\n          dest: the repository directory.\n          name: a string name.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_remote_url",
            "description": "\n        Return the url used at location\n\n        Raises RemoteNotFoundError if the repository does not have a remote\n        url configured.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_revision",
            "description": "\n        Return the current commit id of the files at the given location.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "run_command",
            "description": "\n        Run a VCS subcommand\n        This is simply a wrapper around call_subprocess that adds the VCS\n        command name, and checks that the VCS is available\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "is_repository_directory",
            "description": "\n        Return whether a directory path is a repository directory.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_repository_root",
            "description": "\n        Return the \"root\" (top-level) directory controlled by the vcs,\n        or `None` if the directory is not in any.\n\n        It is meant to be overridden to implement smarter detection\n        mechanisms for specific vcs.\n\n        This can do more than is_repository_directory() alone. For\n        example, the Git override checks that Git is actually available.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "__prepare__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "this_bases": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "name",
                    "this_bases"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\six.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_proto_hook",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "other": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "other"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "__class_getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "params": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "params"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "typing._tp_cache"
            ]
        },
        {
            "name": "__int__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__float__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__complex__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__bytes__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__index__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__abs__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__round__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "TypedDict",
            "description": "A simple typed namespace. At runtime it is equivalent to a plain dict.\n\n        TypedDict creates a dictionary type such that a type checker will expect all\n        instances to have a certain set of keys, where each key is\n        associated with a value of a consistent type. This expectation\n        is not checked at runtime.\n\n        Usage::\n\n            class Point2D(TypedDict):\n                x: int\n                y: int\n                label: str\n\n            a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK\n            b: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check\n\n            assert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')\n\n        The type info can be accessed via the Point2D.__annotations__ dict, and\n        the Point2D.__required_keys__ and Point2D.__optional_keys__ frozensets.\n        TypedDict supports an additional equivalent form::\n\n            Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})\n\n        By default, all keys must be present in a TypedDict. It is possible\n        to override this by specifying totality::\n\n            class Point2D(TypedDict, total=False):\n                x: int\n                y: int\n\n        This means that a Point2D TypedDict can have any of the keys omitted. A type\n        checker is only expected to support a literal False or True as the value of\n        the total argument. True is the default, and makes all items defined in the\n        class body be required.\n\n        The Required and NotRequired special forms can also be used to mark\n        individual keys as being required or not required::\n\n            class Point2D(TypedDict):\n                x: int  # the \"x\" key must always be present (Required is the default)\n                y: NotRequired[int]  # the \"y\" key can be omitted\n\n        See PEP 655 for more details on Required and NotRequired.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "__typename": {
                        "type": "string"
                    }
                },
                "required": [
                    "__typename"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_ensure_subclassable"
            ]
        },
        {
            "name": "__class_getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "params": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "params"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "typing._tp_cache"
            ]
        },
        {
            "name": "TypeAlias",
            "description": "Special marker indicating that an assignment should\n        be recognized as a proper type alias definition by type\n        checkers.\n\n        For example::\n\n            Predicate: TypeAlias = Callable[..., bool]\n\n        It's invalid when used anywhere except as in the example above.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_ExtensionsSpecialForm"
            ]
        },
        {
            "name": "args",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "kwargs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__parameters__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_concatenate_getitem",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "typing._tp_cache"
            ]
        },
        {
            "name": "Concatenate",
            "description": "Used in conjunction with ``ParamSpec`` and ``Callable`` to represent a\n        higher order function which adds, removes or transforms parameters of a\n        callable.\n\n        For example::\n\n           Callable[Concatenate[int, P], int]\n\n        See PEP 612 for detailed information.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_ExtensionsSpecialForm"
            ]
        },
        {
            "name": "TypeGuard",
            "description": "Special typing form used to annotate the return type of a user-defined\n        type guard function.  ``TypeGuard`` only accepts a single type argument.\n        At runtime, functions marked this way should return a boolean.\n\n        ``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static\n        type checkers to determine a more precise type of an expression within a\n        program's code flow.  Usually type narrowing is done by analyzing\n        conditional code flow and applying the narrowing to a block of code.  The\n        conditional expression here is sometimes referred to as a \"type guard\".\n\n        Sometimes it would be convenient to use a user-defined boolean function\n        as a type guard.  Such a function should use ``TypeGuard[...]`` as its\n        return type to alert static type checkers to this intention.\n\n        Using  ``-> TypeGuard`` tells the static type checker that for a given\n        function:\n\n        1. The return value is a boolean.\n        2. If the return value is ``True``, the type of its argument\n        is the type inside ``TypeGuard``.\n\n        For example::\n\n            def is_str(val: Union[str, float]):\n                # \"isinstance\" type guard\n                if isinstance(val, str):\n                    # Type of ``val`` is narrowed to ``str``\n                    ...\n                else:\n                    # Else, type of ``val`` is narrowed to ``float``.\n                    ...\n\n        Strict type narrowing is not enforced -- ``TypeB`` need not be a narrower\n        form of ``TypeA`` (it can even be a wider form) and this may lead to\n        type-unsafe results.  The main reason is to allow for things like\n        narrowing ``List[object]`` to ``List[str]`` even though the latter is not\n        a subtype of the former, since ``List`` is invariant.  The responsibility of\n        writing type-safe type guards is left to the user.\n\n        ``TypeGuard`` also works with type variables.  For more information, see\n        PEP 647 (User-Defined Type Guards).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_ExtensionsSpecialForm"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "typing._tp_cache"
            ]
        },
        {
            "name": "LiteralString",
            "description": "Represents an arbitrary literal string.\n\n        Example::\n\n          from pip._vendor.typing_extensions import LiteralString\n\n          def query(sql: LiteralString) -> ...:\n              ...\n\n          query(\"SELECT * FROM table\")  # ok\n          query(f\"SELECT * FROM {input()}\")  # not ok\n\n        See PEP 675 for details.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "params": {
                        "type": "string"
                    }
                },
                "required": [
                    "params"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_SpecialForm"
            ]
        },
        {
            "name": "Self",
            "description": "Used to spell the type of \"self\" in classes.\n\n        Example::\n\n          from typing import Self\n\n          class ReturnsSelf:\n              def parse(self, data: bytes) -> Self:\n                  ...\n                  return self\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "params": {
                        "type": "string"
                    }
                },
                "required": [
                    "params"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_SpecialForm"
            ]
        },
        {
            "name": "Never",
            "description": "The bottom type, a type that has no members.\n\n        This can be used to define a function that should never be\n        called, or a function that never returns::\n\n            from pip._vendor.typing_extensions import Never\n\n            def never_call_me(arg: Never) -> None:\n                pass\n\n            def int_or_str(arg: int | str) -> None:\n                never_call_me(arg)  # type checker error\n                match arg:\n                    case int():\n                        print(\"It's an int\")\n                    case str():\n                        print(\"It's a str\")\n                    case _:\n                        never_call_me(arg)  # ok, arg is of type Never\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "params": {
                        "type": "string"
                    }
                },
                "required": [
                    "params"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_SpecialForm"
            ]
        },
        {
            "name": "Required",
            "description": "A special typing construct to mark a key of a total=False TypedDict\n        as required. For example:\n\n            class Movie(TypedDict, total=False):\n                title: Required[str]\n                year: int\n\n            m = Movie(\n                title='The Matrix',  # typechecker error if key is omitted\n                year=1999,\n            )\n\n        There is no runtime checking that a required key is actually provided\n        when instantiating a related TypedDict.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_ExtensionsSpecialForm"
            ]
        },
        {
            "name": "NotRequired",
            "description": "A special typing construct to mark a key of a TypedDict as\n        potentially missing. For example:\n\n            class Movie(TypedDict):\n                title: str\n                year: NotRequired[int]\n\n            m = Movie(\n                title='The Matrix',  # typechecker error if key is omitted\n                year=1999,\n            )\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_ExtensionsSpecialForm"
            ]
        },
        {
            "name": "Unpack",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "parameters": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_UnpackSpecialForm"
            ]
        },
        {
            "name": "__new__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "NamedTuple",
            "description": "Typed version of namedtuple.\n\n        Usage::\n\n            class Employee(NamedTuple):\n                name: str\n                id: int\n\n        This is equivalent to::\n\n            Employee = collections.namedtuple('Employee', ['name', 'id'])\n\n        The resulting class has an extra __annotations__ attribute, giving a\n        dict that maps field names to types.  (The field names are also in\n        the _fields attribute, which is part of the namedtuple API.)\n        An alternative equivalent functional syntax is also accepted::\n\n            Employee = NamedTuple('Employee', [('name', str), ('id', int)])\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "__typename": {
                        "type": "string"
                    }
                },
                "required": [
                    "__typename"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
            "decorator": [
                "_ensure_subclassable"
            ]
        },
        {
            "name": "_urlnorm",
            "description": "Normalize the URL to create a safe key for the cache",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\controller.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "cache_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\controller.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "encode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\caches\\file_cache.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\big5prober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\big5prober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\charsetgroupprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\charsetgroupprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\charsetprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\charsetprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "state",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\charsetprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "filter_high_byte_only",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\charsetprober.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "filter_international_words",
            "description": "\n        We define three types of bytes:\n        alphabet: english alphabets [a-zA-Z]\n        international: international characters [\\x80-\\xFF]\n        marker: everything else [^a-zA-Z\\x80-\\xFF]\n        The input buffer can be thought to contain a series of words delimited\n        by markers. This function works to filter all words that contain at\n        least one international character. All contiguous sequences of markers\n        are replaced by a single space ascii character.\n        This filter applies to all scripts which do not use English characters.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\charsetprober.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "remove_xml_tags",
            "description": "\n        Returns a copy of ``buf`` that retains only the sequences of English\n        alphabet and high byte characters that are not between <> characters.\n        This filter can be applied to all scripts which contain both English\n        characters and extended ASCII characters, but is currently only used by\n        ``Latin1Prober``.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\charsetprober.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\codingstatemachine.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\cp949prober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\cp949prober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_num_categories",
            "description": ":returns: The number of likelihood categories in the enum.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\enums.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\escprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\escprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\eucjpprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\eucjpprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\euckrprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\euckrprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\euctwprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\euctwprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\gb2312prober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\gb2312prober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\hebrewprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\hebrewprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "state",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\hebrewprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\johabprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\johabprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\jpcntx.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\latin1prober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\latin1prober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\macromanprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\macromanprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\sbcharsetprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\sbcharsetprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\sjisprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\sjisprober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_state",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\universaldetector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "has_win_bytes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\universaldetector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_probers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\universaldetector.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\utf1632prober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\utf1632prober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "state",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\utf1632prober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "charset_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\utf8prober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "language",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\chardet\\utf8prober.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "closed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\ansitowin32.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "colorama_text",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\initialise.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "testStripIsTrueOnWindows",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\ansitowin32_test.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "setUp",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\initialise_test.py",
            "decorator": [
                "skipUnless"
            ]
        },
        {
            "name": "testInitWrapsOnWindows",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "_": {
                        "type": "string"
                    }
                },
                "required": [
                    "_"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\initialise_test.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "testInitDoesntWrapOnEmulatedWindows",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "_": {
                        "type": "string"
                    }
                },
                "required": [
                    "_"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\initialise_test.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "testAutoResetPassedOn",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mockATW32": {
                        "type": "string"
                    },
                    "_": {
                        "type": "string"
                    }
                },
                "required": [
                    "mockATW32",
                    "_"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\initialise_test.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "testAutoResetChangeable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mockATW32": {
                        "type": "string"
                    }
                },
                "required": [
                    "mockATW32"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\initialise_test.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "testAtexitRegisteredOnlyOnce",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mockRegister": {
                        "type": "string"
                    }
                },
                "required": [
                    "mockRegister"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\initialise_test.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "testJustFixWindowsConsole",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\initialise_test.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "osname",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\utils.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "replace_by",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "stream": {
                        "type": "string"
                    }
                },
                "required": [
                    "stream"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\utils.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "replace_original_by",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "stream": {
                        "type": "string"
                    }
                },
                "required": [
                    "stream"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\utils.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "pycharm",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\utils.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "testInit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mockWin32": {
                        "type": "string"
                    }
                },
                "required": [
                    "mockWin32"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\winterm_test.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "testGetAttrs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\winterm_test.py",
            "decorator": [
                "skipUnless"
            ]
        },
        {
            "name": "testResetAll",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mockWin32": {
                        "type": "string"
                    }
                },
                "required": [
                    "mockWin32"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\winterm_test.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "testFore",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\winterm_test.py",
            "decorator": [
                "skipUnless"
            ]
        },
        {
            "name": "testBack",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\winterm_test.py",
            "decorator": [
                "skipUnless"
            ]
        },
        {
            "name": "testStyle",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\winterm_test.py",
            "decorator": [
                "skipUnless"
            ]
        },
        {
            "name": "testSetConsole",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mockWin32": {
                        "type": "string"
                    }
                },
                "required": [
                    "mockWin32"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\winterm_test.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "testSetConsoleOnStderr",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mockWin32": {
                        "type": "string"
                    }
                },
                "required": [
                    "mockWin32"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\colorama\\tests\\winterm_test.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "distinfo_dirname",
            "description": "\n        The *name* and *version* parameters are converted into their\n        filename-escaped form, i.e. any ``'-'`` characters are replaced\n        with ``'_'`` other than the one in ``'dist-info'`` and the one\n        separating the name from the version number.\n\n        :parameter name: is converted to a standard distribution name by replacing\n                         any runs of non- alphanumeric characters with a single\n                         ``'-'``.\n        :type name: string\n        :parameter version: is converted to a standard version string. Spaces\n                            become dots, and all other non-alphanumeric characters\n                            (except dots) become dashes, with runs of multiple\n                            dashes condensed to a single dash.\n        :type version: string\n        :returns: directory name\n        :rtype: string",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "name",
                    "version"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "source_url",
            "description": "\n        The source archive download URL for this distribution.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name_and_version",
            "description": "\n        A utility property which displays the name and version in parentheses.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "provides",
            "description": "\n        A set of distribution names and versions provided by this distribution.\n        :return: A set of \"name (version)\" strings.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "run_requires",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "meta_requires",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "build_requires",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "test_requires",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "dev_requires",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "exports",
            "description": "\n        Return the information exported by this distribution.\n        :return: A dictionary of exports, mapping an export category to a dict\n                 of :class:`ExportEntry` instances describing the individual\n                 export entries, and keyed by name.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "shared_locations",
            "description": "\n        A dictionary of shared locations whose keys are in the set 'prefix',\n        'purelib', 'platlib', 'scripts', 'headers', 'data' and 'namespace'.\n        The corresponding value is the absolute path of that category for\n        this distribution, and takes into account any paths selected by the\n        user at installation time (e.g. via command-line arguments). In the\n        case of the 'namespace' key, this would be a list of absolute paths\n        for the roots of namespace packages in this distribution.\n\n        The first time this property is accessed, the relevant information is\n        read from the SHARED file in the .dist-info directory.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\database.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "links",
            "description": "\n        Return the URLs of all the links on a page together with information\n        about their \"rel\" attribute, for determining which ones to treat as\n        downloads and which ones to queue for further scraping.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\locators.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "name_and_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\metadata.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "provides",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\metadata.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "provides",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\metadata.py",
            "decorator": [
                "provides.setter"
            ]
        },
        {
            "name": "dictionary",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\metadata.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "dependencies",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\metadata.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "dependencies",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\metadata.py",
            "decorator": [
                "dependencies.setter"
            ]
        },
        {
            "name": "file_path",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\resources.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "bytes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\resources.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "size",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\resources.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "resources",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\resources.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "tempdir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "chdir",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "d": {
                        "type": "string"
                    }
                },
                "required": [
                    "d"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "socket_timeout",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "value",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "strong_connections",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "dot",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "maximum",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "percentage",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ETA",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "speed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_prerelease",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "exact_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_prerelease",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_prerelease",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_prerelease",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "filename",
            "description": "\n        Build and return a filename from the various components.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\wheel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "exists",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\wheel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "tags",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\wheel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "metadata",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\wheel.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\wheel.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_os_release_info",
            "description": "\n        Get the information items from the specified os-release file.\n\n        Returns:\n            A dictionary containing all information items.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_parse_os_release_content",
            "description": "\n        Parse the lines of an os-release file.\n\n        Parameters:\n\n        * lines: Iterable through the lines in the os-release file.\n                 Each line must be a unicode string or a UTF-8 encoded byte\n                 string.\n\n        Returns:\n            A dictionary containing all information items.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_lsb_release_info",
            "description": "\n        Get the information items from the lsb_release command output.\n\n        Returns:\n            A dictionary containing all information items.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_parse_lsb_release_content",
            "description": "\n        Parse the output of the lsb_release command.\n\n        Parameters:\n\n        * lines: Iterable through the lines of the lsb_release output.\n                 Each line must be a unicode string or a UTF-8 encoded byte\n                 string.\n\n        Returns:\n            A dictionary containing all information items.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_uname_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_oslevel_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_debian_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_parse_uname_content",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_to_str",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_distro_release_info",
            "description": "\n        Get the information items from the specified distro release file.\n\n        Returns:\n            A dictionary containing all information items.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_parse_distro_release_content",
            "description": "\n        Parse a line from a distro release file.\n\n        Parameters:\n        * line: Line from the distro release file. Must be a unicode string\n                or a UTF-8 encoded byte string.\n\n        Returns:\n            A dictionary containing all information items.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\distro\\distro.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "from_bytes",
            "description": "Unpack bytes into a `Timestamp` object.\n\n        Used for pure-Python msgpack unpacking.\n\n        :param b: Payload from msgpack ext message with code -1\n        :type b: bytes\n\n        :returns: Timestamp object unpacked from msgpack ext payload\n        :rtype: Timestamp\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "b": {
                        "type": "string"
                    }
                },
                "required": [
                    "b"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\msgpack\\ext.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "from_unix",
            "description": "Create a Timestamp from posix timestamp in seconds.\n\n        :param unix_float: Posix timestamp in seconds.\n        :type unix_float: int or float.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "unix_sec": {
                        "type": "string"
                    }
                },
                "required": [
                    "unix_sec"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\msgpack\\ext.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "from_unix_nano",
            "description": "Create a Timestamp from posix timestamp in nanoseconds.\n\n        :param int unix_ns: Posix timestamp in nanoseconds.\n        :rtype: Timestamp\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "unix_ns": {
                        "type": "string"
                    }
                },
                "required": [
                    "unix_ns"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\msgpack\\ext.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "from_datetime",
            "description": "Create a Timestamp from datetime with tzinfo.\n\n        Python 2 is not supported.\n\n        :rtype: Timestamp\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "dt": {
                        "type": "string"
                    }
                },
                "required": [
                    "dt"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\msgpack\\ext.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "__str__",
            "description": "\n        Returns the str representation of this Specifier like object. This\n        should be representative of the Specifier itself.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__hash__",
            "description": "\n        Returns a hash value for this Specifier like object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "__eq__",
            "description": "\n        Returns a boolean representing whether or not the two Specifier like\n        objects are equal.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "prereleases",
            "description": "\n        Returns whether or not pre-releases as a whole are allowed by this\n        specifier.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "abc.abstractproperty"
            ]
        },
        {
            "name": "prereleases",
            "description": "\n        Sets whether or not pre-releases as a whole are allowed by this\n        specifier.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "prereleases.setter"
            ]
        },
        {
            "name": "contains",
            "description": "\n        Determines if the given item is contained within this specifier.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "filter",
            "description": "\n        Takes an iterable of items and filters them so that only items which\n        are contained within this specifier are allowed in it.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "abc.abstractmethod"
            ]
        },
        {
            "name": "_canonical_spec",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "operator",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prereleases",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prereleases",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "prereleases.setter"
            ]
        },
        {
            "name": "wrapped",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "_compare_compatible",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "_require_version_compare"
            ]
        },
        {
            "name": "_compare_equal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "_require_version_compare"
            ]
        },
        {
            "name": "_compare_not_equal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "_require_version_compare"
            ]
        },
        {
            "name": "_compare_less_than_equal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "_require_version_compare"
            ]
        },
        {
            "name": "_compare_greater_than_equal",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "_require_version_compare"
            ]
        },
        {
            "name": "_compare_less_than",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "_require_version_compare"
            ]
        },
        {
            "name": "_compare_greater_than",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "_require_version_compare"
            ]
        },
        {
            "name": "prereleases",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prereleases",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "prereleases.setter"
            ]
        },
        {
            "name": "prereleases",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "prereleases",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
            "decorator": [
                "prereleases.setter"
            ]
        },
        {
            "name": "interpreter",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\tags.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "abi",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\tags.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "platform",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\tags.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "public",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "base_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "epoch",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "release",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "pre",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "post",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "dev",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "local",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_prerelease",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_postrelease",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_devrelease",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "epoch",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "release",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "pre",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "post",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "dev",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "local",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "public",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "base_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_prerelease",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_postrelease",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_devrelease",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "major",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "minor",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "micro",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_get_glibc_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\_manylinux.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "_get_musl_version",
            "description": "Detect currently-running musl runtime version.\n\n    This is done by checking the specified executable's dynamic linking\n    information, and invoking the loader to parse its output for a version\n    string. If the loader is musl, the output would be something like::\n\n        musl libc (x86_64)\n        Version 1.2.2\n        Dynamic Program Loader\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\_musllinux.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "dist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "req",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "required_by",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "req",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "requirers",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "requirers_str",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_build_master",
            "description": "\n        Prepare the master working set.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_build_from_requirements",
            "description": "\n        Build a working set from a requirement spec. Rewrites sys.path.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "req_spec": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "req_spec"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_warn_unsafe_extraction_path",
            "description": "\n        If the default extraction path is overridden and set to an insecure\n        location, such as /tmp, it opens up an opportunity for an attacker to\n        replace an extracted file with an unauthorized payload. Warn the user\n        if a known insecure location is used.\n\n        See Distribute #375 for more details.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "required": [
                    "path"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_validate_resource_path",
            "description": "\n        Validate the resource paths according to the docs.\n        https://setuptools.pypa.io/en/latest/pkg_resources.html#basic-resource-access\n\n        >>> warned = getfixture('recwarn')\n        >>> warnings.simplefilter('always')\n        >>> vrp = NullProvider._validate_resource_path\n        >>> vrp('foo/bar.txt')\n        >>> bool(warned)\n        False\n        >>> vrp('../foo/bar.txt')\n        >>> bool(warned)\n        True\n        >>> warned.clear()\n        >>> vrp('/foo/bar.txt')\n        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True\n        >>> warned.clear()\n        >>> vrp('foo/f../bar.txt')\n        >>> bool(warned)\n        False\n\n        Windows path separators are straight-up disallowed.\n        >>> vrp(r'\\\\foo/bar.txt')\n        Traceback (most recent call last):\n        ...\n        ValueError: Use of .. or absolute path in a resource path \\\nis not allowed.\n\n        >>> vrp(r'C:\\\\foo/bar.txt')\n        Traceback (most recent call last):\n        ...\n        ValueError: Use of .. or absolute path in a resource path \\\nis not allowed.\n\n        Blank values are allowed\n\n        >>> vrp('')\n        >>> bool(warned)\n        False\n\n        Non-string values are not.\n\n        >>> vrp(None)\n        Traceback (most recent call last):\n        ...\n        AttributeError: ...\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "required": [
                    "path"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_register",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "build",
            "description": "\n        Build a dictionary similar to the zipimport directory\n        caches, except instead of tuples, store ZipInfo objects.\n\n        Use a platform-specific path separator (os.sep) for the path keys\n        for compatibility with pypy on Windows.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "path"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "zipinfo",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_get_date_and_size",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "zip_stat": {
                        "type": "string"
                    }
                },
                "required": [
                    "zip_stat"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "user_data_dir",
            "description": ":return: data directory tied to the user, e.g. ``/data/user/<userid>/<packagename>/files/<AppName>``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_data_dir",
            "description": ":return: data directory shared by users, same as `user_data_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_config_dir",
            "description": "\n        :return: config directory tied to the user, e.g. \\\n        ``/data/user/<userid>/<packagename>/shared_prefs/<AppName>``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_config_dir",
            "description": ":return: config directory shared by the users, same as `user_config_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_cache_dir",
            "description": ":return: cache directory tied to the user, e.g. e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_cache_dir",
            "description": ":return: cache directory shared by users, same as `user_cache_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_state_dir",
            "description": ":return: state directory tied to the user, same as `user_data_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_log_dir",
            "description": "\n        :return: log directory tied to the user, same as `user_cache_dir` if not opinionated else ``log`` in it,\n          e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>/log``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_documents_dir",
            "description": ":return: documents directory tied to the user e.g. ``/storage/emulated/0/Documents``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_downloads_dir",
            "description": ":return: downloads directory tied to the user e.g. ``/storage/emulated/0/Downloads``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_pictures_dir",
            "description": ":return: pictures directory tied to the user e.g. ``/storage/emulated/0/Pictures``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_videos_dir",
            "description": ":return: videos directory tied to the user e.g. ``/storage/emulated/0/DCIM/Camera``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_music_dir",
            "description": ":return: music directory tied to the user e.g. ``/storage/emulated/0/Music``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_runtime_dir",
            "description": "\n        :return: runtime directory tied to the user, same as `user_cache_dir` if not opinionated else ``tmp`` in it,\n          e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>/tmp``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_android_folder",
            "description": ":return: base folder for the Android OS or None if it cannot be found",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "_android_documents_folder",
            "description": ":return: documents folder for the Android OS",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "_android_downloads_folder",
            "description": ":return: downloads folder for the Android OS",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "_android_pictures_folder",
            "description": ":return: pictures folder for the Android OS",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "_android_videos_folder",
            "description": ":return: videos folder for the Android OS",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "_android_music_folder",
            "description": ":return: music folder for the Android OS",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "user_data_dir",
            "description": ":return: data directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "site_data_dir",
            "description": ":return: data directory shared by users",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_config_dir",
            "description": ":return: config directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "site_config_dir",
            "description": ":return: config directory shared by the users",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_cache_dir",
            "description": ":return: cache directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "site_cache_dir",
            "description": ":return: cache directory shared by users",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_state_dir",
            "description": ":return: state directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_log_dir",
            "description": ":return: log directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_documents_dir",
            "description": ":return: documents directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_downloads_dir",
            "description": ":return: downloads directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_pictures_dir",
            "description": ":return: pictures directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_videos_dir",
            "description": ":return: videos directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_music_dir",
            "description": ":return: music directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_runtime_dir",
            "description": ":return: runtime directory tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property",
                "abstractmethod"
            ]
        },
        {
            "name": "user_data_path",
            "description": ":return: data path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_data_path",
            "description": ":return: data path shared by users",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_config_path",
            "description": ":return: config path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_config_path",
            "description": ":return: config path shared by the users",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_cache_path",
            "description": ":return: cache path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_cache_path",
            "description": ":return: cache path shared by users",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_state_path",
            "description": ":return: state path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_log_path",
            "description": ":return: log path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_documents_path",
            "description": ":return: documents path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_downloads_path",
            "description": ":return: downloads path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_pictures_path",
            "description": ":return: pictures path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_videos_path",
            "description": ":return: videos path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_music_path",
            "description": ":return: music path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_runtime_path",
            "description": ":return: runtime path tied to the user",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_data_dir",
            "description": ":return: data directory tied to the user, e.g. ``~/Library/Application Support/$appname/$version``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_data_dir",
            "description": ":return: data directory shared by users, e.g. ``/Library/Application Support/$appname/$version``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_config_dir",
            "description": ":return: config directory tied to the user, same as `user_data_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_config_dir",
            "description": ":return: config directory shared by the users, same as `site_data_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_cache_dir",
            "description": ":return: cache directory tied to the user, e.g. ``~/Library/Caches/$appname/$version``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_cache_dir",
            "description": ":return: cache directory shared by users, e.g. ``/Library/Caches/$appname/$version``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_state_dir",
            "description": ":return: state directory tied to the user, same as `user_data_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_log_dir",
            "description": ":return: log directory tied to the user, e.g. ``~/Library/Logs/$appname/$version``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_documents_dir",
            "description": ":return: documents directory tied to the user, e.g. ``~/Documents``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_downloads_dir",
            "description": ":return: downloads directory tied to the user, e.g. ``~/Downloads``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_pictures_dir",
            "description": ":return: pictures directory tied to the user, e.g. ``~/Pictures``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_videos_dir",
            "description": ":return: videos directory tied to the user, e.g. ``~/Movies``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_music_dir",
            "description": ":return: music directory tied to the user, e.g. ``~/Music``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_runtime_dir",
            "description": ":return: runtime directory tied to the user, e.g. ``~/Library/Caches/TemporaryItems/$appname/$version``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_data_dir",
            "description": "\n        :return: data directory tied to the user, e.g. ``~/.local/share/$appname/$version`` or\n         ``$XDG_DATA_HOME/$appname/$version``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_data_dir",
            "description": "\n        :return: data directories shared by users (if `multipath <platformdirs.api.PlatformDirsABC.multipath>` is\n         enabled and ``XDG_DATA_DIR`` is set and a multi path the response is also a multi path separated by the OS\n         path separator), e.g. ``/usr/local/share/$appname/$version`` or ``/usr/share/$appname/$version``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_config_dir",
            "description": "\n        :return: config directory tied to the user, e.g. ``~/.config/$appname/$version`` or\n         ``$XDG_CONFIG_HOME/$appname/$version``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_config_dir",
            "description": "\n        :return: config directories shared by users (if `multipath <platformdirs.api.PlatformDirsABC.multipath>`\n         is enabled and ``XDG_DATA_DIR`` is set and a multi path the response is also a multi path separated by the OS\n         path separator), e.g. ``/etc/xdg/$appname/$version``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_cache_dir",
            "description": "\n        :return: cache directory tied to the user, e.g. ``~/.cache/$appname/$version`` or\n         ``~/$XDG_CACHE_HOME/$appname/$version``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_cache_dir",
            "description": ":return: cache directory shared by users, e.g. ``/var/tmp/$appname/$version``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_state_dir",
            "description": "\n        :return: state directory tied to the user, e.g. ``~/.local/state/$appname/$version`` or\n         ``$XDG_STATE_HOME/$appname/$version``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_log_dir",
            "description": ":return: log directory tied to the user, same as `user_state_dir` if not opinionated else ``log`` in it",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_documents_dir",
            "description": ":return: documents directory tied to the user, e.g. ``~/Documents``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_downloads_dir",
            "description": ":return: downloads directory tied to the user, e.g. ``~/Downloads``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_pictures_dir",
            "description": ":return: pictures directory tied to the user, e.g. ``~/Pictures``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_videos_dir",
            "description": ":return: videos directory tied to the user, e.g. ``~/Videos``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_music_dir",
            "description": ":return: music directory tied to the user, e.g. ``~/Music``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_runtime_dir",
            "description": "\n        :return: runtime directory tied to the user, e.g. ``/run/user/$(id -u)/$appname/$version`` or\n         ``$XDG_RUNTIME_DIR/$appname/$version``.\n\n         For FreeBSD/OpenBSD/NetBSD, it would return ``/var/run/user/$(id -u)/$appname/$version`` if\n         exists, otherwise ``/tmp/runtime-$(id -u)/$appname/$version``, if``$XDG_RUNTIME_DIR``\n         is not set.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_data_path",
            "description": ":return: data path shared by users. Only return first item, even if ``multipath`` is set to ``True``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_config_path",
            "description": ":return: config path shared by the users. Only return first item, even if ``multipath`` is set to ``True``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_cache_path",
            "description": ":return: cache path shared by users. Only return first item, even if ``multipath`` is set to ``True``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_data_dir",
            "description": "\n        :return: data directory tied to the user, e.g.\n         ``%USERPROFILE%\\\\AppData\\\\Local\\\\$appauthor\\\\$appname`` (not roaming) or\n         ``%USERPROFILE%\\\\AppData\\\\Roaming\\\\$appauthor\\\\$appname`` (roaming)\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_data_dir",
            "description": ":return: data directory shared by users, e.g. ``C:\\\\ProgramData\\\\$appauthor\\\\$appname``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_config_dir",
            "description": ":return: config directory tied to the user, same as `user_data_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_config_dir",
            "description": ":return: config directory shared by the users, same as `site_data_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_cache_dir",
            "description": "\n        :return: cache directory tied to the user (if opinionated with ``Cache`` folder within ``$appname``) e.g.\n         ``%USERPROFILE%\\\\AppData\\\\Local\\\\$appauthor\\\\$appname\\\\Cache\\\\$version``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "site_cache_dir",
            "description": ":return: cache directory shared by users, e.g. ``C:\\\\ProgramData\\\\$appauthor\\\\$appname\\\\Cache\\\\$version``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_state_dir",
            "description": ":return: state directory tied to the user, same as `user_data_dir`",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_log_dir",
            "description": ":return: log directory tied to the user, same as `user_data_dir` if not opinionated else ``Logs`` in it",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_documents_dir",
            "description": ":return: documents directory tied to the user e.g. ``%USERPROFILE%\\\\Documents``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_downloads_dir",
            "description": ":return: downloads directory tied to the user e.g. ``%USERPROFILE%\\\\Downloads``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_pictures_dir",
            "description": ":return: pictures directory tied to the user e.g. ``%USERPROFILE%\\\\Pictures``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_videos_dir",
            "description": ":return: videos directory tied to the user e.g. ``%USERPROFILE%\\\\Videos``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_music_dir",
            "description": ":return: music directory tied to the user e.g. ``%USERPROFILE%\\\\Music``",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_runtime_dir",
            "description": "\n        :return: runtime directory tied to the user, e.g.\n         ``%USERPROFILE%\\\\AppData\\\\Local\\\\Temp\\\\$appauthor\\\\$appname``\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_pre_style",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\html.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_linenos_style",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\html.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_linenos_special_style",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\html.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_translate_parts",
            "description": "HTML-escape a value and split it by newlines.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\html.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "replaceWith",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\actions.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "removeQuotes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\actions.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "withAttribute",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\actions.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "withClass",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\actions.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "matchOnlyAtCol",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\actions.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "convert_to_date",
            "description": "\n        Helper to create a parse action for converting parsed date string to Python datetime.date\n\n        Params -\n        - fmt - format to be passed to datetime.strptime (default= ``\"%Y-%m-%d\"``)\n\n        Example::\n\n            date_expr = pyparsing_common.iso8601_date.copy()\n            date_expr.set_parse_action(pyparsing_common.convert_to_date())\n            print(date_expr.parse_string(\"1999-12-31\"))\n\n        prints::\n\n            [datetime.date(1999, 12, 31)]\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\common.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "convert_to_datetime",
            "description": "Helper to create a parse action for converting parsed\n        datetime string to Python datetime.datetime\n\n        Params -\n        - fmt - format to be passed to datetime.strptime (default= ``\"%Y-%m-%dT%H:%M:%S.%f\"``)\n\n        Example::\n\n            dt_expr = pyparsing_common.iso8601_datetime.copy()\n            dt_expr.set_parse_action(pyparsing_common.convert_to_datetime())\n            print(dt_expr.parse_string(\"1999-12-31T23:59:59.999\"))\n\n        prints::\n\n            [datetime.datetime(1999, 12, 31, 23, 59, 59, 999000)]\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\common.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "strip_html_tags",
            "description": "Parse action to remove HTML tags from web page HTML source\n\n        Example::\n\n            # strip HTML links from normal text\n            text = '<td>More info at the <a href=\"https://github.com/pyparsing/pyparsing/wiki\">pyparsing</a> wiki page</td>'\n            td, td_end = make_html_tags(\"TD\")\n            table_text = td + SkipTo(td_end).set_parse_action(pyparsing_common.strip_html_tags)(\"body\") + td_end\n            print(table_text.parse_string(text).body)\n\n        Prints::\n\n            More info at the pyparsing wiki page\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\common.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "enable_all_warnings",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "pa",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "s": {
                        "type": "string"
                    },
                    "l": {
                        "type": "string"
                    },
                    "t": {
                        "type": "string"
                    }
                },
                "required": [
                    "s",
                    "l",
                    "t"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "set_default_whitespace_chars",
            "description": "r\"\"\"\n        Overrides the default whitespace chars\n\n        Example::\n\n            # default whitespace chars are space, <TAB> and newline\n            Word(alphas)[1, ...].parse_string(\"abc def\\nghi jkl\")  # -> ['abc', 'def', 'ghi', 'jkl']\n\n            # change to just treat newline as significant\n            ParserElement.set_default_whitespace_chars(\" \\t\")\n            Word(alphas)[1, ...].parse_string(\"abc def\\nghi jkl\")  # -> ['abc', 'def']\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "inline_literals_using",
            "description": "\n        Set class to be used for inclusion of string literals into a parser.\n\n        Example::\n\n            # default literal class used is Literal\n            integer = Word(nums)\n            date_str = integer(\"year\") + '/' + integer(\"month\") + '/' + integer(\"day\")\n\n            date_str.parse_string(\"1999/12/31\")  # -> ['1999', '/', '12', '/', '31']\n\n\n            # change to Suppress\n            ParserElement.inline_literals_using(Suppress)\n            date_str = integer(\"year\") + '/' + integer(\"month\") + '/' + integer(\"day\")\n\n            date_str.parse_string(\"1999/12/31\")  # -> ['1999', '12', '31']\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "using_each",
            "description": "\n        Yields a sequence of class(obj, **class_kwargs) for obj in seq.\n\n        Example::\n\n            LPAR, RPAR, LBRACE, RBRACE, SEMI = Suppress.using_each(\"(){};\")\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "seq": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "seq"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "reset_cache",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "disable_memoization",
            "description": "\n        Disables active Packrat or Left Recursion parsing and their memoization\n\n        This method also works if neither Packrat nor Left Recursion are enabled.\n        This makes it safe to call before activating Packrat nor Left Recursion\n        to clear any previous settings.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "enable_left_recursion",
            "description": "\n        Enables \"bounded recursion\" parsing, which allows for both direct and indirect\n        left-recursion. During parsing, left-recursive :class:`Forward` elements are\n        repeatedly matched with a fixed recursion depth that is gradually increased\n        until finding the longest match.\n\n        Example::\n\n            from pip._vendor import pyparsing as pp\n            pp.ParserElement.enable_left_recursion()\n\n            E = pp.Forward(\"E\")\n            num = pp.Word(pp.nums)\n            # match `num`, or `num '+' num`, or `num '+' num '+' num`, ...\n            E <<= E + '+' - num | num\n\n            print(E.parse_string(\"1+2+3\"))\n\n        Recursion search naturally memoizes matches of ``Forward`` elements and may\n        thus skip reevaluation of parse actions during backtracking. This may break\n        programs with parse actions which rely on strict ordering of side-effects.\n\n        Parameters:\n\n        - ``cache_size_limit`` - (default=``None``) - memoize at most this many\n          ``Forward`` elements during matching; if ``None`` (the default),\n          memoize all ``Forward`` elements.\n\n        Bounded Recursion parsing works similar but not identical to Packrat parsing,\n        thus the two cannot be used together. Use ``force=True`` to disable any\n        previous, conflicting settings.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "enable_packrat",
            "description": "\n        Enables \"packrat\" parsing, which adds memoizing to the parsing logic.\n        Repeated parse attempts at the same string location (which happens\n        often in many complex grammars) can immediately return a cached value,\n        instead of re-executing parsing/validating code.  Memoizing is done of\n        both valid results and parsing exceptions.\n\n        Parameters:\n\n        - ``cache_size_limit`` - (default= ``128``) - if an integer value is provided\n          will limit the size of the packrat cache; if None is passed, then\n          the cache size will be unbounded; if 0 is passed, the cache will\n          be effectively disabled.\n\n        This speedup may break existing programs that use parse actions that\n        have side-effects.  For this reason, packrat parsing is disabled when\n        you first import pyparsing.  To activate the packrat feature, your\n        program must call the class method :class:`ParserElement.enable_packrat`.\n        For best results, call ``enable_packrat()`` immediately after\n        importing pyparsing.\n\n        Example::\n\n            from pip._vendor import pyparsing\n            pyparsing.ParserElement.enable_packrat()\n\n        Packrat parsing works similar but not identical to Bounded Recursion parsing,\n        thus the two cannot be used together. Use ``force=True`` to disable any\n        previous, conflicting settings.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "default_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_generateDefaultName",
            "description": "\n        Child classes must define this method, which defines how the ``default_name`` is set.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "inlineLiteralsUsing",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "staticmethod",
                "replaced_by_pep8"
            ]
        },
        {
            "name": "setDefaultWhitespaceChars",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "staticmethod",
                "replaced_by_pep8"
            ]
        },
        {
            "name": "setResultsName",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "setBreak",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "setParseAction",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "addParseAction",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "addCondition",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "setFailAction",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "tryParse",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "enableLeftRecursion",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "staticmethod",
                "replaced_by_pep8"
            ]
        },
        {
            "name": "enablePackrat",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "staticmethod",
                "replaced_by_pep8"
            ]
        },
        {
            "name": "parseString",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "scanString",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "transformString",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "searchString",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "ignoreWhitespace",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "leaveWhitespace",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "setWhitespaceChars",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "parseWithTabs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "setDebugActions",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "setDebug",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "setName",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "parseFile",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "runTests",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "set_default_keyword_chars",
            "description": "\n        Overrides the default characters used by :class:`Keyword` expressions.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "chars": {
                        "type": "string"
                    }
                },
                "required": [
                    "chars"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "re",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "re_match",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "mayReturnEmpty",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "leaveWhitespace",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "ignoreWhitespace",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "leaveWhitespace",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "ignoreWhitespace",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\core.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "explain_exception",
            "description": "\n        Method to take an exception and translate the Python internal traceback into a list\n        of the pyparsing expressions that caused the exception to be raised.\n\n        Parameters:\n\n        - exc - exception raised during parsing (need not be a ParseException, in support\n          of Python exceptions that might be raised in a parse action)\n        - depth (default=16) - number of levels back in the stack trace to list expression\n          and function names; if None, the full stack trace names will be listed; if 0, only\n          the failing input line, marker, and exception string will be shown\n\n        Returns a multi-line string listing the ParserElements and/or function names in the\n        exception's stack trace.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "exc": {
                        "type": "string"
                    }
                },
                "required": [
                    "exc"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\exceptions.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_from_exception",
            "description": "\n        internal factory method to simplify creating one type of ParseException\n        from another - avoids having __init__ signature conflicts among subclasses\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "pe": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "pe"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\exceptions.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "line",
            "description": "\n        Return the line of text where the exception occurred.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "lineno",
            "description": "\n        Return the 1-based line number of text where the exception occurred.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "col",
            "description": "\n        Return the 1-based column on the line of text where the exception occurred.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "column",
            "description": "\n        Return the 1-based column on the line of text where the exception occurred.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parserElement",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parserElement",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "elem": {
                        "type": "string"
                    }
                },
                "required": [
                    "elem"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\exceptions.py",
            "decorator": [
                "parserElement.setter"
            ]
        },
        {
            "name": "markInputline",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\exceptions.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "delimitedList",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\helpers.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "delimited_list",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\helpers.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "countedArray",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\helpers.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "matchPreviousLiteral",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\helpers.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "matchPreviousExpr",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\helpers.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "oneOf",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\helpers.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "dictOf",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\helpers.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "originalTextFor",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\helpers.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "nestedExpr",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\helpers.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "makeHTMLTags",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\helpers.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "makeXMLTags",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\helpers.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "replaceHTMLEntity",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\helpers.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "infixNotation",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\helpers.py",
            "decorator": [
                "replaced_by_pep8"
            ]
        },
        {
            "name": "from_dict",
            "description": "\n        Helper classmethod to construct a ``ParseResults`` from a ``dict``, preserving the\n        name-value relations as results names. If an optional ``name`` argument is\n        given, a nested ``ParseResults`` will be returned.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "other": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "other"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\results.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "assertRaisesParseException",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\testing.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "with_line_numbers",
            "description": "\n        Helpful method for debugging a parser - prints a string with line and column numbers.\n        (Line and column numbers are 1-based.)\n\n        :param s: tuple(bool, str - string to be printed with line and column numbers\n        :param start_line: int - (optional) starting line number in s to print (default=1)\n        :param end_line: int - (optional) ending line number in s to print (default=len(s))\n        :param expand_tabs: bool - (optional) expand tabs to spaces, to match the pyparsing default\n        :param eol_mark: str - (optional) string to mark the end of lines, helps visualize trailing spaces (default=\"|\")\n        :param mark_spaces: str - (optional) special character to display in place of spaces\n        :param mark_control: str - (optional) convert non-printing control characters to a placeholding\n                                 character; valid values:\n                                 - \"unicode\" - replaces control chars with Unicode symbols, such as \"\u240d\" and \"\u240a\"\n                                 - any single character string - replace control characters with given string\n                                 - None (default) - string is displayed as-is\n\n        :return: str - input string with leading line numbers and column number headers\n        \"\"\"\n   ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\testing.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_chars_for_ranges",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\unicode.py",
            "decorator": [
                "_lazyclassproperty"
            ]
        },
        {
            "name": "printables",
            "description": "all non-whitespace characters in this range",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\unicode.py",
            "decorator": [
                "_lazyclassproperty"
            ]
        },
        {
            "name": "alphas",
            "description": "all alphabetic characters in this range",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\unicode.py",
            "decorator": [
                "_lazyclassproperty"
            ]
        },
        {
            "name": "nums",
            "description": "all numeric digit characters in this range",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\unicode.py",
            "decorator": [
                "_lazyclassproperty"
            ]
        },
        {
            "name": "alphanums",
            "description": "all alphanumeric characters in this range",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\unicode.py",
            "decorator": [
                "_lazyclassproperty"
            ]
        },
        {
            "name": "identchars",
            "description": "all characters in this range that are valid identifier characters, plus underscore '_",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\unicode.py",
            "decorator": [
                "_lazyclassproperty"
            ]
        },
        {
            "name": "_set",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "dname": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "dname",
                    "value"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\util.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "col",
            "description": "\n    Returns current column within a string, counting newlines as line separators.\n    The first column is number 1.\n\n    Note: the default parsing behavior is to expand tabs in the input string\n    before starting the parsing process.  See\n    :class:`ParserElement.parse_string` for more\n    information on parsing strings containing ``<TAB>`` s, and suggested\n    methods to maintain a consistent view of the parsed string, the parse\n    location, and line and column positions within the parsed string.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\util.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "lineno",
            "description": "Returns current line number within a string, counting newlines as line separators.\n    The first line is number 1.\n\n    Note - the default parsing behavior is to expand tabs in the input string\n    before starting the parsing process.  See :class:`ParserElement.parse_string`\n    for more information on parsing strings containing ``<TAB>`` s, and\n    suggested methods to maintain a consistent view of the parsed string, the\n    parse location, and line and column positions within the parsed string.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\util.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "line",
            "description": "\n    Returns the line of text containing loc within a string, counting newlines as line separators.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\util.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "_inner",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\util.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "_inner",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\util.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "__version__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_call",
            "description": "\n        If you call this function in the same way that you would call the constructor, it will store the arguments\n        as you expect. For example EditablePartial.from_call(Fraction, 1, 3)() == Fraction(1, 3)\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\diagram\\__init__.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\diagram\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_to_diagram_element",
            "description": "\n    Recursively converts a PyParsing Element to a railroad Element\n    :param lookup: The shared converter state that keeps track of useful things\n    :param index: The index of this element within the parent\n    :param parent: The parent of this element in the output tree\n    :param vertical: Controls at what point we make a list of elements vertical. If this is an integer (the default),\n    it sets the threshold of the number of items before we go vertical. If True, always go vertical, if False, never\n    do so\n    :param name_hint: If provided, this will override the generated name\n    :param show_results_names: bool flag indicating whether to add annotations for results names\n    :returns: The converted version of the input element, but as a Partial that hasn't yet been constructed\n    :param show_groups: bool flag indicating whether to show groups using bounding box\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyparsing\\diagram\\__init__.py",
            "decorator": [
                "_apply_diagram_item_enhancements"
            ]
        },
        {
            "name": "subprocess_runner",
            "description": "A context manager for temporarily overriding the default\n        :ref:`subprocess runner <Subprocess Runners>`.\n\n        .. code-block:: python\n\n            hook_caller = BuildBackendHookCaller(...)\n            with hook_caller.subprocess_runner(quiet_subprocess_runner):\n                ...\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "runner": {
                        "type": "string"
                    }
                },
                "required": [
                    "runner"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\pyproject_hooks\\_impl.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "unverifiable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\cookies.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "origin_req_host",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\cookies.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "host",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\cookies.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "path_url",
            "description": "Build the path URL to use.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_encode_params",
            "description": "Encode parameters in a piece of data.\n\n        Will successfully encode parameters when passed as a dict or a list of\n        2-tuples. Order is retained if data is a list of 2-tuples but arbitrary\n        if parameters are supplied as a dict.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string"
                    }
                },
                "required": [
                    "data"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_encode_files",
            "description": "Build the body for a multipart/form-data request.\n\n        Will successfully encode files when passed as a dict or a list of\n        tuples. Order is retained if data is a list of tuples but arbitrary\n        if parameters are supplied as a dict.\n        The tuples may be 2-tuples (filename, fileobj), 3-tuples (filename, fileobj, contentype)\n        or 4-tuples (filename, fileobj, contentype, custom_headers).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "files": {
                        "type": "string"
                    },
                    "data": {
                        "type": "string"
                    }
                },
                "required": [
                    "files",
                    "data"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_get_idna_encoded_host",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "host": {
                        "type": "string"
                    }
                },
                "required": [
                    "host"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "ok",
            "description": "Returns True if :attr:`status_code` is less than 400, False if not.\n\n        This attribute checks if the status code of the response is between\n        400 and 600 to see if there was a client error or a server error. If\n        the status code is between 200 and 400, this will return True. This\n        is **not** a check to see if the response code is ``200 OK``.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_redirect",
            "description": "True if this Response is a well-formed HTTP redirect that could have\n        been processed automatically (by :meth:`Session.resolve_redirects`).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_permanent_redirect",
            "description": "True if this Response one of the permanent versions of redirect.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "next",
            "description": "Returns a PreparedRequest for the next request in a redirect chain, if there is one.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "apparent_encoding",
            "description": "The apparent encoding, provided by the charset_normalizer or chardet libraries.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "content",
            "description": "Content of the response, in bytes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "text",
            "description": "Content of the response, in unicode.\n\n        If Response.encoding is None, encoding will be guessed using\n        ``charset_normalizer`` or ``chardet``.\n\n        The encoding of the response content is determined based solely on HTTP\n        headers, following RFC 2616 to the letter. If you can take advantage of\n        non-HTTP knowledge to make a better guess at the encoding, you should\n        set ``r.encoding`` appropriately before accessing this property.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "links",
            "description": "Returns the parsed header links of the response, if any.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\models.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "atomic_open",
            "description": "Write a file to the disk in an atomic fashion",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filename": {
                        "type": "string"
                    }
                },
                "required": [
                    "filename"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\utils.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "set_environ",
            "description": "Set the environment variable 'env_name' to 'value'\n\n    Save previous value, yield, and then restore the previous value stored in\n    the environment variable 'env_name'.\n\n    If 'value' is None, do nothing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "env_name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "env_name",
                    "value"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\requests\\utils.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "state",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\resolvelib\\resolvers.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__subclasshook__",
            "description": "Check if this class supports the rich render protocol.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\abc.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "left",
            "description": "Align a renderable to the left.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\align.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "center",
            "description": "Align a renderable to the center.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\align.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "right",
            "description": "Align a renderable to the right.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\align.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "cached_cell_len",
            "description": "Get the number of cells required to display text.\n\n    This method always caches, which may use up a lot of memory. It is recommended to use\n    `cell_len` over this method.\n\n    Args:\n        text (str): Text to display.\n\n    Returns:\n        int: Get the number of cells required to display text.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "Text to display."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "int": {
                        "type": "string",
                        "description": "Get the number of cells required to display text."
                    }
                },
                "required": [
                    "text",
                    "Returns",
                    "int"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\cells.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "get_character_cell_size",
            "description": "Get the cell size of a character.\n\n    Args:\n        character (str): A single character.\n\n    Returns:\n        int: Number of cells (0, 1 or 2) occupied by that character.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "character": {
                        "type": "string",
                        "description": "A single character."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "int": {
                        "type": "string",
                        "description": "Number of cells (0, 1 or 2) occupied by that character."
                    }
                },
                "required": [
                    "character",
                    "Returns",
                    "int"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\cells.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "_get_codepoint_cell_size",
            "description": "Get the cell size of a character.\n\n    Args:\n        codepoint (int): Codepoint of a character.\n\n    Returns:\n        int: Number of cells (0, 1 or 2) occupied by that character.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "codepoint": {
                        "type": "integer",
                        "description": "Codepoint of a character."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "int": {
                        "type": "string",
                        "description": "Number of cells (0, 1 or 2) occupied by that character."
                    }
                },
                "required": [
                    "codepoint",
                    "Returns",
                    "int"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\cells.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "hex",
            "description": "get the color triplet in CSS style.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\color_triplet.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "rgb",
            "description": "The color in RGB format.\n\n        Returns:\n            str: An rgb color, e.g. ``\"rgb(100,23,255)\"``.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\color_triplet.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "normalized",
            "description": "Convert components into floats between 0 and 1.\n\n        Returns:\n            Tuple[float, float, float]: A tuple of three normalized colour components.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\color_triplet.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "ascii_only",
            "description": "Check if renderables should use ascii only.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "renderables",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_replace",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "process_renderables",
            "description": "Called with a list of objects to render.\n\n        This method can return a new list of renderables, or modify and return the same list.\n\n        Args:\n            renderables (List[ConsoleRenderable]): A number of renderable objects.\n\n        Returns:\n            List[ConsoleRenderable]: A replacement list of renderables.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "renderables": {
                        "type": "string",
                        "description": "A number of renderable objects."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "renderables",
                    "Returns"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "file",
            "description": "Get the file object to write to.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "file",
            "description": "Set a new file object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "file.setter"
            ]
        },
        {
            "name": "_buffer",
            "description": "Get a thread local buffer.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_buffer_index",
            "description": "Get a thread local buffer.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_buffer_index",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "_buffer_index.setter"
            ]
        },
        {
            "name": "_theme_stack",
            "description": "Get the thread local theme stack.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "color_system",
            "description": "Get color system string.\n\n        Returns:\n            Optional[str]: \"standard\", \"256\" or \"truecolor\".\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "encoding",
            "description": "Get the encoding of the console file, e.g. ``\"utf-8\"``.\n\n        Returns:\n            str: A standard encoding string.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_terminal",
            "description": "Check if the console is writing to a terminal.\n\n        Returns:\n            bool: True if the console writing to a device capable of\n            understanding terminal codes, otherwise False.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_dumb_terminal",
            "description": "Detect dumb terminal.\n\n        Returns:\n            bool: True if writing to a dumb terminal, otherwise False.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "options",
            "description": "Get default console options.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "size",
            "description": "Get the size of the console.\n\n        Returns:\n            ConsoleDimensions: A named tuple containing the dimensions.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "size",
            "description": "Set a new size for the terminal.\n\n        Args:\n            new_size (Tuple[int, int]): New width and height.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "new_size": {
                        "type": "string",
                        "description": "New width and height."
                    }
                },
                "required": [
                    "new_size"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "size.setter"
            ]
        },
        {
            "name": "width",
            "description": "Get the width of the console.\n\n        Returns:\n            int: The width (in characters) of the console.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "width",
            "description": "Set width.\n\n        Args:\n            width (int): New width.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "width": {
                        "type": "integer",
                        "description": "New width."
                    }
                },
                "required": [
                    "width"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "width.setter"
            ]
        },
        {
            "name": "height",
            "description": "Get the height of the console.\n\n        Returns:\n            int: The height (in lines) of the console.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "height",
            "description": "Set height.\n\n        Args:\n            height (int): new height.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "height": {
                        "type": "integer",
                        "description": "new height."
                    }
                },
                "required": [
                    "height"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "height.setter"
            ]
        },
        {
            "name": "is_alt_screen",
            "description": "Check if the alt screen was enabled.\n\n        Returns:\n            bool: True if the alt screen was enabled, otherwise False.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\containers.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\containers.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "bell",
            "description": "Ring the 'bell'.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "home",
            "description": "Move cursor to 'home' position.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "move",
            "description": "Move cursor relative to current position.\n\n        Args:\n            x (int): X offset.\n            y (int): Y offset.\n\n        Returns:\n            ~Control: Control object.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "move_to_column",
            "description": "Move to the given column, optionally add offset to row.\n\n        Returns:\n            x (int): absolute x (column)\n            y (int): optional y offset (row)\n\n        Returns:\n            ~Control: Control object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "move_to",
            "description": "Move cursor to absolute position.\n\n        Args:\n            x (int): x offset (column)\n            y (int): y offset (row)\n\n        Returns:\n            ~Control: Control object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "clear",
            "description": "Clear the screen.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "show_cursor",
            "description": "Show or hide the cursor.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "alt_screen",
            "description": "Enable or disable alt screen.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "title",
            "description": "Set the terminal window title\n\n        Args:\n            title (str): The new terminal window title\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\control.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "replace",
            "description": "Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\emoji.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "rich_proxied_file",
            "description": "Get proxied file.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\file_proxy.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "highlight",
            "description": "Apply highlighting in place to text.\n\n        Args:\n            text (~Text): A text object highlight.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "A text object highlight."
                    }
                },
                "required": [
                    "text"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\highlighter.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "from_data",
            "description": "Encodes a JSON object from arbitrary data.\n\n        Args:\n            data (Any): An object that may be encoded in to JSON\n            indent (Union[None, int, str], optional): Number of characters to indent by. Defaults to 2.\n            highlight (bool, optional): Enable highlighting. Defaults to True.\n            default (Callable, optional): Optional callable which will be called for objects that cannot be serialized. Defaults to None.\n            skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.\n            ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.\n            check_circular (bool, optional): Check for circular references. Defaults to True.\n            allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.\n            default (Callable, optional): A callable that converts values that can not be encoded\n                in to something that can be JSON encoded. Defaults to None.\n            sort_keys (bool, optional): Sort dictionary keys. Defaults to False.\n\n        Returns:\n            JSON: New JSON object from the given data.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\json.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_tree_icon",
            "description": "Get the icon (emoji) used in layout.tree",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\layout.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "divide",
            "description": "Divide a region amongst several child layouts.\n\n        Args:\n            children (Sequence(Layout)): A number of child layouts.\n            region (Region): A rectangular region to divide.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "A rectangular region to divide."
                    }
                },
                "required": [
                    "region"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\layout.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "is_started",
            "description": "Check if live display has been started.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\live.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "renderable",
            "description": "Get the renderable that is being displayed\n\n        Returns:\n            RenderableType: Displayed renderable.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\live.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "markup",
            "description": "Get the string representation of this tag.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\markup.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "span",
            "description": "Get difference between maximum and minimum.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\measure.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get",
            "description": "Get a measurement for a renderable.\n\n        Args:\n            console (~rich.console.Console): Console instance.\n            options (~rich.console.ConsoleOptions): Console options.\n            renderable (RenderableType): An object that may be rendered with Rich.\n\n        Raises:\n            errors.NotRenderableError: If the object is not renderable.\n\n        Returns:\n            Measurement: Measurement object containing range of character widths required to render the object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\measure.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "indent",
            "description": "Make padding instance to render an indent.\n\n        Args:\n            renderable (RenderableType): String or other renderable.\n            level (int): Number of characters to indent.\n\n        Returns:\n            Padding: A Padding instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\padding.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "unpack",
            "description": "Unpack padding specified in CSS style.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\padding.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "show",
            "description": "Show content in pager.\n\n        Args:\n            content (str): Content to be displayed.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Content to be displayed."
                    }
                },
                "required": [
                    "content"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\pager.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "match",
            "description": "Find a color from a palette that most closely matches a given color.\n\n        Args:\n            color (Tuple[int, int, int]): RGB components in range 0 > 255.\n\n        Returns:\n            int: Index of closes matching color.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "RGB components in range 0 > 255."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "int": {
                        "type": "string",
                        "description": "Index of closes matching color."
                    }
                },
                "required": [
                    "color",
                    "Returns",
                    "int"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\palette.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "fit",
            "description": "An alternative constructor that sets expand=False.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\panel.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_title",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\panel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_subtitle",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\panel.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "expandable",
            "description": "Check if the line may be expanded.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\pretty.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "closed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\progress.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\progress.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\progress.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "open",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\progress.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "open",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\progress.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "render",
            "description": "Should return a renderable object.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\progress.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "render_speed",
            "description": "Render the speed in iterations per second.\n\n        Args:\n            task (Task): A Task object.\n\n        Returns:\n            Text: Text object containing the task speed.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\progress.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "percentage_completed",
            "description": "Calculate percentage complete.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\progress_bar.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_get_pulse_segments",
            "description": "Get a list of segments to render a pulse animation.\n\n        Returns:\n            List[Segment]: A list of segments, one segment per character.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\progress_bar.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "ask",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\prompt.py",
            "decorator": [
                "classmethod",
                "overload"
            ]
        },
        {
            "name": "ask",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\prompt.py",
            "decorator": [
                "classmethod",
                "overload"
            ]
        },
        {
            "name": "ask",
            "description": "Shortcut to construct and run a prompt loop and return the result.\n\n        Example:\n            >>> filename = Prompt.ask(\"Enter a filename\")\n\n        Args:\n            prompt (TextType, optional): Prompt text. Defaults to \"\".\n            console (Console, optional): A Console instance or None to use global console. Defaults to None.\n            password (bool, optional): Enable password input. Defaults to False.\n            choices (List[str], optional): A list of valid choices. Defaults to None.\n            show_default (bool, optional): Show default in prompt. Defaults to True.\n            show_choices (bool, optional): Show choices in prompt. Defaults to True.\n            stream (TextIO, optional): Optional text file open for reading to get input. Defaults to None.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\prompt.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_input",
            "description": "Get input from user.\n\n        Args:\n            console (Console): Console instance.\n            prompt (TextType): Prompt text.\n            password (bool): Enable password entry.\n\n        Returns:\n            str: String from user.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\prompt.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\prompt.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\prompt.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "auto",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\repr.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "auto",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\repr.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "rich_repr",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\repr.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "rich_repr",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\repr.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "cell_length",
            "description": "The number of terminal cells required to display self.text.\n\n        Returns:\n            int: A number of cells.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_control",
            "description": "Check if the segment contains control codes.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_split_cells",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod",
                "lru_cache"
            ]
        },
        {
            "name": "line",
            "description": "Make a new line segment.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "apply_style",
            "description": "Apply style(s) to an iterable of segments.\n\n        Returns an iterable of segments where the style is replaced by ``style + segment.style + post_style``.\n\n        Args:\n            segments (Iterable[Segment]): Segments to process.\n            style (Style, optional): Base style. Defaults to None.\n            post_style (Style, optional): Style to apply on top of segment style. Defaults to None.\n\n        Returns:\n            Iterable[Segments]: A new iterable of segments (possibly the same iterable).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "filter_control",
            "description": "Filter segments by ``is_control`` attribute.\n\n        Args:\n            segments (Iterable[Segment]): An iterable of Segment instances.\n            is_control (bool, optional): is_control flag to match in search.\n\n        Returns:\n            Iterable[Segment]: And iterable of Segment instances.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "split_lines",
            "description": "Split a sequence of segments in to a list of lines.\n\n        Args:\n            segments (Iterable[Segment]): Segments potentially containing line feeds.\n\n        Yields:\n            Iterable[List[Segment]]: Iterable of segment lists, one per line.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "split_and_crop_lines",
            "description": "Split segments in to lines, and crop lines greater than a given length.\n\n        Args:\n            segments (Iterable[Segment]): An iterable of segments, probably\n                generated from console.render.\n            length (int): Desired line length.\n            style (Style, optional): Style to use for any padding.\n            pad (bool): Enable padding of lines that are less than `length`.\n\n        Returns:\n            Iterable[List[Segment]]: An iterable of lines of segments.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "adjust_line_length",
            "description": "Adjust a line to a given width (cropping or padding as required).\n\n        Args:\n            segments (Iterable[Segment]): A list of segments in a single line.\n            length (int): The desired width of the line.\n            style (Style, optional): The style of padding if used (space on the end). Defaults to None.\n            pad (bool, optional): Pad lines with spaces if they are shorter than `length`. Defaults to True.\n\n        Returns:\n            List[Segment]: A line of segments with the desired length.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_line_length",
            "description": "Get the length of list of segments.\n\n        Args:\n            line (List[Segment]): A line encoded as a list of Segments (assumes no '\\\\\\\\n' characters),\n\n        Returns:\n            int: The length of the line.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_shape",
            "description": "Get the shape (enclosing rectangle) of a list of lines.\n\n        Args:\n            lines (List[List[Segment]]): A list of lines (no '\\\\\\\\n' characters).\n\n        Returns:\n            Tuple[int, int]: Width and height in characters.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "set_shape",
            "description": "Set the shape of a list of lines (enclosing rectangle).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style, optional): Style of any padding added.\n            new_lines (bool, optional): Padded lines should include \"\\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "align_top",
            "description": "Aligns lines to top (adds extra lines to bottom as required).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style): Style of any padding added.\n            new_lines (bool, optional): Padded lines should include \"\\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "lines": {
                        "type": "string",
                        "description": "A list of lines."
                    },
                    "width": {
                        "type": "integer",
                        "description": "Desired width."
                    },
                    "height": {
                        "type": "integer",
                        "description": "Desired height or None for no change."
                    },
                    "style": {
                        "type": "string",
                        "description": "Style of any padding added."
                    },
                    "new_lines": {
                        "type": "boolean",
                        "description": "Padded lines should include \"\\n\". Defaults to False."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "lines",
                    "width",
                    "style",
                    "Returns"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "align_bottom",
            "description": "Aligns render to bottom (adds extra lines above as required).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style): Style of any padding added. Defaults to None.\n            new_lines (bool, optional): Padded lines should include \"\\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "lines": {
                        "type": "string",
                        "description": "A list of lines."
                    },
                    "width": {
                        "type": "integer",
                        "description": "Desired width."
                    },
                    "height": {
                        "type": "integer",
                        "description": "Desired height or None for no change."
                    },
                    "style": {
                        "type": "string",
                        "description": "Style of any padding added. Defaults to None."
                    },
                    "new_lines": {
                        "type": "boolean",
                        "description": "Padded lines should include \"\\n\". Defaults to False."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "lines",
                    "width",
                    "style",
                    "Returns"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "align_middle",
            "description": "Aligns lines to middle (adds extra lines to above and below as required).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style): Style of any padding added.\n            new_lines (bool, optional): Padded lines should include \"\\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "lines": {
                        "type": "string",
                        "description": "A list of lines."
                    },
                    "width": {
                        "type": "integer",
                        "description": "Desired width."
                    },
                    "height": {
                        "type": "integer",
                        "description": "Desired height or None for no change."
                    },
                    "style": {
                        "type": "string",
                        "description": "Style of any padding added."
                    },
                    "new_lines": {
                        "type": "boolean",
                        "description": "Padded lines should include \"\\n\". Defaults to False."
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "lines",
                    "width",
                    "style",
                    "Returns"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "simplify",
            "description": "Simplify an iterable of segments by combining contiguous segments with the same style.\n\n        Args:\n            segments (Iterable[Segment]): An iterable of segments.\n\n        Returns:\n            Iterable[Segment]: A possibly smaller iterable of segments that will render the same way.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "strip_links",
            "description": "Remove all links from an iterable of styles.\n\n        Args:\n            segments (Iterable[Segment]): An iterable segments.\n\n        Yields:\n            Segment: Segments with link removed.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "strip_styles",
            "description": "Remove all styles from an iterable of segments.\n\n        Args:\n            segments (Iterable[Segment]): An iterable segments.\n\n        Yields:\n            Segment: Segments with styles replace with None\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "remove_color",
            "description": "Remove all color from an iterable of segments.\n\n        Args:\n            segments (Iterable[Segment]): An iterable segments.\n\n        Yields:\n            Segment: Segments with colorless style.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "divide",
            "description": "Divides an iterable of segments in to portions.\n\n        Args:\n            cuts (Iterable[int]): Cell positions where to divide.\n\n        Yields:\n            [Iterable[List[Segment]]]: An iterable of Segments in List.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "renderable",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\status.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "console",
            "description": "Get the Console used by the Status objects.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\status.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "null",
            "description": "Create an 'null' style, equivalent to Style(), but more performant.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_color",
            "description": "Create a new style with colors and no attributes.\n\n        Returns:\n            color (Optional[Color]): A (foreground) color, or None for no color. Defaults to None.\n            bgcolor (Optional[Color]): A (background) color, or None for no color. Defaults to None.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_meta",
            "description": "Create a new style with meta data.\n\n        Returns:\n            meta (Optional[Dict[str, Any]]): A dictionary of meta data. Defaults to None.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "on",
            "description": "Create a blank style with meta information.\n\n        Example:\n            style = Style.on(click=self.on_click)\n\n        Args:\n            meta (Optional[Dict[str, Any]], optional): An optional dict of meta information.\n            **handlers (Any): Keyword arguments are translated in to handlers.\n\n        Returns:\n            Style: A Style with meta information attached.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "link_id",
            "description": "Get a link id, used in ansi code for links.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "normalize",
            "description": "Normalize a style definition so that styles with the same effect have the same string\n        representation.\n\n        Args:\n            style (str): A style definition.\n\n        Returns:\n            str: Normal form of style definition.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod",
                "lru_cache"
            ]
        },
        {
            "name": "pick_first",
            "description": "Pick first non-None style.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "color",
            "description": "The foreground color or None if it is not set.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "bgcolor",
            "description": "The background color or None if it is not set.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "link",
            "description": "Link text, if set.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "transparent_background",
            "description": "Check if the style specified a transparent background.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "background_style",
            "description": "A Style with background only.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "meta",
            "description": "Get meta information (can not be changed after construction).",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "without_color",
            "description": "Get a copy of the style with color removed.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parse",
            "description": "Parse a style definition.\n\n        Args:\n            style_definition (str): A string containing a style.\n\n        Raises:\n            errors.StyleSyntaxError: If the style definition syntax is invalid.\n\n        Returns:\n            `Style`: A Style instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod",
                "lru_cache"
            ]
        },
        {
            "name": "get_html_style",
            "description": "Get a CSS style rule.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "combine",
            "description": "Combine styles and get result.\n\n        Args:\n            styles (Iterable[Style]): Styles to combine.\n\n        Returns:\n            Style: A new style instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "chain",
            "description": "Combine styles from positional argument in to a single style.\n\n        Args:\n            *styles (Iterable[Style]): Styles to combine.\n\n        Returns:\n            Style: A new style instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "clear_meta_and_links",
            "description": "Get a copy of this style with link and meta information removed.\n\n        Returns:\n            Style: New style object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "_add",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "current",
            "description": "Get the Style at the top of the stack.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_style_for_token",
            "description": "Get a style for a given Pygments token.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\syntax.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_background_style",
            "description": "Get the background color.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\syntax.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_theme",
            "description": "Get a syntax theme instance.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\syntax.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_path",
            "description": "Construct a Syntax object from a file.\n\n        Args:\n            path (str): Path to file to highlight.\n            encoding (str): Encoding of file.\n            lexer (str | Lexer, optional): Lexer to use. If None, lexer will be auto-detected from path/file content.\n            theme (str, optional): Color theme, aka Pygments style (see https://pygments.org/docs/styles/#getting-a-list-of-available-styles). Defaults to \"emacs\".\n            dedent (bool, optional): Enable stripping of initial whitespace. Defaults to True.\n            line_numbers (bool, optional): Enable rendering of line numbers. Defaults to False.\n            start_line (int, optional): Starting number for line numbers. Defaults to 1.\n            line_range (Tuple[int, int], optional): If given should be a tuple of the start and end line to render.\n            highlight_lines (Set[int]): A set of line numbers to highlight.\n            code_width: Width of code to render (not including line numbers), or ``None`` to use all available width.\n            tab_size (int, optional): Size of tabs. Defaults to 4.\n            word_wrap (bool, optional): Enable word wrapping of code.\n            background_color (str, optional): Optional background color, or None to use theme color. Defaults to None.\n            indent_guides (bool, optional): Show indent guides. Defaults to False.\n            padding (PaddingDimensions): Padding to apply around the syntax. Defaults to 0 (no padding).\n\n        Returns:\n            [Syntax]: A Syntax object that may be printed to the console\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\syntax.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "guess_lexer",
            "description": "Guess the alias of the Pygments lexer to use based on a path and an optional string of code.\n        If code is supplied, it will use a combination of the code and the filename to determine the\n        best lexer to use. For example, if the file is ``index.html`` and the file contains Django\n        templating syntax, then \"html+django\" will be returned. If the file is ``index.html``, and no\n        templating language is used, the \"html\" lexer will be used. If no string of code\n        is supplied, the lexer will be chosen based on the file extension..\n\n        Args:\n             path (AnyStr): The path to the file containing the code you wish to know the lexer for.\n             code (str, optional): Optional string of code that will be used as a fallback if no lexer\n                is found for the supplied path.\n\n        Returns:\n            str: The name of the Pygments lexer that best matches the supplied path/code.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\syntax.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "lexer",
            "description": "The lexer for this syntax, or None if no lexer was found.\n\n        Tries to find the lexer by name if a string was passed to the constructor.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\syntax.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_numbers_column_width",
            "description": "Get the number of characters used to render the numbers column.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\syntax.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "cells",
            "description": "Get all cells in the column, not including header.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "flexible",
            "description": "Check if this column is flexible.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "grid",
            "description": "Get a table with no lines, headers, or footer.\n\n        Args:\n            *headers (Union[Column, str]): Column headers, either as a string, or :class:`~rich.table.Column` instance.\n            padding (PaddingDimensions, optional): Get padding around cells. Defaults to 0.\n            collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to True.\n            pad_edge (bool, optional): Enable padding around edges of table. Defaults to False.\n            expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.\n\n        Returns:\n            Table: A table instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "expand",
            "description": "Setting a non-None self.width implies expand.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "expand",
            "description": "Set expand.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "expand.setter"
            ]
        },
        {
            "name": "_extra_width",
            "description": "Get extra width to add to cell content.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "row_count",
            "description": "Get the current number of rows.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "padding",
            "description": "Get cell padding.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "padding",
            "description": "Set cell padding.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "padding.setter"
            ]
        },
        {
            "name": "_collapse_widths",
            "description": "Reduce widths so that the total is under max_width.\n\n        Args:\n            widths (List[int]): List of widths.\n            wrapable (List[bool]): List of booleans that indicate if a column may shrink.\n            max_width (int): Maximum width to reduce to.\n\n        Returns:\n            List[int]: A new list of widths.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\table.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "cell_len",
            "description": "Get the number of cells required to render this text.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "markup",
            "description": "Get console markup to render this Text.\n\n        Returns:\n            str: A string potentially creating markup tags.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_markup",
            "description": "Create Text instance from markup.\n\n        Args:\n            text (str): A string containing console markup.\n            emoji (bool, optional): Also render emoji code. Defaults to True.\n            justify (str, optional): Justify method: \"left\", \"center\", \"full\", \"right\". Defaults to None.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", \"ellipsis\". Defaults to None.\n            end (str, optional): Character to end text with. Defaults to \"\\\\\\\\n\".\n\n        Returns:\n            Text: A Text instance with markup rendered.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_ansi",
            "description": "Create a Text object from a string containing ANSI escape codes.\n\n        Args:\n            text (str): A string containing escape codes.\n            style (Union[str, Style], optional): Base style for text. Defaults to \"\".\n            justify (str, optional): Justify method: \"left\", \"center\", \"full\", \"right\". Defaults to None.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", \"ellipsis\". Defaults to None.\n            no_wrap (bool, optional): Disable text wrapping, or None for default. Defaults to None.\n            end (str, optional): Character to end text with. Defaults to \"\\\\\\\\n\".\n            tab_size (int): Number of spaces per tab, or ``None`` to use ``console.tab_size``. Defaults to 8.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "styled",
            "description": "Construct a Text instance with a pre-applied styled. A style applied in this way won't be used\n        to pad the text when it is justified.\n\n        Args:\n            text (str): A string containing console markup.\n            style (Union[str, Style]): Style to apply to the text. Defaults to \"\".\n            justify (str, optional): Justify method: \"left\", \"center\", \"full\", \"right\". Defaults to None.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", \"ellipsis\". Defaults to None.\n\n        Returns:\n            Text: A text instance with a style applied to the entire string.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "assemble",
            "description": "Construct a text instance by combining a sequence of strings with optional styles.\n        The positional arguments should be either strings, or a tuple of string + style.\n\n        Args:\n            style (Union[str, Style], optional): Base style for text. Defaults to \"\".\n            justify (str, optional): Justify method: \"left\", \"center\", \"full\", \"right\". Defaults to None.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", \"ellipsis\". Defaults to None.\n            end (str, optional): Character to end text with. Defaults to \"\\\\\\\\n\".\n            tab_size (int): Number of spaces per tab, or ``None`` to use ``console.tab_size``. Defaults to 8.\n            meta (Dict[str, Any], optional). Meta data to apply to text, or None for no meta data. Default to None\n\n        Returns:\n            Text: A new text instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "plain",
            "description": "Get the text as a single string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "plain",
            "description": "Set the text to a new value.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "plain.setter"
            ]
        },
        {
            "name": "spans",
            "description": "Get a reference to the internal list of spans.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "spans",
            "description": "Set spans.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\text.py",
            "decorator": [
                "spans.setter"
            ]
        },
        {
            "name": "config",
            "description": "Get contents of a config file for this theme.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\theme.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_file",
            "description": "Load a theme from a text mode file.\n\n        Args:\n            config_file (IO[str]): An open conf file.\n            source (str, optional): The filename of the open file. Defaults to None.\n            inherit (bool, optional): Inherit default styles. Defaults to True.\n\n        Returns:\n            Theme: A New theme instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\theme.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "read",
            "description": "Read a theme from a path.\n\n        Args:\n            path (str): Path to a config file readable by Python configparser module.\n            inherit (bool, optional): Inherit default styles. Defaults to True.\n            encoding (str, optional): Encoding of the config file. Defaults to None.\n\n        Returns:\n            Theme: A new theme instance.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\theme.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_exception",
            "description": "Create a traceback from exception info\n\n        Args:\n            exc_type (Type[BaseException]): Exception type.\n            exc_value (BaseException): Exception value.\n            traceback (TracebackType): Python Traceback object.\n            width (Optional[int], optional): Number of characters used to traceback. Defaults to 100.\n            extra_lines (int, optional): Additional lines of code to render. Defaults to 3.\n            theme (str, optional): Override pygments theme used in traceback.\n            word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.\n            show_locals (bool, optional): Enable display of local variables. Defaults to False.\n            indent_guides (bool, optional): Enable indent guides in code and locals. Defaults to True.\n            locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n                Defaults to 10.\n            locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.\n            locals_hide_dunder (bool, optional): Hide locals prefixed with double underscore. Defaults to True.\n            locals_hide_sunder (bool, optional): Hide locals prefixed with single underscore. Defaults to False.\n            suppress (Iterable[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.\n            max_frames (int): Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100.\n\n        Returns:\n            Traceback: A Traceback instance that may be printed.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\traceback.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "extract",
            "description": "Extract traceback information.\n\n        Args:\n            exc_type (Type[BaseException]): Exception type.\n            exc_value (BaseException): Exception value.\n            traceback (TracebackType): Python Traceback object.\n            show_locals (bool, optional): Enable display of local variables. Defaults to False.\n            locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n                Defaults to 10.\n            locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.\n            locals_hide_dunder (bool, optional): Hide locals prefixed with double underscore. Defaults to True.\n            locals_hide_sunder (bool, optional): Hide locals prefixed with single underscore. Defaults to False.\n\n        Returns:\n            Trace: A Trace instance which you can use to construct a `Traceback`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\traceback.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_render_syntax_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\traceback.py",
            "decorator": [
                "group"
            ]
        },
        {
            "name": "top",
            "description": "Get top of stack.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_stack.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "timer",
            "description": "print the elapsed time. (only used in debugging)",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_timer.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "from_param",
            "description": "Converts a WindowsCoordinates into a wintypes _COORD structure.\n        This classmethod is internally called by ctypes to perform the conversion.\n\n        Args:\n            value (WindowsCoordinates): The input coordinates to convert.\n\n        Returns:\n            wintypes._COORD: The converted coordinates struct.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_win32_console.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "cursor_position",
            "description": "Returns the current position of the cursor (0-based)\n\n        Returns:\n            WindowsCoordinates: The current cursor position.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_win32_console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "screen_size",
            "description": "Returns the current size of the console screen buffer, in character columns and rows\n\n        Returns:\n            WindowsCoordinates: The width and height of the screen as WindowsCoordinates.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_win32_console.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\tenacity\\tornadoweb.py",
            "decorator": [
                "gen.coroutine#type:ignore[misc]"
            ]
        },
        {
            "name": "cached_tz",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\tomli\\_re.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "__class__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property#type:ignore[misc]"
            ]
        },
        {
            "name": "get_ca_certs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "get_ca_certs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "get_ca_certs",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "typing.overload"
            ]
        },
        {
            "name": "check_hostname",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "check_hostname",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "check_hostname.setter"
            ]
        },
        {
            "name": "hostname_checks_common_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "hostname_checks_common_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "hostname_checks_common_name.setter"
            ]
        },
        {
            "name": "keylog_filename",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "keylog_filename",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "keylog_filename.setter"
            ]
        },
        {
            "name": "maximum_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "maximum_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "maximum_version.setter"
            ]
        },
        {
            "name": "minimum_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "minimum_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "minimum_version.setter"
            ]
        },
        {
            "name": "options",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "options",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "options.setter"
            ]
        },
        {
            "name": "post_handshake_auth",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "post_handshake_auth",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "post_handshake_auth.setter"
            ]
        },
        {
            "name": "protocol",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "security_level",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "verify_flags",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "verify_flags",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "verify_flags.setter"
            ]
        },
        {
            "name": "verify_mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "verify_mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py",
            "decorator": [
                "verify_mode.setter"
            ]
        },
        {
            "name": "_configure_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_macos.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "_configure_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_openssl.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "_configure_context",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_windows.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "host",
            "description": "\n        Getter method to remove any trailing dots that indicate the hostname is an FQDN.\n\n        In general, SSL certificates don't include the trailing dot indicating a\n        fully-qualified domain name, and thus, they don't validate properly when\n        checked against a domain name that includes the dot. In addition, some\n        servers may not expect to receive the trailing dot when provided.\n\n        However, the hostname with trailing dot is critical to DNS resolution; doing a\n        lookup with the trailing dot will properly only resolve the appropriate FQDN,\n        whereas a lookup without a trailing dot will search the system's search domain\n        list. Thus, it's important to keep the original host around for use only in\n        those cases where it's appropriate (i.e., when doing DNS lookup to establish the\n        actual TCP connection across which we're going to send HTTP requests).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\connection.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "host",
            "description": "\n        Setter for the `host` property.\n\n        We assume that only urllib3 uses the _dns_host attribute; httplib itself\n        only uses `host`, and it seems reasonable that other libraries follow suit.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\connection.py",
            "decorator": [
                "host.setter"
            ]
        },
        {
            "name": "from_tuples",
            "description": "\n        A :class:`~urllib3.fields.RequestField` factory from old-style tuple parameters.\n\n        Supports constructing :class:`~urllib3.fields.RequestField` from\n        parameter of key/value strings AND key/filetuple. A filetuple is a\n        (filename, data, MIME type) tuple where the MIME type is optional.\n        For example::\n\n            'foo': 'bar',\n            'fakefile': ('foofile.txt', 'contents of foofile'),\n            'realfile': ('barfile.txt', open('realfile').read()),\n            'typedfile': ('bazfile.bin', open('bazfile').read(), 'image/jpeg'),\n            'nonamefile': 'contents of nonamefile field',\n\n        Field names and filenames must be unicode.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "fieldname": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "fieldname",
                    "value"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\fields.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "connection",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_error_catcher",
            "description": "\n        Catch low-level python exceptions, instead re-raising urllib3\n        variants, so that low-level exceptions are not leaked in the\n        high-level api.\n\n        On exit, release the connection back to the pool.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\response.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "from_httplib",
            "description": "\n        Given an :class:`http.client.HTTPResponse` instance ``r``, return a\n        corresponding :class:`urllib3.response.HTTPResponse` object.\n\n        Remaining parameters are passed to the HTTPResponse constructor, along\n        with ``original_response=r``.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ResponseCls": {
                        "type": "string"
                    },
                    "r": {
                        "type": "string"
                    }
                },
                "required": [
                    "ResponseCls",
                    "r"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\response.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "closed",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_httplib",
            "description": "Read headers from a Python 2 httplib message object.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "message"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\_collections.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "options",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\pyopenssl.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "options",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\pyopenssl.py",
            "decorator": [
                "options.setter"
            ]
        },
        {
            "name": "verify_mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\pyopenssl.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "verify_mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\pyopenssl.py",
            "decorator": [
                "verify_mode.setter"
            ]
        },
        {
            "name": "_raise_on_error",
            "description": "\n        A context manager that can be used to wrap calls that do I/O from\n        SecureTransport. If any of the I/O callbacks hit an exception, this\n        context manager will correctly propagate the exception after the fact.\n        This avoids silently swallowing those exceptions.\n\n        It also correctly forces the socket closed.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "check_hostname",
            "description": "\n        SecureTransport cannot have its hostname checking disabled. For more,\n        see the comment on getpeercert() in this file.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "check_hostname",
            "description": "\n        SecureTransport cannot have its hostname checking disabled. For more,\n        see the comment on getpeercert() in this file.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py",
            "decorator": [
                "check_hostname.setter"
            ]
        },
        {
            "name": "options",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "options",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py",
            "decorator": [
                "options.setter"
            ]
        },
        {
            "name": "verify_mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "verify_mode",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py",
            "decorator": [
                "verify_mode.setter"
            ]
        },
        {
            "name": "__prepare__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "this_bases": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "name",
                    "this_bases"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\six.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "alive",
            "description": "Whether finalizer is alive",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\backports\\weakref_finalize.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "atexit",
            "description": "Whether finalizer should be called at exit",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\backports\\weakref_finalize.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "atexit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "value"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\backports\\weakref_finalize.py",
            "decorator": [
                "atexit.setter"
            ]
        },
        {
            "name": "_select_for_exit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\backports\\weakref_finalize.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_exitfunc",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\backports\\weakref_finalize.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "DEFAULT_METHOD_WHITELIST",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "DEFAULT_METHOD_WHITELIST",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "value"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py",
            "decorator": [
                "DEFAULT_METHOD_WHITELIST.setter"
            ]
        },
        {
            "name": "DEFAULT_REDIRECT_HEADERS_BLACKLIST",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "DEFAULT_REDIRECT_HEADERS_BLACKLIST",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "value"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py",
            "decorator": [
                "DEFAULT_REDIRECT_HEADERS_BLACKLIST.setter"
            ]
        },
        {
            "name": "BACKOFF_MAX",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "BACKOFF_MAX",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "value"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py",
            "decorator": [
                "BACKOFF_MAX.setter"
            ]
        },
        {
            "name": "from_int",
            "description": "Backwards-compatibility for the old retries format.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "retries": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "retries"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_validate_ssl_context_for_tls_in_tls",
            "description": "\n        Raises a ProxySchemeUnsupported if the provided ssl_context can't be used\n        for TLS in TLS.\n\n        The only requirement is that the ssl_context provides the 'wrap_bio'\n        methods.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "ssl_context": {
                        "type": "string"
                    }
                },
                "required": [
                    "ssl_context"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\ssltransport.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "resolve_default_timeout",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "timeout": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "timeout"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\timeout.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_validate_timeout",
            "description": "Check that a timeout attribute is valid.\n\n        :param value: The timeout value to validate\n        :param name: The name of the timeout attribute to validate. This is\n            used to specify in error messages.\n        :return: The validated and casted version of the given value.\n        :raises ValueError: If it is a numeric value less than or equal to\n            zero, or the type is not an integer, float, or None.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "value",
                    "name"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\timeout.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_float",
            "description": "Create a new Timeout from a legacy timeout value.\n\n        The timeout value used by httplib.py sets the same timeout on the\n        connect(), and recv() socket requests. This creates a :class:`Timeout`\n        object that sets the individual timeouts to the ``timeout`` value\n        passed to this function.\n\n        :param timeout: The legacy timeout value.\n        :type timeout: integer, float, sentinel default object, or None\n        :return: Timeout object\n        :rtype: :class:`Timeout`\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "timeout": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "timeout"
                ]
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\timeout.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "connect_timeout",
            "description": "Get the value to use when setting a connection timeout.\n\n        This will be a positive float or integer, the value None\n        (never timeout), or the default system timeout.\n\n        :return: Connect timeout.\n        :rtype: int, float, :attr:`Timeout.DEFAULT_TIMEOUT` or None\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\timeout.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "read_timeout",
            "description": "Get the value for the read timeout.\n\n        This assumes some time has elapsed in the connection timeout and\n        computes the read timeout appropriately.\n\n        If self.total is set, the read timeout is dependent on the amount of\n        time taken by the connect timeout. If the connection time has not been\n        established, a :exc:`~urllib3.exceptions.TimeoutStateError` will be\n        raised.\n\n        :return: Value to use for the read timeout.\n        :rtype: int, float, :attr:`Timeout.DEFAULT_TIMEOUT` or None\n        :raises urllib3.exceptions.TimeoutStateError: If :meth:`start_connect`\n            has not yet been called on this object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\timeout.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "hostname",
            "description": "For backwards-compatibility with urlparse. We're nice like that.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\url.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "request_uri",
            "description": "Absolute path including the query string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\url.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "netloc",
            "description": "Network location including host and port",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\url.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "url",
            "description": "\n        Convert self into a url\n\n        This function should more or less round-trip with :func:`.parse_url`. The\n        returned url may not be exactly the same as the url inputted to\n        :func:`.parse_url`, but it should be equivalent by the RFC (e.g., urls\n        with a blank port will have : removed).\n\n        Example: ::\n\n            >>> U = parse_url('http://google.com/mail/')\n            >>> U.url\n            'http://google.com/mail/'\n            >>> Url('http', 'username:password', 'host.com', 80,\n            ... '/path', 'query', 'fragment').url\n            'http://username:password@host.com:80/path?query#fragment'\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\url.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__get__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\propcache\\_helpers_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "__get__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\propcache\\_helpers_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "code",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "reason",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parse",
            "description": "\n        Parse a WebSocket frame.\n\n        This is a generator-based coroutine.\n\n        Args:\n            read_exact: Generator-based coroutine that reads the requested\n                bytes or raises an exception if there isn't enough data.\n            mask: Whether the frame should be masked i.e. whether the read\n                happens on the server side.\n            max_size: Maximum payload size in bytes.\n            extensions: List of extensions, applied in reverse order.\n\n        Raises:\n            EOFError: If the connection is closed without a full WebSocket frame.\n            PayloadTooBig: If the frame's payload size exceeds ``max_size``.\n            ProtocolError: If the frame contains incorrect values.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\websockets\\frames.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "parse",
            "description": "\n        Parse the payload of a close frame.\n\n        Args:\n            data: Payload of the close frame.\n\n        Raises:\n            ProtocolError: If data is ill-formed.\n            UnicodeDecodeError: If the reason isn't valid UTF-8.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\websockets\\frames.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\http11.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parse",
            "description": "\n        Parse a WebSocket handshake request.\n\n        This is a generator-based coroutine.\n\n        The request path isn't URL-decoded or validated in any way.\n\n        The request path and headers are expected to contain only ASCII\n        characters. Other characters are represented with surrogate escapes.\n\n        :meth:`parse` doesn't attempt to read the request body because\n        WebSocket handshake requests don't have one. If the request contains a\n        body, it may be read from the data stream after :meth:`parse` returns.\n\n        Args:\n            read_line: Generator-based coroutine that reads a LF-terminated\n                line or raises an exception if there isn't enough data\n\n        Raises:\n            EOFError: If the connection is closed without a full HTTP request.\n            SecurityError: If the request exceeds a security limit.\n            ValueError: If the request isn't well formatted.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\websockets\\http11.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\http11.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parse",
            "description": "\n        Parse a WebSocket handshake response.\n\n        This is a generator-based coroutine.\n\n        The reason phrase and headers are expected to contain only ASCII\n        characters. Other characters are represented with surrogate escapes.\n\n        Args:\n            read_line: Generator-based coroutine that reads a LF-terminated\n                line or raises an exception if there isn't enough data.\n            read_exact: Generator-based coroutine that reads the requested\n                bytes or raises an exception if there isn't enough data.\n            read_to_eof: Generator-based coroutine that reads until the end\n                of the stream.\n\n        Raises:\n            EOFError: If the connection is closed without a full HTTP response.\n            SecurityError: If the response exceeds a security limit.\n            LookupError: If the response isn't well formatted.\n            ValueError: If the response isn't well formatted.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\websockets\\http11.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "state",
            "description": "\n        State of the WebSocket connection.\n\n        Defined in 4.1_, 4.2_, 7.1.3_, and 7.1.4_ of :rfc:`6455`.\n\n        .. _4.1: https://datatracker.ietf.org/doc/html/rfc6455#section-4.1\n        .. _4.2: https://datatracker.ietf.org/doc/html/rfc6455#section-4.2\n        .. _7.1.3: https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.3\n        .. _7.1.4: https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\protocol.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "state",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\protocol.py",
            "decorator": [
                "state.setter"
            ]
        },
        {
            "name": "close_code",
            "description": "\n        WebSocket close code received from the remote endpoint.\n\n        Defined in 7.1.5_ of :rfc:`6455`.\n\n        .. _7.1.5: https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.5\n\n        :obj:`None` if the connection isn't closed yet.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\protocol.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "close_reason",
            "description": "\n        WebSocket close reason  received from the remote endpoint.\n\n        Defined in 7.1.6_ of :rfc:`6455`.\n\n        .. _7.1.6: https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.6\n\n        :obj:`None` if the connection isn't closed yet.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\protocol.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "close_exc",
            "description": "\n        Exception to raise when trying to interact with a closed connection.\n\n        Don't raise this exception while the connection :attr:`state`\n        is :attr:`~websockets.protocol.State.CLOSING`; wait until\n        it's :attr:`~websockets.protocol.State.CLOSED`.\n\n        Indeed, the exception includes the close code and reason, which are\n        known only once the connection is closed.\n\n        Raises:\n            AssertionError: If the connection isn't closed yet.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\protocol.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "resource_name",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\uri.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\uri.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "user_info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\uri.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "expired",
            "description": "Is timeout expired during execution?",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\async_timeout.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "deadline",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\async_timeout.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "local_address",
            "description": "\n        Local address of the connection.\n\n        For IPv4 connections, this is a ``(host, port)`` tuple.\n\n        The format of the address depends on the address family.\n        See :meth:`~socket.socket.getsockname`.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\connection.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "remote_address",
            "description": "\n        Remote address of the connection.\n\n        For IPv4 connections, this is a ``(host, port)`` tuple.\n\n        The format of the address depends on the address family.\n        See :meth:`~socket.socket.getpeername`.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\connection.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "state",
            "description": "\n        State of the WebSocket connection, defined in :rfc:`6455`.\n\n        This attribute is provided for completeness. Typical applications\n        shouldn't check its value. Instead, they should call :meth:`~recv` or\n        :meth:`send` and handle :exc:`~websockets.exceptions.ConnectionClosed`\n        exceptions.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\connection.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "subprotocol",
            "description": "\n        Subprotocol negotiated during the opening handshake.\n\n        :obj:`None` if no subprotocol was negotiated.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\connection.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "close_code",
            "description": "\n        State of the WebSocket connection, defined in :rfc:`6455`.\n\n        This attribute is provided for completeness. Typical applications\n        shouldn't check its value. Instead, they should inspect attributes\n        of :exc:`~websockets.exceptions.ConnectionClosed` exceptions.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\connection.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "close_reason",
            "description": "\n        State of the WebSocket connection, defined in :rfc:`6455`.\n\n        This attribute is provided for completeness. Typical applications\n        shouldn't check its value. Instead, they should inspect attributes\n        of :exc:`~websockets.exceptions.ConnectionClosed` exceptions.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\connection.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "recv",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\connection.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "recv",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\connection.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "recv",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\connection.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "recv_streaming",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\connection.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "recv_streaming",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\connection.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "recv_streaming",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\connection.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "send_context",
            "description": "\n        Create a context for writing to the connection from user code.\n\n        On entry, :meth:`send_context` checks that the connection is open; on\n        exit, it writes outgoing data to the socket::\n\n            async with self.send_context():\n                self.protocol.send_text(message.encode())\n\n        When the connection isn't open on entry, when the connection is expected\n        to close on exit, or when an unexpected error happens, terminating the\n        connection, :meth:`send_context` waits until the connection is closed\n        then raises :exc:`~websockets.exceptions.ConnectionClosed`.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\connection.py",
            "decorator": [
                "contextlib.asynccontextmanager"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\messages.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\messages.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\messages.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get_iter",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\messages.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get_iter",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\messages.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get_iter",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\messages.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "connections",
            "description": "\n        Set of active connections.\n\n        This property contains all connections that completed the opening\n        handshake successfully and didn't start the closing handshake yet.\n        It can be useful in combination with :func:`~broadcast`.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\server.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "sockets",
            "description": "\n        See :attr:`asyncio.Server.sockets`.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\asyncio\\server.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "process_extensions",
            "description": "\n        Handle the Sec-WebSocket-Extensions HTTP response header.\n\n        Check that each extension is supported, as well as its parameters.\n\n        Return the list of accepted extensions.\n\n        Raise :exc:`~websockets.exceptions.InvalidHandshake` to abort the\n        connection.\n\n        :rfc:`6455` leaves the rules up to the specification of each\n        :extension.\n\n        To provide this level of flexibility, for each extension accepted by\n        the server, we check for a match with each extension available in the\n        client configuration. If no match is found, an exception is raised.\n\n        If several variants of the same extension are accepted by the server,\n        it may be configured several times, which won't make sense in general.\n        Extensions must implement their own requirements. For this purpose,\n        the list of previously accepted extensions is provided.\n\n        Other requirements, for example related to mandatory extensions or the\n        order of extensions, may be implemented by overriding this method.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\legacy\\client.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "process_subprotocol",
            "description": "\n        Handle the Sec-WebSocket-Protocol HTTP response header.\n\n        Check that it contains exactly one supported subprotocol.\n\n        Return the selected subprotocol.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\legacy\\client.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "new_frame",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\legacy\\framing.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "read",
            "description": "\n        Read a WebSocket frame.\n\n        Args:\n            reader: Coroutine that reads exactly the requested number of\n                bytes, unless the end of file is reached.\n            mask: Whether the frame should be masked i.e. whether the read\n                happens on the server side.\n            max_size: Maximum payload size in bytes.\n            extensions: List of extensions, applied in reverse order.\n\n        Raises:\n            PayloadTooBig: If the frame exceeds ``max_size``.\n            ProtocolError: If the frame contains incorrect values.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\websockets\\legacy\\framing.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "process_origin",
            "description": "\n        Handle the Origin HTTP request header.\n\n        Args:\n            headers: Request headers.\n            origins: Optional list of acceptable origins.\n\n        Raises:\n            InvalidOrigin: If the origin isn't acceptable.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "headers": {
                        "type": "string",
                        "description": "Request headers."
                    },
                    "origins": {
                        "type": "string",
                        "description": "Optional list of acceptable origins."
                    },
                    "Raises": {
                        "type": "string"
                    },
                    "InvalidOrigin": {
                        "type": "string",
                        "description": "If the origin isn't acceptable."
                    }
                },
                "required": [
                    "headers",
                    "origins",
                    "Raises",
                    "InvalidOrigin"
                ]
            },
            "file": "venv\\Lib\\site-packages\\websockets\\legacy\\server.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "process_extensions",
            "description": "\n        Handle the Sec-WebSocket-Extensions HTTP request header.\n\n        Accept or reject each extension proposed in the client request.\n        Negotiate parameters for accepted extensions.\n\n        Return the Sec-WebSocket-Extensions HTTP response header and the list\n        of accepted extensions.\n\n        :rfc:`6455` leaves the rules up to the specification of each\n        :extension.\n\n        To provide this level of flexibility, for each extension proposed by\n        the client, we check for a match with each extension available in the\n        server configuration. If no match is found, the extension is ignored.\n\n        If several variants of the same extension are proposed by the client,\n        it may be accepted several times, which won't make sense in general.\n        Extensions must implement their own requirements. For this purpose,\n        the list of previously accepted extensions is provided.\n\n        This process doesn't allow the server to reorder extensions. It can\n        only select a subset of the extensions proposed by the client.\n\n        Other requirements, for example related to mandatory extensions or the\n        order of extensions, may be implemented by overriding this method.\n\n        Args:\n            headers: Request headers.\n            extensions: Optional list of supported extensions.\n\n        Raises:\n            InvalidHandshake: To abort the handshake with an HTTP 400 error.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "headers": {
                        "type": "string",
                        "description": "Request headers."
                    },
                    "extensions": {
                        "type": "string",
                        "description": "Optional list of supported extensions."
                    },
                    "Raises": {
                        "type": "string"
                    },
                    "InvalidHandshake": {
                        "type": "string",
                        "description": "To abort the handshake with an HTTP 400 error."
                    }
                },
                "required": [
                    "headers",
                    "extensions",
                    "Raises",
                    "InvalidHandshake"
                ]
            },
            "file": "venv\\Lib\\site-packages\\websockets\\legacy\\server.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "sockets",
            "description": "\n        See :attr:`asyncio.Server.sockets`.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\legacy\\server.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "local_address",
            "description": "\n        Local address of the connection.\n\n        For IPv4 connections, this is a ``(host, port)`` tuple.\n\n        The format of the address depends on the address family.\n        See :meth:`~socket.socket.getsockname`.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\connection.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "remote_address",
            "description": "\n        Remote address of the connection.\n\n        For IPv4 connections, this is a ``(host, port)`` tuple.\n\n        The format of the address depends on the address family.\n        See :meth:`~socket.socket.getpeername`.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\connection.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "state",
            "description": "\n        State of the WebSocket connection, defined in :rfc:`6455`.\n\n        This attribute is provided for completeness. Typical applications\n        shouldn't check its value. Instead, they should call :meth:`~recv` or\n        :meth:`send` and handle :exc:`~websockets.exceptions.ConnectionClosed`\n        exceptions.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\connection.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "subprotocol",
            "description": "\n        Subprotocol negotiated during the opening handshake.\n\n        :obj:`None` if no subprotocol was negotiated.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\connection.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "close_code",
            "description": "\n        State of the WebSocket connection, defined in :rfc:`6455`.\n\n        This attribute is provided for completeness. Typical applications\n        shouldn't check its value. Instead, they should inspect attributes\n        of :exc:`~websockets.exceptions.ConnectionClosed` exceptions.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\connection.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "close_reason",
            "description": "\n        State of the WebSocket connection, defined in :rfc:`6455`.\n\n        This attribute is provided for completeness. Typical applications\n        shouldn't check its value. Instead, they should inspect attributes\n        of :exc:`~websockets.exceptions.ConnectionClosed` exceptions.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\connection.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "recv",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\connection.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "recv",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\connection.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "recv",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\connection.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "recv",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\connection.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "recv",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\connection.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "recv_streaming",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\connection.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "recv_streaming",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\connection.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "recv_streaming",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\connection.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "send_context",
            "description": "\n        Create a context for writing to the connection from user code.\n\n        On entry, :meth:`send_context` acquires the connection lock and checks\n        that the connection is open; on exit, it writes outgoing data to the\n        socket::\n\n            with self.send_context():\n                self.protocol.send_text(message.encode())\n\n        When the connection isn't open on entry, when the connection is expected\n        to close on exit, or when an unexpected error happens, terminating the\n        connection, :meth:`send_context` waits until the connection is closed\n        then raises :exc:`~websockets.exceptions.ConnectionClosed`.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\connection.py",
            "decorator": [
                "contextlib.contextmanager"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\messages.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\messages.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\messages.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\messages.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\messages.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get_iter",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\messages.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get_iter",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\messages.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "get_iter",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\websockets\\sync\\messages.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "name",
            "description": "The status name.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\exceptions.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "description",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\exceptions.py",
            "decorator": [
                "property#type:ignore"
            ]
        },
        {
            "name": "description",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\exceptions.py",
            "decorator": [
                "description.setter"
            ]
        },
        {
            "name": "parse_accept_header",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\http.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "parse_accept_header",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\http.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "parse_cache_control_header",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\http.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "parse_cache_control_header",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\http.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "parse_csp_header",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\http.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "parse_csp_header",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\http.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "unquote_etag",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\http.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "unquote_etag",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\http.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "top",
            "description": "The topmost item on the stack.  If the stack is empty,\n        `None` is returned.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\local.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "server_version",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\serving.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_environ",
            "description": "Turn an environ dict back into a builder. Any extra kwargs\n        override the args extracted from the environ.\n\n        .. versionchanged:: 2.0\n            Path and query values are passed through the WSGI decoding\n            dance to avoid double encoding.\n\n        .. versionadded:: 0.15\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_make_base_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "base_url",
            "description": "The base URL is used to extract the URL scheme, host name,\n        port, and root path.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "base_url",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "base_url.setter"
            ]
        },
        {
            "name": "content_type",
            "description": "The content type for the request.  Reflected from and to\n        the :attr:`headers`.  Do not set if you set :attr:`files` or\n        :attr:`form` for auto detection.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "content_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "content_type.setter"
            ]
        },
        {
            "name": "mimetype",
            "description": "The mimetype (content type without charset etc.)\n\n        .. versionadded:: 0.14\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "mimetype",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "mimetype.setter"
            ]
        },
        {
            "name": "mimetype_params",
            "description": "The mimetype parameters as dict.  For example if the\n        content type is ``text/html; charset=utf-8`` the params would be\n        ``{'charset': 'utf-8'}``.\n\n        .. versionadded:: 0.14\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "content_length",
            "description": "The content length as integer.  Reflected from and to the\n        :attr:`headers`.  Do not set if you set :attr:`files` or\n        :attr:`form` for auto detection.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "content_length",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "content_length.setter"
            ]
        },
        {
            "name": "form",
            "description": "A :class:`MultiDict` of form values.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "form",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "form.setter"
            ]
        },
        {
            "name": "files",
            "description": "A :class:`FileMultiDict` of uploaded files. Use\n        :meth:`~FileMultiDict.add_file` to add new files.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "files",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "files.setter"
            ]
        },
        {
            "name": "input_stream",
            "description": "An optional input stream. This is mutually exclusive with\n        setting :attr:`form` and :attr:`files`, setting it will clear\n        those. Do not provide this if the method is not ``POST`` or\n        another method that has a body.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "input_stream",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "input_stream.setter"
            ]
        },
        {
            "name": "query_string",
            "description": "The query string.  If you set this to a string\n        :attr:`args` will no longer be available.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "query_string",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "query_string.setter"
            ]
        },
        {
            "name": "args",
            "description": "The URL arguments as :class:`MultiDict`.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "args",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "args.setter"
            ]
        },
        {
            "name": "server_name",
            "description": "The server name (read-only, use :attr:`host` to set)",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "server_port",
            "description": "The server port as integer (read-only, use :attr:`host` to set)",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "text",
            "description": "The response data as text. A shortcut for\n        ``response.get_data(as_text=True)``.\n\n        .. versionadded:: 2.1\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_from_response_header",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_storage_key",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_should_delete",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\test.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "test_app",
            "description": "Simple test application that dumps the environment.  You can use\n    it to check if Werkzeug is working properly:\n\n    .. sourcecode:: pycon\n\n        >>> from werkzeug.serving import run_simple\n        >>> from werkzeug.testapp import test_app\n        >>> run_simple('localhost', 3000, test_app)\n         * Running on http://localhost:3000/\n\n    The application displays important information from the WSGI environment,\n    the Python interpreter and the installed libraries.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\testapp.py",
            "decorator": [
                "Request.application"
            ]
        },
        {
            "name": "is_exhausted",
            "description": "Whether the current stream position has reached the limit.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wsgi.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "_dt_as_utc",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\_internal.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "_dt_as_utc",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\_internal.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__get__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\_internal.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__get__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\_internal.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\accept.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\accept.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\accept.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "best_match",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\accept.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "best_match",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\accept.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "best",
            "description": "The best match as value.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\accept.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "accept_html",
            "description": "True if this object accepts HTML.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\accept.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "accept_xhtml",
            "description": "True if this object accepts XHTML.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\accept.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "accept_json",
            "description": "True if this object accepts JSON.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\accept.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "best_match",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\accept.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "best_match",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\accept.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "from_header",
            "description": "Parse an ``Authorization`` header value and return an instance, or ``None``\n        if the value is empty.\n\n        :param value: The header value to parse.\n\n        .. versionadded:: 2.3\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\auth.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "type",
            "description": "The authorization scheme, like ``basic``, ``digest``, or ``bearer``.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\auth.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\auth.py",
            "decorator": [
                "type.setter"
            ]
        },
        {
            "name": "parameters",
            "description": "A dict of parameters for the header. Only one of this or :attr:`token` should\n        have a value for a given scheme.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\auth.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "parameters",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\auth.py",
            "decorator": [
                "parameters.setter"
            ]
        },
        {
            "name": "token",
            "description": "A dict of parameters for the header. Only one of this or :attr:`token` should\n        have a value for a given scheme.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\auth.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "token",
            "description": "A token for the header. Only one of this or :attr:`parameters` should have a\n        value for a given scheme.\n\n        .. versionadded:: 2.3\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\auth.py",
            "decorator": [
                "token.setter"
            ]
        },
        {
            "name": "from_header",
            "description": "Parse a ``WWW-Authenticate`` header value and return an instance, or ``None``\n        if the value is empty.\n\n        :param value: The header value to parse.\n\n        .. versionadded:: 2.3\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\auth.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "content_type",
            "description": "The content-type sent in the header.  Usually not available",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\file_storage.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "content_length",
            "description": "The content-length sent in the header.  Usually not available",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\file_storage.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "mimetype",
            "description": "Like :attr:`content_type`, but without parameters (eg, without\n        charset, type etc.) and always lowercase.  For example if the content\n        type is ``text/HTML; charset=utf-8`` the mimetype would be\n        ``'text/html'``.\n\n        .. versionadded:: 0.7\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\file_storage.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "mimetype_params",
            "description": "The mimetype parameters as dict.  For example if the content\n        type is ``text/html; charset=utf-8`` the params would be\n        ``{'charset': 'utf-8'}``.\n\n        .. versionadded:: 0.7\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\file_storage.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__getitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "getlist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "getlist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "pop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "pop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "pop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "pop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "pop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__setitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__setitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__setitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\headers.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "fromkeys",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\mixins.py",
            "decorator": [
                "classmethod",
                "t.overload"
            ]
        },
        {
            "name": "fromkeys",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\mixins.py",
            "decorator": [
                "classmethod",
                "t.overload"
            ]
        },
        {
            "name": "fromkeys",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\mixins.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "pop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\mixins.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "pop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\mixins.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "pop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\mixins.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__setitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\mixins.py",
            "decorator": [
                "_always_update"
            ]
        },
        {
            "name": "__delitem__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\mixins.py",
            "decorator": [
                "_always_update"
            ]
        },
        {
            "name": "clear",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\mixins.py",
            "decorator": [
                "_always_update"
            ]
        },
        {
            "name": "popitem",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\mixins.py",
            "decorator": [
                "_always_update"
            ]
        },
        {
            "name": "update",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\mixins.py",
            "decorator": [
                "_always_update"
            ]
        },
        {
            "name": "__ior__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\mixins.py",
            "decorator": [
                "_always_update"
            ]
        },
        {
            "name": "__get__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\range.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "__get__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\range.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload#type:ignore[override]"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "getlist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "getlist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "setdefault",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "setdefault",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "to_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "to_dict",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "pop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "pop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "pop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "getlist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "getlist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "pop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "pop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "pop",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "fromkeys",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload#type:ignore[override]"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "getlist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "getlist",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "items",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload#type:ignore[override]"
            ]
        },
        {
            "name": "items",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\datastructures\\structures.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "push",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\debug\\console.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "fetch",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\debug\\console.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "displayhook",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\debug\\console.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "all_tracebacks",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\debug\\tbtools.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "all_frames",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\debug\\tbtools.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "info",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\debug\\tbtools.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "is_library",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\debug\\tbtools.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "console",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\debug\\tbtools.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "pin",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\debug\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "pin",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\debug\\__init__.py",
            "decorator": [
                "pin.setter"
            ]
        },
        {
            "name": "pin_cookie_name",
            "description": "The name of the pin cookie.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\debug\\__init__.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "signed_regex",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\routing\\converters.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "suggested",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\routing\\exceptions.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "merge_slashes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\routing\\map.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "merge_slashes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\routing\\map.py",
            "decorator": [
                "merge_slashes.setter"
            ]
        },
        {
            "name": "_rules",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\routing\\map.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "match",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\routing\\map.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "match",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\routing\\map.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "_get_func_code",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\routing\\rules.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "args",
            "description": "The parsed URL parameters (the part in the URL after the question\n        mark).\n\n        By default an\n        :class:`~werkzeug.datastructures.ImmutableMultiDict`\n        is returned from this function.  This can be changed by setting\n        :attr:`parameter_storage_class` to a different type.  This might\n        be necessary if the order of the form data is important.\n\n        .. versionchanged:: 2.3\n            Invalid bytes remain percent encoded.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "access_route",
            "description": "If a forwarded header exists this is a list of all ip addresses\n        from the client ip to the last proxy server.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "full_path",
            "description": "Requested path, including the query string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "is_secure",
            "description": "``True`` if the request was made with a secure protocol\n        (HTTPS or WSS).\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "url",
            "description": "The full request URL with the scheme, host, root path, path,\n        and query string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "base_url",
            "description": "Like :attr:`url` but without the query string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "root_url",
            "description": "The request URL scheme, host, and root path. This is the root\n        that the application is accessed from.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "host_url",
            "description": "The request URL scheme and host only.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "host",
            "description": "The host name the request was made to, including the port if\n        it's non-standard. Validated with :attr:`trusted_hosts`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "cookies",
            "description": "A :class:`dict` with the contents of all cookies transmitted with\n        the request.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "content_length",
            "description": "The Content-Length entity-header field indicates the size of the\n        entity-body in bytes or, in the case of the HEAD method, the size of\n        the entity-body that would have been sent had the request been a\n        GET.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "mimetype",
            "description": "Like :attr:`content_type`, but without parameters (eg, without\n        charset, type etc.) and always lowercase.  For example if the content\n        type is ``text/HTML; charset=utf-8`` the mimetype would be\n        ``'text/html'``.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "mimetype_params",
            "description": "The mimetype parameters as dict.  For example if the content\n        type is ``text/html; charset=utf-8`` the params would be\n        ``{'charset': 'utf-8'}``.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "pragma",
            "description": "The Pragma general-header field is used to include\n        implementation-specific directives that might apply to any recipient\n        along the request/response chain.  All pragma directives specify\n        optional behavior from the viewpoint of the protocol; however, some\n        systems MAY require that behavior be consistent with the directives.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "accept_mimetypes",
            "description": "List of mimetypes this client supports as\n        :class:`~werkzeug.datastructures.MIMEAccept` object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "accept_charsets",
            "description": "List of charsets this client supports as\n        :class:`~werkzeug.datastructures.CharsetAccept` object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "accept_encodings",
            "description": "List of encodings this client accepts.  Encodings in a HTTP term\n        are compression encodings such as gzip.  For charsets have a look at\n        :attr:`accept_charset`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "accept_languages",
            "description": "List of languages this client accepts as\n        :class:`~werkzeug.datastructures.LanguageAccept` object.\n\n        .. versionchanged 0.5\n           In previous versions this was a regular\n           :class:`~werkzeug.datastructures.Accept` object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "cache_control",
            "description": "A :class:`~werkzeug.datastructures.RequestCacheControl` object\n        for the incoming cache control headers.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "if_match",
            "description": "An object containing all the etags in the `If-Match` header.\n\n        :rtype: :class:`~werkzeug.datastructures.ETags`\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "if_none_match",
            "description": "An object containing all the etags in the `If-None-Match` header.\n\n        :rtype: :class:`~werkzeug.datastructures.ETags`\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "if_modified_since",
            "description": "The parsed `If-Modified-Since` header as a datetime object.\n\n        .. versionchanged:: 2.0\n            The datetime object is timezone-aware.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "if_unmodified_since",
            "description": "The parsed `If-Unmodified-Since` header as a datetime object.\n\n        .. versionchanged:: 2.0\n            The datetime object is timezone-aware.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "if_range",
            "description": "The parsed ``If-Range`` header.\n\n        .. versionchanged:: 2.0\n            ``IfRange.date`` is timezone-aware.\n\n        .. versionadded:: 0.7\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "range",
            "description": "The parsed `Range` header.\n\n        .. versionadded:: 0.7\n\n        :rtype: :class:`~werkzeug.datastructures.Range`\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "user_agent",
            "description": "The user agent. Use ``user_agent.string`` to get the header\n        value. Set :attr:`user_agent_class` to a subclass of\n        :class:`~werkzeug.user_agent.UserAgent` to provide parsing for\n        the other properties or other extended data.\n\n        .. versionchanged:: 2.1\n            The built-in parser was removed. Set ``user_agent_class`` to a ``UserAgent``\n            subclass to parse data from the string.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "authorization",
            "description": "The ``Authorization`` header parsed into an :class:`.Authorization` object.\n        ``None`` if the header is not present.\n\n        .. versionchanged:: 2.3\n            :class:`Authorization` is no longer a ``dict``. The ``token`` attribute\n            was added for auth schemes that use a token instead of parameters.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "is_json",
            "description": "Check if the mimetype indicates JSON data, either\n        :mimetype:`application/json` or :mimetype:`application/*+json`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\request.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "status_code",
            "description": "The HTTP status code as a number.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "status_code",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "status_code.setter"
            ]
        },
        {
            "name": "status",
            "description": "The HTTP status code as a string.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "status",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "status.setter"
            ]
        },
        {
            "name": "is_json",
            "description": "Check if the mimetype indicates JSON data, either\n        :mimetype:`application/json` or :mimetype:`application/*+json`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "mimetype",
            "description": "The mimetype (content type without charset etc.)",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "mimetype",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "mimetype.setter"
            ]
        },
        {
            "name": "mimetype_params",
            "description": "The mimetype parameters as dict. For example if the\n        content type is ``text/html; charset=utf-8`` the params would be\n        ``{'charset': 'utf-8'}``.\n\n        .. versionadded:: 0.5\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "retry_after",
            "description": "The Retry-After response-header field can be used with a\n        503 (Service Unavailable) response to indicate how long the\n        service is expected to be unavailable to the requesting client.\n\n        Time in seconds until expiration or date.\n\n        .. versionchanged:: 2.0\n            The datetime object is timezone-aware.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "retry_after",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "retry_after.setter"
            ]
        },
        {
            "name": "cache_control",
            "description": "The Cache-Control general-header field is used to specify\n        directives that MUST be obeyed by all caching mechanisms along the\n        request/response chain.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "content_range",
            "description": "The ``Content-Range`` header as a\n        :class:`~werkzeug.datastructures.ContentRange` object. Available\n        even if the header is not set.\n\n        .. versionadded:: 0.7\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "content_range",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "content_range.setter"
            ]
        },
        {
            "name": "www_authenticate",
            "description": "The ``WWW-Authenticate`` header parsed into a :class:`.WWWAuthenticate`\n        object. Modifying the object will modify the header value.\n\n        This header is not set by default. To set this header, assign an instance of\n        :class:`.WWWAuthenticate` to this attribute.\n\n        .. code-block:: python\n\n            response.www_authenticate = WWWAuthenticate(\n                \"basic\", {\"realm\": \"Authentication Required\"}\n            )\n\n        Multiple values for this header can be sent to give the client multiple options.\n        Assign a list to set multiple headers. However, modifying the items in the list\n        will not automatically update the header values, and accessing this attribute\n        will only ever return the first value.\n\n        To unset this header, assign ``None`` or use ``del``.\n\n        .. versionchanged:: 2.3\n            This attribute can be assigned to to set the header. A list can be assigned\n            to set multiple header values. Use ``del`` to unset the header.\n\n        .. versionchanged:: 2.3\n            :class:`WWWAuthenticate` is no longer a ``dict``. The ``token`` attribute\n            was added for auth challenges that use a token instead of parameters.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "www_authenticate",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "www_authenticate.setter"
            ]
        },
        {
            "name": "www_authenticate",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "www_authenticate.deleter"
            ]
        },
        {
            "name": "content_security_policy",
            "description": "The ``Content-Security-Policy`` header as a\n        :class:`~werkzeug.datastructures.ContentSecurityPolicy` object. Available\n        even if the header is not set.\n\n        The Content-Security-Policy header adds an additional layer of\n        security to help detect and mitigate certain types of attacks.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "content_security_policy",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "content_security_policy.setter"
            ]
        },
        {
            "name": "content_security_policy_report_only",
            "description": "The ``Content-Security-policy-report-only`` header as a\n        :class:`~werkzeug.datastructures.ContentSecurityPolicy` object. Available\n        even if the header is not set.\n\n        The Content-Security-Policy-Report-Only header adds a csp policy\n        that is not enforced but is reported thereby helping detect\n        certain types of attacks.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "content_security_policy_report_only",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "content_security_policy_report_only.setter"
            ]
        },
        {
            "name": "access_control_allow_credentials",
            "description": "Whether credentials can be shared by the browser to\n        JavaScript code. As part of the preflight request it indicates\n        whether credentials can be used on the cross origin request.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "access_control_allow_credentials",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\sansio\\response.py",
            "decorator": [
                "access_control_allow_credentials.setter"
            ]
        },
        {
            "name": "from_values",
            "description": "Create a new request object based on the values provided.  If\n        environ is given missing values are filled from there.  This method is\n        useful for small scripts when you need to simulate a request from an URL.\n        Do not use this method for unittesting, there is a full featured client\n        object (:class:`Client`) that allows to create multipart requests,\n        support for cookies etc.\n\n        This accepts the same options as the\n        :class:`~werkzeug.test.EnvironBuilder`.\n\n        .. versionchanged:: 0.5\n           This method now accepts the same arguments as\n           :class:`~werkzeug.test.EnvironBuilder`.  Because of this the\n           `environ` parameter is now called `environ_overrides`.\n\n        :return: request object\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "application",
            "description": "Decorate a function as responder that accepts the request as\n        the last argument.  This works like the :func:`responder`\n        decorator but the function is passed the request object as the\n        last argument and the request object will be closed\n        automatically::\n\n            @Request.application\n            def my_wsgi_app(request):\n                return Response('Hello World!')\n\n        As of Werkzeug 0.14 HTTP exceptions are automatically caught and\n        converted to responses instead of failing.\n\n        :param f: the WSGI callable to decorate\n        :return: a new WSGI callable\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "application",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "want_form_data_parsed",
            "description": "``True`` if the request method carries content. By default\n        this is true if a ``Content-Type`` is sent.\n\n        .. versionadded:: 0.8\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "stream",
            "description": "The WSGI input stream, with safety checks. This stream can only be consumed\n        once.\n\n        Use :meth:`get_data` to get the full data as bytes or text. The :attr:`data`\n        attribute will contain the full bytes only if they do not represent form data.\n        The :attr:`form` attribute will contain the parsed form data in that case.\n\n        Unlike :attr:`input_stream`, this stream guards against infinite streams or\n        reading past :attr:`content_length` or :attr:`max_content_length`.\n\n        If ``max_content_length`` is set, it can be enforced on streams if\n        ``wsgi.input_terminated`` is set. Otherwise, an empty stream is returned.\n\n        If the limit is reached before the underlying stream is exhausted (such as a\n        file that is too large, or an infinite stream), the remaining contents of the\n        stream cannot be read safely. Depending on how the server handles this, clients\n        may show a \"connection reset\" failure instead of seeing the 413 response.\n\n        .. versionchanged:: 2.3\n            Check ``max_content_length`` preemptively and while reading.\n\n        .. versionchanged:: 0.9\n            The stream is always set (but may be consumed) even if form parsing was\n            accessed first.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "data",
            "description": "The raw data read from :attr:`stream`. Will be empty if the request\n        represents form data.\n\n        To get the raw data even if it represents form data, use :meth:`get_data`.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "get_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "form",
            "description": "The form parameters.  By default an\n        :class:`~werkzeug.datastructures.ImmutableMultiDict`\n        is returned from this function.  This can be changed by setting\n        :attr:`parameter_storage_class` to a different type.  This might\n        be necessary if the order of the form data is important.\n\n        Please keep in mind that file uploads will not end up here, but instead\n        in the :attr:`files` attribute.\n\n        .. versionchanged:: 0.9\n\n            Previous to Werkzeug 0.9 this would only contain form data for POST\n            and PUT requests.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "values",
            "description": "A :class:`werkzeug.datastructures.CombinedMultiDict` that\n        combines :attr:`args` and :attr:`form`.\n\n        For GET requests, only ``args`` are present, not ``form``.\n\n        .. versionchanged:: 2.0\n            For GET requests, only ``args`` are present, not ``form``.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "files",
            "description": ":class:`~werkzeug.datastructures.MultiDict` object containing\n        all uploaded files.  Each key in :attr:`files` is the name from the\n        ``<input type=\"file\" name=\"\">``.  Each value in :attr:`files` is a\n        Werkzeug :class:`~werkzeug.datastructures.FileStorage` object.\n\n        It basically behaves like a standard file object you know from Python,\n        with the difference that it also has a\n        :meth:`~werkzeug.datastructures.FileStorage.save` function that can\n        store the file on the filesystem.\n\n        Note that :attr:`files` will only contain data if the request method was\n        POST, PUT or PATCH and the ``<form>`` that posted to the request had\n        ``enctype=\"multipart/form-data\"``.  It will be empty otherwise.\n\n        See the :class:`~werkzeug.datastructures.MultiDict` /\n        :class:`~werkzeug.datastructures.FileStorage` documentation for\n        more details about the used data structure.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "script_root",
            "description": "Alias for :attr:`self.root_path`. ``environ[\"SCRIPT_ROOT\"]``\n        without a trailing slash.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "url_root",
            "description": "Alias for :attr:`root_url`. The URL with scheme, host, and\n        root path. For example, ``https://example.com/app/``.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "json",
            "description": "The parsed JSON data if :attr:`mimetype` indicates JSON\n        (:mimetype:`application/json`, see :attr:`is_json`).\n\n        Calls :meth:`get_json` with default arguments.\n\n        If the request content type is not ``application/json``, this\n        will raise a 415 Unsupported Media Type error.\n\n        .. versionchanged:: 2.3\n            Raise a 415 error instead of 400.\n\n        .. versionchanged:: 2.1\n            Raise a 400 error if the content type is incorrect.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\request.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "force_type",
            "description": "Enforce that the WSGI response is a response object of the current\n        type.  Werkzeug will use the :class:`Response` internally in many\n        situations like the exceptions.  If you call :meth:`get_response` on an\n        exception you will get back a regular :class:`Response` object, even\n        if you are using a custom subclass.\n\n        This method can enforce a given response type, and it will also\n        convert arbitrary WSGI callables into response objects if an environ\n        is provided::\n\n            # convert a Werkzeug response object into an instance of the\n            # MyResponseClass subclass.\n            response = MyResponseClass.force_type(response)\n\n            # convert any WSGI application into a response object\n            response = MyResponseClass.force_type(response, environ)\n\n        This is especially useful if you want to post-process responses in\n        the main dispatcher and use functionality provided by your subclass.\n\n        Keep in mind that this will modify response objects in place if\n        possible!\n\n        :param response: a response object or wsgi application.\n        :param environ: a WSGI environment object.\n        :return: a response object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\response.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_app",
            "description": "Create a new response object from an application output.  This\n        works best if you pass it an application that returns a generator all\n        the time.  Sometimes applications may use the `write()` callable\n        returned by the `start_response` function.  This tries to resolve such\n        edge cases automatically.  But if you don't get the expected output\n        you should set `buffered` to `True` which enforces buffering.\n\n        :param app: the WSGI application to execute.\n        :param environ: the WSGI environment to execute against.\n        :param buffered: set to `True` to enforce buffering.\n        :return: a response object.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\response.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "get_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\response.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\response.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "is_streamed",
            "description": "If the response is streamed (the response is not an iterable with\n        a length information) this property is `True`.  In this case streamed\n        means that there is no information about the number of iterations.\n        This is usually `True` if a generator is passed to the response object.\n\n        This is useful for checking before applying some sort of post\n        filtering that should not take place for streamed responses.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "is_sequence",
            "description": "If the iterator is buffered, this property will be `True`.  A\n        response object will consider an iterator to be buffered if the\n        response attribute is a list or tuple.\n\n        .. versionadded:: 0.6\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "json",
            "description": "The parsed JSON data if :attr:`mimetype` indicates JSON\n        (:mimetype:`application/json`, see :attr:`is_json`).\n\n        Calls :meth:`get_json` with default arguments.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "get_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\response.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "get_json",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\response.py",
            "decorator": [
                "t.overload"
            ]
        },
        {
            "name": "stream",
            "description": "The response iterable as write-only stream.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\response.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "encoding",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\werkzeug\\wrappers\\response.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "split_netloc",
            "description": "Split netloc into username, password, host and port.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_parse.py",
            "decorator": [
                "lru_cache#matchthesamesizeasurlsplit"
            ]
        },
        {
            "name": "make_netloc",
            "description": "Make netloc from parts.\n\n    The user and password are encoded if encode is True.\n\n    The host must already be encoded with _encode_host.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_parse.py",
            "decorator": [
                "lru_cache#matchthesamesizeasurlsplit"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_quoting_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_quoting_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_quoting_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "__call__",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_quoting_py.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "encode_url",
            "description": "Parse unencoded URL.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "pre_encoded_url",
            "description": "Parse pre-encoded URL.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "build_pre_encoded_url",
            "description": "Build a pre-encoded URL from parts.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "lru_cache"
            ]
        },
        {
            "name": "build",
            "description": "Creates and returns a new URL",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "_val",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_origin",
            "description": "Return an URL with scheme, host and port parts only.\n\n        user, password, path, query and fragment are removed.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "absolute",
            "description": "A check for absolute URLs.\n\n        Return True for absolute ones (having scheme or starting\n        with //), False otherwise.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "scheme",
            "description": "Scheme for absolute URLs.\n\n        Empty string for relative URLs or URLs starting with //\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "raw_authority",
            "description": "Encoded authority part of URL.\n\n        Empty string for relative URLs.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "authority",
            "description": "Decoded authority part of URL.\n\n        Empty string for relative URLs.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "raw_user",
            "description": "Encoded user part of URL.\n\n        None if user is missing.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "user",
            "description": "Decoded user part of URL.\n\n        None if user is missing.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "raw_password",
            "description": "Encoded password part of URL.\n\n        None if password is missing.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "password",
            "description": "Decoded password part of URL.\n\n        None if password is missing.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "raw_host",
            "description": "Encoded host part of URL.\n\n        None for relative URLs.\n\n        When working with IPv6 addresses, use the `host_subcomponent` property instead\n        as it will return the host subcomponent with brackets.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "host",
            "description": "Decoded host part of URL.\n\n        None for relative URLs.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "host_subcomponent",
            "description": "Return the host subcomponent part of URL.\n\n        None for relative URLs.\n\n        https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2\n\n        `IP-literal = \"[\" ( IPv6address / IPvFuture  ) \"]\"`\n\n        Examples:\n        - `http://example.com:8080` -> `example.com`\n        - `http://example.com:80` -> `example.com`\n        - `https://127.0.0.1:8443` -> `127.0.0.1`\n        - `https://[::1]:8443` -> `[::1]`\n        - `http://[::1]` -> `[::1]`\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "host_port_subcomponent",
            "description": "Return the host and port subcomponent part of URL.\n\n        Trailing dots are removed from the host part.\n\n        This value is suitable for use in the Host header of an HTTP request.\n\n        None for relative URLs.\n\n        https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2\n        `IP-literal = \"[\" ( IPv6address / IPvFuture  ) \"]\"`\n        https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.3\n        port        = *DIGIT\n\n        Examples:\n        - `http://example.com:8080` -> `example.com:8080`\n        - `http://example.com:80` -> `example.com`\n        - `http://example.com.:80` -> `example.com`\n        - `https://127.0.0.1:8443` -> `127.0.0.1:8443`\n        - `https://[::1]:8443` -> `[::1]:8443`\n        - `http://[::1]` -> `[::1]`\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "port",
            "description": "Port part of URL, with scheme-based fallback.\n\n        None for relative URLs or URLs without explicit port and\n        scheme without default port substitution.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "explicit_port",
            "description": "Port part of URL, without scheme-based fallback.\n\n        None for relative URLs or URLs without explicit port.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "raw_path",
            "description": "Encoded path of URL.\n\n        / for absolute URLs without path part.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "path",
            "description": "Decoded path of URL.\n\n        / for absolute URLs without path part.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "path_safe",
            "description": "Decoded path of URL.\n\n        / for absolute URLs without path part.\n\n        / (%2F) and % (%25) are not decoded\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "_parsed_query",
            "description": "Parse query part of URL.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "query",
            "description": "A MultiDictProxy representing parsed query parameters in decoded\n        representation.\n\n        Empty value if URL has no query part.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "raw_query_string",
            "description": "Encoded query part of URL.\n\n        Empty string if query is missing.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "query_string",
            "description": "Decoded query part of URL.\n\n        Empty string if query is missing.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "path_qs",
            "description": "Decoded path of URL with query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "raw_path_qs",
            "description": "Encoded path of URL with query.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "raw_fragment",
            "description": "Encoded fragment part of URL.\n\n        Empty string if fragment is missing.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "fragment",
            "description": "Decoded fragment part of URL.\n\n        Empty string if fragment is missing.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "raw_parts",
            "description": "A tuple containing encoded *path* parts.\n\n        ('/',) for absolute URLs if *path* is missing.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "parts",
            "description": "A tuple containing decoded *path* parts.\n\n        ('/',) for absolute URLs if *path* is missing.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "parent",
            "description": "A new URL with last part of path removed and cleaned up query and\n        fragment.\n\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "raw_name",
            "description": "The last part of raw_parts.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "name",
            "description": "The last part of parts.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "raw_suffix",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "suffix",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "raw_suffixes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "suffixes",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "cached_property"
            ]
        },
        {
            "name": "with_query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "with_query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "extend_query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "extend_query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "update_query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "overload"
            ]
        },
        {
            "name": "update_query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "venv\\Lib\\site-packages\\yarl\\_url.py",
            "decorator": [
                "overload"
            ]
        }
    ]
}