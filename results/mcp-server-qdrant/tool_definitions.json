{
    "tools": [
        {
            "name": "embed_documents",
            "description": "Embed a list of documents into vectors.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server_qdrant\\embeddings\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "embed_query",
            "description": "Embed a query into a vector.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server_qdrant\\embeddings\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_vector_name",
            "description": "Get the name of the vector for the Qdrant collection.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server_qdrant\\embeddings\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_vector_size",
            "description": "Get the size of the vector for the Qdrant collection.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\mcp_server_qdrant\\embeddings\\base.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "embedding_provider",
            "description": "Fixture to provide a FastEmbed embedding provider.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_qdrant_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "qdrant_connector",
            "description": "Fixture to provide a QdrantConnector with in-memory Qdrant client.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "embedding_provider": {
                        "type": "string"
                    }
                },
                "required": [
                    "embedding_provider"
                ]
            },
            "file": "tests\\test_qdrant_integration.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_store_and_search",
            "description": "Test storing an entry and then searching for it.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "qdrant_connector": {
                        "type": "string"
                    }
                },
                "required": [
                    "qdrant_connector"
                ]
            },
            "file": "tests\\test_qdrant_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_search_empty_collection",
            "description": "Test searching in an empty collection.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "qdrant_connector": {
                        "type": "string"
                    }
                },
                "required": [
                    "qdrant_connector"
                ]
            },
            "file": "tests\\test_qdrant_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_multiple_entries",
            "description": "Test storing and searching multiple entries.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "qdrant_connector": {
                        "type": "string"
                    }
                },
                "required": [
                    "qdrant_connector"
                ]
            },
            "file": "tests\\test_qdrant_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_ensure_collection_exists",
            "description": "Test that the collection is created if it doesn't exist.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "qdrant_connector": {
                        "type": "string"
                    }
                },
                "required": [
                    "qdrant_connector"
                ]
            },
            "file": "tests\\test_qdrant_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_metadata_handling",
            "description": "Test that metadata is properly stored and retrieved.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "qdrant_connector": {
                        "type": "string"
                    }
                },
                "required": [
                    "qdrant_connector"
                ]
            },
            "file": "tests\\test_qdrant_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_entry_without_metadata",
            "description": "Test storing and retrieving entries without metadata.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "qdrant_connector": {
                        "type": "string"
                    }
                },
                "required": [
                    "qdrant_connector"
                ]
            },
            "file": "tests\\test_qdrant_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_custom_collection_store_and_search",
            "description": "Test storing and searching in a custom collection.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "qdrant_connector": {
                        "type": "string"
                    }
                },
                "required": [
                    "qdrant_connector"
                ]
            },
            "file": "tests\\test_qdrant_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_multiple_collections",
            "description": "Test using multiple collections with the same connector.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "qdrant_connector": {
                        "type": "string"
                    }
                },
                "required": [
                    "qdrant_connector"
                ]
            },
            "file": "tests\\test_qdrant_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_nonexistent_collection_search",
            "description": "Test searching in a collection that doesn't exist.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "qdrant_connector": {
                        "type": "string"
                    }
                },
                "required": [
                    "qdrant_connector"
                ]
            },
            "file": "tests\\test_qdrant_integration.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_minimal_config",
            "description": "Test loading minimal configuration from environment variables.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_settings.py",
            "decorator": [
                "patch.dict"
            ]
        },
        {
            "name": "test_full_config",
            "description": "Test loading full configuration from environment variables.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_settings.py",
            "decorator": [
                "patch.dict"
            ]
        },
        {
            "name": "test_custom_values",
            "description": "Test loading custom values from environment variables.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_settings.py",
            "decorator": [
                "patch.dict"
            ]
        },
        {
            "name": "test_custom_store_description",
            "description": "Test loading custom store description from environment variable.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_settings.py",
            "decorator": [
                "patch.dict"
            ]
        },
        {
            "name": "test_custom_find_description",
            "description": "Test loading custom find description from environment variable.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_settings.py",
            "decorator": [
                "patch.dict"
            ]
        },
        {
            "name": "test_all_custom_values",
            "description": "Test loading all custom values from environment variables.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_settings.py",
            "decorator": [
                "patch.dict"
            ]
        }
    ]
}