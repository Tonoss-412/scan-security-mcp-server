{
    "tools": [
        {
            "name": "pre_commit_run_tool",
            "description": "\n    Run pre-commit on staged files and return structured output.\n\n    Returns:\n        Structured output with status, summary, and details\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "pre_commit_mcp\\server.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "temp_git_repo",
            "description": "Create a temporary directory with git repository.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "temp_non_git_repo",
            "description": "Create a temporary directory without git repository.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "precommit_config",
            "description": "Sample pre-commit configuration.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_main_runs_server",
            "description": "Test that main function runs the server.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_server.py",
            "decorator": [
                "patch.object"
            ]
        },
        {
            "name": "test_get_modified_files_no_git",
            "description": "Test modified files detection when not in git repo.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_get_modified_files_with_git",
            "description": "Test modified files detection in git repo.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_precommit_command_success",
            "description": "Test successful pre-commit command execution.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_precommit_command_timeout",
            "description": "Test pre-commit command timeout handling.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_run_precommit_command_not_found",
            "description": "Test pre-commit command not found error.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_parse_precommit_output_success",
            "description": "Test parsing successful pre-commit output.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_parse_precommit_output_hooks_failed",
            "description": "Test parsing pre-commit output with hook failures.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_parse_precommit_output_system_error",
            "description": "Test parsing pre-commit output with system error.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_pre_commit_run_no_git_repo",
            "description": "Test pre_commit_run when not in git repository.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_pre_commit_run_no_config",
            "description": "Test pre_commit_run when no pre-commit config exists.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_pre_commit_run_timeout",
            "description": "Test pre_commit_run timeout handling.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        },
        {
            "name": "test_pre_commit_run_exception_handling",
            "description": "Test pre_commit_run handles unexpected exceptions.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_tools.py",
            "decorator": [
                "pytest.mark.asyncio"
            ]
        }
    ]
}