{
    "tools": [
        {
            "name": "lifespan",
            "description": "Lifespan function for the app.\n\n    Before yield runs as app starts up, after yield runs as app shuts down.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\host_app.py",
            "decorator": [
                "asynccontextmanager"
            ]
        },
        {
            "name": "set_new_chat_name",
            "description": "Set the name of the new chat.\n\n        Args:\n            form_data: A dict with the new chat name.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "form_data": {
                        "type": "string",
                        "description": "A dict with the new chat name."
                    }
                },
                "required": [
                    "form_data"
                ]
            },
            "file": "host_app\\state.py",
            "decorator": [
                "rx.event"
            ]
        },
        {
            "name": "toggle_modal",
            "description": "Toggle the modal.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\state.py",
            "decorator": [
                "rx.event"
            ]
        },
        {
            "name": "create_chat",
            "description": "Create a new chat.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\state.py",
            "decorator": [
                "rx.event"
            ]
        },
        {
            "name": "delete_chat",
            "description": "Delete the current chat.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\state.py",
            "decorator": [
                "rx.event"
            ]
        },
        {
            "name": "set_chat",
            "description": "Set the name of the current chat.\n\n        Args:\n            chat_name: The name of the chat.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "chat_name": {
                        "type": "string",
                        "description": "The name of the chat."
                    }
                },
                "required": [
                    "chat_name"
                ]
            },
            "file": "host_app\\state.py",
            "decorator": [
                "rx.event"
            ]
        },
        {
            "name": "set_model",
            "description": "Set the model name.\n\n        Args:\n            model_name: The name of the model.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "model_name": {
                        "type": "string",
                        "description": "The name of the model."
                    }
                },
                "required": [
                    "model_name"
                ]
            },
            "file": "host_app\\state.py",
            "decorator": [
                "rx.event"
            ]
        },
        {
            "name": "set_graph_mode",
            "description": "Set the graph mode.\n\n        Args:\n            graph_mode: The graph mode.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "graph_mode": {
                        "type": "string",
                        "description": "The graph mode."
                    }
                },
                "required": [
                    "graph_mode"
                ]
            },
            "file": "host_app\\state.py",
            "decorator": [
                "rx.event"
            ]
        },
        {
            "name": "on_load",
            "description": "Load the state.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\state.py",
            "decorator": [
                "rx.event",
                "inject"
            ]
        },
        {
            "name": "chat_titles",
            "description": "Get the list of chat titles.\n\n        Returns:\n            The list of chat names.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\state.py",
            "decorator": [
                "rx.var"
            ]
        },
        {
            "name": "handle_send_click",
            "description": "Handle user clicking the send button.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\state.py",
            "decorator": [
                "rx.event"
            ]
        },
        {
            "name": "run_request_in_background",
            "description": "Background task to run the langgraph graph.\n\n        Required to use a background task because this could take a while to run.\n        Note: Use `async with self:` in order to update the state in the background task.\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\state.py",
            "decorator": [
                "rx.event"
            ]
        },
        {
            "name": "model_selection",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\components\\navbar.py",
            "decorator": [
                "inject"
            ]
        },
        {
            "name": "load_previous_messages",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\graph\\functional_implementation.py",
            "decorator": [
                "task"
            ]
        },
        {
            "name": "save_messages",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\graph\\functional_implementation.py",
            "decorator": [
                "task"
            ]
        },
        {
            "name": "call_tools",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\graph\\functional_implementation.py",
            "decorator": [
                "task"
            ]
        },
        {
            "name": "make_graph",
            "description": "Create a graph with the given checkpointer and store.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\graph\\functional_implementation.py",
            "decorator": [
                "inject"
            ]
        },
        {
            "name": "graph",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\graph\\functional_implementation.py",
            "decorator": [
                "entrypoint"
            ]
        },
        {
            "name": "call_llm",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\graph\\graph_implementation.py",
            "decorator": [
                "inject"
            ]
        },
        {
            "name": "call_tools",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\graph\\graph_implementation.py",
            "decorator": [
                "inject"
            ]
        },
        {
            "name": "make_graph",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\graph\\graph_implementation.py",
            "decorator": [
                "inject"
            ]
        },
        {
            "name": "is_ai_message",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\graph\\langgraph_adapters.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "is_tool_message",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\graph\\langgraph_adapters.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "has_content_chunk",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\graph\\langgraph_adapters.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "ensure_content_is_str",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\graph\\langgraph_adapters.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "has_tool_call_chunk",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\graph\\langgraph_adapters.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "is_message_finish",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\graph\\langgraph_adapters.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "has_tool_calls",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\graph\\langgraph_adapters.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "make_tool_start_update",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "host_app\\graph\\langgraph_adapters.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_data",
            "description": "Atesttooldescription",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\example_server.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_resource",
            "description": "Testresourcedescription",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\example_server.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "checkpoint_getter",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_checkpointer.py",
            "decorator": [
                "inject"
            ]
        },
        {
            "name": "application",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_checkpointer.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_get_checkpointer",
            "description": "Test that the checkpointer is available in the container.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_checkpointer.py",
            "decorator": [
                "pytest.mark.usefixtures"
            ]
        },
        {
            "name": "use_sync_resources",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_di_resources.py",
            "decorator": [
                "inject"
            ]
        },
        {
            "name": "use_async_resources",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_di_resources.py",
            "decorator": [
                "inject"
            ]
        },
        {
            "name": "container",
            "description": "Fixture to provide a container instance.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_di_resources.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_sync_resources",
            "description": "Test the sync resource and generator.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_di_resources.py",
            "decorator": [
                "pytest.mark.usefixtures"
            ]
        },
        {
            "name": "test_async_resources",
            "description": "Test the async resource and generator.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_di_resources.py",
            "decorator": [
                "pytest.mark.usefixtures"
            ]
        },
        {
            "name": "fake_chat_model",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_graph.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "container",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_graph.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "mock_chat_model",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_graph.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "basic_runnable_config",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_graph.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "graph",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_graph.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "graph_adapter",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_graph.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_astream_graph_adapter",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_graph.py",
            "decorator": [
                "pytest.mark.usefixtures"
            ]
        },
        {
            "name": "test_graph_has_memory",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_graph.py",
            "decorator": [
                "pytest.mark.usefixtures"
            ]
        },
        {
            "name": "test_graph_runs_with_missing_mcp_server",
            "description": "Should still be able to run the graph even if one of the servers is down.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "tests\\test_graph.py",
            "decorator": [
                "pytest.mark.usefixtures"
            ]
        }
    ]
}