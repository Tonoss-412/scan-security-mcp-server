{
    "tools": [
        {
            "name": "health_check",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\app.py",
            "decorator": [
                "app.route"
            ]
        },
        {
            "name": "handle_error",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string"
                    }
                },
                "required": [
                    "error"
                ]
            },
            "file": "src\\backend\\app.py",
            "decorator": [
                "app.errorhandler"
            ]
        },
        {
            "name": "run_diagnostic",
            "description": "Run the schedule generator diagnostic",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\app.py",
            "decorator": [
                "app.cli.command",
                "click.option",
                "click.option",
                "click.option"
            ]
        },
        {
            "name": "run_ai_diagnostic",
            "description": "Run the AI schedule generator diagnostic",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\app.py",
            "decorator": [
                "app.cli.command",
                "click.option",
                "click.option",
                "click.option"
            ]
        },
        {
            "name": "cli",
            "description": "A command line interface for the Schichtplan application.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\run.py",
            "decorator": [
                "click.group"
            ]
        },
        {
            "name": "runserver",
            "description": "Run the Flask development server.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "port": {
                        "type": "string"
                    },
                    "debug": {
                        "type": "string"
                    }
                },
                "required": [
                    "port",
                    "debug"
                ]
            },
            "file": "src\\backend\\run.py",
            "decorator": [
                "cli.command",
                "click.option",
                "click.option"
            ]
        },
        {
            "name": "handle_connect",
            "description": "Handle client connection",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\websocket.py",
            "decorator": [
                "socketio.on"
            ]
        },
        {
            "name": "handle_disconnect",
            "description": "Handle client disconnection",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\websocket.py",
            "decorator": [
                "socketio.on"
            ]
        },
        {
            "name": "handle_subscribe",
            "description": "Handle subscription to specific events",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string"
                    }
                },
                "required": [
                    "data"
                ]
            },
            "file": "src\\backend\\websocket.py",
            "decorator": [
                "socketio.on"
            ]
        },
        {
            "name": "handle_unsubscribe",
            "description": "Handle unsubscription from specific events",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string"
                    }
                },
                "required": [
                    "data"
                ]
            },
            "file": "src\\backend\\websocket.py",
            "decorator": [
                "socketio.on"
            ]
        },
        {
            "name": "get_all_coverage",
            "description": "Get all coverage requirements",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\coverage.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_coverage_by_day",
            "description": "Get coverage requirements for a specific day",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "day_index": {
                        "type": "string"
                    }
                },
                "required": [
                    "day_index"
                ]
            },
            "file": "src\\backend\\api\\coverage.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "create_coverage",
            "description": "Create a new coverage requirement",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\coverage.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "update_coverage",
            "description": "Update a coverage requirement",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "coverage_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "coverage_id"
                ]
            },
            "file": "src\\backend\\api\\coverage.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "delete_coverage",
            "description": "Delete a coverage requirement",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "coverage_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "coverage_id"
                ]
            },
            "file": "src\\backend\\api\\coverage.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "bulk_update_coverage",
            "description": "Bulk update coverage requirements for multiple days",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\coverage.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "decorated_function",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\demo_data.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "get_employees",
            "description": "Get all employees",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\employees.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_employee",
            "description": "Get employee by ID",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id"
                ]
            },
            "file": "src\\backend\\api\\employees.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "create_employee",
            "description": "Create new employee",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\employees.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "activate_employee",
            "description": "Activate an employee",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id"
                ]
            },
            "file": "src\\backend\\api\\employees.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "deactivate_employee",
            "description": "Deactivate an employee",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id"
                ]
            },
            "file": "src\\backend\\api\\employees.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "update_employee",
            "description": "Update an employee",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id"
                ]
            },
            "file": "src\\backend\\api\\employees.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "delete_employee",
            "description": "Delete employee",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id"
                ]
            },
            "file": "src\\backend\\api\\employees.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_layout",
            "description": "Get current PDF layout configuration",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\pdf_settings.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "update_layout",
            "description": "Update PDF layout configuration",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\pdf_settings.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "preview_layout",
            "description": "Generate a preview PDF with the current layout settings",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\pdf_settings.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_presets",
            "description": "Get all PDF layout presets",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\pdf_settings.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "save_preset",
            "description": "Save a new PDF layout preset",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "file": "src\\backend\\api\\pdf_settings.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "delete_preset",
            "description": "Delete a PDF layout preset",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "file": "src\\backend\\api\\pdf_settings.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "apply_preset",
            "description": "Apply a PDF layout preset as current configuration",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "file": "src\\backend\\api\\pdf_settings.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_schedules",
            "description": "Get all schedules for a given period (requires authentication)",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\schedules.py",
            "decorator": [
                "bp.route",
                "login_required"
            ]
        },
        {
            "name": "generate_schedule",
            "description": "Generate a new schedule for the given date range",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\schedules.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "export_schedule",
            "description": "Export schedule as PDF",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\schedules.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_all_versions",
            "description": "Get all schedule versions with their metadata",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\schedules.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "create_new_version",
            "description": "Create a new schedule version, optionally based on an existing version.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\schedules.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "update_version_status",
            "description": "Update a schedule's status (DRAFT, PUBLISHED, ARCHIVED)",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "version"
                ]
            },
            "file": "src\\backend\\api\\schedules.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_version_details",
            "description": "Get detailed information about a specific schedule version.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "version"
                ]
            },
            "file": "src\\backend\\api\\schedules.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "duplicate_version",
            "description": "Create a duplicate of an existing schedule version with a new version number.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\schedules.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "delete_version",
            "description": "Delete a schedule version and all associated schedules.\n\n    This will delete:\n    1. All schedule entries for this version\n    2. Version metadata\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "version"
                ]
            },
            "file": "src\\backend\\api\\schedules.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "create_schedule",
            "description": "Create a new schedule entry using transactional session management",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\schedules.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_settings",
            "description": "Get all settings or initialize with defaults if none exist",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\settings.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "update_settings",
            "description": "Update settings",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\settings.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "backup_database",
            "description": "Export the entire database as JSON",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\settings.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "restore_database",
            "description": "Restore the database from a JSON backup",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\settings.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "wipe_tables",
            "description": "Wipe specific database tables",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\settings.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_tables",
            "description": "Get list of available database tables",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\settings.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_shifts",
            "description": "Get all shifts",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\shifts.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_shift",
            "description": "Get shift by ID",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "shift_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "shift_id"
                ]
            },
            "file": "src\\backend\\api\\shifts.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "create_shift",
            "description": "Create new shift",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\shifts.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "update_shift",
            "description": "Update shift",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "shift_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "shift_id"
                ]
            },
            "file": "src\\backend\\api\\shifts.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "delete_shift",
            "description": "Delete shift",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "shift_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "shift_id"
                ]
            },
            "file": "src\\backend\\api\\shifts.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "create_default_shifts",
            "description": "Create default shifts",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\shifts.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_config",
            "description": "Get store configuration",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\store.py",
            "decorator": [
                "bp.route",
                "bp.route"
            ]
        },
        {
            "name": "update_config",
            "description": "Update store configuration",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\store.py",
            "decorator": [
                "bp.route",
                "bp.route"
            ]
        },
        {
            "name": "reset_config",
            "description": "Reset store configuration to defaults",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\store.py",
            "decorator": [
                "bp.route",
                "bp.route"
            ]
        },
        {
            "name": "get_current_week",
            "description": "Get current week information.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\week_navigation.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_week_info",
            "description": "Get information about a specific week.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\week_navigation.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_next_week_endpoint",
            "description": "Get the next week identifier.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\week_navigation.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_previous_week_endpoint",
            "description": "Get the previous week identifier.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\week_navigation.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_week_versions",
            "description": "Get all versions for a specific week.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\week_navigation.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "create_week_version",
            "description": "Create a new week-based version.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\api\\week_navigation.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create an Absence instance from dictionary data.\n\n        Args:\n            data: Dictionary containing absence data\n\n        Returns:\n            An Absence instance (not yet added to session)\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "Dictionary containing absence data"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "Returns"
                ]
            },
            "file": "src\\backend\\models\\absence.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "is_available",
            "description": "Check if this availability type counts as available for scheduling",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\models\\employee.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "priority",
            "description": "Get priority for scheduling (lower number = higher priority)",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\models\\employee.py",
            "decorator": [
                "property"
            ]
        },
        {
            "name": "from_time",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\backend\\models\\fixed_shift.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "time_to_minutes",
            "description": "Convert time string to minutes since midnight",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "time_str": {
                        "type": "string"
                    }
                },
                "required": [
                    "time_str"
                ]
            },
            "file": "src\\backend\\models\\fixed_shift.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "create_default_shifts",
            "description": "Create a set of default shifts for a typical retail store",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\models\\fixed_shift.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "create_absence_direct",
            "description": "Create a new absence directly from the /absences/ endpoint.\n    This route expects employee_id in the request body.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\absences.py",
            "decorator": [
                "bp.route",
                "bp.route"
            ]
        },
        {
            "name": "get_employee_absences",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id"
                ]
            },
            "file": "src\\backend\\routes\\absences.py",
            "decorator": [
                "bp.route",
                "bp.route",
                "bp.route"
            ]
        },
        {
            "name": "create_absence",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id"
                ]
            },
            "file": "src\\backend\\routes\\absences.py",
            "decorator": [
                "bp.route",
                "bp.route",
                "bp.route"
            ]
        },
        {
            "name": "delete_absence",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    },
                    "absence_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id",
                    "absence_id"
                ]
            },
            "file": "src\\backend\\routes\\absences.py",
            "decorator": [
                "bp.route",
                "bp.route",
                "bp.route"
            ]
        },
        {
            "name": "update_absence",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    },
                    "absence_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id",
                    "absence_id"
                ]
            },
            "file": "src\\backend\\routes\\absences.py",
            "decorator": [
                "bp.route",
                "bp.route",
                "bp.route"
            ]
        },
        {
            "name": "generate_ai_schedule",
            "description": "\n    Endpoint to trigger AI-based schedule generation.\n    Expects JSON payload with:\n    - \"start_date\": \"YYYY-MM-DD\" (required)\n    - \"end_date\": \"YYYY-MM-DD\" (required)\n    - \"version_id\": any (optional, for associating the schedule)\n    - \"ai_model_params\": {} (optional, to override default AI model parameters like temperature)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\ai_schedule_routes.py",
            "decorator": [
                "ai_schedule_bp.route"
            ]
        },
        {
            "name": "submit_ai_schedule_feedback",
            "description": "\n    Endpoint to receive feedback on AI-generated schedule assignments.\n    Expects JSON payload conforming to AIScheduleFeedbackRequest schema.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\ai_schedule_routes.py",
            "decorator": [
                "ai_schedule_bp.route"
            ]
        },
        {
            "name": "import_ai_schedule_response",
            "description": "\n    Endpoint to import AI-generated schedule assignments from a CSV file.\n    Expects form data with:\n    - 'file': The CSV file (required)\n    - 'version_id': The version ID to associate assignments with (required)\n    - 'start_date': The start date of the schedule period (YYYY-MM-DD) (required)\n    - 'end_date': The end date of the schedule period (YYYY-MM-DD) (required)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\ai_schedule_routes.py",
            "decorator": [
                "ai_schedule_bp.route"
            ]
        },
        {
            "name": "preview_ai_data",
            "description": "\n    Endpoint to preview the optimized data pack that would be sent to AI.\n    Expects JSON payload with:\n    - \"start_date\": \"YYYY-MM-DD\" (required)\n    - \"end_date\": \"YYYY-MM-DD\" (required)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\ai_schedule_routes.py",
            "decorator": [
                "ai_schedule_bp.route"
            ]
        },
        {
            "name": "register",
            "description": "\n    Register a new user (admin only)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\auth.py",
            "decorator": [
                "bp.route",
                "role_required"
            ]
        },
        {
            "name": "login",
            "description": "\n    Authenticate user and return JWT token\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\auth.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_profile",
            "description": "\n    Get current user profile\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\auth.py",
            "decorator": [
                "bp.route",
                "login_required"
            ]
        },
        {
            "name": "change_password",
            "description": "\n    Change user password\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\auth.py",
            "decorator": [
                "bp.route",
                "login_required"
            ]
        },
        {
            "name": "get_users",
            "description": "\n    Get all users (admin/manager only)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\auth.py",
            "decorator": [
                "bp.route",
                "role_required"
            ]
        },
        {
            "name": "get_user",
            "description": "\n    Get user by ID (admin/manager only)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "user_id"
                ]
            },
            "file": "src\\backend\\routes\\auth.py",
            "decorator": [
                "bp.route",
                "role_required"
            ]
        },
        {
            "name": "update_user",
            "description": "\n    Update user (admin only)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "user_id"
                ]
            },
            "file": "src\\backend\\routes\\auth.py",
            "decorator": [
                "bp.route",
                "role_required"
            ]
        },
        {
            "name": "regenerate_api_key",
            "description": "\n    Regenerate API key for user (admin only)\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "user_id"
                ]
            },
            "file": "src\\backend\\routes\\auth.py",
            "decorator": [
                "bp.route",
                "role_required"
            ]
        },
        {
            "name": "get_availabilities",
            "description": "Get all availabilities",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\availability.py",
            "decorator": [
                "availability.route"
            ]
        },
        {
            "name": "create_availability",
            "description": "Create a new availability",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\availability.py",
            "decorator": [
                "availability.route"
            ]
        },
        {
            "name": "get_availability",
            "description": "Get a specific availability",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "availability_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "availability_id"
                ]
            },
            "file": "src\\backend\\routes\\availability.py",
            "decorator": [
                "availability.route"
            ]
        },
        {
            "name": "update_availability",
            "description": "Update an availability",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "availability_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "availability_id"
                ]
            },
            "file": "src\\backend\\routes\\availability.py",
            "decorator": [
                "availability.route"
            ]
        },
        {
            "name": "delete_availability",
            "description": "Delete an availability",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "availability_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "availability_id"
                ]
            },
            "file": "src\\backend\\routes\\availability.py",
            "decorator": [
                "availability.route"
            ]
        },
        {
            "name": "check_availability",
            "description": "Check employee availability for a specific date and time range",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\availability.py",
            "decorator": [
                "availability.route"
            ]
        },
        {
            "name": "update_employee_availabilities",
            "description": "Update employee availabilities",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id"
                ]
            },
            "file": "src\\backend\\routes\\availability.py",
            "decorator": [
                "availability.route"
            ]
        },
        {
            "name": "get_employee_availabilities",
            "description": "Get employee availabilities",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id"
                ]
            },
            "file": "src\\backend\\routes\\availability.py",
            "decorator": [
                "availability.route"
            ]
        },
        {
            "name": "get_employee_status_by_date",
            "description": "Get availability status for all active employees for a given date.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\availability.py",
            "decorator": [
                "availability.route"
            ]
        },
        {
            "name": "get_shifts_for_employee_on_date",
            "description": "Get all shift templates active on a given day for an employee, including availability information.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\availability.py",
            "decorator": [
                "availability.route"
            ]
        },
        {
            "name": "check_ai_settings",
            "description": "Debug endpoint to check AI settings",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\debug.py",
            "decorator": [
                "debug_bp.route"
            ]
        },
        {
            "name": "get_employees",
            "description": "Get all employees",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\employees.py",
            "decorator": [
                "employees.route",
                "employees.route"
            ]
        },
        {
            "name": "get_employee",
            "description": "Get a specific employee",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id"
                ]
            },
            "file": "src\\backend\\routes\\employees.py",
            "decorator": [
                "employees.route",
                "employees.route"
            ]
        },
        {
            "name": "create_employee",
            "description": "Create a new employee",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\employees.py",
            "decorator": [
                "employees.route",
                "employees.route"
            ]
        },
        {
            "name": "update_employee",
            "description": "Update an employee",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id"
                ]
            },
            "file": "src\\backend\\routes\\employees.py",
            "decorator": [
                "employees.route",
                "employees.route"
            ]
        },
        {
            "name": "delete_employee",
            "description": "Delete an employee",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id"
                ]
            },
            "file": "src\\backend\\routes\\employees.py",
            "decorator": [
                "employees.route",
                "employees.route"
            ]
        },
        {
            "name": "get_employee_availabilities",
            "description": "Get all availabilities for an employee",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id"
                ]
            },
            "file": "src\\backend\\routes\\employees.py",
            "decorator": [
                "employees.route"
            ]
        },
        {
            "name": "update_employee_availabilities",
            "description": "Update availabilities for an employee",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id"
                ]
            },
            "file": "src\\backend\\routes\\employees.py",
            "decorator": [
                "employees.route",
                "employees.route",
                "employees.route"
            ]
        },
        {
            "name": "get_employee_availability",
            "description": "Alias for get_employee_availabilities - handles the singular form for frontend compatibility",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "employee_id"
                ]
            },
            "file": "src\\backend\\routes\\employees.py",
            "decorator": [
                "employees.route",
                "employees.route"
            ]
        },
        {
            "name": "import_holidays",
            "description": "\n    Import selected holidays as special days in the settings.\n\n    Expected JSON payload:\n    {\n        \"holidays\": [\n            {\n                \"date\": \"2023-01-01\",\n                \"name\": \"New Year's Day\",\n                \"type\": \"National\",\n                \"description\": \"Optional description\"\n            },\n            ...\n        ],\n        \"is_closed\": true  // Whether the store should be closed on these days\n    }\n\n    Returns:\n        HTTP 200: JSON response with success message and count of imported holidays\n        HTTP 400: JSON response with error details if request is invalid\n        HTTP 500: JSON response with error message if server error occurs\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\holiday_import.py",
            "decorator": [
                "holiday_import.route",
                "holiday_import.route"
            ]
        },
        {
            "name": "get_holidays",
            "description": "\n    Fetch holidays for a specific country and year from an external API.\n\n    Args:\n        country: Country code (e.g., 'DE' for Germany)\n        year: Year for which to fetch holidays\n\n    Returns:\n        JSON response with list of holidays\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "country": {
                        "type": "string",
                        "description": "Country code (e.g., 'DE' for Germany)"
                    },
                    "year": {
                        "type": "string",
                        "description": "Year for which to fetch holidays"
                    }
                },
                "required": [
                    "country",
                    "year"
                ]
            },
            "file": "src\\backend\\routes\\holiday_routes.py",
            "decorator": [
                "holidays.route",
                "holidays.route"
            ]
        },
        {
            "name": "get_supported_countries",
            "description": "\n    Return a list of supported countries for holiday fetching.\n\n    Returns:\n        JSON response with list of supported countries\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\holiday_routes.py",
            "decorator": [
                "holidays.route",
                "holidays.route"
            ]
        },
        {
            "name": "save_logs",
            "description": "Save logs from frontend",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\logs.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_logs",
            "description": "Get logs with filtering",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\logs.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_log_stats",
            "description": "Get log statistics",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\logs.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "clear_logs",
            "description": "Clear all log files",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\logs.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "mcp_status",
            "description": "Get MCP service status and available tools.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\mcp_routes.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "list_mcp_tools",
            "description": "List all available MCP tools with their descriptions.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\mcp_routes.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "list_mcp_resources",
            "description": "List all available MCP resources.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\mcp_routes.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "list_mcp_prompts",
            "description": "List all available MCP prompts.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\mcp_routes.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "test_mcp_tool",
            "description": "Test an MCP tool with provided parameters.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\mcp_routes.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "get_mcp_config",
            "description": "Get MCP server configuration for client connections.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\mcp_routes.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "mcp_health",
            "description": "Health check endpoint for MCP service.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\mcp_routes.py",
            "decorator": [
                "bp.route"
            ]
        },
        {
            "name": "ping",
            "description": "Simple ping endpoint to verify API is running",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\ping.py",
            "decorator": [
                "ping_bp.route"
            ]
        },
        {
            "name": "get_schedules",
            "description": "Get all schedules within a date range",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route",
                "schedules.route"
            ]
        },
        {
            "name": "create_schedule_entry",
            "description": "Create a new individual schedule entry",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route"
            ]
        },
        {
            "name": "generate_schedule",
            "description": "Generate a schedule",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route",
                "schedules.route"
            ]
        },
        {
            "name": "get_schedule_pdf",
            "description": "Get schedule as PDF",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route"
            ]
        },
        {
            "name": "get_schedule",
            "description": "Get a specific schedule",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "schedule_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "schedule_id"
                ]
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route",
                "schedules.route"
            ]
        },
        {
            "name": "update_schedule",
            "description": "Update a schedule (for drag and drop functionality)",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "schedule_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "schedule_id"
                ]
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route",
                "schedules.route",
                "schedules.route"
            ]
        },
        {
            "name": "delete_schedule",
            "description": "Delete a schedule",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "schedule_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "schedule_id"
                ]
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route",
                "schedules.route"
            ]
        },
        {
            "name": "export_schedule",
            "description": "Export schedule as PDF",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route",
                "schedules.route"
            ]
        },
        {
            "name": "publish_schedule",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "version"
                ]
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route"
            ]
        },
        {
            "name": "archive_schedule",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "version"
                ]
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route"
            ]
        },
        {
            "name": "validate_schedule",
            "description": "Validate an existing schedule",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route"
            ]
        },
        {
            "name": "get_all_versions",
            "description": "Get all schedule versions with their metadata",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route",
                "schedules.route"
            ]
        },
        {
            "name": "create_new_version",
            "description": "Create a new schedule version, optionally based on an existing version.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route"
            ]
        },
        {
            "name": "update_version_status",
            "description": "Update a schedule's status (DRAFT, PUBLISHED, ARCHIVED)",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "version"
                ]
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route"
            ]
        },
        {
            "name": "get_version_details",
            "description": "Get detailed information about a specific schedule version.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "version"
                ]
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route"
            ]
        },
        {
            "name": "duplicate_version",
            "description": "Create a duplicate of an existing schedule version with a new version number.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route"
            ]
        },
        {
            "name": "compare_versions",
            "description": "Compare two schedule versions and identify differences.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route"
            ]
        },
        {
            "name": "update_version_notes",
            "description": "Update the notes for a schedule version.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "version"
                ]
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route"
            ]
        },
        {
            "name": "fix_schedule_display",
            "description": "Fix any issues with schedule display, particularly fixing shift_id fields",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route"
            ]
        },
        {
            "name": "generate_ai_schedule",
            "description": "Generate a schedule using AI with detailed options support",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route"
            ]
        },
        {
            "name": "get_schedule_diagnostics",
            "description": "Get diagnostic logs for a specific schedule generation session",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "session_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "session_id"
                ]
            },
            "file": "src\\backend\\routes\\schedules.py",
            "decorator": [
                "schedules.route"
            ]
        },
        {
            "name": "backup_database",
            "description": "Export the entire database as JSON",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route",
                "settings.route"
            ]
        },
        {
            "name": "restore_database",
            "description": "Restore the database from a JSON backup",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route",
                "settings.route"
            ]
        },
        {
            "name": "get_tables",
            "description": "Get list of available database tables",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route",
                "settings.route"
            ]
        },
        {
            "name": "wipe_tables",
            "description": "Wipe specific database tables",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route",
                "settings.route"
            ]
        },
        {
            "name": "get_settings",
            "description": "Get all settings or initialize with defaults if none exist",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route",
                "settings.route"
            ]
        },
        {
            "name": "update_settings",
            "description": "Update settings",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route",
                "settings.route"
            ]
        },
        {
            "name": "reset_settings",
            "description": "Reset settings to defaults",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route",
                "settings.route"
            ]
        },
        {
            "name": "get_category_settings",
            "description": "Get settings for a specific category",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string"
                    }
                },
                "required": [
                    "category"
                ]
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route"
            ]
        },
        {
            "name": "update_category_settings",
            "description": "Update settings for a specific category",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string"
                    }
                },
                "required": [
                    "category"
                ]
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route"
            ]
        },
        {
            "name": "update_setting",
            "description": "Update a specific setting",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    }
                },
                "required": [
                    "category",
                    "key"
                ]
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route"
            ]
        },
        {
            "name": "delete_setting",
            "description": "Delete a specific setting (reset to default)",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    }
                },
                "required": [
                    "category",
                    "key"
                ]
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route"
            ]
        },
        {
            "name": "get_logs",
            "description": "Get list of available log files",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route",
                "settings.route"
            ]
        },
        {
            "name": "get_log_content",
            "description": "Get content of a specific log file",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filename": {
                        "type": "string"
                    }
                },
                "required": [
                    "filename"
                ]
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route"
            ]
        },
        {
            "name": "delete_log",
            "description": "Delete a specific log file",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "filename": {
                        "type": "string"
                    }
                },
                "required": [
                    "filename"
                ]
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route"
            ]
        },
        {
            "name": "get_generation_settings",
            "description": "Get schedule generation settings",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route"
            ]
        },
        {
            "name": "update_generation_settings",
            "description": "Update schedule generation settings",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route"
            ]
        },
        {
            "name": "generate_optimized_demo_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\settings.py",
            "decorator": [
                "settings.route",
                "cross_origin"
            ]
        },
        {
            "name": "get_shifts",
            "description": "Get all shifts",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\shifts.py",
            "decorator": [
                "shifts.route",
                "shifts.route"
            ]
        },
        {
            "name": "get_shift",
            "description": "Get a specific shift",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "shift_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "shift_id"
                ]
            },
            "file": "src\\backend\\routes\\shifts.py",
            "decorator": [
                "shifts.route",
                "shifts.route"
            ]
        },
        {
            "name": "create_shift",
            "description": "Create a new shift",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\shifts.py",
            "decorator": [
                "shifts.route",
                "shifts.route"
            ]
        },
        {
            "name": "update_shift",
            "description": "Update a shift",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "shift_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "shift_id"
                ]
            },
            "file": "src\\backend\\routes\\shifts.py",
            "decorator": [
                "shifts.route",
                "shifts.route"
            ]
        },
        {
            "name": "delete_shift",
            "description": "Delete a shift",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "shift_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "shift_id"
                ]
            },
            "file": "src\\backend\\routes\\shifts.py",
            "decorator": [
                "shifts.route",
                "shifts.route"
            ]
        },
        {
            "name": "fix_shift_durations",
            "description": "Fix all shifts with missing duration_hours",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\shifts.py",
            "decorator": [
                "shifts.route"
            ]
        },
        {
            "name": "get_special_days",
            "description": "\n    Retrieve all special days from settings\n\n    Returns:\n        JSON response with special days data\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\special_days.py",
            "decorator": [
                "special_days.route",
                "special_days.route"
            ]
        },
        {
            "name": "add_update_special_day",
            "description": "\n    Add or update a special day\n\n    Expected JSON payload:\n    {\n        \"date\": \"YYYY-MM-DD\",\n        \"description\": \"Holiday or special event description\",\n        \"is_closed\": true|false,\n        \"custom_hours\": {\n            \"opening\": \"HH:MM\",\n            \"closing\": \"HH:MM\"\n        }\n    }\n\n    Returns:\n        HTTP 200: JSON response with success message\n        HTTP 400: JSON response with error details if request is invalid\n        HTTP 500: JSON response with error message if server error occurs\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\routes\\special_days.py",
            "decorator": [
                "special_days.route",
                "special_days.route"
            ]
        },
        {
            "name": "delete_special_day",
            "description": "\n    Delete a special day by date\n\n    Args:\n        date: Date string in YYYY-MM-DD format\n\n    Returns:\n        HTTP 200: JSON response with success message\n        HTTP 404: JSON response if special day not found\n        HTTP 500: JSON response with error message if server error occurs\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Date string in YYYY-MM-DD format"
                    }
                },
                "required": [
                    "date"
                ]
            },
            "file": "src\\backend\\routes\\special_days.py",
            "decorator": [
                "special_days.route"
            ]
        },
        {
            "name": "handle_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "e": {
                        "type": "string"
                    }
                },
                "required": [
                    "e"
                ]
            },
            "file": "src\\backend\\routes\\__init__.py",
            "decorator": [
                "api_bp.errorhandler"
            ]
        },
        {
            "name": "handle_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "e": {
                        "type": "string"
                    }
                },
                "required": [
                    "e"
                ]
            },
            "file": "src\\backend\\routes\\__init__.py",
            "decorator": [
                "api_bp.errorhandler"
            ]
        },
        {
            "name": "validate_time_format",
            "description": "Validate time is in HH:MM format.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "src\\backend\\schemas\\settings.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "validate_time_format_optional",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "src\\backend\\schemas\\settings.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "validate_special_days_date_keys",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "v": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "v"
                ]
            },
            "file": "src\\backend\\schemas\\settings.py",
            "decorator": [
                "validator"
            ]
        },
        {
            "name": "generate_response",
            "description": "Generate AI response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\ai_integration.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "stream_response",
            "description": "Stream AI response.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\ai_integration.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "get_available_models",
            "description": "Get available models.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\ai_integration.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "validate_connection",
            "description": "Validate provider connection.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\ai_integration.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "decorated",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\auth_service.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "decorated",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\auth_service.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "decorated",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\auth_service.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "decorated",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\auth_service.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "from_environment",
            "description": "Create configuration from environment variables.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\backend\\services\\config.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_file",
            "description": "Load configuration from a JSON or YAML file.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\backend\\services\\config.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_dict",
            "description": "Create configuration from dictionary.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\backend\\services\\config.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "start_conversation",
            "description": "Start a new conversational AI session.\n\n            Args:\n                user_id: Optional user identifier\n                session_id: Optional session identifier\n                initial_goal: Initial goal for the conversation\n                ai_personality: AI personality to use\n\n            Returns:\n                Conversation context and initial AI response\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "Optional user identifier"
                    },
                    "session_id": {
                        "type": "string",
                        "description": "Optional session identifier"
                    },
                    "initial_goal": {
                        "type": "string",
                        "description": "Initial goal for the conversation"
                    },
                    "ai_personality": {
                        "type": "string",
                        "description": "AI personality to use"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "user_id",
                    "session_id",
                    "initial_goal",
                    "ai_personality",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\conversational_mcp_service.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "continue_conversation",
            "description": "Continue an existing conversation.\n\n            Args:\n                conversation_id: ID of the conversation to continue\n                user_input: User's input/message\n                additional_context: Optional additional context\n\n            Returns:\n                AI response and updated conversation state\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "conversation_id": {
                        "type": "string",
                        "description": "ID of the conversation to continue"
                    },
                    "user_input": {
                        "type": "string",
                        "description": "User's input/message"
                    },
                    "additional_context": {
                        "type": "string",
                        "description": "Optional additional context"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "conversation_id",
                    "user_input",
                    "additional_context",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\conversational_mcp_service.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "get_conversation_status",
            "description": "Get current conversation status and context.\n\n            Args:\n                conversation_id: ID of the conversation\n\n            Returns:\n                Conversation status and metadata\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "conversation_id": {
                        "type": "string",
                        "description": "ID of the conversation"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "conversation_id",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\conversational_mcp_service.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "guided_schedule_optimization",
            "description": "Start a guided schedule optimization conversation.\n\n            Args:\n                conversation_id: ID of the conversation\n                start_date: Start date for optimization (YYYY-MM-DD)\n                end_date: End date for optimization (YYYY-MM-DD)\n                optimization_goals: List of optimization goals\n\n            Returns:\n                AI-guided optimization process results\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "conversation_id": {
                        "type": "string",
                        "description": "ID of the conversation"
                    },
                    "start_date": {
                        "type": "string",
                        "description": "Start date for optimization (YYYY-MM-DD)"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "End date for optimization (YYYY-MM-DD)"
                    },
                    "optimization_goals": {
                        "type": "string",
                        "description": "List of optimization goals"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "conversation_id",
                    "start_date",
                    "end_date",
                    "optimization_goals",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\conversational_mcp_service.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "ai_schedule_analysis",
            "description": "Perform AI-driven schedule analysis with conversation.\n\n            Args:\n                conversation_id: ID of the conversation\n                analysis_type: Type of analysis (comprehensive, conflict, coverage, workload)\n                specific_focus: Specific areas to focus on\n\n            Returns:\n                AI analysis results with recommendations\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "conversation_id": {
                        "type": "string",
                        "description": "ID of the conversation"
                    },
                    "analysis_type": {
                        "type": "string",
                        "description": "Type of analysis (comprehensive, conflict, coverage, workload)"
                    },
                    "specific_focus": {
                        "type": "string",
                        "description": "Specific areas to focus on"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "conversation_id",
                    "analysis_type",
                    "specific_focus",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\conversational_mcp_service.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "end_conversation",
            "description": "End a conversation and generate summary.\n\n            Args:\n                conversation_id: ID of the conversation to end\n                summary: Optional summary of the conversation\n\n            Returns:\n                Conversation summary and final state\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "conversation_id": {
                        "type": "string",
                        "description": "ID of the conversation to end"
                    },
                    "summary": {
                        "type": "string",
                        "description": "Optional summary of the conversation"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "conversation_id",
                    "summary",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\conversational_mcp_service.py",
            "decorator": [
                "self.mcp.tool"
            ]
        },
        {
            "name": "save_conversation",
            "description": "Save conversation context.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\conversation_manager.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "load_conversation",
            "description": "Load conversation context.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\conversation_manager.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "delete_conversation",
            "description": "Delete conversation context.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\conversation_manager.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "list_conversations",
            "description": "List conversations.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\conversation_manager.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "to_json",
            "description": "Export conversations to JSON format.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\enhanced_conversation_manager.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "to_csv",
            "description": "Export conversation summary to CSV format.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\enhanced_conversation_manager.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "to_markdown",
            "description": "Export single conversation to Markdown format.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\enhanced_conversation_manager.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "_shifts_overlap",
            "description": "Check if two shifts overlap in time.\n\n        Args:\n            start1: Start time of first shift in HH:MM format\n            end1: End time of first shift in HH:MM format\n            start2: Start time of second shift in HH:MM format\n            end2: End time of second shift in HH:MM format\n\n        Returns:\n            bool: True if shifts overlap, False otherwise\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "start1": {
                        "type": "string",
                        "description": "Start time of first shift in HH:MM format"
                    },
                    "end1": {
                        "type": "string",
                        "description": "End time of first shift in HH:MM format"
                    },
                    "start2": {
                        "type": "string",
                        "description": "Start time of second shift in HH:MM format"
                    },
                    "end2": {
                        "type": "string",
                        "description": "End time of second shift in HH:MM format"
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "bool": {
                        "type": "string",
                        "description": "True if shifts overlap, False otherwise"
                    }
                },
                "required": [
                    "start1",
                    "end1",
                    "start2",
                    "end2",
                    "Returns",
                    "bool"
                ]
            },
            "file": "src\\backend\\services\\schedule_generator.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "can_handle",
            "description": "\n        Check if this agent can handle the given request.\n\n        Args:\n            request: The user request or task description\n            context: Current conversation context\n\n        Returns:\n            Tuple of (can_handle: bool, confidence_score: float)\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "request": {
                        "type": "string",
                        "description": "The user request or task description"
                    },
                    "context": {
                        "type": "string",
                        "description": "Current conversation context"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "request",
                    "context",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\ai_agents\\base_agent.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "create_plan",
            "description": "\n        Create a plan to handle the given request.\n\n        Args:\n            request: The user request or task description\n            context: Current conversation context\n\n        Returns:\n            AgentPlan with steps to accomplish the task\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "request": {
                        "type": "string",
                        "description": "The user request or task description"
                    },
                    "context": {
                        "type": "string",
                        "description": "Current conversation context"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "request",
                    "context",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\ai_agents\\base_agent.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "execute_action",
            "description": "\n        Execute a single action from a plan.\n\n        Args:\n            action: The action to execute\n            context: Current conversation context\n\n        Returns:\n            Result of the action execution\n        ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The action to execute"
                    },
                    "context": {
                        "type": "string",
                        "description": "Current conversation context"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "action",
                    "context",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\ai_agents\\base_agent.py",
            "decorator": [
                "abstractmethod"
            ]
        },
        {
            "name": "generate_ai_schedule",
            "description": "Generate a complete schedule using AI optimization algorithms.\n\n            Args:\n                start_date: Start date for schedule generation (YYYY-MM-DD)\n                end_date: End date for schedule generation (YYYY-MM-DD)\n                optimization_criteria: Criteria for optimization with weights\n                constraints: Hard constraints that must be satisfied\n                generation_strategy: Strategy to use ('balanced', 'cost_optimal', 'fairness_focused')\n\n            Returns:\n                AI-generated schedule with optimization metrics and alternatives\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "string",
                        "description": "Start date for schedule generation (YYYY-MM-DD)"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "End date for schedule generation (YYYY-MM-DD)"
                    },
                    "optimization_criteria": {
                        "type": "string",
                        "description": "Criteria for optimization with weights"
                    },
                    "constraints": {
                        "type": "string",
                        "description": "Hard constraints that must be satisfied"
                    },
                    "generation_strategy": {
                        "type": "string",
                        "description": "Strategy to use ('balanced', 'cost_optimal', 'fairness_focused')"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "start_date",
                    "end_date",
                    "optimization_criteria",
                    "constraints",
                    "generation_strategy",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\mcp_tools\\ai_schedule_generation.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "suggest_coverage_improvements",
            "description": "Suggest improvements to schedule coverage based on requirements analysis.\n\n            Args:\n                start_date: Start date for analysis (YYYY-MM-DD)\n                end_date: End date for analysis (YYYY-MM-DD)\n                coverage_targets: Target coverage levels per day type {'weekday': 3, 'weekend': 2}\n                optimization_focus: Focus areas ['minimum_coverage', 'peak_hours', 'skill_distribution']\n\n            Returns:\n                Coverage improvement suggestions with priority and impact analysis\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "string",
                        "description": "Start date for analysis (YYYY-MM-DD)"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "End date for analysis (YYYY-MM-DD)"
                    },
                    "coverage_targets": {
                        "type": "string",
                        "description": "Target coverage levels per day type {'weekday': 3, 'weekend': 2}"
                    },
                    "optimization_focus": {
                        "type": "string",
                        "description": "Focus areas ['minimum_coverage', 'peak_hours', 'skill_distribution']"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "start_date",
                    "end_date",
                    "coverage_targets",
                    "optimization_focus",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\mcp_tools\\coverage_optimization.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "validate_coverage_compliance",
            "description": "Validate schedule compliance with coverage requirements and regulations.\n\n            Args:\n                start_date: Start date for validation (YYYY-MM-DD)\n                end_date: End date for validation (YYYY-MM-DD)\n                compliance_rules: Custom compliance rules to check\n\n            Returns:\n                Detailed compliance analysis with violations and recommendations\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "string",
                        "description": "Start date for validation (YYYY-MM-DD)"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "End date for validation (YYYY-MM-DD)"
                    },
                    "compliance_rules": {
                        "type": "string",
                        "description": "Custom compliance rules to check"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "start_date",
                    "end_date",
                    "compliance_rules",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\mcp_tools\\coverage_optimization.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "optimize_shift_distribution",
            "description": "Optimize shift distribution across time periods and employees.\n\n            Args:\n                start_date: Start date for optimization (YYYY-MM-DD)\n                end_date: End date for optimization (YYYY-MM-DD)\n                optimization_goals: Goals like ['balance_workload', 'minimize_gaps', 'cost_efficiency']\n                constraints: Constraints like {'max_shifts_per_employee': 5, 'min_coverage': 2}\n\n            Returns:\n                Optimized shift distribution recommendations with impact analysis\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "string",
                        "description": "Start date for optimization (YYYY-MM-DD)"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "End date for optimization (YYYY-MM-DD)"
                    },
                    "optimization_goals": {
                        "type": "string",
                        "description": "Goals like ['balance_workload', 'minimize_gaps', 'cost_efficiency']"
                    },
                    "constraints": {
                        "type": "string",
                        "description": "Constraints like {'max_shifts_per_employee': 5, 'min_coverage': 2}"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "start_date",
                    "end_date",
                    "optimization_goals",
                    "constraints",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\mcp_tools\\coverage_optimization.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "manage_employees",
            "description": "Manage employee records and their availability.\n\n            Args:\n                operation: Operation type - \"create\", \"read\", \"update\", \"delete\", \"list\"\n                employee_data: Employee data for create/update operations\n                availability_data: List of availability records for create/update\n                filters: Query filters for read/list operations\n                include_availability: Whether to include availability data in response\n                dry_run: If True, validate operations but don't commit changes\n\n            Returns:\n                Operation result with employee data and status information\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "operation": {
                        "type": "string",
                        "description": "Operation type - \"create\", \"read\", \"update\", \"delete\", \"list\""
                    },
                    "employee_data": {
                        "type": "string",
                        "description": "Employee data for create/update operations"
                    },
                    "availability_data": {
                        "type": "string",
                        "description": "List of availability records for create/update"
                    },
                    "filters": {
                        "type": "string",
                        "description": "Query filters for read/list operations"
                    },
                    "include_availability": {
                        "type": "string",
                        "description": "Whether to include availability data in response"
                    },
                    "dry_run": {
                        "type": "string",
                        "description": "If True, validate operations but don't commit changes"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "operation",
                    "employee_data",
                    "availability_data",
                    "filters",
                    "include_availability",
                    "dry_run",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\mcp_tools\\crud_operations.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "manage_schedules",
            "description": "Manage schedule entries and assignments.\n\n            Args:\n                operation: Operation type - \"create\", \"read\", \"update\", \"delete\", \"list\", \"bulk_create\"\n                schedule_data: Schedule data for single operations\n                filters: Query filters for read/list/delete operations\n                bulk_data: List of schedule records for bulk operations\n                validate_conflicts: Whether to check for scheduling conflicts\n                dry_run: If True, validate operations but don't commit changes\n\n            Returns:\n                Operation result with schedule data and conflict information\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "operation": {
                        "type": "string",
                        "description": "Operation type - \"create\", \"read\", \"update\", \"delete\", \"list\", \"bulk_create\""
                    },
                    "schedule_data": {
                        "type": "string",
                        "description": "Schedule data for single operations"
                    },
                    "filters": {
                        "type": "string",
                        "description": "Query filters for read/list/delete operations"
                    },
                    "bulk_data": {
                        "type": "string",
                        "description": "List of schedule records for bulk operations"
                    },
                    "validate_conflicts": {
                        "type": "string",
                        "description": "Whether to check for scheduling conflicts"
                    },
                    "dry_run": {
                        "type": "string",
                        "description": "If True, validate operations but don't commit changes"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "operation",
                    "schedule_data",
                    "filters",
                    "bulk_data",
                    "validate_conflicts",
                    "dry_run",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\mcp_tools\\crud_operations.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "manage_absences",
            "description": "Manage employee absence records.\n\n            Args:\n                operation: Operation type - \"create\", \"read\", \"update\", \"delete\", \"list\"\n                absence_data: Absence data for create/update operations\n                filters: Query filters for read/list operations\n                employee_id: Specific employee ID filter\n                date_range: Date range filter with start_date and end_date\n                dry_run: If True, validate operations but don't commit changes\n\n            Returns:\n                Operation result with absence data and status information\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "operation": {
                        "type": "string",
                        "description": "Operation type - \"create\", \"read\", \"update\", \"delete\", \"list\""
                    },
                    "absence_data": {
                        "type": "string",
                        "description": "Absence data for create/update operations"
                    },
                    "filters": {
                        "type": "string",
                        "description": "Query filters for read/list operations"
                    },
                    "employee_id": {
                        "type": "string",
                        "description": "Specific employee ID filter"
                    },
                    "date_range": {
                        "type": "string",
                        "description": "Date range filter with start_date and end_date"
                    },
                    "dry_run": {
                        "type": "string",
                        "description": "If True, validate operations but don't commit changes"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "operation",
                    "absence_data",
                    "filters",
                    "employee_id",
                    "date_range",
                    "dry_run",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\mcp_tools\\crud_operations.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "manage_shift_templates",
            "description": "Manage shift template definitions.\n\n            Args:\n                operation: Operation type - \"create\", \"read\", \"update\", \"delete\", \"list\"\n                template_data: Template data for create/update operations\n                filters: Query filters for read/list operations\n                active_only: Whether to only return active templates (for list operations)\n                dry_run: If True, validate operations but don't commit changes\n\n            Returns:\n                Operation result with template data and status information\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "operation": {
                        "type": "string",
                        "description": "Operation type - \"create\", \"read\", \"update\", \"delete\", \"list\""
                    },
                    "template_data": {
                        "type": "string",
                        "description": "Template data for create/update operations"
                    },
                    "filters": {
                        "type": "string",
                        "description": "Query filters for read/list operations"
                    },
                    "active_only": {
                        "type": "string",
                        "description": "Whether to only return active templates (for list operations)"
                    },
                    "dry_run": {
                        "type": "string",
                        "description": "If True, validate operations but don't commit changes"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "operation",
                    "template_data",
                    "filters",
                    "active_only",
                    "dry_run",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\mcp_tools\\crud_operations.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "analyze_employee_workload",
            "description": "Analyze employee workload distribution and provide recommendations.\n\n            Args:\n                start_date: Start date for analysis (YYYY-MM-DD)\n                end_date: End date for analysis (YYYY-MM-DD)\n                employee_id: Specific employee ID to analyze (optional, analyzes all if not provided)\n                include_recommendations: Whether to include optimization recommendations\n\n            Returns:\n                Detailed workload analysis with recommendations\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "string",
                        "description": "Start date for analysis (YYYY-MM-DD)"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "End date for analysis (YYYY-MM-DD)"
                    },
                    "employee_id": {
                        "type": "string",
                        "description": "Specific employee ID to analyze (optional, analyzes all if not provided)"
                    },
                    "include_recommendations": {
                        "type": "string",
                        "description": "Whether to include optimization recommendations"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "start_date",
                    "end_date",
                    "employee_id",
                    "include_recommendations",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\mcp_tools\\employee_management.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "suggest_employee_assignments",
            "description": "Suggest optimal employee assignments for open shifts with reasoning.\n\n            Args:\n                start_date: Start date for suggestions (YYYY-MM-DD)\n                end_date: End date for suggestions (YYYY-MM-DD)\n                criteria: Assignment criteria ['availability', 'skills', 'fairness', 'cost']\n                max_suggestions: Maximum number of suggestions to return\n\n            Returns:\n                Prioritized assignment suggestions with detailed reasoning\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "string",
                        "description": "Start date for suggestions (YYYY-MM-DD)"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "End date for suggestions (YYYY-MM-DD)"
                    },
                    "criteria": {
                        "type": "string",
                        "description": "Assignment criteria ['availability', 'skills', 'fairness', 'cost']"
                    },
                    "max_suggestions": {
                        "type": "string",
                        "description": "Maximum number of suggestions to return"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "start_date",
                    "end_date",
                    "criteria",
                    "max_suggestions",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\mcp_tools\\employee_management.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "optimize_schedule_with_ml",
            "description": "Use machine learning to optimize schedule based on historical patterns.\n\n            Args:\n                start_date: Start date for optimization (YYYY-MM-DD)\n                end_date: End date for optimization (YYYY-MM-DD)\n                learning_data_periods: Number of historical periods to learn from\n                optimization_focus: Areas to focus optimization on\n                use_predictive_modeling: Whether to use predictive models for demand forecasting\n\n            Returns:\n                ML-optimized schedule with confidence scores and model insights\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "string",
                        "description": "Start date for optimization (YYYY-MM-DD)"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "End date for optimization (YYYY-MM-DD)"
                    },
                    "learning_data_periods": {
                        "type": "string",
                        "description": "Number of historical periods to learn from"
                    },
                    "optimization_focus": {
                        "type": "string",
                        "description": "Areas to focus optimization on"
                    },
                    "use_predictive_modeling": {
                        "type": "string",
                        "description": "Whether to use predictive models for demand forecasting"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "start_date",
                    "end_date",
                    "learning_data_periods",
                    "optimization_focus",
                    "use_predictive_modeling",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\mcp_tools\\ml_optimization.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "analyze_partial_schedule",
            "description": "Analyze partially built schedule and suggest next steps for completion.\n\n            Args:\n                start_date: Start date for analysis (YYYY-MM-DD)\n                end_date: End date for analysis (YYYY-MM-DD)\n                completion_threshold: Minimum completion ratio to consider acceptable (0.0-1.0)\n\n            Returns:\n                Analysis of partial schedule with completion suggestions\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "string",
                        "description": "Start date for analysis (YYYY-MM-DD)"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "End date for analysis (YYYY-MM-DD)"
                    },
                    "completion_threshold": {
                        "type": "string",
                        "description": "Minimum completion ratio to consider acceptable (0.0-1.0)"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "start_date",
                    "end_date",
                    "completion_threshold",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\mcp_tools\\schedule_analysis.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "suggest_schedule_improvements",
            "description": "Suggest improvements for existing schedule based on analysis.\n\n            Args:\n                start_date: Start date for analysis (YYYY-MM-DD)\n                end_date: End date for analysis (YYYY-MM-DD)\n                focus_areas: Specific areas to focus on ['workload', 'coverage', 'fairness', 'compliance']\n                max_suggestions: Maximum number of suggestions to return\n\n            Returns:\n                Prioritized list of schedule improvement suggestions\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "string",
                        "description": "Start date for analysis (YYYY-MM-DD)"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "End date for analysis (YYYY-MM-DD)"
                    },
                    "focus_areas": {
                        "type": "string",
                        "description": "Specific areas to focus on ['workload', 'coverage', 'fairness', 'compliance']"
                    },
                    "max_suggestions": {
                        "type": "string",
                        "description": "Maximum number of suggestions to return"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "start_date",
                    "end_date",
                    "focus_areas",
                    "max_suggestions",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\mcp_tools\\schedule_analysis.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "analyze_schedule_patterns",
            "description": "Analyze scheduling patterns and trends for optimization insights.\n\n            Args:\n                start_date: Start date for pattern analysis (YYYY-MM-DD)\n                end_date: End date for pattern analysis (YYYY-MM-DD)\n                pattern_types: Types of patterns to analyze ['workload', 'coverage', 'preferences', 'seasonal']\n                historical_periods: Number of historical periods to compare\n\n            Returns:\n                Comprehensive pattern analysis with trends and insights\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "string",
                        "description": "Start date for pattern analysis (YYYY-MM-DD)"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "End date for pattern analysis (YYYY-MM-DD)"
                    },
                    "pattern_types": {
                        "type": "string",
                        "description": "Types of patterns to analyze ['workload', 'coverage', 'preferences', 'seasonal']"
                    },
                    "historical_periods": {
                        "type": "string",
                        "description": "Number of historical periods to compare"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "start_date",
                    "end_date",
                    "pattern_types",
                    "historical_periods",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\mcp_tools\\schedule_pattern_analysis.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "generate_schedule_scenarios",
            "description": "Generate multiple schedule scenarios for what-if analysis.\n\n            Args:\n                start_date: Start date for scenarios (YYYY-MM-DD)\n                end_date: End date for scenarios (YYYY-MM-DD)\n                scenario_types: Types of scenarios to generate\n                variation_parameters: Parameters to vary across scenarios\n\n            Returns:\n                Multiple schedule scenarios with comparative analysis\n            ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "string",
                        "description": "Start date for scenarios (YYYY-MM-DD)"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "End date for scenarios (YYYY-MM-DD)"
                    },
                    "scenario_types": {
                        "type": "string",
                        "description": "Types of scenarios to generate"
                    },
                    "variation_parameters": {
                        "type": "string",
                        "description": "Parameters to vary across scenarios"
                    },
                    "Returns": {
                        "type": "string"
                    }
                },
                "required": [
                    "start_date",
                    "end_date",
                    "scenario_types",
                    "variation_parameters",
                    "Returns"
                ]
            },
            "file": "src\\backend\\services\\mcp_tools\\schedule_scenario.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "value",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls"
                ]
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "filter_by",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "add",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "obj": {
                        "type": "string"
                    }
                },
                "required": [
                    "obj"
                ]
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "commit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "rollback",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "bulk_save_objects",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "objects": {
                        "type": "string"
                    }
                },
                "required": [
                    "objects"
                ]
            },
            "file": "src\\backend\\services\\scheduler\\imports.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\import_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\import_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\import_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "filter_by",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\import_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\import_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\import_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\import_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\import_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\import_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\import_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\import_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "query",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\import_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "all",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\import_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "add",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "obj": {
                        "type": "string"
                    }
                },
                "required": [
                    "obj"
                ]
            },
            "file": "src\\backend\\services\\scheduler\\import_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "commit",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\import_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "rollback",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\import_utils.py",
            "decorator": [
                "staticmethod"
            ]
        },
        {
            "name": "get_daily_coverage",
            "description": "Get coverage requirements for a specific day",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\resources.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "time_to_minutes",
            "description": "\n    Convert a time string (HH:MM) to minutes since midnight.\n    This function is cached for performance with common time values.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\utility.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "calculate_duration",
            "description": "\n    Calculate the duration in hours between two time strings (HH:MM).\n    This function is cached for performance with common time values.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\utility.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "calculate_rest_hours",
            "description": "\n    Calculate the rest hours between the end of one shift and the start of another.\n    This function is cached for performance with common time values.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\services\\scheduler\\utility.py",
            "decorator": [
                "functools.lru_cache"
            ]
        },
        {
            "name": "from_scheduler_config",
            "description": "Create a ScheduleConfig from a SchedulerConfig instance",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "config": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "config"
                ]
            },
            "file": "src\\backend\\services\\scheduler\\validator.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "from_settings",
            "description": "Create a ScheduleConfig instance from the application settings",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "cls": {
                        "type": "string"
                    },
                    "settings": {
                        "type": "string"
                    }
                },
                "required": [
                    "cls",
                    "settings"
                ]
            },
            "file": "src\\backend\\services\\scheduler\\validator.py",
            "decorator": [
                "classmethod"
            ]
        },
        {
            "name": "app",
            "description": "Create application for the tests.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "db",
            "description": "Create database for the tests.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app": {
                        "type": "string"
                    }
                },
                "required": [
                    "app"
                ]
            },
            "file": "src\\backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "session",
            "description": "Create a new database session for a test.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "db": {
                        "type": "string"
                    },
                    "app": {
                        "type": "string"
                    }
                },
                "required": [
                    "db",
                    "app"
                ]
            },
            "file": "src\\backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "client",
            "description": "Create a test client for the app, ensuring session is active.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "session": {
                        "type": "string"
                    },
                    "app": {
                        "type": "string"
                    }
                },
                "required": [
                    "session",
                    "app"
                ]
            },
            "file": "src\\backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "runner",
            "description": "Create a test runner for the app's CLI commands.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app": {
                        "type": "string"
                    }
                },
                "required": [
                    "app"
                ]
            },
            "file": "src\\backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "new_employee",
            "description": "Create and return a new Employee object for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "session": {
                        "type": "string"
                    }
                },
                "required": [
                    "session"
                ]
            },
            "file": "src\\backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "new_availability",
            "description": "Create and return a new EmployeeAvailability object for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "session": {
                        "type": "string"
                    },
                    "new_employee": {
                        "type": "string"
                    }
                },
                "required": [
                    "session",
                    "new_employee"
                ]
            },
            "file": "src\\backend\\tests\\conftest.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_create_default_shifts",
            "description": "Test creating default shifts",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string"
                    }
                },
                "required": [
                    "client"
                ]
            },
            "file": "src\\backend\\tests\\test_api.py",
            "decorator": [
                "pytest.mark.skip"
            ]
        },
        {
            "name": "test_load_all_resources",
            "description": "Test loading all resources successfully",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_availability_cls": {
                        "type": "string"
                    },
                    "mock_absence_cls": {
                        "type": "string"
                    },
                    "mock_employee_cls": {
                        "type": "string"
                    },
                    "mock_shift_cls": {
                        "type": "string"
                    },
                    "mock_coverage_cls": {
                        "type": "string"
                    },
                    "mock_settings_cls": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_availability_cls",
                    "mock_absence_cls",
                    "mock_employee_cls",
                    "mock_shift_cls",
                    "mock_coverage_cls",
                    "mock_settings_cls"
                ]
            },
            "file": "src\\backend\\tests\\test_schedule_resources.py",
            "decorator": [
                "patch",
                "patch",
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_validate_coverage_interval_perfect_match",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_time_converter": {
                        "type": "string"
                    },
                    "mock_get_needs": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_time_converter",
                    "mock_get_needs"
                ]
            },
            "file": "src\\backend\\tests\\test_schedule_validator.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_validate_coverage_interval_understaffing",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_time_converter": {
                        "type": "string"
                    },
                    "mock_get_needs": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_time_converter",
                    "mock_get_needs"
                ]
            },
            "file": "src\\backend\\tests\\test_schedule_validator.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_validate_coverage_interval_missing_keyholder",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_time_converter": {
                        "type": "string"
                    },
                    "mock_get_needs": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_time_converter",
                    "mock_get_needs"
                ]
            },
            "file": "src\\backend\\tests\\test_schedule_validator.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_validate_coverage_interval_missing_employee_type",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_time_converter": {
                        "type": "string"
                    },
                    "mock_get_needs": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_time_converter",
                    "mock_get_needs"
                ]
            },
            "file": "src\\backend\\tests\\test_schedule_validator.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_validate_coverage_interval_empty_schedule",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get_needs": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get_needs"
                ]
            },
            "file": "src\\backend\\tests\\test_schedule_validator.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_validate_coverage_interval_get_needs_exception",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_time_converter": {
                        "type": "string"
                    },
                    "mock_get_needs": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_time_converter",
                    "mock_get_needs"
                ]
            },
            "file": "src\\backend\\tests\\test_schedule_validator.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "coverage_item",
            "description": "Fixture to create a new coverage requirement for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "session": {
                        "type": "string"
                    }
                },
                "required": [
                    "session"
                ]
            },
            "file": "src\\backend\\tests\\api\\test_coverage_api.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "app",
            "description": "Create and configure a Flask app for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\tests\\api\\test_schedules_api.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "client",
            "description": "A test client for the app.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app": {
                        "type": "string"
                    }
                },
                "required": [
                    "app"
                ]
            },
            "file": "src\\backend\\tests\\api\\test_schedules_api.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "setup_db",
            "description": "Fixture to set up and tear down the database for each test function.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app": {
                        "type": "string"
                    }
                },
                "required": [
                    "app"
                ]
            },
            "file": "src\\backend\\tests\\api\\test_schedules_api.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "new_version_meta",
            "description": "Fixture to create a new ScheduleVersionMeta for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "setup_db": {
                        "type": "string"
                    }
                },
                "required": [
                    "setup_db"
                ]
            },
            "file": "src\\backend\\tests\\api\\test_schedules_api.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "app",
            "description": "Create and configure a Flask app for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\tests\\api\\test_schedule_generation_api.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "client",
            "description": "A test client for the app.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app": {
                        "type": "string"
                    }
                },
                "required": [
                    "app"
                ]
            },
            "file": "src\\backend\\tests\\api\\test_schedule_generation_api.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "runner",
            "description": "A test CLI runner for the app.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app": {
                        "type": "string"
                    }
                },
                "required": [
                    "app"
                ]
            },
            "file": "src\\backend\\tests\\api\\test_schedule_generation_api.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "setup_test_data",
            "description": "Set up test data for schedule generation tests.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app": {
                        "type": "string"
                    }
                },
                "required": [
                    "app"
                ]
            },
            "file": "src\\backend\\tests\\api\\test_schedule_generation_api.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "app",
            "description": "Create and configure a Flask app for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\tests\\api\\test_shifts_api.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "client",
            "description": "A test client for the app.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app": {
                        "type": "string"
                    }
                },
                "required": [
                    "app"
                ]
            },
            "file": "src\\backend\\tests\\api\\test_shifts_api.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "setup_db",
            "description": "Fixture to set up and tear down the database for each test function.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app": {
                        "type": "string"
                    }
                },
                "required": [
                    "app"
                ]
            },
            "file": "src\\backend\\tests\\api\\test_shifts_api.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "new_shift",
            "description": "Fixture to create a new shift template for testing.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "setup_db": {
                        "type": "string"
                    }
                },
                "required": [
                    "setup_db"
                ]
            },
            "file": "src\\backend\\tests\\api\\test_shifts_api.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "distribution_manager_fixture",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\tests\\scheduler\\test_distribution.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_update_with_assignment",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_calculate_duration_method": {
                        "type": "string"
                    },
                    "distribution_manager_fixture": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_calculate_duration_method",
                    "distribution_manager_fixture"
                ]
            },
            "file": "src\\backend\\tests\\scheduler\\test_distribution.py",
            "decorator": [
                "patch.object"
            ]
        },
        {
            "name": "test_assign_employees_by_type_successful_assignment",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "MockScheduleResources": {
                        "type": "string"
                    },
                    "MockAvailabilityChecker": {
                        "type": "string"
                    },
                    "MockConstraintChecker": {
                        "type": "string"
                    },
                    "distribution_manager_fixture": {
                        "type": "string"
                    }
                },
                "required": [
                    "MockScheduleResources",
                    "MockAvailabilityChecker",
                    "MockConstraintChecker",
                    "distribution_manager_fixture"
                ]
            },
            "file": "src\\backend\\tests\\scheduler\\test_distribution.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_assign_employees_by_type_no_available_employees",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "MockScheduleResources": {
                        "type": "string"
                    },
                    "MockAvailabilityChecker": {
                        "type": "string"
                    },
                    "MockConstraintChecker": {
                        "type": "string"
                    },
                    "distribution_manager_fixture": {
                        "type": "string"
                    }
                },
                "required": [
                    "MockScheduleResources",
                    "MockAvailabilityChecker",
                    "MockConstraintChecker",
                    "distribution_manager_fixture"
                ]
            },
            "file": "src\\backend\\tests\\scheduler\\test_distribution.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_calculate_base_score",
            "description": "Test calculation of base score for a shift",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_base_score": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_base_score"
                ]
            },
            "file": "src\\backend\\tests\\scheduler\\test_distribution_fixed.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_assignment_score_calculation",
            "description": "Test assignment score calculation",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_score": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_score"
                ]
            },
            "file": "src\\backend\\tests\\scheduler\\test_distribution_fixed.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "common_mocks",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "app": {
                        "type": "string"
                    }
                },
                "required": [
                    "app"
                ]
            },
            "file": "src\\backend\\tests\\scheduler\\test_distribution_interval.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_perform_interval_based_assignments_simple_case",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get_needs": {
                        "type": "string"
                    },
                    "common_mocks": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get_needs",
                    "common_mocks"
                ]
            },
            "file": "src\\backend\\tests\\scheduler\\test_distribution_interval.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_perform_interval_based_assignments_no_assignments_possible",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get_needs": {
                        "type": "string"
                    },
                    "common_mocks": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get_needs",
                    "common_mocks"
                ]
            },
            "file": "src\\backend\\tests\\scheduler\\test_distribution_interval.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_perform_interval_based_assignments_multiple_staff_needed_for_interval",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_get_needs": {
                        "type": "string"
                    },
                    "common_mocks": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_get_needs",
                    "common_mocks"
                ]
            },
            "file": "src\\backend\\tests\\scheduler\\test_distribution_interval.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_log_directory",
            "description": "Pytest fixture to create and cleanup the test log directory.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\tests\\scheduler\\test_logging.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "resources_fixture",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\tests\\scheduler\\test_resources.py",
            "decorator": [
                "pytest.fixture"
            ]
        },
        {
            "name": "test_load_resources_success",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_db": {
                        "type": "string"
                    },
                    "mock_Schedule": {
                        "type": "string"
                    },
                    "mock_EmployeeAvailability": {
                        "type": "string"
                    },
                    "mock_Absence": {
                        "type": "string"
                    },
                    "mock_Coverage": {
                        "type": "string"
                    },
                    "mock_ShiftTemplate": {
                        "type": "string"
                    },
                    "mock_Employee": {
                        "type": "string"
                    },
                    "mock_Settings": {
                        "type": "string"
                    },
                    "resources_fixture": {
                        "type": "string"
                    },
                    "app": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_db",
                    "mock_Schedule",
                    "mock_EmployeeAvailability",
                    "mock_Absence",
                    "mock_Coverage",
                    "mock_ShiftTemplate",
                    "mock_Employee",
                    "mock_Settings",
                    "resources_fixture",
                    "app"
                ]
            },
            "file": "src\\backend\\tests\\scheduler\\test_resources.py",
            "decorator": [
                "patch",
                "patch",
                "patch",
                "patch",
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_load_settings_creates_default",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_db": {
                        "type": "string"
                    },
                    "mock_Settings": {
                        "type": "string"
                    },
                    "resources_fixture": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_db",
                    "mock_Settings",
                    "resources_fixture"
                ]
            },
            "file": "src\\backend\\tests\\scheduler\\test_resources.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_load_employees_filters_active",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_Employee": {
                        "type": "string"
                    },
                    "resources_fixture": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_Employee",
                    "resources_fixture"
                ]
            },
            "file": "src\\backend\\tests\\scheduler\\test_resources.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_load_coverage",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_Coverage": {
                        "type": "string"
                    },
                    "resources_fixture": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_Coverage",
                    "resources_fixture"
                ]
            },
            "file": "src\\backend\\tests\\scheduler\\test_resources.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_load_shifts",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_ShiftTemplate": {
                        "type": "string"
                    },
                    "resources_fixture": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_ShiftTemplate",
                    "resources_fixture"
                ]
            },
            "file": "src\\backend\\tests\\scheduler\\test_resources.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_load_absences",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_Absence": {
                        "type": "string"
                    },
                    "resources_fixture": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_Absence",
                    "resources_fixture"
                ]
            },
            "file": "src\\backend\\tests\\scheduler\\test_resources.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_load_api_key_from_settings_success",
            "description": "Test that API key is loaded correctly when GEMINI_API_KEY is set.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_load_api_key_from_settings_failure",
            "description": "Test that None is returned and error logged if GEMINI_API_KEY is not set.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_collect_data_for_ai_prompt_success",
            "description": "Test successful data collection for the AI prompt.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    },
                    "MockAbsence": {
                        "type": "string"
                    },
                    "MockEmployeeAvailability": {
                        "type": "string"
                    },
                    "MockCoverage": {
                        "type": "string"
                    },
                    "MockShiftTemplate": {
                        "type": "string"
                    },
                    "MockEmployee": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger",
                    "MockAbsence",
                    "MockEmployeeAvailability",
                    "MockCoverage",
                    "MockShiftTemplate",
                    "MockEmployee"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch",
                "patch",
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_collect_data_for_ai_prompt_db_errors",
            "description": "Test data collection when various database queries fail.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "MockEmployee": {
                        "type": "string"
                    },
                    "MockShiftTemplate": {
                        "type": "string"
                    },
                    "MockCoverage": {
                        "type": "string"
                    },
                    "MockEmployeeAvailability": {
                        "type": "string"
                    },
                    "MockAbsence": {
                        "type": "string"
                    },
                    "mock_logger": {
                        "type": "string"
                    }
                },
                "required": [
                    "MockEmployee",
                    "MockShiftTemplate",
                    "MockCoverage",
                    "MockEmployeeAvailability",
                    "MockAbsence",
                    "mock_logger"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch",
                "patch",
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_construct_system_prompt",
            "description": "Test the construction of the system prompt for the AI.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_call_gemini_api_success",
            "description": "Test successful call to Gemini API and CSV extraction.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    },
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger",
                    "mock_post"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_call_gemini_api_http_error",
            "description": "Test Gemini API call that results in an HTTP error.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    },
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger",
                    "mock_post"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_call_gemini_api_request_exception",
            "description": "Test Gemini API call that results in a RequestException (e.g., timeout).",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    },
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger",
                    "mock_post"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_call_gemini_api_invalid_response_structure",
            "description": "Test Gemini API call with a response missing expected structure.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    },
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger",
                    "mock_post"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_call_gemini_api_empty_csv_text",
            "description": "Test Gemini API call returns success but with empty CSV text.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    },
                    "mock_post": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger",
                    "mock_post"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_call_gemini_api_no_api_key",
            "description": "Test Gemini API call when API key is not configured.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_parse_csv_response_valid_data",
            "description": "Test parsing a valid CSV response.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_parse_csv_response_empty_input",
            "description": "Test parsing an empty CSV string.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_parse_csv_response_no_header",
            "description": "Test parsing CSV with no header (effectively empty after trying to read header).",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_parse_csv_response_mismatched_header",
            "description": "Test parsing CSV with a mismatched header.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_parse_csv_response_incorrect_column_count",
            "description": "Test parsing CSV rows with incorrect number of columns.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_parse_csv_response_invalid_data_types",
            "description": "Test parsing CSV with invalid data types in rows.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_parse_csv_response_invalid_ids_and_date_range",
            "description": "Test parsing CSV with invalid IDs (<=0) and dates out of range.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_parse_csv_response_mixed_valid_invalid",
            "description": "Test parsing CSV with a mix of valid and invalid rows.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch"
            ]
        },
        {
            "name": "test_store_assignments_success",
            "description": "Test successful storage of assignments.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    },
                    "MockShiftTemplate": {
                        "type": "string"
                    },
                    "MockEmployee": {
                        "type": "string"
                    },
                    "MockSchedule": {
                        "type": "string"
                    },
                    "mock_db": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger",
                    "MockShiftTemplate",
                    "MockEmployee",
                    "MockSchedule",
                    "mock_db"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch",
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_store_assignments_no_parsed_data",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    },
                    "MockShiftTemplate": {
                        "type": "string"
                    },
                    "MockEmployee": {
                        "type": "string"
                    },
                    "MockSchedule": {
                        "type": "string"
                    },
                    "mock_db": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger",
                    "MockShiftTemplate",
                    "MockEmployee",
                    "MockSchedule",
                    "mock_db"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch",
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_store_assignments_employee_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    },
                    "MockShiftTemplate": {
                        "type": "string"
                    },
                    "MockEmployee": {
                        "type": "string"
                    },
                    "MockSchedule": {
                        "type": "string"
                    },
                    "mock_db": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger",
                    "MockShiftTemplate",
                    "MockEmployee",
                    "MockSchedule",
                    "mock_db"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch",
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_store_assignments_shifttemplate_not_found",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    },
                    "MockShiftTemplate": {
                        "type": "string"
                    },
                    "MockEmployee": {
                        "type": "string"
                    },
                    "MockSchedule": {
                        "type": "string"
                    },
                    "mock_db": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger",
                    "MockShiftTemplate",
                    "MockEmployee",
                    "MockSchedule",
                    "mock_db"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch",
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_store_assignments_delete_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    },
                    "MockSchedule": {
                        "type": "string"
                    },
                    "mock_db": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger",
                    "MockSchedule",
                    "mock_db"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "test_store_assignments_add_fails",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "mock_logger": {
                        "type": "string"
                    },
                    "MockShiftTemplate": {
                        "type": "string"
                    },
                    "MockEmployee": {
                        "type": "string"
                    },
                    "MockSchedule": {
                        "type": "string"
                    },
                    "mock_db": {
                        "type": "string"
                    }
                },
                "required": [
                    "mock_logger",
                    "MockShiftTemplate",
                    "MockEmployee",
                    "MockSchedule",
                    "mock_db"
                ]
            },
            "file": "src\\backend\\tests\\services\\test_ai_scheduler_service.py",
            "decorator": [
                "patch",
                "patch",
                "patch",
                "patch",
                "patch"
            ]
        },
        {
            "name": "run_diagnostic",
            "description": "Run diagnostic tests for the Schichtplan schedule generator.",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\tools\\debug\\flask_diagnostic.py",
            "decorator": [
                "click.command",
                "with_appcontext"
            ]
        },
        {
            "name": "cli_run_diagnostic",
            "description": "Run the schedule generator diagnostic",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\tools\\debug\\schedule_generator_diagnostic_temp.py",
            "decorator": [
                "app.cli.command",
                "click.option",
                "click.option",
                "click.option"
            ]
        },
        {
            "name": "trace_section",
            "description": "Context manager to log start/end of sections with timing",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "file": "src\\backend\\tools\\debug\\trace_scheduler_steps.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "run_migrations",
            "description": "Run database migrations using Alembic.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "upgrade": {
                        "type": "string"
                    },
                    "downgrade": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "show": {
                        "type": "string"
                    },
                    "history": {
                        "type": "string"
                    }
                },
                "required": [
                    "upgrade",
                    "downgrade",
                    "revision",
                    "show",
                    "history"
                ]
            },
            "file": "src\\backend\\tools\\migrations\\run_migration.py",
            "decorator": [
                "click.command",
                "click.option",
                "click.option",
                "click.option",
                "click.option",
                "click.option"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\utils\\ai_cache.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "session_manager",
            "description": "\n    Context manager for database sessions.\n\n    Handles session commit and rollback automatically.\n\n    Example:\n        with session_manager() as session:\n            user = User(name=\"John\")\n            session.add(user)\n            # Auto-commits if no errors, auto-rollbacks if error occurs\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\utils\\db_utils.py",
            "decorator": [
                "contextmanager"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\utils\\db_utils.py",
            "decorator": [
                "wraps"
            ]
        },
        {
            "name": "wrapper",
            "description": "",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "src\\backend\\utils\\performance_monitor.py",
            "decorator": [
                "functools.wraps"
            ]
        },
        {
            "name": "run_migrations",
            "description": "Run database migrations using Alembic.",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "upgrade": {
                        "type": "string"
                    },
                    "downgrade": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "show": {
                        "type": "string"
                    },
                    "history": {
                        "type": "string"
                    }
                },
                "required": [
                    "upgrade",
                    "downgrade",
                    "revision",
                    "show",
                    "history"
                ]
            },
            "file": "src\\instance\\tools\\migrations\\run_migration.py",
            "decorator": [
                "click.command",
                "click.option",
                "click.option",
                "click.option",
                "click.option",
                "click.option"
            ]
        }
    ]
}