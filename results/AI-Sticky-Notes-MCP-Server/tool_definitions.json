{
    "tools": [
        {
            "name": "add_note",
            "description": "\n    Append a new note to the sticky notes file.\n    Args:\n        message (str): The note to be added.\n    Returns:\n        str: Confirmation message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The note to be added."
                    },
                    "Returns": {
                        "type": "string"
                    },
                    "str": {
                        "type": "string",
                        "description": "Confirmation message."
                    }
                },
                "required": [
                    "message",
                    "Returns",
                    "str"
                ]
            },
            "file": "main.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "read_notes",
            "description": "\n    Read all notes from the sticky notes file.\n    Returns:\n        str: All notes.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "mcp.tool"
            ]
        },
        {
            "name": "get_latest_note",
            "description": "\n    Get the latest note from the sticky notes file.\n    Returns:\n        str: The latest nore, if not found, return a message.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "mcp.resource"
            ]
        },
        {
            "name": "note_summary_prompt",
            "description": "\n    Generate a prompt asking the AI to summarize all current notes.\n\n    Returns:\n        str: A prompt string that includes all notes and asks for a summary.\n             If no notes exist, a message will be shown indicating that.\n    ",
            "inputSchema": {
                "type": "object",
                "properties": {}
            },
            "file": "main.py",
            "decorator": [
                "mcp.prompt"
            ]
        }
    ]
}