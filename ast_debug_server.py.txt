module: 'import os\nimport json\nfrom http.server i'
  import_statement: 'import os'
    import: 'import'
    dotted_name: 'os'
      identifier: 'os'
  import_statement: 'import json'
    import: 'import'
    dotted_name: 'json'
      identifier: 'json'
  import_from_statement: 'from http.server import HTTPServer, Base'
    from: 'from'
    dotted_name: 'http.server'
      identifier: 'http'
      .: '.'
      identifier: 'server'
    import: 'import'
    dotted_name: 'HTTPServer'
      identifier: 'HTTPServer'
    ,: ','
    dotted_name: 'BaseHTTPRequestHandler'
      identifier: 'BaseHTTPRequestHandler'
  import_from_statement: 'from urllib.parse import parse_qs, urlpa'
    from: 'from'
    dotted_name: 'urllib.parse'
      identifier: 'urllib'
      .: '.'
      identifier: 'parse'
    import: 'import'
    dotted_name: 'parse_qs'
      identifier: 'parse_qs'
    ,: ','
    dotted_name: 'urlparse'
      identifier: 'urlparse'
  class_definition: 'class MCPServer:\n    def __init__(self, '
    class: 'class'
    identifier: 'MCPServer'
    :: ':'
    block: 'def __init__(self, name, description):\n '
      function_definition: 'def __init__(self, name, description):\n '
        def: 'def'
        identifier: '__init__'
        parameters: '(self, name, description)'
          (: '('
          identifier: 'self'
          ,: ','
          identifier: 'name'
          ,: ','
          identifier: 'description'
          ): ')'
        :: ':'
        block: 'self.name = name\n        self.descriptio'
          expression_statement: 'self.name = name'
            assignment: 'self.name = name'
              attribute: 'self.name'
                identifier: 'self'
                .: '.'
                identifier: 'name'
              =: '='
              identifier: 'name'
          expression_statement: 'self.description = description'
            assignment: 'self.description = description'
              attribute: 'self.description'
                identifier: 'self'
                .: '.'
                identifier: 'description'
              =: '='
              identifier: 'description'
          expression_statement: 'self.tools = {}'
            assignment: 'self.tools = {}'
              attribute: 'self.tools'
                identifier: 'self'
                .: '.'
                identifier: 'tools'
              =: '='
              dictionary: '{}'
                {: '{'
                }: '}'
          expression_statement: 'self.resources = {}'
            assignment: 'self.resources = {}'
              attribute: 'self.resources'
                identifier: 'self'
                .: '.'
                identifier: 'resources'
              =: '='
              dictionary: '{}'
                {: '{'
                }: '}'
          expression_statement: 'self.prompts = {}'
            assignment: 'self.prompts = {}'
              attribute: 'self.prompts'
                identifier: 'self'
                .: '.'
                identifier: 'prompts'
              =: '='
              dictionary: '{}'
                {: '{'
                }: '}'
      function_definition: 'def add_tool(self, tool_id, tool_name, t'
        def: 'def'
        identifier: 'add_tool'
        parameters: '(self, tool_id, tool_name, tool_descript'
          (: '('
          identifier: 'self'
          ,: ','
          identifier: 'tool_id'
          ,: ','
          identifier: 'tool_name'
          ,: ','
          identifier: 'tool_description'
          ,: ','
          identifier: 'tool_function'
          ): ')'
        :: ':'
        block: 'self.tools[tool_id] = {\n            "nam'
          expression_statement: 'self.tools[tool_id] = {\n            "nam'
            assignment: 'self.tools[tool_id] = {\n            "nam'
              subscript: 'self.tools[tool_id]'
                attribute: 'self.tools'
                  identifier: 'self'
                  .: '.'
                  identifier: 'tools'
                [: '['
                identifier: 'tool_id'
                ]: ']'
              =: '='
              dictionary: '{\n            "name": tool_name,\n       '
                {: '{'
                pair: '"name": tool_name'
                  string: '"name"'
                    string_start: '"'
                    string_content: 'name'
                    string_end: '"'
                  :: ':'
                  identifier: 'tool_name'
                ,: ','
                pair: '"description": tool_description'
                  string: '"description"'
                    string_start: '"'
                    string_content: 'description'
                    string_end: '"'
                  :: ':'
                  identifier: 'tool_description'
                ,: ','
                pair: '"function": tool_function'
                  string: '"function"'
                    string_start: '"'
                    string_content: 'function'
                    string_end: '"'
                  :: ':'
                  identifier: 'tool_function'
                }: '}'
      function_definition: 'def add_resource(self, resource_id, reso'
        def: 'def'
        identifier: 'add_resource'
        parameters: '(self, resource_id, resource_name, resou'
          (: '('
          identifier: 'self'
          ,: ','
          identifier: 'resource_id'
          ,: ','
          identifier: 'resource_name'
          ,: ','
          identifier: 'resource_content'
          ): ')'
        :: ':'
        block: 'self.resources[resource_id] = {\n        '
          expression_statement: 'self.resources[resource_id] = {\n        '
            assignment: 'self.resources[resource_id] = {\n        '
              subscript: 'self.resources[resource_id]'
                attribute: 'self.resources'
                  identifier: 'self'
                  .: '.'
                  identifier: 'resources'
                [: '['
                identifier: 'resource_id'
                ]: ']'
              =: '='
              dictionary: '{\n            "name": resource_name,\n   '
                {: '{'
                pair: '"name": resource_name'
                  string: '"name"'
                    string_start: '"'
                    string_content: 'name'
                    string_end: '"'
                  :: ':'
                  identifier: 'resource_name'
                ,: ','
                pair: '"content": resource_content'
                  string: '"content"'
                    string_start: '"'
                    string_content: 'content'
                    string_end: '"'
                  :: ':'
                  identifier: 'resource_content'
                }: '}'
      function_definition: 'def add_prompt(self, prompt_id, prompt_n'
        def: 'def'
        identifier: 'add_prompt'
        parameters: '(self, prompt_id, prompt_name, prompt_co'
          (: '('
          identifier: 'self'
          ,: ','
          identifier: 'prompt_id'
          ,: ','
          identifier: 'prompt_name'
          ,: ','
          identifier: 'prompt_content'
          ): ')'
        :: ':'
        block: 'self.prompts[prompt_id] = {\n            '
          expression_statement: 'self.prompts[prompt_id] = {\n            '
            assignment: 'self.prompts[prompt_id] = {\n            '
              subscript: 'self.prompts[prompt_id]'
                attribute: 'self.prompts'
                  identifier: 'self'
                  .: '.'
                  identifier: 'prompts'
                [: '['
                identifier: 'prompt_id'
                ]: ']'
              =: '='
              dictionary: '{\n            "name": prompt_name,\n     '
                {: '{'
                pair: '"name": prompt_name'
                  string: '"name"'
                    string_start: '"'
                    string_content: 'name'
                    string_end: '"'
                  :: ':'
                  identifier: 'prompt_name'
                ,: ','
                pair: '"content": prompt_content'
                  string: '"content"'
                    string_start: '"'
                    string_content: 'content'
                    string_end: '"'
                  :: ':'
                  identifier: 'prompt_content'
                }: '}'
      function_definition: 'def get_server_info(self):\n        retur'
        def: 'def'
        identifier: 'get_server_info'
        parameters: '(self)'
          (: '('
          identifier: 'self'
          ): ')'
        :: ':'
        block: 'return {\n            "name": self.name,\n'
          return_statement: 'return {\n            "name": self.name,\n'
            return: 'return'
            dictionary: '{\n            "name": self.name,\n       '
              {: '{'
              pair: '"name": self.name'
                string: '"name"'
                  string_start: '"'
                  string_content: 'name'
                  string_end: '"'
                :: ':'
                attribute: 'self.name'
                  identifier: 'self'
                  .: '.'
                  identifier: 'name'
              ,: ','
              pair: '"description": self.description'
                string: '"description"'
                  string_start: '"'
                  string_content: 'description'
                  string_end: '"'
                :: ':'
                attribute: 'self.description'
                  identifier: 'self'
                  .: '.'
                  identifier: 'description'
              ,: ','
              pair: '"features": {\n                "tools": ['
                string: '"features"'
                  string_start: '"'
                  string_content: 'features'
                  string_end: '"'
                :: ':'
                dictionary: '{\n                "tools": [{"id": tid, '
                  {: '{'
                  pair: '"tools": [{"id": tid, "name": t["name"],'
                    string: '"tools"'
                      string_start: '"'
                      string_content: 'tools'
                      string_end: '"'
                    :: ':'
                    list_comprehension: '[{"id": tid, "name": t["name"], "descrip'
                      [: '['
                      dictionary: '{"id": tid, "name": t["name"], "descript'
                        {: '{'
                        pair: '"id": tid'
                          string: '"id"'
                            string_start: '"'
                            string_content: 'id'
                            string_end: '"'
                          :: ':'
                          identifier: 'tid'
                        ,: ','
                        pair: '"name": t["name"]'
                          string: '"name"'
                            string_start: '"'
                            string_content: 'name'
                            string_end: '"'
                          :: ':'
                          subscript: 't["name"]'
                            identifier: 't'
                            [: '['
                            string: '"name"'
                              string_start: '"'
                              string_content: 'name'
                              string_end: '"'
                            ]: ']'
                        ,: ','
                        pair: '"description": t["description"]'
                          string: '"description"'
                            string_start: '"'
                            string_content: 'description'
                            string_end: '"'
                          :: ':'
                          subscript: 't["description"]'
                            identifier: 't'
                            [: '['
                            string: '"description"'
                              string_start: '"'
                              string_content: 'description'
                              string_end: '"'
                            ]: ']'
                        }: '}'
                      for_in_clause: 'for tid, t in self.tools.items()'
                        for: 'for'
                        pattern_list: 'tid, t'
                          identifier: 'tid'
                          ,: ','
                          identifier: 't'
                        in: 'in'
                        call: 'self.tools.items()'
                          attribute: 'self.tools.items'
                            attribute: 'self.tools'
                              identifier: 'self'
                              .: '.'
                              identifier: 'tools'
                            .: '.'
                            identifier: 'items'
                          argument_list: '()'
                            (: '('
                            ): ')'
                      ]: ']'
                  ,: ','
                  pair: '"resources": [{"id": rid, "name": r["nam'
                    string: '"resources"'
                      string_start: '"'
                      string_content: 'resources'
                      string_end: '"'
                    :: ':'
                    list_comprehension: '[{"id": rid, "name": r["name"]} for rid,'
                      [: '['
                      dictionary: '{"id": rid, "name": r["name"]}'
                        {: '{'
                        pair: '"id": rid'
                          string: '"id"'
                            string_start: '"'
                            string_content: 'id'
                            string_end: '"'
                          :: ':'
                          identifier: 'rid'
                        ,: ','
                        pair: '"name": r["name"]'
                          string: '"name"'
                            string_start: '"'
                            string_content: 'name'
                            string_end: '"'
                          :: ':'
                          subscript: 'r["name"]'
                            identifier: 'r'
                            [: '['
                            string: '"name"'
                              string_start: '"'
                              string_content: 'name'
                              string_end: '"'
                            ]: ']'
                        }: '}'
                      for_in_clause: 'for rid, r in self.resources.items()'
                        for: 'for'
                        pattern_list: 'rid, r'
                          identifier: 'rid'
                          ,: ','
                          identifier: 'r'
                        in: 'in'
                        call: 'self.resources.items()'
                          attribute: 'self.resources.items'
                            attribute: 'self.resources'
                              identifier: 'self'
                              .: '.'
                              identifier: 'resources'
                            .: '.'
                            identifier: 'items'
                          argument_list: '()'
                            (: '('
                            ): ')'
                      ]: ']'
                  ,: ','
                  pair: '"prompts": [{"id": pid, "name": p["name"'
                    string: '"prompts"'
                      string_start: '"'
                      string_content: 'prompts'
                      string_end: '"'
                    :: ':'
                    list_comprehension: '[{"id": pid, "name": p["name"]} for pid,'
                      [: '['
                      dictionary: '{"id": pid, "name": p["name"]}'
                        {: '{'
                        pair: '"id": pid'
                          string: '"id"'
                            string_start: '"'
                            string_content: 'id'
                            string_end: '"'
                          :: ':'
                          identifier: 'pid'
                        ,: ','
                        pair: '"name": p["name"]'
                          string: '"name"'
                            string_start: '"'
                            string_content: 'name'
                            string_end: '"'
                          :: ':'
                          subscript: 'p["name"]'
                            identifier: 'p'
                            [: '['
                            string: '"name"'
                              string_start: '"'
                              string_content: 'name'
                              string_end: '"'
                            ]: ']'
                        }: '}'
                      for_in_clause: 'for pid, p in self.prompts.items()'
                        for: 'for'
                        pattern_list: 'pid, p'
                          identifier: 'pid'
                          ,: ','
                          identifier: 'p'
                        in: 'in'
                        call: 'self.prompts.items()'
                          attribute: 'self.prompts.items'
                            attribute: 'self.prompts'
                              identifier: 'self'
                              .: '.'
                              identifier: 'prompts'
                            .: '.'
                            identifier: 'items'
                          argument_list: '()'
                            (: '('
                            ): ')'
                      ]: ']'
                  }: '}'
              }: '}'
      function_definition: 'def execute_tool(self, tool_id, params):'
        def: 'def'
        identifier: 'execute_tool'
        parameters: '(self, tool_id, params)'
          (: '('
          identifier: 'self'
          ,: ','
          identifier: 'tool_id'
          ,: ','
          identifier: 'params'
          ): ')'
        :: ':'
        block: 'if tool_id in self.tools:\n            re'
          if_statement: 'if tool_id in self.tools:\n            re'
            if: 'if'
            comparison_operator: 'tool_id in self.tools'
              identifier: 'tool_id'
              in: 'in'
              attribute: 'self.tools'
                identifier: 'self'
                .: '.'
                identifier: 'tools'
            :: ':'
            block: 'return self.tools[tool_id]["function"](p'
              return_statement: 'return self.tools[tool_id]["function"](p'
                return: 'return'
                call: 'self.tools[tool_id]["function"](params)'
                  subscript: 'self.tools[tool_id]["function"]'
                    subscript: 'self.tools[tool_id]'
                      attribute: 'self.tools'
                        identifier: 'self'
                        .: '.'
                        identifier: 'tools'
                      [: '['
                      identifier: 'tool_id'
                      ]: ']'
                    [: '['
                    string: '"function"'
                      string_start: '"'
                      string_content: 'function'
                      string_end: '"'
                    ]: ']'
                  argument_list: '(params)'
                    (: '('
                    identifier: 'params'
                    ): ')'
          return_statement: 'return {"error": f"Tool {tool_id} not fo'
            return: 'return'
            dictionary: '{"error": f"Tool {tool_id} not found"}'
              {: '{'
              pair: '"error": f"Tool {tool_id} not found"'
                string: '"error"'
                  string_start: '"'
                  string_content: 'error'
                  string_end: '"'
                :: ':'
                string: 'f"Tool {tool_id} not found"'
                  string_start: 'f"'
                  string_content: 'Tool '
                  interpolation: '{tool_id}'
                    {: '{'
                    identifier: 'tool_id'
                    }: '}'
                  string_content: ' not found'
                  string_end: '"'
              }: '}'
      function_definition: 'def get_resource(self, resource_id):\n   '
        def: 'def'
        identifier: 'get_resource'
        parameters: '(self, resource_id)'
          (: '('
          identifier: 'self'
          ,: ','
          identifier: 'resource_id'
          ): ')'
        :: ':'
        block: 'if resource_id in self.resources:\n      '
          if_statement: 'if resource_id in self.resources:\n      '
            if: 'if'
            comparison_operator: 'resource_id in self.resources'
              identifier: 'resource_id'
              in: 'in'
              attribute: 'self.resources'
                identifier: 'self'
                .: '.'
                identifier: 'resources'
            :: ':'
            block: 'return self.resources[resource_id]'
              return_statement: 'return self.resources[resource_id]'
                return: 'return'
                subscript: 'self.resources[resource_id]'
                  attribute: 'self.resources'
                    identifier: 'self'
                    .: '.'
                    identifier: 'resources'
                  [: '['
                  identifier: 'resource_id'
                  ]: ']'
          return_statement: 'return {"error": f"Resource {resource_id'
            return: 'return'
            dictionary: '{"error": f"Resource {resource_id} not f'
              {: '{'
              pair: '"error": f"Resource {resource_id} not fo'
                string: '"error"'
                  string_start: '"'
                  string_content: 'error'
                  string_end: '"'
                :: ':'
                string: 'f"Resource {resource_id} not found"'
                  string_start: 'f"'
                  string_content: 'Resource '
                  interpolation: '{resource_id}'
                    {: '{'
                    identifier: 'resource_id'
                    }: '}'
                  string_content: ' not found'
                  string_end: '"'
              }: '}'
      function_definition: 'def get_prompt(self, prompt_id):\n       '
        def: 'def'
        identifier: 'get_prompt'
        parameters: '(self, prompt_id)'
          (: '('
          identifier: 'self'
          ,: ','
          identifier: 'prompt_id'
          ): ')'
        :: ':'
        block: 'if prompt_id in self.prompts:\n          '
          if_statement: 'if prompt_id in self.prompts:\n          '
            if: 'if'
            comparison_operator: 'prompt_id in self.prompts'
              identifier: 'prompt_id'
              in: 'in'
              attribute: 'self.prompts'
                identifier: 'self'
                .: '.'
                identifier: 'prompts'
            :: ':'
            block: 'return self.prompts[prompt_id]'
              return_statement: 'return self.prompts[prompt_id]'
                return: 'return'
                subscript: 'self.prompts[prompt_id]'
                  attribute: 'self.prompts'
                    identifier: 'self'
                    .: '.'
                    identifier: 'prompts'
                  [: '['
                  identifier: 'prompt_id'
                  ]: ']'
          return_statement: 'return {"error": f"Prompt {prompt_id} no'
            return: 'return'
            dictionary: '{"error": f"Prompt {prompt_id} not found'
              {: '{'
              pair: '"error": f"Prompt {prompt_id} not found"'
                string: '"error"'
                  string_start: '"'
                  string_content: 'error'
                  string_end: '"'
                :: ':'
                string: 'f"Prompt {prompt_id} not found"'
                  string_start: 'f"'
                  string_content: 'Prompt '
                  interpolation: '{prompt_id}'
                    {: '{'
                    identifier: 'prompt_id'
                    }: '}'
                  string_content: ' not found'
                  string_end: '"'
              }: '}'
  class_definition: 'class MCPRequestHandler(BaseHTTPRequestH'
    class: 'class'
    identifier: 'MCPRequestHandler'
    argument_list: '(BaseHTTPRequestHandler)'
      (: '('
      identifier: 'BaseHTTPRequestHandler'
      ): ')'
    :: ':'
    block: 'def __init__(self, mcp_server, *args, **'
      function_definition: 'def __init__(self, mcp_server, *args, **'
        def: 'def'
        identifier: '__init__'
        parameters: '(self, mcp_server, *args, **kwargs)'
          (: '('
          identifier: 'self'
          ,: ','
          identifier: 'mcp_server'
          ,: ','
          list_splat_pattern: '*args'
            *: '*'
            identifier: 'args'
          ,: ','
          dictionary_splat_pattern: '**kwargs'
            **: '**'
            identifier: 'kwargs'
          ): ')'
        :: ':'
        block: 'self.mcp_server = mcp_server\n        sup'
          expression_statement: 'self.mcp_server = mcp_server'
            assignment: 'self.mcp_server = mcp_server'
              attribute: 'self.mcp_server'
                identifier: 'self'
                .: '.'
                identifier: 'mcp_server'
              =: '='
              identifier: 'mcp_server'
          expression_statement: 'super().__init__(*args, **kwargs)'
            call: 'super().__init__(*args, **kwargs)'
              attribute: 'super().__init__'
                call: 'super()'
                  identifier: 'super'
                  argument_list: '()'
                    (: '('
                    ): ')'
                .: '.'
                identifier: '__init__'
              argument_list: '(*args, **kwargs)'
                (: '('
                list_splat: '*args'
                  *: '*'
                  identifier: 'args'
                ,: ','
                dictionary_splat: '**kwargs'
                  **: '**'
                  identifier: 'kwargs'
                ): ')'
      function_definition: 'def _set_headers(self, content_type="app'
        def: 'def'
        identifier: '_set_headers'
        parameters: '(self, content_type="application/json")'
          (: '('
          identifier: 'self'
          ,: ','
          default_parameter: 'content_type="application/json"'
            identifier: 'content_type'
            =: '='
            string: '"application/json"'
              string_start: '"'
              string_content: 'application/json'
              string_end: '"'
          ): ')'
        :: ':'
        block: 'self.send_response(200)\n        self.sen'
          expression_statement: 'self.send_response(200)'
            call: 'self.send_response(200)'
              attribute: 'self.send_response'
                identifier: 'self'
                .: '.'
                identifier: 'send_response'
              argument_list: '(200)'
                (: '('
                integer: '200'
                ): ')'
          expression_statement: "self.send_header('Content-type', content"
            call: "self.send_header('Content-type', content"
              attribute: 'self.send_header'
                identifier: 'self'
                .: '.'
                identifier: 'send_header'
              argument_list: "('Content-type', content_type)"
                (: '('
                string: "'Content-type'"
                  string_start: "'"
                  string_content: 'Content-type'
                  string_end: "'"
                ,: ','
                identifier: 'content_type'
                ): ')'
          expression_statement: "self.send_header('Access-Control-Allow-O"
            call: "self.send_header('Access-Control-Allow-O"
              attribute: 'self.send_header'
                identifier: 'self'
                .: '.'
                identifier: 'send_header'
              argument_list: "('Access-Control-Allow-Origin', '*')"
                (: '('
                string: "'Access-Control-Allow-Origin'"
                  string_start: "'"
                  string_content: 'Access-Control-Allow-Origin'
                  string_end: "'"
                ,: ','
                string: "'*'"
                  string_start: "'"
                  string_content: '*'
                  string_end: "'"
                ): ')'
          expression_statement: 'self.end_headers()'
            call: 'self.end_headers()'
              attribute: 'self.end_headers'
                identifier: 'self'
                .: '.'
                identifier: 'end_headers'
              argument_list: '()'
                (: '('
                ): ')'
      function_definition: 'def do_GET(self):\n        parsed_url = u'
        def: 'def'
        identifier: 'do_GET'
        parameters: '(self)'
          (: '('
          identifier: 'self'
          ): ')'
        :: ':'
        block: 'parsed_url = urlparse(self.path)\n       '
          expression_statement: 'parsed_url = urlparse(self.path)'
            assignment: 'parsed_url = urlparse(self.path)'
              identifier: 'parsed_url'
              =: '='
              call: 'urlparse(self.path)'
                identifier: 'urlparse'
                argument_list: '(self.path)'
                  (: '('
                  attribute: 'self.path'
                    identifier: 'self'
                    .: '.'
                    identifier: 'path'
                  ): ')'
          expression_statement: 'path = parsed_url.path'
            assignment: 'path = parsed_url.path'
              identifier: 'path'
              =: '='
              attribute: 'parsed_url.path'
                identifier: 'parsed_url'
                .: '.'
                identifier: 'path'
          if_statement: 'if path == "/":\n            self._set_he'
            if: 'if'
            comparison_operator: 'path == "/"'
              identifier: 'path'
              ==: '=='
              string: '"/"'
                string_start: '"'
                string_content: '/'
                string_end: '"'
            :: ':'
            block: 'self._set_headers()\n            self.wfi'
              expression_statement: 'self._set_headers()'
                call: 'self._set_headers()'
                  attribute: 'self._set_headers'
                    identifier: 'self'
                    .: '.'
                    identifier: '_set_headers'
                  argument_list: '()'
                    (: '('
                    ): ')'
              expression_statement: 'self.wfile.write(json.dumps(self.mcp_ser'
                call: 'self.wfile.write(json.dumps(self.mcp_ser'
                  attribute: 'self.wfile.write'
                    attribute: 'self.wfile'
                      identifier: 'self'
                      .: '.'
                      identifier: 'wfile'
                    .: '.'
                    identifier: 'write'
                  argument_list: '(json.dumps(self.mcp_server.get_server_i'
                    (: '('
                    call: 'json.dumps(self.mcp_server.get_server_in'
                      attribute: 'json.dumps(self.mcp_server.get_server_in'
                        call: 'json.dumps(self.mcp_server.get_server_in'
                          attribute: 'json.dumps'
                            identifier: 'json'
                            .: '.'
                            identifier: 'dumps'
                          argument_list: '(self.mcp_server.get_server_info())'
                            (: '('
                            call: 'self.mcp_server.get_server_info()'
                              attribute: 'self.mcp_server.get_server_info'
                                attribute: 'self.mcp_server'
                                  identifier: 'self'
                                  .: '.'
                                  identifier: 'mcp_server'
                                .: '.'
                                identifier: 'get_server_info'
                              argument_list: '()'
                                (: '('
                                ): ')'
                            ): ')'
                        .: '.'
                        identifier: 'encode'
                      argument_list: '()'
                        (: '('
                        ): ')'
                    ): ')'
            elif_clause: 'elif path.startswith("/resource/"):\n    '
              elif: 'elif'
              call: 'path.startswith("/resource/")'
                attribute: 'path.startswith'
                  identifier: 'path'
                  .: '.'
                  identifier: 'startswith'
                argument_list: '("/resource/")'
                  (: '('
                  string: '"/resource/"'
                    string_start: '"'
                    string_content: '/resource/'
                    string_end: '"'
                  ): ')'
              :: ':'
              block: 'resource_id = path.split("/")[-1]\n      '
                expression_statement: 'resource_id = path.split("/")[-1]'
                  assignment: 'resource_id = path.split("/")[-1]'
                    identifier: 'resource_id'
                    =: '='
                    subscript: 'path.split("/")[-1]'
                      call: 'path.split("/")'
                        attribute: 'path.split'
                          identifier: 'path'
                          .: '.'
                          identifier: 'split'
                        argument_list: '("/")'
                          (: '('
                          string: '"/"'
                            string_start: '"'
                            string_content: '/'
                            string_end: '"'
                          ): ')'
                      [: '['
                      unary_operator: '-1'
                        -: '-'
                        integer: '1'
                      ]: ']'
                expression_statement: 'self._set_headers()'
                  call: 'self._set_headers()'
                    attribute: 'self._set_headers'
                      identifier: 'self'
                      .: '.'
                      identifier: '_set_headers'
                    argument_list: '()'
                      (: '('
                      ): ')'
                expression_statement: 'self.wfile.write(json.dumps(self.mcp_ser'
                  call: 'self.wfile.write(json.dumps(self.mcp_ser'
                    attribute: 'self.wfile.write'
                      attribute: 'self.wfile'
                        identifier: 'self'
                        .: '.'
                        identifier: 'wfile'
                      .: '.'
                      identifier: 'write'
                    argument_list: '(json.dumps(self.mcp_server.get_resource'
                      (: '('
                      call: 'json.dumps(self.mcp_server.get_resource('
                        attribute: 'json.dumps(self.mcp_server.get_resource('
                          call: 'json.dumps(self.mcp_server.get_resource('
                            attribute: 'json.dumps'
                              identifier: 'json'
                              .: '.'
                              identifier: 'dumps'
                            argument_list: '(self.mcp_server.get_resource(resource_i'
                              (: '('
                              call: 'self.mcp_server.get_resource(resource_id'
                                attribute: 'self.mcp_server.get_resource'
                                  attribute: 'self.mcp_server'
                                    identifier: 'self'
                                    .: '.'
                                    identifier: 'mcp_server'
                                  .: '.'
                                  identifier: 'get_resource'
                                argument_list: '(resource_id)'
                                  (: '('
                                  identifier: 'resource_id'
                                  ): ')'
                              ): ')'
                          .: '.'
                          identifier: 'encode'
                        argument_list: '()'
                          (: '('
                          ): ')'
                      ): ')'
            elif_clause: 'elif path.startswith("/prompt/"):\n      '
              elif: 'elif'
              call: 'path.startswith("/prompt/")'
                attribute: 'path.startswith'
                  identifier: 'path'
                  .: '.'
                  identifier: 'startswith'
                argument_list: '("/prompt/")'
                  (: '('
                  string: '"/prompt/"'
                    string_start: '"'
                    string_content: '/prompt/'
                    string_end: '"'
                  ): ')'
              :: ':'
              block: 'prompt_id = path.split("/")[-1]\n        '
                expression_statement: 'prompt_id = path.split("/")[-1]'
                  assignment: 'prompt_id = path.split("/")[-1]'
                    identifier: 'prompt_id'
                    =: '='
                    subscript: 'path.split("/")[-1]'
                      call: 'path.split("/")'
                        attribute: 'path.split'
                          identifier: 'path'
                          .: '.'
                          identifier: 'split'
                        argument_list: '("/")'
                          (: '('
                          string: '"/"'
                            string_start: '"'
                            string_content: '/'
                            string_end: '"'
                          ): ')'
                      [: '['
                      unary_operator: '-1'
                        -: '-'
                        integer: '1'
                      ]: ']'
                expression_statement: 'self._set_headers()'
                  call: 'self._set_headers()'
                    attribute: 'self._set_headers'
                      identifier: 'self'
                      .: '.'
                      identifier: '_set_headers'
                    argument_list: '()'
                      (: '('
                      ): ')'
                expression_statement: 'self.wfile.write(json.dumps(self.mcp_ser'
                  call: 'self.wfile.write(json.dumps(self.mcp_ser'
                    attribute: 'self.wfile.write'
                      attribute: 'self.wfile'
                        identifier: 'self'
                        .: '.'
                        identifier: 'wfile'
                      .: '.'
                      identifier: 'write'
                    argument_list: '(json.dumps(self.mcp_server.get_prompt(p'
                      (: '('
                      call: 'json.dumps(self.mcp_server.get_prompt(pr'
                        attribute: 'json.dumps(self.mcp_server.get_prompt(pr'
                          call: 'json.dumps(self.mcp_server.get_prompt(pr'
                            attribute: 'json.dumps'
                              identifier: 'json'
                              .: '.'
                              identifier: 'dumps'
                            argument_list: '(self.mcp_server.get_prompt(prompt_id))'
                              (: '('
                              call: 'self.mcp_server.get_prompt(prompt_id)'
                                attribute: 'self.mcp_server.get_prompt'
                                  attribute: 'self.mcp_server'
                                    identifier: 'self'
                                    .: '.'
                                    identifier: 'mcp_server'
                                  .: '.'
                                  identifier: 'get_prompt'
                                argument_list: '(prompt_id)'
                                  (: '('
                                  identifier: 'prompt_id'
                                  ): ')'
                              ): ')'
                          .: '.'
                          identifier: 'encode'
                        argument_list: '()'
                          (: '('
                          ): ')'
                      ): ')'
            else_clause: 'else:\n            self.send_response(404'
              else: 'else'
              :: ':'
              block: 'self.send_response(404)\n            self'
                expression_statement: 'self.send_response(404)'
                  call: 'self.send_response(404)'
                    attribute: 'self.send_response'
                      identifier: 'self'
                      .: '.'
                      identifier: 'send_response'
                    argument_list: '(404)'
                      (: '('
                      integer: '404'
                      ): ')'
                expression_statement: 'self.end_headers()'
                  call: 'self.end_headers()'
                    attribute: 'self.end_headers'
                      identifier: 'self'
                      .: '.'
                      identifier: 'end_headers'
                    argument_list: '()'
                      (: '('
                      ): ')'
      function_definition: 'def do_POST(self):\n        content_lengt'
        def: 'def'
        identifier: 'do_POST'
        parameters: '(self)'
          (: '('
          identifier: 'self'
          ): ')'
        :: ':'
        block: "content_length = int(self.headers['Conte"
          expression_statement: "content_length = int(self.headers['Conte"
            assignment: "content_length = int(self.headers['Conte"
              identifier: 'content_length'
              =: '='
              call: "int(self.headers['Content-Length'])"
                identifier: 'int'
                argument_list: "(self.headers['Content-Length'])"
                  (: '('
                  subscript: "self.headers['Content-Length']"
                    attribute: 'self.headers'
                      identifier: 'self'
                      .: '.'
                      identifier: 'headers'
                    [: '['
                    string: "'Content-Length'"
                      string_start: "'"
                      string_content: 'Content-Length'
                      string_end: "'"
                    ]: ']'
                  ): ')'
          expression_statement: 'post_data = self.rfile.read(content_leng'
            assignment: 'post_data = self.rfile.read(content_leng'
              identifier: 'post_data'
              =: '='
              call: 'self.rfile.read(content_length)'
                attribute: 'self.rfile.read'
                  attribute: 'self.rfile'
                    identifier: 'self'
                    .: '.'
                    identifier: 'rfile'
                  .: '.'
                  identifier: 'read'
                argument_list: '(content_length)'
                  (: '('
                  identifier: 'content_length'
                  ): ')'
          try_statement: 'try:\n            data = json.loads(post_'
            try: 'try'
            :: ':'
            block: 'data = json.loads(post_data.decode())\n  '
              expression_statement: 'data = json.loads(post_data.decode())'
                assignment: 'data = json.loads(post_data.decode())'
                  identifier: 'data'
                  =: '='
                  call: 'json.loads(post_data.decode())'
                    attribute: 'json.loads'
                      identifier: 'json'
                      .: '.'
                      identifier: 'loads'
                    argument_list: '(post_data.decode())'
                      (: '('
                      call: 'post_data.decode()'
                        attribute: 'post_data.decode'
                          identifier: 'post_data'
                          .: '.'
                          identifier: 'decode'
                        argument_list: '()'
                          (: '('
                          ): ')'
                      ): ')'
              if_statement: 'if self.path.startswith("/tool/"):\n     '
                if: 'if'
                call: 'self.path.startswith("/tool/")'
                  attribute: 'self.path.startswith'
                    attribute: 'self.path'
                      identifier: 'self'
                      .: '.'
                      identifier: 'path'
                    .: '.'
                    identifier: 'startswith'
                  argument_list: '("/tool/")'
                    (: '('
                    string: '"/tool/"'
                      string_start: '"'
                      string_content: '/tool/'
                      string_end: '"'
                    ): ')'
                :: ':'
                block: 'tool_id = self.path.split("/")[-1]\n     '
                  expression_statement: 'tool_id = self.path.split("/")[-1]'
                    assignment: 'tool_id = self.path.split("/")[-1]'
                      identifier: 'tool_id'
                      =: '='
                      subscript: 'self.path.split("/")[-1]'
                        call: 'self.path.split("/")'
                          attribute: 'self.path.split'
                            attribute: 'self.path'
                              identifier: 'self'
                              .: '.'
                              identifier: 'path'
                            .: '.'
                            identifier: 'split'
                          argument_list: '("/")'
                            (: '('
                            string: '"/"'
                              string_start: '"'
                              string_content: '/'
                              string_end: '"'
                            ): ')'
                        [: '['
                        unary_operator: '-1'
                          -: '-'
                          integer: '1'
                        ]: ']'
                  expression_statement: 'result = self.mcp_server.execute_tool(to'
                    assignment: 'result = self.mcp_server.execute_tool(to'
                      identifier: 'result'
                      =: '='
                      call: 'self.mcp_server.execute_tool(tool_id, da'
                        attribute: 'self.mcp_server.execute_tool'
                          attribute: 'self.mcp_server'
                            identifier: 'self'
                            .: '.'
                            identifier: 'mcp_server'
                          .: '.'
                          identifier: 'execute_tool'
                        argument_list: '(tool_id, data.get("params", {}))'
                          (: '('
                          identifier: 'tool_id'
                          ,: ','
                          call: 'data.get("params", {})'
                            attribute: 'data.get'
                              identifier: 'data'
                              .: '.'
                              identifier: 'get'
                            argument_list: '("params", {})'
                              (: '('
                              string: '"params"'
                                string_start: '"'
                                string_content: 'params'
                                string_end: '"'
                              ,: ','
                              dictionary: '{}'
                                {: '{'
                                }: '}'
                              ): ')'
                          ): ')'
                  expression_statement: 'self._set_headers()'
                    call: 'self._set_headers()'
                      attribute: 'self._set_headers'
                        identifier: 'self'
                        .: '.'
                        identifier: '_set_headers'
                      argument_list: '()'
                        (: '('
                        ): ')'
                  expression_statement: 'self.wfile.write(json.dumps(result).enco'
                    call: 'self.wfile.write(json.dumps(result).enco'
                      attribute: 'self.wfile.write'
                        attribute: 'self.wfile'
                          identifier: 'self'
                          .: '.'
                          identifier: 'wfile'
                        .: '.'
                        identifier: 'write'
                      argument_list: '(json.dumps(result).encode())'
                        (: '('
                        call: 'json.dumps(result).encode()'
                          attribute: 'json.dumps(result).encode'
                            call: 'json.dumps(result)'
                              attribute: 'json.dumps'
                                identifier: 'json'
                                .: '.'
                                identifier: 'dumps'
                              argument_list: '(result)'
                                (: '('
                                identifier: 'result'
                                ): ')'
                            .: '.'
                            identifier: 'encode'
                          argument_list: '()'
                            (: '('
                            ): ')'
                        ): ')'
                else_clause: 'else:\n                self.send_response'
                  else: 'else'
                  :: ':'
                  block: 'self.send_response(404)\n                '
                    expression_statement: 'self.send_response(404)'
                      call: 'self.send_response(404)'
                        attribute: 'self.send_response'
                          identifier: 'self'
                          .: '.'
                          identifier: 'send_response'
                        argument_list: '(404)'
                          (: '('
                          integer: '404'
                          ): ')'
                    expression_statement: 'self.end_headers()'
                      call: 'self.end_headers()'
                        attribute: 'self.end_headers'
                          identifier: 'self'
                          .: '.'
                          identifier: 'end_headers'
                        argument_list: '()'
                          (: '('
                          ): ')'
            except_clause: 'except json.JSONDecodeError:\n           '
              except: 'except'
              attribute: 'json.JSONDecodeError'
                identifier: 'json'
                .: '.'
                identifier: 'JSONDecodeError'
              :: ':'
              block: 'self.send_response(400)\n            self'
                expression_statement: 'self.send_response(400)'
                  call: 'self.send_response(400)'
                    attribute: 'self.send_response'
                      identifier: 'self'
                      .: '.'
                      identifier: 'send_response'
                    argument_list: '(400)'
                      (: '('
                      integer: '400'
                      ): ')'
                expression_statement: 'self.end_headers()'
                  call: 'self.end_headers()'
                    attribute: 'self.end_headers'
                      identifier: 'self'
                      .: '.'
                      identifier: 'end_headers'
                    argument_list: '()'
                      (: '('
                      ): ')'
                expression_statement: 'self.wfile.write(json.dumps({"error": "I'
                  call: 'self.wfile.write(json.dumps({"error": "I'
                    attribute: 'self.wfile.write'
                      attribute: 'self.wfile'
                        identifier: 'self'
                        .: '.'
                        identifier: 'wfile'
                      .: '.'
                      identifier: 'write'
                    argument_list: '(json.dumps({"error": "Invalid JSON"}).e'
                      (: '('
                      call: 'json.dumps({"error": "Invalid JSON"}).en'
                        attribute: 'json.dumps({"error": "Invalid JSON"}).en'
                          call: 'json.dumps({"error": "Invalid JSON"})'
                            attribute: 'json.dumps'
                              identifier: 'json'
                              .: '.'
                              identifier: 'dumps'
                            argument_list: '({"error": "Invalid JSON"})'
                              (: '('
                              dictionary: '{"error": "Invalid JSON"}'
                                {: '{'
                                pair: '"error": "Invalid JSON"'
                                  string: '"error"'
                                    string_start: '"'
                                    string_content: 'error'
                                    string_end: '"'
                                  :: ':'
                                  string: '"Invalid JSON"'
                                    string_start: '"'
                                    string_content: 'Invalid JSON'
                                    string_end: '"'
                                }: '}'
                              ): ')'
                          .: '.'
                          identifier: 'encode'
                        argument_list: '()'
                          (: '('
                          ): ')'
                      ): ')'
  function_definition: 'def create_server(mcp_server, host="loca'
    def: 'def'
    identifier: 'create_server'
    parameters: '(mcp_server, host="localhost", port=8000'
      (: '('
      identifier: 'mcp_server'
      ,: ','
      default_parameter: 'host="localhost"'
        identifier: 'host'
        =: '='
        string: '"localhost"'
          string_start: '"'
          string_content: 'localhost'
          string_end: '"'
      ,: ','
      default_parameter: 'port=8000'
        identifier: 'port'
        =: '='
        integer: '8000'
      ): ')'
    :: ':'
    block: 'def handler(*args, **kwargs):\n        MC'
      function_definition: 'def handler(*args, **kwargs):\n        MC'
        def: 'def'
        identifier: 'handler'
        parameters: '(*args, **kwargs)'
          (: '('
          list_splat_pattern: '*args'
            *: '*'
            identifier: 'args'
          ,: ','
          dictionary_splat_pattern: '**kwargs'
            **: '**'
            identifier: 'kwargs'
          ): ')'
        :: ':'
        block: 'MCPRequestHandler(mcp_server, *args, **k'
          expression_statement: 'MCPRequestHandler(mcp_server, *args, **k'
            call: 'MCPRequestHandler(mcp_server, *args, **k'
              identifier: 'MCPRequestHandler'
              argument_list: '(mcp_server, *args, **kwargs)'
                (: '('
                identifier: 'mcp_server'
                ,: ','
                list_splat: '*args'
                  *: '*'
                  identifier: 'args'
                ,: ','
                dictionary_splat: '**kwargs'
                  **: '**'
                  identifier: 'kwargs'
                ): ')'
      expression_statement: 'server = HTTPServer((host, port), handle'
        assignment: 'server = HTTPServer((host, port), handle'
          identifier: 'server'
          =: '='
          call: 'HTTPServer((host, port), handler)'
            identifier: 'HTTPServer'
            argument_list: '((host, port), handler)'
              (: '('
              tuple: '(host, port)'
                (: '('
                identifier: 'host'
                ,: ','
                identifier: 'port'
                ): ')'
              ,: ','
              identifier: 'handler'
              ): ')'
      expression_statement: 'print(f"Starting MCP server on {host}:{p'
        call: 'print(f"Starting MCP server on {host}:{p'
          identifier: 'print'
          argument_list: '(f"Starting MCP server on {host}:{port}"'
            (: '('
            string: 'f"Starting MCP server on {host}:{port}"'
              string_start: 'f"'
              string_content: 'Starting MCP server on '
              interpolation: '{host}'
                {: '{'
                identifier: 'host'
                }: '}'
              string_content: ':'
              interpolation: '{port}'
                {: '{'
                identifier: 'port'
                }: '}'
              string_end: '"'
            ): ')'
      expression_statement: 'server.serve_forever()'
        call: 'server.serve_forever()'
          attribute: 'server.serve_forever'
            identifier: 'server'
            .: '.'
            identifier: 'serve_forever'
          argument_list: '()'
            (: '('
            ): ')'
