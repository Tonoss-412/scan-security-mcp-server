module: 'from mcp.server.fastmcp import FastMCP, '
  import_from_statement: 'from mcp.server.fastmcp import FastMCP, '
    from: 'from'
    dotted_name: 'mcp.server.fastmcp'
      identifier: 'mcp'
      .: '.'
      identifier: 'server'
      .: '.'
      identifier: 'fastmcp'
    import: 'import'
    dotted_name: 'FastMCP'
      identifier: 'FastMCP'
    ,: ','
    dotted_name: 'Context'
      identifier: 'Context'
  import_from_statement: 'from mcp.server.sse import SseServerTran'
    from: 'from'
    dotted_name: 'mcp.server.sse'
      identifier: 'mcp'
      .: '.'
      identifier: 'server'
      .: '.'
      identifier: 'sse'
    import: 'import'
    dotted_name: 'SseServerTransport'
      identifier: 'SseServerTransport'
  import_from_statement: 'from starlette.applications import Starl'
    from: 'from'
    dotted_name: 'starlette.applications'
      identifier: 'starlette'
      .: '.'
      identifier: 'applications'
    import: 'import'
    dotted_name: 'Starlette'
      identifier: 'Starlette'
  import_from_statement: 'from starlette.routing import Mount, Rou'
    from: 'from'
    dotted_name: 'starlette.routing'
      identifier: 'starlette'
      .: '.'
      identifier: 'routing'
    import: 'import'
    dotted_name: 'Mount'
      identifier: 'Mount'
    ,: ','
    dotted_name: 'Route'
      identifier: 'Route'
  import_from_statement: 'from fastapi import FastAPI'
    from: 'from'
    dotted_name: 'fastapi'
      identifier: 'fastapi'
    import: 'import'
    dotted_name: 'FastAPI'
      identifier: 'FastAPI'
  comment: '# Create a vulnerable MCP server for Cha'
  class_definition: 'class Challenge7Server:\n    def __init__'
    class: 'class'
    identifier: 'Challenge7Server'
    :: ':'
    block: 'def __init__(self):\n        self.name = '
      function_definition: 'def __init__(self):\n        self.name = '
        def: 'def'
        identifier: '__init__'
        parameters: '(self)'
          (: '('
          identifier: 'self'
          ): ')'
        :: ':'
        block: 'self.name = "Challenge 7 - Token Theft"\n'
          expression_statement: 'self.name = "Challenge 7 - Token Theft"'
            assignment: 'self.name = "Challenge 7 - Token Theft"'
              attribute: 'self.name'
                identifier: 'self'
                .: '.'
                identifier: 'name'
              =: '='
              string: '"Challenge 7 - Token Theft"'
                string_start: '"'
                string_content: 'Challenge 7 - Token Theft'
                string_end: '"'
          expression_statement: 'self.port = 9007'
            assignment: 'self.port = 9007'
              attribute: 'self.port'
                identifier: 'self'
                .: '.'
                identifier: 'port'
              =: '='
              integer: '9007'
          comment: '# Changed from 8007 to avoid conflicts'
          expression_statement: 'self.mcp = FastMCP(self.name)'
            assignment: 'self.mcp = FastMCP(self.name)'
              attribute: 'self.mcp'
                identifier: 'self'
                .: '.'
                identifier: 'mcp'
              =: '='
              call: 'FastMCP(self.name)'
                identifier: 'FastMCP'
                argument_list: '(self.name)'
                  (: '('
                  attribute: 'self.name'
                    identifier: 'self'
                    .: '.'
                    identifier: 'name'
                  ): ')'
          expression_statement: 'self.app = FastAPI()'
            assignment: 'self.app = FastAPI()'
              attribute: 'self.app'
                identifier: 'self'
                .: '.'
                identifier: 'app'
              =: '='
              call: 'FastAPI()'
                identifier: 'FastAPI'
                argument_list: '()'
                  (: '('
                  ): ')'
          comment: '# Add a tool that simulates an authentic'
          decorated_definition: '@self.mcp.tool()\n        def authenticat'
            decorator: '@self.mcp.tool()'
              @: '@'
              call: 'self.mcp.tool()'
                attribute: 'self.mcp.tool'
                  attribute: 'self.mcp'
                    identifier: 'self'
                    .: '.'
                    identifier: 'mcp'
                  .: '.'
                  identifier: 'tool'
                argument_list: '()'
                  (: '('
                  ): ')'
            function_definition: 'def authenticate(username: str, password'
              def: 'def'
              identifier: 'authenticate'
              parameters: '(username: str, password: str)'
                (: '('
                typed_parameter: 'username: str'
                  identifier: 'username'
                  :: ':'
                  type: 'str'
                    identifier: 'str'
                ,: ','
                typed_parameter: 'password: str'
                  identifier: 'password'
                  :: ':'
                  type: 'str'
                    identifier: 'str'
                ): ')'
              ->: '->'
              type: 'str'
                identifier: 'str'
              :: ':'
              block: '"""Authenticate a user and return a sess'
                expression_statement: '"""Authenticate a user and return a sess'
                  string: '"""Authenticate a user and return a sess'
                    string_start: '"""'
                    string_content: 'Authenticate a user and return a session'
                    string_end: '"""'
                comment: '# Simple user database with credentials'
                expression_statement: 'users = {\n                "user1": "pass'
                  assignment: 'users = {\n                "user1": "pass'
                    identifier: 'users'
                    =: '='
                    dictionary: '{\n                "user1": "password123"'
                      {: '{'
                      pair: '"user1": "password123"'
                        string: '"user1"'
                          string_start: '"'
                          string_content: 'user1'
                          string_end: '"'
                        :: ':'
                        string: '"password123"'
                          string_start: '"'
                          string_content: 'password123'
                          string_end: '"'
                      ,: ','
                      pair: '"user2": "qwerty456"'
                        string: '"user2"'
                          string_start: '"'
                          string_content: 'user2'
                          string_end: '"'
                        :: ':'
                        string: '"qwerty456"'
                          string_start: '"'
                          string_content: 'qwerty456'
                          string_end: '"'
                      ,: ','
                      pair: '"admin": "admin_secure_pwd!"'
                        string: '"admin"'
                          string_start: '"'
                          string_content: 'admin'
                          string_end: '"'
                        :: ':'
                        string: '"admin_secure_pwd!"'
                          string_start: '"'
                          string_content: 'admin_secure_pwd!'
                          string_end: '"'
                      }: '}'
                comment: '# Check if credentials are valid'
                if_statement: 'if username in users and users[username]'
                  if: 'if'
                  boolean_operator: 'username in users and users[username] =='
                    comparison_operator: 'username in users'
                      identifier: 'username'
                      in: 'in'
                      identifier: 'users'
                    and: 'and'
                    comparison_operator: 'users[username] == password'
                      subscript: 'users[username]'
                        identifier: 'users'
                        [: '['
                        identifier: 'username'
                        ]: ']'
                      ==: '=='
                      identifier: 'password'
                  :: ':'
                  comment: '# Vulnerable: generating predictable tok'
                  block: 'import hashlib\n                import ti'
                    import_statement: 'import hashlib'
                      import: 'import'
                      dotted_name: 'hashlib'
                        identifier: 'hashlib'
                    import_statement: 'import time'
                      import: 'import'
                      dotted_name: 'time'
                        identifier: 'time'
                    comment: '# Generate a session token (vulnerable i'
                    expression_statement: 'timestamp = int(time.time())'
                      assignment: 'timestamp = int(time.time())'
                        identifier: 'timestamp'
                        =: '='
                        call: 'int(time.time())'
                          identifier: 'int'
                          argument_list: '(time.time())'
                            (: '('
                            call: 'time.time()'
                              attribute: 'time.time'
                                identifier: 'time'
                                .: '.'
                                identifier: 'time'
                              argument_list: '()'
                                (: '('
                                ): ')'
                            ): ')'
                    expression_statement: 'token_data = f"{username}:{timestamp}"'
                      assignment: 'token_data = f"{username}:{timestamp}"'
                        identifier: 'token_data'
                        =: '='
                        string: 'f"{username}:{timestamp}"'
                          string_start: 'f"'
                          interpolation: '{username}'
                            {: '{'
                            identifier: 'username'
                            }: '}'
                          string_content: ':'
                          interpolation: '{timestamp}'
                            {: '{'
                            identifier: 'timestamp'
                            }: '}'
                          string_end: '"'
                    expression_statement: 'token = hashlib.md5(token_data.encode())'
                      assignment: 'token = hashlib.md5(token_data.encode())'
                        identifier: 'token'
                        =: '='
                        call: 'hashlib.md5(token_data.encode()).hexdige'
                          attribute: 'hashlib.md5(token_data.encode()).hexdige'
                            call: 'hashlib.md5(token_data.encode())'
                              attribute: 'hashlib.md5'
                                identifier: 'hashlib'
                                .: '.'
                                identifier: 'md5'
                              argument_list: '(token_data.encode())'
                                (: '('
                                call: 'token_data.encode()'
                                  attribute: 'token_data.encode'
                                    identifier: 'token_data'
                                    .: '.'
                                    identifier: 'encode'
                                  argument_list: '()'
                                    (: '('
                                    ): ')'
                                ): ')'
                            .: '.'
                            identifier: 'hexdigest'
                          argument_list: '()'
                            (: '('
                            ): ')'
                    return_statement: 'return f"Authentication successful! Your'
                      return: 'return'
                      string: 'f"Authentication successful! Your sessio'
                        string_start: 'f"'
                        string_content: 'Authentication successful! Your session '
                        interpolation: '{token}'
                          {: '{'
                          identifier: 'token'
                          }: '}'
                        string_end: '"'
                  else_clause: 'else:\n                return "Authentica'
                    else: 'else'
                    :: ':'
                    block: 'return "Authentication failed: Invalid u'
                      return_statement: 'return "Authentication failed: Invalid u'
                        return: 'return'
                        string: '"Authentication failed: Invalid username'
                          string_start: '"'
                          string_content: 'Authentication failed: Invalid username '
                          string_end: '"'
          comment: '# Add a tool that checks token validity'
          decorated_definition: '@self.mcp.tool()\n        def verify_toke'
            decorator: '@self.mcp.tool()'
              @: '@'
              call: 'self.mcp.tool()'
                attribute: 'self.mcp.tool'
                  attribute: 'self.mcp'
                    identifier: 'self'
                    .: '.'
                    identifier: 'mcp'
                  .: '.'
                  identifier: 'tool'
                argument_list: '()'
                  (: '('
                  ): ')'
            function_definition: 'def verify_token(token: str) -> str:\n   '
              def: 'def'
              identifier: 'verify_token'
              parameters: '(token: str)'
                (: '('
                typed_parameter: 'token: str'
                  identifier: 'token'
                  :: ':'
                  type: 'str'
                    identifier: 'str'
                ): ')'
              ->: '->'
              type: 'str'
                identifier: 'str'
              :: ':'
              block: '"""Verify if a session token is valid\n  '
                expression_statement: '"""Verify if a session token is valid\n  '
                  string: '"""Verify if a session token is valid\n  '
                    string_start: '"""'
                    string_content: 'Verify if a session token is valid\n     '
                    string_end: '"""'
                comment: "# Vulnerable: token verification doesn't"
                comment: "# It only checks if it's in the correct "
                import_statement: 'import re'
                  import: 'import'
                  dotted_name: 're'
                    identifier: 're'
                comment: '# Check if token matches MD5 format'
                if_statement: "if re.match(r'^[0-9a-f]{32}$', token):\n "
                  if: 'if'
                  call: "re.match(r'^[0-9a-f]{32}$', token)"
                    attribute: 're.match'
                      identifier: 're'
                      .: '.'
                      identifier: 'match'
                    argument_list: "(r'^[0-9a-f]{32}$', token)"
                      (: '('
                      string: "r'^[0-9a-f]{32}$'"
                        string_start: "r'"
                        string_content: '^[0-9a-f]{32}$'
                        string_end: "'"
                      ,: ','
                      identifier: 'token'
                      ): ')'
                  :: ':'
                  block: 'return f"Token {token} appears to be val'
                    return_statement: 'return f"Token {token} appears to be val'
                      return: 'return'
                      string: 'f"Token {token} appears to be valid"'
                        string_start: 'f"'
                        string_content: 'Token '
                        interpolation: '{token}'
                          {: '{'
                          identifier: 'token'
                          }: '}'
                        string_content: ' appears to be valid'
                        string_end: '"'
                  else_clause: 'else:\n                return f"Token {to'
                    else: 'else'
                    :: ':'
                    block: 'return f"Token {token} is invalid (incor'
                      return_statement: 'return f"Token {token} is invalid (incor'
                        return: 'return'
                        string: 'f"Token {token} is invalid (incorrect fo'
                          string_start: 'f"'
                          string_content: 'Token '
                          interpolation: '{token}'
                            {: '{'
                            identifier: 'token'
                            }: '}'
                          string_content: ' is invalid (incorrect format)'
                          string_end: '"'
          comment: '# Mount the SSE server'
          expression_statement: 'self.mount_sse_server()'
            call: 'self.mount_sse_server()'
              attribute: 'self.mount_sse_server'
                identifier: 'self'
                .: '.'
                identifier: 'mount_sse_server'
              argument_list: '()'
                (: '('
                ): ')'
      function_definition: 'def mount_sse_server(self):\n        """M'
        def: 'def'
        identifier: 'mount_sse_server'
        parameters: '(self)'
          (: '('
          identifier: 'self'
          ): ')'
        :: ':'
        block: '"""Mount the SSE server to the FastAPI a'
          expression_statement: '"""Mount the SSE server to the FastAPI a'
            string: '"""Mount the SSE server to the FastAPI a'
              string_start: '"""'
              string_content: 'Mount the SSE server to the FastAPI app'
              string_end: '"""'
          expression_statement: 'self.app.mount("/", self.create_sse_serv'
            call: 'self.app.mount("/", self.create_sse_serv'
              attribute: 'self.app.mount'
                attribute: 'self.app'
                  identifier: 'self'
                  .: '.'
                  identifier: 'app'
                .: '.'
                identifier: 'mount'
              argument_list: '("/", self.create_sse_server())'
                (: '('
                string: '"/"'
                  string_start: '"'
                  string_content: '/'
                  string_end: '"'
                ,: ','
                call: 'self.create_sse_server()'
                  attribute: 'self.create_sse_server'
                    identifier: 'self'
                    .: '.'
                    identifier: 'create_sse_server'
                  argument_list: '()'
                    (: '('
                    ): ')'
                ): ')'
      function_definition: 'def create_sse_server(self):\n        """'
        def: 'def'
        identifier: 'create_sse_server'
        parameters: '(self)'
          (: '('
          identifier: 'self'
          ): ')'
        :: ':'
        block: '"""Create a Starlette app that handles S'
          expression_statement: '"""Create a Starlette app that handles S'
            string: '"""Create a Starlette app that handles S'
              string_start: '"""'
              string_content: 'Create a Starlette app that handles SSE '
              string_end: '"""'
          expression_statement: 'transport = SseServerTransport("/message'
            assignment: 'transport = SseServerTransport("/message'
              identifier: 'transport'
              =: '='
              call: 'SseServerTransport("/messages/")'
                identifier: 'SseServerTransport'
                argument_list: '("/messages/")'
                  (: '('
                  string: '"/messages/"'
                    string_start: '"'
                    string_content: '/messages/'
                    string_end: '"'
                  ): ')'
          comment: '# Define handler functions'
          function_definition: 'async def handle_sse(request):\n         '
            async: 'async'
            def: 'def'
            identifier: 'handle_sse'
            parameters: '(request)'
              (: '('
              identifier: 'request'
              ): ')'
            :: ':'
            block: 'async with transport.connect_sse(\n      '
              with_statement: 'async with transport.connect_sse(\n      '
                async: 'async'
                with: 'with'
                with_clause: 'transport.connect_sse(\n                r'
                  with_item: 'transport.connect_sse(\n                r'
                    as_pattern: 'transport.connect_sse(\n                r'
                      call: 'transport.connect_sse(\n                r'
                        attribute: 'transport.connect_sse'
                          identifier: 'transport'
                          .: '.'
                          identifier: 'connect_sse'
                        argument_list: '(\n                request.scope, request'
                          (: '('
                          attribute: 'request.scope'
                            identifier: 'request'
                            .: '.'
                            identifier: 'scope'
                          ,: ','
                          attribute: 'request.receive'
                            identifier: 'request'
                            .: '.'
                            identifier: 'receive'
                          ,: ','
                          attribute: 'request._send'
                            identifier: 'request'
                            .: '.'
                            identifier: '_send'
                          ): ')'
                      as: 'as'
                      as_pattern_target: 'streams'
                        identifier: 'streams'
                :: ':'
                block: 'await self.mcp._mcp_server.run(\n        '
                  expression_statement: 'await self.mcp._mcp_server.run(\n        '
                    await: 'await self.mcp._mcp_server.run(\n        '
                      await: 'await'
                      call: 'self.mcp._mcp_server.run(\n              '
                        attribute: 'self.mcp._mcp_server.run'
                          attribute: 'self.mcp._mcp_server'
                            attribute: 'self.mcp'
                              identifier: 'self'
                              .: '.'
                              identifier: 'mcp'
                            .: '.'
                            identifier: '_mcp_server'
                          .: '.'
                          identifier: 'run'
                        argument_list: '(\n                    streams[0], stream'
                          (: '('
                          subscript: 'streams[0]'
                            identifier: 'streams'
                            [: '['
                            integer: '0'
                            ]: ']'
                          ,: ','
                          subscript: 'streams[1]'
                            identifier: 'streams'
                            [: '['
                            integer: '1'
                            ]: ']'
                          ,: ','
                          call: 'self.mcp._mcp_server.create_initializati'
                            attribute: 'self.mcp._mcp_server.create_initializati'
                              attribute: 'self.mcp._mcp_server'
                                attribute: 'self.mcp'
                                  identifier: 'self'
                                  .: '.'
                                  identifier: 'mcp'
                                .: '.'
                                identifier: '_mcp_server'
                              .: '.'
                              identifier: 'create_initialization_options'
                            argument_list: '()'
                              (: '('
                              ): ')'
                          ): ')'
          comment: '# Create Starlette routes for SSE and me'
          expression_statement: 'routes = [\n            Route("/sse", end'
            assignment: 'routes = [\n            Route("/sse", end'
              identifier: 'routes'
              =: '='
              list: '[\n            Route("/sse", endpoint=han'
                [: '['
                call: 'Route("/sse", endpoint=handle_sse)'
                  identifier: 'Route'
                  argument_list: '("/sse", endpoint=handle_sse)'
                    (: '('
                    string: '"/sse"'
                      string_start: '"'
                      string_content: '/sse'
                      string_end: '"'
                    ,: ','
                    keyword_argument: 'endpoint=handle_sse'
                      identifier: 'endpoint'
                      =: '='
                      identifier: 'handle_sse'
                    ): ')'
                ,: ','
                call: 'Mount("/messages", app=transport.handle_'
                  identifier: 'Mount'
                  argument_list: '("/messages", app=transport.handle_post_'
                    (: '('
                    string: '"/messages"'
                      string_start: '"'
                      string_content: '/messages'
                      string_end: '"'
                    ,: ','
                    keyword_argument: 'app=transport.handle_post_message'
                      identifier: 'app'
                      =: '='
                      attribute: 'transport.handle_post_message'
                        identifier: 'transport'
                        .: '.'
                        identifier: 'handle_post_message'
                    ): ')'
                ,: ','
                ]: ']'
          comment: '# Create a Starlette app'
          return_statement: 'return Starlette(routes=routes)'
            return: 'return'
            call: 'Starlette(routes=routes)'
              identifier: 'Starlette'
              argument_list: '(routes=routes)'
                (: '('
                keyword_argument: 'routes=routes'
                  identifier: 'routes'
                  =: '='
                  identifier: 'routes'
                ): ')'
      function_definition: 'def run(self):\n        """Run the server'
        def: 'def'
        identifier: 'run'
        parameters: '(self)'
          (: '('
          identifier: 'self'
          ): ')'
        :: ':'
        block: '"""Run the server with uvicorn"""\n      '
          expression_statement: '"""Run the server with uvicorn"""'
            string: '"""Run the server with uvicorn"""'
              string_start: '"""'
              string_content: 'Run the server with uvicorn'
              string_end: '"""'
          import_statement: 'import uvicorn'
            import: 'import'
            dotted_name: 'uvicorn'
              identifier: 'uvicorn'
          expression_statement: 'print(f"Starting {self.name} MCP Server"'
            call: 'print(f"Starting {self.name} MCP Server"'
              identifier: 'print'
              argument_list: '(f"Starting {self.name} MCP Server")'
                (: '('
                string: 'f"Starting {self.name} MCP Server"'
                  string_start: 'f"'
                  string_content: 'Starting '
                  interpolation: '{self.name}'
                    {: '{'
                    attribute: 'self.name'
                      identifier: 'self'
                      .: '.'
                      identifier: 'name'
                    }: '}'
                  string_content: ' MCP Server'
                  string_end: '"'
                ): ')'
          expression_statement: 'print("Connect to this server using an M'
            call: 'print("Connect to this server using an M'
              identifier: 'print'
              argument_list: '("Connect to this server using an MCP cl'
                (: '('
                string: '"Connect to this server using an MCP cli'
                  string_start: '"'
                  string_content: 'Connect to this server using an MCP clie'
                  string_end: '"'
                ): ')'
          expression_statement: 'print(f"Server running at http://localho'
            call: 'print(f"Server running at http://localho'
              identifier: 'print'
              argument_list: '(f"Server running at http://localhost:{s'
                (: '('
                string: 'f"Server running at http://localhost:{se'
                  string_start: 'f"'
                  string_content: 'Server running at http://localhost:'
                  interpolation: '{self.port}'
                    {: '{'
                    attribute: 'self.port'
                      identifier: 'self'
                      .: '.'
                      identifier: 'port'
                    }: '}'
                  string_end: '"'
                ): ')'
          expression_statement: 'print(f"SSE endpoint available at http:/'
            call: 'print(f"SSE endpoint available at http:/'
              identifier: 'print'
              argument_list: '(f"SSE endpoint available at http://loca'
                (: '('
                string: 'f"SSE endpoint available at http://local'
                  string_start: 'f"'
                  string_content: 'SSE endpoint available at http://localho'
                  interpolation: '{self.port}'
                    {: '{'
                    attribute: 'self.port'
                      identifier: 'self'
                      .: '.'
                      identifier: 'port'
                    }: '}'
                  string_content: '/sse'
                  string_end: '"'
                ): ')'
          expression_statement: 'uvicorn.run(self.app, host="0.0.0.0", po'
            call: 'uvicorn.run(self.app, host="0.0.0.0", po'
              attribute: 'uvicorn.run'
                identifier: 'uvicorn'
                .: '.'
                identifier: 'run'
              argument_list: '(self.app, host="0.0.0.0", port=self.por'
                (: '('
                attribute: 'self.app'
                  identifier: 'self'
                  .: '.'
                  identifier: 'app'
                ,: ','
                keyword_argument: 'host="0.0.0.0"'
                  identifier: 'host'
                  =: '='
                  string: '"0.0.0.0"'
                    string_start: '"'
                    string_content: '0.0.0.0'
                    string_end: '"'
                ,: ','
                keyword_argument: 'port=self.port'
                  identifier: 'port'
                  =: '='
                  attribute: 'self.port'
                    identifier: 'self'
                    .: '.'
                    identifier: 'port'
                ): ')'
  comment: '# Run the server'
  if_statement: 'if __name__ == "__main__":\n    server = '
    if: 'if'
    comparison_operator: '__name__ == "__main__"'
      identifier: '__name__'
      ==: '=='
      string: '"__main__"'
        string_start: '"'
        string_content: '__main__'
        string_end: '"'
    :: ':'
    block: 'server = Challenge7Server()\n    server.r'
      expression_statement: 'server = Challenge7Server()'
        assignment: 'server = Challenge7Server()'
          identifier: 'server'
          =: '='
          call: 'Challenge7Server()'
            identifier: 'Challenge7Server'
            argument_list: '()'
              (: '('
              ): ')'
      expression_statement: 'server.run()'
        call: 'server.run()'
          attribute: 'server.run'
            identifier: 'server'
            .: '.'
            identifier: 'run'
          argument_list: '()'
            (: '('
            ): ')'
