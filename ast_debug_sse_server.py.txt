module: 'from mcp.server.fastmcp import FastMCP, '
  import_from_statement: 'from mcp.server.fastmcp import FastMCP, '
    from: 'from'
    dotted_name: 'mcp.server.fastmcp'
      identifier: 'mcp'
      .: '.'
      identifier: 'server'
      .: '.'
      identifier: 'fastmcp'
    import: 'import'
    dotted_name: 'FastMCP'
      identifier: 'FastMCP'
    ,: ','
    dotted_name: 'Context'
      identifier: 'Context'
  import_from_statement: 'from mcp.server.sse import SseServerTran'
    from: 'from'
    dotted_name: 'mcp.server.sse'
      identifier: 'mcp'
      .: '.'
      identifier: 'server'
      .: '.'
      identifier: 'sse'
    import: 'import'
    dotted_name: 'SseServerTransport'
      identifier: 'SseServerTransport'
  import_from_statement: 'from starlette.applications import Starl'
    from: 'from'
    dotted_name: 'starlette.applications'
      identifier: 'starlette'
      .: '.'
      identifier: 'applications'
    import: 'import'
    dotted_name: 'Starlette'
      identifier: 'Starlette'
  import_from_statement: 'from starlette.routing import Mount, Rou'
    from: 'from'
    dotted_name: 'starlette.routing'
      identifier: 'starlette'
      .: '.'
      identifier: 'routing'
    import: 'import'
    dotted_name: 'Mount'
      identifier: 'Mount'
    ,: ','
    dotted_name: 'Route'
      identifier: 'Route'
  import_from_statement: 'from fastapi import FastAPI'
    from: 'from'
    dotted_name: 'fastapi'
      identifier: 'fastapi'
    import: 'import'
    dotted_name: 'FastAPI'
      identifier: 'FastAPI'
  comment: '# Create a base class for SSE-compatible'
  class_definition: 'class SseCompatibleMcpServer:\n    def __'
    class: 'class'
    identifier: 'SseCompatibleMcpServer'
    :: ':'
    block: 'def __init__(self, name, port):\n        '
      function_definition: 'def __init__(self, name, port):\n        '
        def: 'def'
        identifier: '__init__'
        parameters: '(self, name, port)'
          (: '('
          identifier: 'self'
          ,: ','
          identifier: 'name'
          ,: ','
          identifier: 'port'
          ): ')'
        :: ':'
        block: 'self.mcp = FastMCP(name)\n        self.po'
          expression_statement: 'self.mcp = FastMCP(name)'
            assignment: 'self.mcp = FastMCP(name)'
              attribute: 'self.mcp'
                identifier: 'self'
                .: '.'
                identifier: 'mcp'
              =: '='
              call: 'FastMCP(name)'
                identifier: 'FastMCP'
                argument_list: '(name)'
                  (: '('
                  identifier: 'name'
                  ): ')'
          expression_statement: 'self.port = port'
            assignment: 'self.port = port'
              attribute: 'self.port'
                identifier: 'self'
                .: '.'
                identifier: 'port'
              =: '='
              identifier: 'port'
          expression_statement: 'self.app = FastAPI()'
            assignment: 'self.app = FastAPI()'
              attribute: 'self.app'
                identifier: 'self'
                .: '.'
                identifier: 'app'
              =: '='
              call: 'FastAPI()'
                identifier: 'FastAPI'
                argument_list: '()'
                  (: '('
                  ): ')'
      function_definition: 'def mount_sse_server(self):\n        """M'
        def: 'def'
        identifier: 'mount_sse_server'
        parameters: '(self)'
          (: '('
          identifier: 'self'
          ): ')'
        :: ':'
        block: '"""Mount the SSE server to the FastAPI a'
          expression_statement: '"""Mount the SSE server to the FastAPI a'
            string: '"""Mount the SSE server to the FastAPI a'
              string_start: '"""'
              string_content: 'Mount the SSE server to the FastAPI app'
              string_end: '"""'
          expression_statement: 'self.app.mount("/", self.create_sse_serv'
            call: 'self.app.mount("/", self.create_sse_serv'
              attribute: 'self.app.mount'
                attribute: 'self.app'
                  identifier: 'self'
                  .: '.'
                  identifier: 'app'
                .: '.'
                identifier: 'mount'
              argument_list: '("/", self.create_sse_server())'
                (: '('
                string: '"/"'
                  string_start: '"'
                  string_content: '/'
                  string_end: '"'
                ,: ','
                call: 'self.create_sse_server()'
                  attribute: 'self.create_sse_server'
                    identifier: 'self'
                    .: '.'
                    identifier: 'create_sse_server'
                  argument_list: '()'
                    (: '('
                    ): ')'
                ): ')'
      function_definition: 'def create_sse_server(self):\n        """'
        def: 'def'
        identifier: 'create_sse_server'
        parameters: '(self)'
          (: '('
          identifier: 'self'
          ): ')'
        :: ':'
        block: '"""Create a Starlette app that handles S'
          expression_statement: '"""Create a Starlette app that handles S'
            string: '"""Create a Starlette app that handles S'
              string_start: '"""'
              string_content: 'Create a Starlette app that handles SSE '
              string_end: '"""'
          expression_statement: 'transport = SseServerTransport("/message'
            assignment: 'transport = SseServerTransport("/message'
              identifier: 'transport'
              =: '='
              call: 'SseServerTransport("/messages/")'
                identifier: 'SseServerTransport'
                argument_list: '("/messages/")'
                  (: '('
                  string: '"/messages/"'
                    string_start: '"'
                    string_content: '/messages/'
                    string_end: '"'
                  ): ')'
          comment: '# Define handler functions'
          function_definition: 'async def handle_sse(request):\n         '
            async: 'async'
            def: 'def'
            identifier: 'handle_sse'
            parameters: '(request)'
              (: '('
              identifier: 'request'
              ): ')'
            :: ':'
            block: 'async with transport.connect_sse(\n      '
              with_statement: 'async with transport.connect_sse(\n      '
                async: 'async'
                with: 'with'
                with_clause: 'transport.connect_sse(\n                r'
                  with_item: 'transport.connect_sse(\n                r'
                    as_pattern: 'transport.connect_sse(\n                r'
                      call: 'transport.connect_sse(\n                r'
                        attribute: 'transport.connect_sse'
                          identifier: 'transport'
                          .: '.'
                          identifier: 'connect_sse'
                        argument_list: '(\n                request.scope, request'
                          (: '('
                          attribute: 'request.scope'
                            identifier: 'request'
                            .: '.'
                            identifier: 'scope'
                          ,: ','
                          attribute: 'request.receive'
                            identifier: 'request'
                            .: '.'
                            identifier: 'receive'
                          ,: ','
                          attribute: 'request._send'
                            identifier: 'request'
                            .: '.'
                            identifier: '_send'
                          ): ')'
                      as: 'as'
                      as_pattern_target: 'streams'
                        identifier: 'streams'
                :: ':'
                block: 'await self.mcp._mcp_server.run(\n        '
                  expression_statement: 'await self.mcp._mcp_server.run(\n        '
                    await: 'await self.mcp._mcp_server.run(\n        '
                      await: 'await'
                      call: 'self.mcp._mcp_server.run(\n              '
                        attribute: 'self.mcp._mcp_server.run'
                          attribute: 'self.mcp._mcp_server'
                            attribute: 'self.mcp'
                              identifier: 'self'
                              .: '.'
                              identifier: 'mcp'
                            .: '.'
                            identifier: '_mcp_server'
                          .: '.'
                          identifier: 'run'
                        argument_list: '(\n                    streams[0], stream'
                          (: '('
                          subscript: 'streams[0]'
                            identifier: 'streams'
                            [: '['
                            integer: '0'
                            ]: ']'
                          ,: ','
                          subscript: 'streams[1]'
                            identifier: 'streams'
                            [: '['
                            integer: '1'
                            ]: ']'
                          ,: ','
                          call: 'self.mcp._mcp_server.create_initializati'
                            attribute: 'self.mcp._mcp_server.create_initializati'
                              attribute: 'self.mcp._mcp_server'
                                attribute: 'self.mcp'
                                  identifier: 'self'
                                  .: '.'
                                  identifier: 'mcp'
                                .: '.'
                                identifier: '_mcp_server'
                              .: '.'
                              identifier: 'create_initialization_options'
                            argument_list: '()'
                              (: '('
                              ): ')'
                          ): ')'
          comment: '# Create Starlette routes for SSE and me'
          expression_statement: 'routes = [\n            Route("/sse", end'
            assignment: 'routes = [\n            Route("/sse", end'
              identifier: 'routes'
              =: '='
              list: '[\n            Route("/sse", endpoint=han'
                [: '['
                call: 'Route("/sse", endpoint=handle_sse)'
                  identifier: 'Route'
                  argument_list: '("/sse", endpoint=handle_sse)'
                    (: '('
                    string: '"/sse"'
                      string_start: '"'
                      string_content: '/sse'
                      string_end: '"'
                    ,: ','
                    keyword_argument: 'endpoint=handle_sse'
                      identifier: 'endpoint'
                      =: '='
                      identifier: 'handle_sse'
                    ): ')'
                ,: ','
                call: 'Mount("/messages", app=transport.handle_'
                  identifier: 'Mount'
                  argument_list: '("/messages", app=transport.handle_post_'
                    (: '('
                    string: '"/messages"'
                      string_start: '"'
                      string_content: '/messages'
                      string_end: '"'
                    ,: ','
                    keyword_argument: 'app=transport.handle_post_message'
                      identifier: 'app'
                      =: '='
                      attribute: 'transport.handle_post_message'
                        identifier: 'transport'
                        .: '.'
                        identifier: 'handle_post_message'
                    ): ')'
                ,: ','
                ]: ']'
          comment: '# Create a Starlette app'
          return_statement: 'return Starlette(routes=routes)'
            return: 'return'
            call: 'Starlette(routes=routes)'
              identifier: 'Starlette'
              argument_list: '(routes=routes)'
                (: '('
                keyword_argument: 'routes=routes'
                  identifier: 'routes'
                  =: '='
                  identifier: 'routes'
                ): ')'
      function_definition: 'def run(self):\n        """Run the server'
        def: 'def'
        identifier: 'run'
        parameters: '(self)'
          (: '('
          identifier: 'self'
          ): ')'
        :: ':'
        block: '"""Run the server with uvicorn"""\n      '
          expression_statement: '"""Run the server with uvicorn"""'
            string: '"""Run the server with uvicorn"""'
              string_start: '"""'
              string_content: 'Run the server with uvicorn'
              string_end: '"""'
          import_statement: 'import uvicorn'
            import: 'import'
            dotted_name: 'uvicorn'
              identifier: 'uvicorn'
          expression_statement: 'print(f"Starting {self.mcp.name} MCP Ser'
            call: 'print(f"Starting {self.mcp.name} MCP Ser'
              identifier: 'print'
              argument_list: '(f"Starting {self.mcp.name} MCP Server")'
                (: '('
                string: 'f"Starting {self.mcp.name} MCP Server"'
                  string_start: 'f"'
                  string_content: 'Starting '
                  interpolation: '{self.mcp.name}'
                    {: '{'
                    attribute: 'self.mcp.name'
                      attribute: 'self.mcp'
                        identifier: 'self'
                        .: '.'
                        identifier: 'mcp'
                      .: '.'
                      identifier: 'name'
                    }: '}'
                  string_content: ' MCP Server'
                  string_end: '"'
                ): ')'
          expression_statement: 'print("Connect to this server using an M'
            call: 'print("Connect to this server using an M'
              identifier: 'print'
              argument_list: '("Connect to this server using an MCP cl'
                (: '('
                string: '"Connect to this server using an MCP cli'
                  string_start: '"'
                  string_content: 'Connect to this server using an MCP clie'
                  string_end: '"'
                ): ')'
          expression_statement: 'print(f"Server running at http://localho'
            call: 'print(f"Server running at http://localho'
              identifier: 'print'
              argument_list: '(f"Server running at http://localhost:{s'
                (: '('
                string: 'f"Server running at http://localhost:{se'
                  string_start: 'f"'
                  string_content: 'Server running at http://localhost:'
                  interpolation: '{self.port}'
                    {: '{'
                    attribute: 'self.port'
                      identifier: 'self'
                      .: '.'
                      identifier: 'port'
                    }: '}'
                  string_end: '"'
                ): ')'
          expression_statement: 'print(f"SSE endpoint available at http:/'
            call: 'print(f"SSE endpoint available at http:/'
              identifier: 'print'
              argument_list: '(f"SSE endpoint available at http://loca'
                (: '('
                string: 'f"SSE endpoint available at http://local'
                  string_start: 'f"'
                  string_content: 'SSE endpoint available at http://localho'
                  interpolation: '{self.port}'
                    {: '{'
                    attribute: 'self.port'
                      identifier: 'self'
                      .: '.'
                      identifier: 'port'
                    }: '}'
                  string_content: '/sse'
                  string_end: '"'
                ): ')'
          expression_statement: 'uvicorn.run(self.app, host="0.0.0.0", po'
            call: 'uvicorn.run(self.app, host="0.0.0.0", po'
              attribute: 'uvicorn.run'
                identifier: 'uvicorn'
                .: '.'
                identifier: 'run'
              argument_list: '(self.app, host="0.0.0.0", port=self.por'
                (: '('
                attribute: 'self.app'
                  identifier: 'self'
                  .: '.'
                  identifier: 'app'
                ,: ','
                keyword_argument: 'host="0.0.0.0"'
                  identifier: 'host'
                  =: '='
                  string: '"0.0.0.0"'
                    string_start: '"'
                    string_content: '0.0.0.0'
                    string_end: '"'
                ,: ','
                keyword_argument: 'port=self.port'
                  identifier: 'port'
                  =: '='
                  attribute: 'self.port'
                    identifier: 'self'
                    .: '.'
                    identifier: 'port'
                ): ')'
